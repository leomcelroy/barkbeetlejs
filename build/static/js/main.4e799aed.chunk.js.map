{"version":3,"sources":["utils.js","unmakerjs/primitives.js","parameters.js","unmakerjs/clipper.js","toolpaths/profile.js","toolpaths/pocket.js","toolpaths/drill.js","store.js","jensSettings.js","components/Workplane.js","components/MaterialType.js","components/MaterialThickness.js","components/Origin.js","components/Units.js","components/PocketButton.js","components/ProfileButton.js","components/DrillButton.js","components/AdvancedOptions.js","gcodeManipulations.js","components/ToolpathList.js","App.js","uploadSVG.js","serviceWorker.js","index.js"],"names":["makeSeries","s","n","c","l","push","i","download","filename","text","pom","document","createElement","setAttribute","encodeURIComponent","createEvent","event","initEvent","dispatchEvent","click","deepcopy","thing","JSON","parse","stringify","makeID","Math","random","toString","substr","isNum","str","regex","found","match","length","helpExtract","p","getElementsByName","value","line","origin","end","type","connectPoints","pointsArray","lastPoint","lines","forEach","point","index","renderLine","id","options","arguments","undefined","defaultOptions","selected","highlighted","toolpath","Object","keys","key","includes","pathData","map","_ref","_ref2","slicedToArray","x","y","concat","color","style","fill","strokeWidth","stroke","strokeLinejoin","strokeLinecap","opacity","vectorEffect","react_default","a","d","depthOfPasses","cutDepthArg","passDepthArg","tempFloor","ceil","actualPassDepth","utils","params","name","dogbone","tabThickness","tabs","compensatedRadius","toolDiameter","cutDepth","passDepth","jogHeight","stepoverPercentage","feedRate","jogRate","units","plungeRate","tolerance","EndTypes","JoinTypes","ClipperLib","JoinType","jtSquare","jtRound","jtMiter","clipOffsetContour","contour","offset","joints","start","endless","every","entry","keyPoints","X","round","Y","paths","co","ClipperOffset","offsetted","Paths","Clear","AddPaths","MiterLimit","ArcTolerance","Execute","newContours","points","result","profile","toolpaths","offsetFunc","createToolpaths","drawing","geometry","isToolpath","len","pocket","geo","contours","count","pass","flat","drill","center","lastIndex","polyline","xS","medianX","max","apply","toConsumableArray","min","yS","getCenter","testContour","profileCut","pocketCut","drillCut","defaultParameters","store","createStore","3","parameters","sourceGeometryID","cutSelected","visible","hovered","material","thickness","zero","presets6mm","foam_or_wax","chiploads","passdepths","rampAngle","wood","hardwood","plastic_roughing","plastic_finishing","aluminum_roughing","aluminum_finishing","steel_roughing","steel_finishing","Workplane","state","width","height","v0","v1","v2","v3","e","preventDefault","ctrlKey","deltaY","this","setState","deltaX","_this2","viewBox","xmlns","onWheel","wheel","border","props","groups","Component","MaterialType","firstSubmit","_useState","useState","_useState2","SelectMenu","title","label","onSelect","item","objectSpread","update","Button","MaterialThickness","isShown","valid","Dialog","onCloseComplete","onConfirm","TextInputField","onChange","target","isInvalid","placeholder","description","onClick","Origin","Units","SegmentedControl","PocketButton","disabled","nameValid","cutDepthValid","toolDiameterValid","stepoverPercentageValid","toleranceValid","jogHeightValid","jogRateValid","feedRateValid","dogboneTemp","getState","console","log","showAdvanced","Number","isNaN","oldToolpaths","newPockets","path","newToolpaths","String","marginTop","Heading","size","ProfileButton","tabThicknessValid","offsetTemp","tabsTemp","newProfiles","DrillButton","AdvancedOptions","setDefault","sourceID","sourceGeo","cutGeo","Link","transformations","_l$origin3","originX","originY","_l$end3","endX","endY","xFactor","yFactor","_l$origin","_l$end","ToolpathList","Table","Head","TextHeaderCell","Body","Row","onMouseDown","background","TextCell","AdvancedOptions_AdvancedOptions","stopPropagation","Checkbox","checked","gcode","join","drillGcode","gcodePoints","firstPoint","passDepths","profileGcode","outline","raise","paths2","pocketGcode","filter","allVisible","simplifyLines","simplify","linesToPolylinePoints","el","App","thicknessSubmit","materialSubmit","originSubmit","initialized","groupHovered","old","groupHover","enter","split","currentGroupHovered","set","bitDiameter","numberOfFlutes","rpm","plungRateReductionFactor","input","presetDiameter","materialToCut","millingBitDiameter","feedrate","plungerate","output","calculateSettings","viewModel","entries","onMouseEnter","parentNode","onMouseLeave","toolpathView","Array","isArray","lines2","simplifyToolpath","cx","cy","r","className","select","Workplane_Workplane","display","filetype","files","file","reader","FileReader","onload","readAsText","uploadBBJS","hmm","getElementById","innerHTML","flattenSVG","values","uploadSVG","marginRight","_ref3","_ref4","Pane","MaterialType_MaterialType","MaterialThickness_MaterialThickness","Units_Units","Origin_Origin","Paragraph","marginLeft","ProfileButton_ProfileButton","PocketButton_PocketButton","DrillButton_DrillButton","ToolpathList_ToolpathList","Boolean","window","location","hostname","render","ReactDOM","src_App_0","subscribe","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4e799aed.chunk.js","sourcesContent":["const makeSeries = (s, n, c) => {\n  let l = [];\n  l.push(s);\n\n  for (let i = 0; i < c - 1; i++) {\n    l.push(l[i] + n);\n  }\n\n  return l;\n}\n\n//const editSVG  = (svg) => `<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" ${svg.slice(4)}`;\nconst editSVG  = (svg) => {\n  // console.log(svg);\n  //let path = `${svg.slice(226, svg.length-10)}`;\n  let group = `${svg.slice(52, svg.length-6)}`;\n\n  //console.log(group);\n  return group;\n}\n\nconst download = (filename, text) => {\n  var pom = document.createElement('a');\n\n  pom.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(text));\n  pom.setAttribute('download', filename);\n\n  if (document.createEvent) {\n      var event = document.createEvent('MouseEvents');\n      event.initEvent('click', true, true);\n      pom.dispatchEvent(event);\n  }\n  else {\n      pom.click();\n  }\n}\n\nconst getSVGpoint = (evt, v0, v1, v2, v3, width, height) => { //should this be a method on Workplane in Workplane.js\n  var svg = document.querySelector('svg');\n  var pt = {x: 0, y: 0};\n\n  let svgBox = svg.getBoundingClientRect();\n  let boxWidth = svgBox.width;\n  let boxHeight = svgBox.height;\n  let xOffset = svgBox.x;\n  let yOffset = svgBox.y;\n  let xScale = v2/boxWidth;\n  let yScale = v3/boxHeight;\n\n  //console.log(xScale, yScale)\n\n  pt.x = (evt.clientX - xOffset)/boxWidth * width * xScale + v0;\n  pt.y = (evt.clientY - yOffset)/boxHeight * height * yScale + v1;\n\n  return pt;\n  //return pt.matrixTransform(svg.getScreenCTM().inverse());\n}\n\nconst deepcopy = (thing) => JSON.parse(JSON.stringify(thing));\n\nconst flattenDeep = (arr1) => {\n   return arr1.reduce((acc, val) => Array.isArray(val) ? acc.concat(flattenDeep(val)) : acc.concat(val), []);\n}\n\n//align curve directions\n\n//detect curves inside curves\n\n//generate uuid\nconst makeID = () => Math.random().toString(36).substr(2, 9); //id\n\n//check if number\nconst isNum = (str) => {\n  let regex = /[0-9.]+$/;\n  let found = str.match(regex);\n\n  if (found === null || found.length !== 1) {\n    return false\n  }\n\n  return str.match(regex)[0].length === str.length;\n}\n\nconst helpExtract = (p) => document.getElementsByName(p)[0].value;\n\n\nexport {\n  makeSeries,\n  editSVG,\n  download,\n  getSVGpoint,\n  deepcopy,\n  makeID,\n  isNum,\n  helpExtract,\n  flattenDeep\n}\n","import React from 'react';\n\n// const isPrimitive = (stroke) => {\n//   if (stroke.hasOwnProperty(\"type\")) {\n//\n//     if (stroke.type === \"line\" ||\n//         stroke.type === \"arc\" ||\n//         stroke.type === \"circle\" ||\n//         stroke.type === \"bezier\") {\n//           return true;\n//         } else {\n//           return false;\n//         }\n//\n//   } else {\n//     return false;\n//   }\n// }\n\nexport const line = (origin, end) => {\n  return {\n    type: \"line\",\n    origin,\n    end,\n  }\n}\n\nexport const connectPoints = (pointsArray) => {\n  let lines = [];\n  let lastPoint;\n\n  pointsArray.forEach((point, index) => {\n    if (index === 0) {\n      lastPoint = point;\n      return\n    } else {\n      lines.push(line(lastPoint, point));\n      lastPoint = point;\n    }\n  })\n\n  return lines;\n}\n\nexport const renderLine = (line, id, options = {} ) => {\n  let defaultOptions = {selected: false, highlighted: false, toolpath: false};\n  Object.keys(defaultOptions).forEach(key => {\n    if (!Object.keys(options).includes(key)) {\n      options[key] = defaultOptions[key];\n    }\n  })\n\n  let points = [line.origin, line.end];\n\n  let pathData = \"M \" + points.map(([x, y]) => `${x} ${y}`);\n\n  let color = \"black\";\n\n  if (options.selected) color = \"blue\";\n  if (options.highlighted) color = \"yellow\";\n  if (options.toolpath) color = \"red\";\n\n  let style = {\n        fill: \"none\",\n        strokeWidth: \"2px\",\n        stroke: color,\n        strokeLinejoin: \"round\",\n        strokeLinecap: \"round\",\n        opacity: \"1\",\n        vectorEffect: \"non-scaling-stroke\"\n      }\n\n  let path = <path d={pathData} style={style} key={id}/>;\n\n  return path;\n\n}\n\n// const arc = (origin, radius, startAngle, endAngle) => {\n//   return {\n//     type: \"arc\",\n//     origin,\n//     radius,\n//     startAngle,\n//     endAngle,\n//   }\n// }\n//\n// const circle = (origin, radius) => {\n//   return {\n//     type: \"circle\",\n//     origin,\n//     radius,\n//   }\n// }\n//\n// const bezier = (origin, cOrigin, end, cEnd) => {\n//   return {\n//     type: \"bezier\",\n//     origin,\n//     cOrigin,\n//     end,\n//     cEnd\n//   }\n// }\n","// these are the default settings\nimport * as utils from './utils.js';\n\n//inputs\nlet cutDepth = 1;\nlet toolDiameter = 3;\nlet flutes = 1;\n\n// calculate from material and bit\nlet feedRate = 3600;\nlet plungeRate = 2100;\nlet passDepth = .6;\n//let rampAngle\n\n// from settings\nlet units = \"mm\"\n\n// default\nlet name = \"anon\"\nlet stepoverPercentage = 60;\nlet tolerance = 0;\nlet offset = \"outside\";\nlet jogHeight = 10;\nlet jogRate = 6000;\nlet tabs = false;\nlet tabThickness = 0;\nlet dogbone = false;\n//let millOuterFirst = false;\n//let climbDirection = false;\n\nexport const depthOfPasses = (cutDepthArg, passDepthArg) => {\n  let tempFloor = Math.ceil(cutDepthArg/passDepthArg); //should this be ceiling or floor, I think ceil\n  let actualPassDepth = cutDepthArg/tempFloor;\n\n  return utils.makeSeries(actualPassDepth, actualPassDepth, tempFloor).map(n => -n);\n};\n\nexport const params = {\n  name, //used\n  dogbone, //used\n  tabThickness, //used\n  tabs, //used\n  compensatedRadius: toolDiameter/2 + tolerance, //used\n  cutDepth, //used\n  passDepth, //used\n  jogHeight, //used\n  stepoverPercentage, //used\n  feedRate, //used\n  jogRate, //used\n  units, //used\n  plungeRate, //used\n  tolerance,\n  toolDiameter,\n  // toolRadius: toolDiameter/2,\n  // flutes,\n}\n","//This code is adapted from https://github.com/makercam/makercam/blob/master/src/clipperOffset.ts\n\nimport ClipperLib from 'js-clipper';\n\nimport {connectPoints} from './primitives.js';\n\nconst EndTypes = {\n    etOpenSquare: 0,\n    etOpenRound: 1,\n    etOpenButt: 2,\n    etClosedPolygon: 3,\n    etClosedLine: 4\n};\n\nconst JoinTypes = [\n    ClipperLib.JoinType.jtSquare,\n    ClipperLib.JoinType.jtRound,\n    ClipperLib.JoinType.jtMiter\n]\n\n// single contour -> list of offset contours\nexport const clipOffsetContour = (contour, offset, joints = 1, tolerance = 0.01) => {\n    const scale = 1000\n    let start = contour[0].origin;\n    let end = contour[contour.length - 1].end;\n    let endless = end.every((entry, i) => entry === start[i]);\n\n    // console.log(\"contour\", contour);\n\n    let keyPoints = contour.map(line => { return {X: Math.round(line.origin[0] * scale), Y: Math.round(line.origin[1] * scale)} });\n\n    if (endless) {\n        keyPoints.push(keyPoints[0]);\n    } else {\n        end = {X: Math.round(end[0] * scale), Y: Math.round(end[1] * scale)};\n        keyPoints.push(end);\n    }\n\n    let paths = [keyPoints]\n\n    // console.log(\"paths\", paths);\n\n    const co = new ClipperLib.ClipperOffset()\n    const offsetted = new ClipperLib.Paths()\n    co.Clear()\n    co.AddPaths(paths, JoinTypes[joints], endless ? EndTypes.etClosedLine : EndTypes.etOpenButt) //chain.endless ? EndTypes.etClosedLine : EndTypes.etOpenButt\n    co.MiterLimit = 2\n    co.ArcTolerance = 0.25\n    co.Execute(offsetted, offset * scale);\n\n    // console.log(\"offsetted\", offsetted)\n\n    // console.log(\"endless\",endless)\n\n    let newContours = []; //what should I return a list or a js object\n\n    // console.log(\"offsetted\", offsetted)\n\n    offsetted.forEach((points) => {\n        // console.log(\"points\", points)\n        if (points.length === 0) return\n        let result = []\n        points.forEach((point) => {\n            result.push([point.X / scale, point.Y / scale])\n        })\n\n        if (endless) result.push(result[0]); //to close it\n        // console.log(\"result\", result);\n        // console.log(\"connected\", connectPoints(result))\n\n        newContours.push(connectPoints(result));\n    })\n\n    // console.log(\"newContours\", newContours)\n\n    return newContours;\n}\n\n// list of contours -> list of offset contours\nexport const clipOffsetContours = (contours, offset, joints = 1, tolerance = 0.01) => {\n    const scale = 1000\n    const newContours = contours.reduce((memo, contour, i) => {\n        let start = contour[0].origin;\n        let end = contour[contour.length - 1].end;\n        let endless = end.every((entry, i) => entry === start[i]);\n\n        let keyPoints = contour.map(line => { return {X: Math.round(line.origin[0] * scale), Y: Math.round(line.origin[1] * scale)} });\n\n        if (endless) {\n            keyPoints.push(keyPoints[0])\n        }\n\n        let paths = [keyPoints]\n\n        const co = new ClipperLib.ClipperOffset()\n        const offsetted = new ClipperLib.Paths()\n        co.Clear()\n        co.AddPaths(paths, JoinTypes[joints], endless ? EndTypes.etClosedLine : EndTypes.etOpenButt)\n        co.MiterLimit = 2\n        co.ArcTolerance = 0.25\n        co.Execute(offsetted, offset * scale);\n        offsetted.forEach((points, j) => {\n            if (points.length === 0) return\n            let result = []\n            points.forEach((point: any) => {\n                result.push([point.X / scale, point.Y / scale])\n            })\n\n            if (endless) result.push(result[0]); //to close it\n            const newModel = connectPoints(result)\n\n            memo.push(newModel);\n        })\n        return memo\n    }, [])\n    return newContours;\n}\n","import {clipOffsetContour} from '../unmakerjs/clipper.js'\nimport {depthOfPasses} from '../parameters.js'\n\n\nconst offsetFunc = (offset) => {\n  if (offset === \"outside\") {\n    return false;\n  } else if (offset === \"inside\") {\n    return true;\n  } else if (offset === \"none\") {\n    return \"none\";\n  }\n}\n\nconst createToolpaths = (contour, params) => {\n  let outline;\n  let offset = offsetFunc(params.offset);\n  if (offset === \"none\") {\n    outline = [contour];\n  } else {\n    //outline = mjs.model.outline(p, params.compensatedRadius, 0, offset); //third parameter is what type of corners, 0 (rounded) by default\n    offset = (offset === true) ? -1 : 1;\n\n    outline = clipOffsetContour(contour, offset * params.compensatedRadius);\n  }\n\n  // outline = outline.flat(); //TODO: BUG this is a hack to deal with not raising the bit yet\n\n  return outline;\n}\n\nexport const profileGcode = (toolpaths, params) => {\n  toolpaths = toolpaths.flat(); //TODO: BUG this is a hack to deal with not raising the bit yet\n\n  let keyPoints = toolpaths.map(line => [line.origin[0], line.origin[1]]);\n\n  let gcodePoints = keyPoints.map(p => `G1 X${p[0]} Y${p[1]} F${params.feedRate}`)\n  //let gcode = JSON.parse(JSON.stringify(gcodePoints));\n\n  let firstPoint = keyPoints[0]; //TODO: BUG what if there are no key points\n\n  let passDepths = depthOfPasses(params.cutDepth, params.passDepth);\n\n  let paths = passDepths.map((p,i) => [\n    `G1 Z${passDepths[i]} F${params.plungeRate}`, //plunge rate\n    ...gcodePoints,\n    `G1 X${firstPoint[0]} Y${firstPoint[1]} F${params.feedRate}`\n  ])\n\n  paths = paths.flat(1);\n\n  let units;\n  if (params.units === \"in\") units = \"G20\";\n  if (params.units === \"mm\") units = \"G21\";\n\n  let preamble = [units, \"G90\"];\n\n  let gcode = [\n    ...preamble,\n    \"(end of preamble)\",\n    `G1 Z${params.jogHeight} F${params.jogRate}`,\n    `G0 X${firstPoint[0]} Y${firstPoint[1]}`,\n    ...paths,\n    `G1 Z${params.jogHeight} F${params.jogRate}`,\n  ]\n\n  let text = gcode.join('\\n');\n\n  return text\n}\n\nexport const profile = (contour, params) => {\n\n  let toolpaths = createToolpaths(contour, params);\n  // let gcode = profileGcode(toolpaths, params);\n\n  return {drawing: toolpaths, geometry: toolpaths};\n};\n","import {clipOffsetContour} from '../unmakerjs/clipper.js'\nimport {depthOfPasses} from '../parameters.js'\n\n\nconst len = (toolpath) => Object.keys(toolpath).length;\n\nconst isToolpath = (toolpath) => {\n  // console.log(\"toolpath\", toolpath);\n\n  if (len(toolpath) >= 1) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\nconst createToolpaths = (geo, params) => {\n  let contours = [];\n  let count = 0;\n\n  let pass = clipOffsetContour(geo, -params.compensatedRadius); //returns array of contours\n\n  if (isToolpath(pass) !== true) {\n    return contours;\n  }\n\n  while (isToolpath(pass)) {\n    contours.push(pass);\n    count++;\n    let lastPass = contours[count - 1];\n    // console.log(\"lastPass\", lastPass)\n    pass = lastPass.map(contour => clipOffsetContour(contour, -params.compensatedRadius * params.stepoverPercentage/100)).flat();\n\n  }\n\n  return contours.flat();\n}\n\nexport const pocketGcode = (toolpaths, params) => {\n  let keyPoints = toolpaths.map(outline => outline.map(line => [line.origin[0], line.origin[1]]));\n\n  // toolpaths = Object.values(toolpaths).flat(2);\n  // console.log(\"toolpaths\", toolpaths);\n\n  // console.log(\"keyPoints\", keyPoints);\n\n  let gcodePoints = keyPoints.map(points => {\n    let raise = points.length > 1;\n    let firstPoint = points[0];\n\n    firstPoint = `G1 X${firstPoint[0]} Y${firstPoint[1]} F${params.feedRate}`;\n\n    if (raise) {\n      return [\n        `G1 Z${params.jogHeight} F${params.jogRate}`,\n        firstPoint, //want to jog to this one\n        \"plunge\",\n        ...points.map(point => `G1 X${point[0]} Y${point[1]} F${params.feedRate}`),\n        firstPoint,\n        `G1 Z${params.jogHeight} F${params.jogRate}`,\n      ]\n    } else {\n      return [\n        firstPoint,\n        \"plunge\",\n        ...points.map(point => `G1 X${point[0]} Y${point[1]} F${params.feedRate}`),\n        firstPoint\n      ]\n    }\n  });\n\n  let paths = gcodePoints.flat();\n\n  // let firstPoint = keyPoints[0][0][0];\n\n  let passDepths = depthOfPasses(params.cutDepth, params.passDepth);\n\n  let paths2 = passDepths.map((p,i) => [\n    ...paths.map(x => (x === \"plunge\") ? `G1 Z${passDepths[i]} F${params.plungeRate}` : x), //plunge rate\n  ])\n\n  // console.log(paths2)\n\n  paths2 = paths2.flat();\n\n  let units;\n  if (params.units === \"in\") units = \"G20\";\n  if (params.units === \"mm\") units = \"G21\";\n\n  let preamble = [units, \"G90\"];\n\n  let gcode = [\n    ...preamble,\n    \"(end of preamble)\",\n    `G1 Z${params.jogHeight} F${params.jogRate}`,\n    // `G0 X${firstPoint[0]} Y${firstPoint[1]}`,\n    ...paths2,\n    `G1 Z${params.jogHeight} F${params.jogRate}`,\n  ]\n\n\n  let text = gcode.join('\\n');\n\n  return text;\n}\n\nexport const pocket = (contour, params) => {\n\n  let toolpaths = createToolpaths(contour, params);\n  //let gcode = pocketGcode(toolpaths, params)\n\n  return {drawing: toolpaths, geometry: toolpaths};\n};\n","import {line} from '../unmakerjs/primitives.js';\n\nconst linesToPolylinePoints = (lines, lastIndex) => lines.map((line, i) => { //should import this instead\n  if (i === lastIndex-1) return [{x:line.origin[0], y:line.origin[1]}, {x:line.end[0], y:line.end[1]}];\n\n  return {x:line.origin[0], y:line.origin[1]}\n}).flat()\n\n// let sum = (a, b) => a + b;\n\nconst getCenter = (contour) => {\n  let polyline = linesToPolylinePoints(contour);\n\n  let xS = polyline.map(point => point.x);\n  let medianX = (Math.max(...xS) + Math.min(...xS))/2\n  // let averageX = xS.reduce(sum, 0)/xS.length;\n\n  let yS = polyline.map(point => point.y);\n  let medianY = (Math.max(...yS) + Math.min(...yS))/2\n  // let averageY = yS.reduce(sum, 0)/yS.length;\n\n  // return [averageX, averageY];\n  return [medianX, medianY];\n\n}\n\nexport const drillGcode = (center, params) => {\n  let units;\n  if (params.units === \"in\") units = \"G20\";\n  if (params.units === \"mm\") units = \"G21\";\n\n  let preamble = [units, \"G90\"];\n\n  let gcode = [\n    ...preamble,\n    \"(end of preamble)\",\n    `G1 Z${params.jogHeight} F${params.jogRate}`,\n    `G0 X${center[0]} Y${center[1]}`,\n    `G1 Z-${params.cutDepth} F${params.plungeRate}`, //plunge rate\n    `G1 Z${params.jogHeight} F${params.jogRate}`,\n  ]\n\n  let text = gcode.join('\\n');\n\n  return text;\n}\n\nexport const drill = (contour, params) => {\n  let center = getCenter(contour);\n\n  // let gcode = drillGcode(center, params);\n\n  let drawing = [\n    [line([center[0] - params.compensatedRadius, center[1]], [center[0] + params.compensatedRadius, center[1]])],\n    [line([center[0], center[1] - params.compensatedRadius], [center[0], center[1] + params.compensatedRadius])]\n  ]\n\n  return {drawing, geometry: center};\n};\n","import createStore from 'pure-store';\nimport * as utils from './utils.js';\n\nimport {params} from './parameters.js';\nimport {profile} from './toolpaths/profile.js';\nimport {pocket} from './toolpaths/pocket.js';\nimport {drill} from './toolpaths/drill.js';\n\nimport {line} from './unmakerjs/primitives.js'\n\nlet testContour = [line([0,0],[40,40]), line([40,40],[20,40]), line([20,40],[0,0])];\nlet profileCut = profile(testContour, params);\nlet pocketCut = pocket(testContour, params);\nlet drillCut = drill(testContour, params);\n\n\nlet defaultParameters = params;\n\n\nconst store = createStore({\n  contours: {\n    3: testContour,\n  },\n  toolpaths:[\n    {\n      type: \"profile\",\n      name: \"Profile 1\",\n      parameters: defaultParameters,\n      sourceGeometryID: \"3\",\n      geometry: profileCut,\n      id: utils.makeID(),\n      cutSelected: false,\n      visible: true,\n    },\n    {\n      type: \"pocket\",\n      name: \"Pocket 1\",\n      parameters: defaultParameters,\n      sourceGeometryID: \"3\",\n      geometry: pocketCut,\n      id: utils.makeID(),\n      cutSelected: false,\n      visible: true,\n    },\n    {\n      type: \"drill\",\n      name: \"Drill 1\",\n      parameters: defaultParameters,\n      sourceGeometryID: \"3\",\n      geometry: drillCut,\n      id: utils.makeID(),\n      cutSelected: false,\n      visible: true,\n    },\n  ],\n  selected: [],\n  hovered: [],\n  material: \"wood\",\n  thickness: 34,\n  units: \"mm\",\n  zero: \"bottomleft\",\n  defaultParameters: defaultParameters, //need to generate these from material, thickness, units\n});\n\nexport default store;\n","let exampleInput = {\n  materialToCut: \"wood\",\n  millingBitDiameter: 4,\n  numberOfFlutes: 1,\n}\n\nlet presets6mm = {\n  foam_or_wax: {\n    chiploads: 0.3,\n    passdepths: 19,\n    rampAngle: 90,\n  },\n  wood: {\n    chiploads: 0.2,\n    passdepths: 16,\n    rampAngle: 90,\n  },\n  hardwood: {\n    chiploads: 0.133,\n    passdepths: 12,\n    rampAngle: 45,\n  },\n  plastic_roughing: {\n    chiploads: 0.15,\n    passdepths: 8,\n    rampAngle: 18,\n  },\n  plastic_finishing: {\n    chiploads: 0.073,\n    passdepths: 8,\n    rampAngle: 18,\n  },\n  aluminum_roughing: {\n    chiploads: 0.12,\n    passdepths: 1.8,\n    rampAngle: 12,\n  },\n  aluminum_finishing: {\n    chiploads: 0.06,\n    passdepths: 1.8,\n    rampAngle: 12,\n  },\n  steel_roughing: {\n    chiploads: 0.08,\n    passdepths: 0.6,\n    rampAngle: 5,\n  },\n  steel_finishing: {\n    chiploads: 0.04,\n    passdepths: 0.6,\n    rampAngle: 5,\n  },\n}\n\nconst output = (input, rpm, presets6mm, presetDiameter, plungRateReductionFactor) => {\n  let {materialToCut, millingBitDiameter, numberOfFlutes} = input;\n\n  let feedrate = (presets6mm[materialToCut].chiploads * rpm * numberOfFlutes * millingBitDiameter)/presetDiameter;\n  let plungerate = feedrate * plungRateReductionFactor;\n\n  let passDepth = presets6mm[materialToCut].passdepths/presetDiameter*millingBitDiameter;\n  let rampAngle = presets6mm[materialToCut].rampAngle;\n\n  return {\n    feedrate,\n    plungerate,\n    passDepth,\n    rampAngle,\n  };\n}\n\nexport const calculateSettings = (material, bitDiameter, numberOfFlutes, rpm, plungRateReductionFactor = 0.6) => {\n  let input = {\n    materialToCut: material,\n    millingBitDiameter: bitDiameter,\n    numberOfFlutes: numberOfFlutes,\n  };\n\n  return output(input, rpm, presets6mm, 6, plungRateReductionFactor);\n}\n","import React, { Component } from 'react';\n\nclass Workplane extends Component {\n\n  state = {\n      width: 500,\n      height: 500,\n      v0: 0,\n      v1: 0,\n      v2: 500,\n      v3: 500,\n    };\n\n  wheel(e) {\n    e.preventDefault();\n    // let loc = utils.getSVGpoint(e, this.state.v0, this.state.v1, this.state.v2, this.state.v3 ,this.state.width, this.state.height);\n\n    if (e.ctrlKey) {\n\n      let zoomRate = 10;\n      //zooms to center now\n\n      if (e.deltaY < 0) {\n        //console.log('zoom in');\n\n        let v2 = (e.deltaY * zoomRate + this.state.v2 > 1) ? e.deltaY * zoomRate + this.state.v2 : this.state.v2;\n        let v3 = (e.deltaY * zoomRate + this.state.v3 > 1) ? e.deltaY * zoomRate + this.state.v3 : this.state.v3;\n\n        let v0 = this.state.v0 - e.deltaY * zoomRate/2;\n        let v1 = this.state.v1 - e.deltaY * zoomRate/2;\n        // console.log(\"e.deltaY * zoomRate\", e.deltaY * zoomRate)\n        // console.log(\"v0\", e.deltaY * zoomRate, v0)\n        // console.log(\"v1\", this.state.v1, v1)\n\n        this.setState({v0, v1, v2, v3})\n      }\n\n      if (e.deltaY > 0) {\n        //console.log('zoom out');\n\n        let v2 = e.deltaY * zoomRate + this.state.v2;\n        let v3 = e.deltaY * zoomRate + this.state.v3;\n\n        let v0 = this.state.v0 - e.deltaY * zoomRate/2;\n        let v1 = this.state.v1 - e.deltaY * zoomRate/2;\n\n        this.setState({v0,v1, v2, v3})\n      }\n\n      return\n    }\n\n    if (e.deltaY < 0) {\n      //console.log('scrolling up');\n\n      let v1 = this.state.v1 + e.deltaY;\n      this.setState({v1});\n    }\n    if (e.deltaY > 0) {\n      //console.log('scrolling down');\n\n      let v1 = this.state.v1 + e.deltaY;\n      this.setState({v1});\n    }\n    if (e.deltaX < 0) {\n      //console.log('scrolling left');\n\n      let v0 = this.state.v0 + e.deltaX;\n      this.setState({v0});\n    }\n    if (e.deltaX > 0) {\n      //console.log('scrolling right');\n\n      let v0 = this.state.v0 + e.deltaX;\n      this.setState({v0});\n    }\n  }\n\n  render() {\n\n    return (\n      <svg\n        width={this.state.width}\n        height={this.state.height}\n        viewBox={`${this.state.v0} ${this.state.v1} ${this.state.v2} ${this.state.v3}`}\n        xmlns={\"http://www.w3.org/2000/svg\"}\n        onWheel={(e) => this.wheel(e)}\n        style={{border: \"1px solid #cccccc\"}}>\n\n          {this.props.groups}\n      </svg>\n    );\n  }\n}\n\nexport {Workplane}\n\n// import React, { Component, useState} from 'react';\n// import * as utils from './utils.js';\n//\n//\n// const Workplane = ({groups}) => {\n//\n//   const [state, setState] = useState({\n//       width: 500,\n//       height: 500,\n//     });\n//\n//   const [v0, setV0] = useState(0);\n//   const [v1, setV1] = useState(0);\n//   const [v2, setV2] = useState(500);\n//   const [v3, setV3] = useState(500);\n//\n//   const wheel = (e) => {\n//     e.preventDefault();\n//     let loc = utils.getSVGpoint(e, v0, v1, v2, v3 ,state.width, state.height);\n//\n//     if (e.ctrlKey) {\n//\n//       let zoomRate = 10;\n//       //zooms to center now\n//\n//       if (e.deltaY < 0) {\n//         //console.log('zoom in');\n//\n//         let v2Temp = (e.deltaY * zoomRate + v2 > 1) ? e.deltaY * zoomRate + v2 : v2;\n//         let v3Temp = (e.deltaY * zoomRate + v3 > 1) ? e.deltaY * zoomRate + v3 : v3;\n//\n//         let v0Temp = v0 - e.deltaY * zoomRate/2;\n//         let v1Temp = v1 - e.deltaY * zoomRate/2;\n//         // console.log(\"e.deltaY * zoomRate\", e.deltaY * zoomRate)\n//         // console.log(\"v0\", e.deltaY * zoomRate, v0)\n//         // console.log(\"v1\", state.v1, v1)\n//\n//         setV0(v0Temp);\n//         setV1(v1Temp);\n//         setV2(v2Temp);\n//         setV3(v3Temp);\n//       }\n//\n//       if (e.deltaY > 0) {\n//         //console.log('zoom out');\n//\n//         let v2Temp = e.deltaY * zoomRate + v2;\n//         let v3Temp = e.deltaY * zoomRate + v3;\n//\n//         let v0Temp = v0 - e.deltaY * zoomRate/2;\n//         let v1Temp = v1 - e.deltaY * zoomRate/2;\n//\n//         setV0(v0Temp);\n//         setV1(v1Temp);\n//         setV2(v2Temp);\n//         setV3(v3Temp);\n//       }\n//\n//       return\n//     }\n//\n//     if (e.deltaY < 0) {\n//       console.log('scrolling up');\n//\n//       let v1Temp = v1 + e.deltaY;\n//       setV1(v1Temp);\n//     }\n//     if (e.deltaY > 0) {\n//       console.log('scrolling down');\n//\n//       let v1Temp = v1 + e.deltaY;\n//       setV1(v1Temp);\n//     }\n//     if (e.deltaX < 0) {\n//       console.log('scrolling left');\n//\n//       let v0Temp = v0 + e.deltaX;\n//       setV0(v0Temp);\n//     }\n//     if (e.deltaX > 0) {\n//       console.log('scrolling right');\n//\n//       let v0Temp = v0 + e.deltaX;\n//       setV0(v0Temp);\n//     }\n//   }\n//\n//   console.log(v0, v1)\n//\n//   return (\n//       <svg\n//         width={state.width}\n//         height={state.height}\n//         viewBox={`${v0} ${v1} ${v2} ${v3}`}\n//         xmlns={\"http://www.w3.org/2000/svg\"}\n//         onWheel={(e) => wheel(e)}\n//         style={{border: \"1px solid #cccccc\"}}>\n//\n//           {groups}\n//       </svg>\n//   );\n//\n// }\n//\n// export {Workplane}\n","import React, { useState } from 'react';\nimport {Button, SelectMenu} from 'evergreen-ui';\nimport store from '../store.js';\n\nconst MaterialType = ({firstSubmit}) => {\n\n  const [state, setState] = useState({\n    selected: null\n  });\n\n  return (\n      <SelectMenu\n        title=\"Select Material\"\n        options={\n          ['Oak', 'Plywood', 'Cherry', 'HDF', 'MDF', 'Aluminum', 'Steel']\n            .map(label => ({ label, value: label }))\n        }\n        selected={state.selected}\n        onSelect={item => {\n          if (state.selected === null) {\n            firstSubmit(\"materialSubmit\");\n          }\n          setState({\n            ...state,\n            selected: item.value,\n          })\n          //update app state here\n          store.update({material:item.value});\n        }}\n      >\n        <Button>Material: {state.selected || '...'}</Button>\n    </SelectMenu>\n  );\n}\n\nexport {MaterialType};\n","import React, { useState } from 'react';\nimport {Button, Dialog, TextInputField} from 'evergreen-ui';\nimport * as utils from '../utils.js';\nimport store from '../store.js';\n\nconst MaterialThickness = ({firstSubmit}) => {\n  const [state, setState] = useState({\n    isShown: false,\n    value: \"...\",\n    valid: true,\n  });\n\n  return (\n      <div>\n        <Dialog\n          isShown={state.isShown}\n          title=\"Material Thickness\"\n          onCloseComplete={() => setState({...state, isShown:false})}\n          onConfirm={() => {\n            if (state.valid) {\n              let value = document.getElementsByName(\"thickness\")[0].value;\n              if (state.value === \"...\") {\n                firstSubmit(\"thicknessSubmit\");\n              }\n              setState({\n                ...state,\n                isShown:false,\n                value\n              });\n\n              //update app state here\n              store.update({thickness:value});\n            }\n\n          }}>\n\n          <TextInputField\n            onChange={e => {\n              let valid = utils.isNum(e.target.value);\n              setState({...state, valid})\n            }}\n            isInvalid={!state.valid}\n            name=\"thickness\"\n            placeholder={state.value}\n            description={(state.valid) ? \"\" : \"please enter a valid number\"}\n            label=\"\"\n          />\n        </Dialog>\n        <Button onClick={() => setState({...state, isShown:true})}>{`Thickness: ${state.value}`}</Button>\n      </div>\n  );\n}\n\nexport {MaterialThickness};\n","import React, { useState } from 'react';\nimport {SelectMenu, Button} from 'evergreen-ui';\nimport store from '../store.js';\n\nconst Origin = ({firstSubmit}) => {\n\n  const [state, setState] = useState({\n    selected: null\n  });\n\n\n  return (\n    <SelectMenu\n      title=\"Select Material\"\n      options={\n        ['Top Left', 'Top Right', 'Center', 'Bottom Left', 'Bottom Right']\n          .map(label => ({ label, value: label }))\n      }\n      selected={state.selected}\n      onSelect={item => {\n        if (state.selected === null) {\n          firstSubmit(\"originSubmit\");\n        }\n        setState({ ...state, selected: item.value })\n        //update app state here\n        store.update({ zero: item.value })\n      }}\n    >\n      <Button>Origin: {state.selected || '...'}</Button>\n  </SelectMenu>\n  );\n}\n\nexport {Origin}\n","import React, { useState } from 'react';\nimport {SegmentedControl} from 'evergreen-ui';\nimport store from '../store.js';\n\nconst Units = () => {\n  const [state, setState] = useState({\n    value: 'mm',\n  });\n\n  return (\n      <SegmentedControl\n        width={80}\n        options={[\n          { label: 'mm', value: 'mm' },\n          { label: 'in', value: 'in' },\n        ]}\n        value={state.value}\n        onChange={value => {\n          // update app state here\n          setState({...state, value });\n          store.update({\n            units: value,\n            defaultParameters: {\n              ...store.state.defaultParameters,\n              units: value\n            },\n          });\n        }}\n      />\n  );\n}\n\nexport {Units};\n","import React, { useState } from 'react';\nimport {Button, Dialog, TextInputField, SegmentedControl, Heading} from 'evergreen-ui';\nimport * as utils from '../utils.js';\nimport {pocket} from '../toolpaths/pocket.js';\n\nimport store from '../store.js';\n\nconst PocketButton = ({ disabled }) => {\n\n  const [state, setState] = useState({\n    isShown: false,\n    nameValid: true,\n    cutDepthValid: true,\n    toolDiameterValid: true,\n    stepoverPercentageValid: true,\n    toleranceValid: true,\n    jogHeightValid: true,\n    jogRateValid: true,\n    feedRateValid: true,\n    dogboneTemp: store.getState().defaultParameters.dogbone,\n  });\n\n  if ((state.dogboneTemp !== store.getState().defaultParameters.dogbone) && !state.isShown) {\n    console.log(\"bug fixin time\")\n    setState({\n      ...state,\n      dogboneTemp: store.getState().defaultParameters.dogbone,\n    })\n  }\n\n  return (\n      <div>\n        <Dialog\n          isShown={state.isShown}\n          title=\"Settings for this Pocket Cut\"\n          onCloseComplete={() => setState({\n            ...state,\n            isShown:false,\n            showAdvanced: false,\n            dogboneTemp: store.getState().defaultParameters.dogbone,\n          })}\n          onConfirm={() => {\n\n            let valid = state.nameValid &&\n                        state.cutDepthValid &&\n                        state.toolDiameterValid &&\n                        state.stepoverPercentageValid &&\n                        state.toleranceValid &&\n                        state.jogHeightValid &&\n                        state.jogRateValid &&\n                        state.feedRateValid;\n            if (valid) {\n\n              let name = utils.helpExtract(\"name\");\n              let cutDepth = Number(utils.helpExtract(\"cutDepth\"));\n              let toolDiameter = Number(utils.helpExtract(\"toolDiameter\"));\n              let stepoverPercentage = Number(utils.helpExtract(\"stepoverPercentage\")); //must be between 1 and 100%\n              let tolerance = Number(utils.helpExtract(\"tolerance\"));\n              let jogHeight = Number(utils.helpExtract(\"jogHeight\"));\n              let jogRate = Number(utils.helpExtract(\"jogRate\"));\n              let feedRate = Number(utils.helpExtract(\"feedRate\"));\n\n              if (utils.helpExtract(\"name\") === \"\") name = store.getState().defaultParameters.name;\n              if (utils.helpExtract(\"cutDepth\") === \"\") cutDepth = store.getState().defaultParameters.cutDepth;\n              if (utils.helpExtract(\"toolDiameter\") === \"\") toolDiameter = store.getState().defaultParameters.toolDiameter;\n              if (utils.helpExtract(\"stepoverPercentage\") === \"\") stepoverPercentage = store.getState().defaultParameters.stepoverPercentage; //must be between 1 and 100%\n              if (utils.helpExtract(\"tolerance\") === \"\") tolerance = store.getState().defaultParameters.tolerance;\n              if (utils.helpExtract(\"jogHeight\") === \"\") jogHeight = store.getState().defaultParameters.jogHeight;\n              if (utils.helpExtract(\"jogRate\") === \"\") jogRate = store.getState().defaultParameters.jogRate;\n              if (utils.helpExtract(\"feedRate\") === \"\") feedRate = store.getState().defaultParameters.feedRate;\n\n              if (isNaN(cutDepth)) cutDepth = store.getState().defaultParameters.cutDepth;\n              if (isNaN(toolDiameter)) toolDiameter = store.getState().defaultParameters.toolDiameter;\n              if (isNaN(stepoverPercentage)) stepoverPercentage = store.getState().defaultParameters.stepoverPercentage; //must be between 1 and 100%\n              if (isNaN(tolerance)) tolerance = store.getState().defaultParameters.tolerance;\n              if (isNaN(jogHeight)) jogHeight = store.getState().defaultParameters.jogHeight;\n              if (isNaN(jogRate)) jogRate = store.getState().defaultParameters.jogRate;\n              if (isNaN(feedRate)) feedRate = store.getState().defaultParameters.feedRate;\n\n              let dogbone = state.dogboneTemp;\n\n              //derived parameters\n              let passDepth = toolDiameter/2;\n              let toolRadius = toolDiameter/2;\n              let compensatedRadius = toolRadius + tolerance;\n              let tempFloor = Math.ceil(cutDepth/passDepth); //should this be ceiling or floor, I think ceil\n              let actualPassDepth = cutDepth/tempFloor;\n              let depthOfPasses = utils.makeSeries(actualPassDepth, actualPassDepth, tempFloor).map(n => -n);\n\n              //settings will be compiled to a single object here\n              let parameters = utils.deepcopy(store.getState().defaultParameters);\n\n              parameters[\"dogbone\"] = dogbone;\n\n              if (!isNaN(tolerance)) { parameters[\"tolerance\"] = tolerance; }\n\n              if (!isNaN(toolDiameter)) {\n                parameters[\"toolDiameter\"] = toolDiameter;\n                parameters[\"compensatedRadius\"] = compensatedRadius;\n\n              }\n              if (!isNaN(cutDepth)) {\n                parameters[\"cutDepth\"] = cutDepth;\n                parameters[\"depthOfPasses\"] = depthOfPasses;\n              }\n              if (!isNaN(feedRate)) { parameters[\"feedRate\"] = feedRate; }\n              if (!isNaN(jogHeight)) { parameters[\"jogHeight\"] = jogHeight; }\n              if (!isNaN(jogRate)) { parameters[\"jogRate\"] = jogRate; }\n\n              if (!isNaN(stepoverPercentage)) {\n                //stepoverPercentage = stepoverPercentage/100;\n                parameters[\"stepoverPercentage\"] = stepoverPercentage;\n              }\n\n              //console.log(\"parameters\", parameters);\n\n              setState({\n                ...state,\n                isShown:false,\n              });\n\n              //TODO: create toolpath with parameter settings here\n              let oldToolpaths = store.state.toolpaths;\n              let newPockets = store.state.selected.map(path => {\n\n                return {\n                  type: \"pocket\",\n                  name: name,\n                  parameters: parameters,\n                  sourceGeometryID: path,\n                  geometry: pocket(store.state.contours[path], parameters),\n                  id: utils.makeID(),\n                  cutSelected: false,\n                  visible: true,\n                }\n              })\n\n              let newToolpaths = [...oldToolpaths, ...newPockets];\n\n              console.log(\"newToolpaths\", newToolpaths);\n\n              store.update({toolpaths:newToolpaths});\n\n            }\n          }}>\n\n          <TextInputField\n            onChange={e => {\n              let valid = utils.isNum(e.target.value);\n              setState({...state, cutDepthValid:valid})\n            }}\n            isInvalid={!state.cutDepthValid}\n            name=\"cutDepth\"\n            description={(state.cutDepthValid) ? \"\" : \"please enter a valid number\"}\n            label=\"Depth of Cut for this Pocket\"\n            placeholder={String(store.getState().defaultParameters.cutDepth)}/>\n\n          <TextInputField\n            marginTop={20}\n            onChange={e => {\n              let valid = utils.isNum(e.target.value);\n              setState({...state, toolDiameterValid:valid})\n            }}\n            isInvalid={!state.toolDiameterValid}\n            name=\"toolDiameter\"\n            description={(state.toolDiameterValid) ? \"\" : \"please enter a valid number\"}\n            label=\"Tool Diameter\"\n            placeholder={String(store.getState().defaultParameters.toolDiameter)}/>\n\n          <TextInputField\n            onChange={e => {\n              let valid = utils.isNum(e.target.value);\n              valid = 0 < Number(e.target.value) && Number(e.target.value) <= 100;\n              //process value here\n              setState({...state, stepoverPercentageValid:valid})\n            }}\n            isInvalid={!state.stepoverPercentageValid}\n            name=\"stepoverPercentage\"\n            description={(state.stepoverPercentageValid) ? \"\" : \"please enter a valid number\"}\n            label=\"Stepover Percentage\"\n            placeholder={String(store.getState().defaultParameters.stepoverPercentage)}/>\n\n            <TextInputField\n              onChange={e => {\n                let valid = utils.isNum(e.target.value);\n                setState({...state, feedRateValid:valid})\n              }}\n              isInvalid={!state.feedRateValid}\n              name=\"feedRate\"\n              description={(state.feedRateValid) ? \"\" : \"please enter a valid number\"}\n              label=\"Feed Rate\"\n              placeholder={String(store.getState().defaultParameters.feedRate)}/>\n\n            <TextInputField\n              onChange={e => {\n                let valid = utils.isNum(e.target.value);\n                setState({...state, toleranceValid:valid})\n              }}\n              isInvalid={!state.toleranceValid}\n              name=\"tolerance\"\n              description={(state.toleranceValid) ? \"\" : \"please enter a valid number\"}\n              label=\"Tolerance\"\n              placeholder={String(store.getState().defaultParameters.tolerance)}/>\n\n            <TextInputField\n              onChange={e => {\n                let valid = utils.isNum(e.target.value);\n                setState({...state, jogRateValid:valid})\n              }}\n              isInvalid={!state.jogRateValid}\n              name=\"jogRate\"\n              description={(state.jogRateValid) ? \"\" : \"please enter a valid number\"}\n              label=\"Jog Rate\"\n              placeholder={String(store.getState().defaultParameters.jogRate)}/>\n\n              <TextInputField\n                onChange={e => {\n                  let valid = utils.isNum(e.target.value);\n                  setState({...state, jogHeightValid:valid})\n                }}\n                isInvalid={!state.jogHeightValid}\n                name=\"jogHeight\"\n                description={(state.jogHeightValid) ? \"\" : \"please enter a valid number\"}\n                label=\"Jog Height\"\n                placeholder={String(store.getState().defaultParameters.jogHeight)}/>\n\n              <Heading marginTop={20} size={400} color={\"rgba(67, 90, 111, .91)\"}>Auto Dogbone</Heading>\n              <SegmentedControl\n                marginTop={4}\n                options={[\n                  { label: 'true', value: true },\n                  { label: 'false', value: false },\n                ]}\n                value={state.dogboneTemp}\n                onChange={value => {\n                  let dogboneTemp = value;\n                  setState({...state, dogboneTemp });\n                }}\n              />\n\n              <TextInputField\n                marginTop={20}\n                onChange={e => {\n                  let valid = e.target.value !== \"\";\n                  setState({...state, nameValid:valid})\n                }}\n                isInvalid={!state.nameValid}\n                name=\"name\"\n                description={(state.nameValid) ? \"\" : \"please enter something\"}\n                label=\"Name for this Pocket\"\n                placeholder={String(store.getState().defaultParameters.name)}/>\n\n        </Dialog>\n        <Button disabled={disabled} onClick={() => setState({...state, isShown:true})}>Pocket</Button>\n      </div>\n    );\n}\n\nexport {PocketButton};\n","import React, { useState } from 'react';\nimport {Button, Dialog, TextInputField, SegmentedControl, Heading} from 'evergreen-ui';\nimport * as utils from '../utils.js';\nimport {profile} from '../toolpaths/profile.js';\n\nimport store from '../store.js';\n\nconst ProfileButton = ({disabled}) => {\n\n  const [state, setState] = useState({\n    isShown: false,\n    nameValid: true,\n    cutDepthValid: true,\n    toolDiameterValid: true,\n    toleranceValid: true,\n    jogHeightValid: true,\n    jogRateValid: true,\n    feedRateValid: true,\n    tabThicknessValid: true,\n    offsetTemp: store.state.defaultParameters.offset,\n    tabsTemp: store.state.defaultParameters.tabs,\n    dogboneTemp: store.state.defaultParameters.dogbone,\n  });\n\n  if (((state.offsetTemp !== store.getState().defaultParameters.offset) ||\n      (state.tabsTemp !== store.getState().defaultParameters.tabs) ||\n      (state.dogboneTemp !== store.getState().defaultParameters.dogbone)) &&\n      !state.isShown) {\n    console.log(\"bug fixin time\")\n    setState({\n      ...state,\n      offsetTemp: store.state.defaultParameters.offset,\n      tabsTemp: store.state.defaultParameters.tabs,\n      dogboneTemp: store.state.defaultParameters.dogbone,\n    })\n  }\n\n  const validateSubmit = () => {\n\n    let valid = state.nameValid &&\n                state.cutDepthValid &&\n                state.toolDiameterValid &&\n                state.toleranceValid &&\n                state.jogHeightValid &&\n                state.jogRateValid &&\n                state.feedRateValid;\n    if (valid) {\n\n      let name = utils.helpExtract(\"name\");\n      let cutDepth = Number(utils.helpExtract(\"cutDepth\"));\n      let toolDiameter = Number(utils.helpExtract(\"toolDiameter\"));\n      let tolerance = Number(utils.helpExtract(\"tolerance\"));\n      let jogHeight = Number(utils.helpExtract(\"jogHeight\"));\n      let jogRate = Number(utils.helpExtract(\"jogRate\"));\n      let feedRate = Number(utils.helpExtract(\"feedRate\"));\n      let tabThickness = Number(utils.helpExtract(\"tabThickness\"));\n\n      if (utils.helpExtract(\"name\") === \"\") name = store.getState().defaultParameters.name;\n      if (utils.helpExtract(\"cutDepth\") === \"\") cutDepth = store.getState().defaultParameters.cutDepth;\n      if (utils.helpExtract(\"toolDiameter\") === \"\") toolDiameter = store.getState().defaultParameters.toolDiameter;\n      if (utils.helpExtract(\"tolerance\") === \"\") tolerance = store.getState().defaultParameters.tolerance;\n      if (utils.helpExtract(\"jogHeight\") === \"\") jogHeight = store.getState().defaultParameters.jogHeight;\n      if (utils.helpExtract(\"jogRate\") === \"\") jogRate = store.getState().defaultParameters.jogRate;\n      if (utils.helpExtract(\"feedRate\") === \"\") feedRate = store.getState().defaultParameters.feedRate;\n      if (utils.helpExtract(\"tabThickness\") === \"\") tabThickness = store.getState().defaultParameters.tabThickness;\n\n      if (isNaN(cutDepth)) cutDepth = store.getState().defaultParameters.cutDepth;\n      if (isNaN(toolDiameter)) toolDiameter = store.getState().defaultParameters.toolDiameter;\n      if (isNaN(tolerance)) tolerance = store.getState().defaultParameters.tolerance;\n      if (isNaN(jogHeight)) jogHeight = store.getState().defaultParameters.jogHeight;\n      if (isNaN(jogRate)) jogRate = store.getState().defaultParameters.jogRate;\n      if (isNaN(feedRate)) feedRate = store.getState().defaultParameters.feedRate;\n      if (isNaN(tabThickness)) tabThickness = store.getState().defaultParameters.tabThickness;\n\n      let dogbone = state.dogboneTemp;\n      let tabs = state.tabsTemp;\n      let offset = state.offsetTemp;\n\n      //derived parameters\n      let passDepth = toolDiameter/2;\n      let toolRadius = toolDiameter/2;\n      let compensatedRadius = toolRadius + tolerance;\n      let tempFloor = Math.ceil(cutDepth/passDepth); //should this be ceiling or floor, I think ceil\n      let actualPassDepth = cutDepth/tempFloor;\n      let depthOfPasses = utils.makeSeries(actualPassDepth, actualPassDepth, tempFloor).map(n => -n);\n\n      //settings will be compiled to a single object here\n      let parameters = utils.deepcopy(store.state.defaultParameters);\n\n      parameters[\"dogbone\"] = dogbone;\n      parameters[\"tabs\"] = tabs;\n      parameters[\"offset\"] = offset;\n      parameters[\"tolerance\"] = tolerance;\n      parameters[\"tabThickness\"] = tabThickness;\n      parameters[\"toolDiameter\"] = toolDiameter;\n      parameters[\"compensatedRadius\"] = compensatedRadius;\n      parameters[\"cutDepth\"] = cutDepth;\n      parameters[\"depthOfPasses\"] = depthOfPasses;\n      parameters[\"feedRate\"] = feedRate;\n      parameters[\"jogHeight\"] = jogHeight;\n      parameters[\"jogRate\"] = jogRate;\n      // parameters[\"insideCutting\"] = insideCutting;\n\n      //console.log(\"parameters\", parameters);\n\n      setState({\n        ...state,\n        isShown:false,\n      });\n\n      //update app state here\n      let oldToolpaths = store.state.toolpaths;\n      let newProfiles = store.state.selected.map(path => {\n\n        return {\n          type: \"profile\",\n          name: name,\n          parameters: parameters,\n          sourceGeometryID: path,\n          geometry: profile(store.state.contours[path], parameters),\n          id: utils.makeID(),\n          cutSelected: false,\n          visible: true,\n        }\n      })\n\n      let newToolpaths = [...oldToolpaths, ...newProfiles];\n\n      // console.log(\"newToolpaths\", newToolpaths);\n\n      store.update({toolpaths:newToolpaths});\n\n    }\n  }\n\n  return (\n    <div>\n      <Dialog\n        isShown={state.isShown}\n        title={\"Settings for this Profile Cut\"}\n        onCloseComplete={() => {\n          setState({\n            ...state,\n            isShown:false,\n            dogboneTemp: store.getState().defaultParameters.dogbone,\n            tabsTemp: store.getState().defaultParameters.tabs,\n            offsetTemp: store.getState().defaultParameters.offset,\n          })\n        }}\n        onConfirm={validateSubmit}>\n\n        <TextInputField\n          onChange={e => {\n            let valid = utils.isNum(e.target.value);\n            setState({...state, cutDepthValid:valid})\n          }}\n          isInvalid={!state.cutDepthValid}\n          name=\"cutDepth\"\n          description={(state.cutDepthValid) ? \"\" : \"please enter a valid number\"}\n          label=\"Depth of Cut\"\n          placeholder={String(store.getState().defaultParameters.cutDepth)}/>\n\n        <TextInputField\n          onChange={e => {\n            let valid = utils.isNum(e.target.value);\n            setState({...state, toolDiameterValid:valid})\n          }}\n          isInvalid={!state.toolDiameterValid}\n          name=\"toolDiameter\"\n          description={(state.toolDiameterValid) ? \"\" : \"please enter a valid number\"}\n          label=\"Tool Diameter\"\n          placeholder={String(store.getState().defaultParameters.toolDiameter)}/>\n\n          <TextInputField\n            onChange={e => {\n              let valid = utils.isNum(e.target.value);\n              setState({...state, feedRateValid:valid})\n            }}\n            isInvalid={!state.feedRateValid}\n            name=\"feedRate\"\n            description={(state.feedRateValid) ? \"\" : \"please enter a valid number\"}\n            label=\"Feed Rate\"\n            placeholder={String(store.getState().defaultParameters.feedRate)}/>\n\n            <TextInputField\n              onChange={e => {\n                let valid = utils.isNum(e.target.value);\n                setState({...state, toleranceValid:valid})\n              }}\n              isInvalid={!state.toleranceValid}\n              name=\"tolerance\"\n              description={(state.toleranceValid) ? \"\" : \"please enter a valid number\"}\n              label=\"Tolerance\"\n              placeholder={String(store.getState().defaultParameters.tolerance)}/>\n\n          <TextInputField\n            onChange={e => {\n              let valid = utils.isNum(e.target.value);\n              setState({...state, jogRateValid:valid})\n            }}\n            isInvalid={!state.jogRateValid}\n            name=\"jogRate\"\n            description={(state.jogRateValid) ? \"\" : \"please enter a valid number\"}\n            label=\"Jog Rate\"\n            placeholder={String(store.getState().defaultParameters.jogRate)}/>\n\n            <TextInputField\n              onChange={e => {\n                let valid = utils.isNum(e.target.value);\n                setState({...state, jogHeightValid:valid})\n              }}\n              isInvalid={!state.jogHeightValid}\n              name=\"jogHeight\"\n              description={(state.jogHeightValid) ? \"\" : \"please enter a valid number\"}\n              label=\"Jog Height\"\n              placeholder={String(store.getState().defaultParameters.jogHeight)}/>\n\n            <Heading marginTop={8} size={400} color={\"rgba(67, 90, 111, .91)\"}>Offset Direction</Heading>\n            <SegmentedControl\n              marginTop={4}\n              options={[\n                { label: 'outside', value: \"outside\" },\n                { label: 'inside', value: \"inside\" },\n                { label: 'none', value: \"none\"}\n              ]}\n              value={state.offsetTemp}\n              onChange={value => {\n                let offsetTemp = value;\n                setState({...state, offsetTemp });\n              }}\n            />\n\n            <Heading marginTop={20} size={400} color={\"rgba(67, 90, 111, .91)\"}>Auto Tabs</Heading>\n            <SegmentedControl\n              marginTop={4}\n              options={[\n                { label: 'true', value: true },\n                { label: 'false', value: false },\n              ]}\n              value={state.tabsTemp}\n              onChange={value => {\n                let tabsTemp = value;\n                setState({...state, tabsTemp });\n              }}\n            />\n\n            <TextInputField\n              marginTop={20}\n              onChange={e => {\n                let valid = utils.isNum(e.target.value);\n                setState({...state, tabThicknessValid:valid})\n              }}\n              isInvalid={!state.tabThicknessValid}\n              name=\"tabThickness\"\n              description={(state.tabThicknessValid) ? \"\" : \"please enter a valid number\"}\n              label=\"Tab Thickness\"\n              placeholder={String(store.getState().defaultParameters.tabThickness)}/>\n\n            <Heading marginTop={20} size={400} color={\"rgba(67, 90, 111, .91)\"}>Auto Dogbone</Heading>\n            <SegmentedControl\n              marginTop={4}\n              options={[\n                { label: 'true', value: true },\n                { label: 'false', value: false },\n              ]}\n              value={state.dogboneTemp}\n              onChange={value => {\n                let dogboneTemp = value;\n                setState({...state, dogboneTemp });\n              }}\n            />\n\n            <TextInputField\n              marginTop={20}\n              onChange={e => {\n                let valid = e.target.value !== \"\";\n                setState({...state, nameValid:valid})\n              }}\n              isInvalid={!state.nameValid}\n              name=\"name\"\n              description={(state.nameValid) ? \"\" : \"please enter something\"}\n              label=\"Name for this Profile\"\n              placeholder={String(store.getState().defaultParameters.name)}/>\n\n      </Dialog>\n      <Button disabled={disabled} onClick={() => setState({...state, isShown:true})}>Profile</Button>\n    </div>\n  );\n\n}\n\nexport {ProfileButton};\n","import React, { useState } from 'react';\nimport {Button, Dialog, TextInputField} from 'evergreen-ui';\nimport * as utils from '../utils.js';\nimport {drill} from '../toolpaths/drill.js';\n\nimport store from '../store.js';\n\nconst DrillButton = ({disabled}) => {\n\n  const [state, setState] = useState({\n    isShown: false,\n    nameValid: true,\n    cutDepthValid: true,\n    toolDiameterValid: true,\n    toleranceValid: true,\n    jogHeightValid: true,\n    jogRateValid: true,\n    feedRateValid: true,\n  });\n\n  const validateSubmit = () => {\n\n    let valid = state.nameValid &&\n                state.cutDepthValid &&\n                state.toolDiameterValid &&\n                state.toleranceValid &&\n                state.jogHeightValid &&\n                state.jogRateValid &&\n                state.feedRateValid;\n    if (valid) {\n\n      let name = utils.helpExtract(\"name\");\n      let cutDepth = Number(utils.helpExtract(\"cutDepth\"));\n      let toolDiameter = Number(utils.helpExtract(\"toolDiameter\"));\n      let tolerance = Number(utils.helpExtract(\"tolerance\"));\n      let jogHeight = Number(utils.helpExtract(\"jogHeight\"));\n      let jogRate = Number(utils.helpExtract(\"jogRate\"));\n      let feedRate = Number(utils.helpExtract(\"feedRate\"));\n\n      if (utils.helpExtract(\"name\") === \"\") name = store.getState().defaultParameters.name;\n      if (utils.helpExtract(\"cutDepth\") === \"\") cutDepth = store.getState().defaultParameters.cutDepth;\n      if (utils.helpExtract(\"toolDiameter\") === \"\") toolDiameter = store.getState().defaultParameters.toolDiameter;\n      if (utils.helpExtract(\"tolerance\") === \"\") tolerance = store.getState().defaultParameters.tolerance;\n      if (utils.helpExtract(\"jogHeight\") === \"\") jogHeight = store.getState().defaultParameters.jogHeight;\n      if (utils.helpExtract(\"jogRate\") === \"\") jogRate = store.getState().defaultParameters.jogRate;\n      if (utils.helpExtract(\"feedRate\") === \"\") feedRate = store.getState().defaultParameters.feedRate;\n\n      if (isNaN(cutDepth)) cutDepth = store.getState().defaultParameters.cutDepth;\n      if (isNaN(toolDiameter)) toolDiameter = store.getState().defaultParameters.toolDiameter;\n      if (isNaN(tolerance)) tolerance = store.getState().defaultParameters.tolerance;\n      if (isNaN(jogHeight)) jogHeight = store.getState().defaultParameters.jogHeight;\n      if (isNaN(jogRate)) jogRate = store.getState().defaultParameters.jogRate;\n      if (isNaN(feedRate)) feedRate = store.getState().defaultParameters.feedRate;\n\n\n      //derived parameters\n      let toolRadius = toolDiameter/2;\n      let compensatedRadius = toolRadius + tolerance;\n\n      //settings will be compiled to a single object here\n      let parameters = utils.deepcopy(store.state.defaultParameters);\n\n      parameters[\"cutDepth\"] = cutDepth;\n      parameters[\"toolDiameter\"] = toolDiameter;\n      parameters[\"tolerance\"] = tolerance;\n      parameters[\"compensatedRadius\"] = compensatedRadius;\n      parameters[\"feedRate\"] = feedRate;\n      parameters[\"jogHeight\"] = jogHeight;\n      parameters[\"jogRate\"] = jogRate;\n      // parameters[\"insideCutting\"] = insideCutting;\n\n      //console.log(\"parameters\", parameters);\n\n      setState({\n        ...state,\n        isShown:false,\n      });\n\n      //update app state here\n      let oldToolpaths = store.state.toolpaths;\n      let newProfiles = store.state.selected.map(path => {\n\n        return {\n          type: \"drill\",\n          name: name,\n          parameters: parameters,\n          sourceGeometryID: path,\n          geometry: drill(store.state.contours[path], parameters),\n          id: utils.makeID(),\n          cutSelected: false,\n          visible: true,\n        }\n      })\n\n      let newToolpaths = [...oldToolpaths, ...newProfiles];\n\n      // console.log(\"newToolpaths\", newToolpaths);\n\n      store.update({toolpaths:newToolpaths});\n\n    }\n  }\n\n  return (\n    <div>\n      <Dialog\n        isShown={state.isShown}\n        title={\"Settings for this Drill Cut\"}\n        onCloseComplete={() => {\n          setState({\n            ...state,\n            isShown:false,\n          })\n        }}\n        onConfirm={validateSubmit}>\n\n        <TextInputField\n          onChange={e => {\n            let valid = utils.isNum(e.target.value);\n            setState({...state, cutDepthValid:valid})\n          }}\n          isInvalid={!state.cutDepthValid}\n          name=\"cutDepth\"\n          description={(state.cutDepthValid) ? \"\" : \"please enter a valid number\"}\n          label=\"Depth of Cut\"\n          placeholder={String(store.getState().defaultParameters.cutDepth)}/>\n\n        <TextInputField\n          onChange={e => {\n            let valid = utils.isNum(e.target.value);\n            setState({...state, toolDiameterValid:valid})\n          }}\n          isInvalid={!state.toolDiameterValid}\n          name=\"toolDiameter\"\n          description={(state.toolDiameterValid) ? \"\" : \"please enter a valid number\"}\n          label=\"Tool Diameter\"\n          placeholder={String(store.getState().defaultParameters.toolDiameter)}/>\n\n          <TextInputField\n            onChange={e => {\n              let valid = utils.isNum(e.target.value);\n              setState({...state, feedRateValid:valid})\n            }}\n            isInvalid={!state.feedRateValid}\n            name=\"feedRate\"\n            description={(state.feedRateValid) ? \"\" : \"please enter a valid number\"}\n            label=\"Feed Rate\"\n            placeholder={String(store.getState().defaultParameters.feedRate)}/>\n\n            <TextInputField\n              onChange={e => {\n                let valid = utils.isNum(e.target.value);\n                setState({...state, toleranceValid:valid})\n              }}\n              isInvalid={!state.toleranceValid}\n              name=\"tolerance\"\n              description={(state.toleranceValid) ? \"\" : \"please enter a valid number\"}\n              label=\"Tolerance\"\n              placeholder={String(store.getState().defaultParameters.tolerance)}/>\n\n          <TextInputField\n            onChange={e => {\n              let valid = utils.isNum(e.target.value);\n              setState({...state, jogRateValid:valid})\n            }}\n            isInvalid={!state.jogRateValid}\n            name=\"jogRate\"\n            description={(state.jogRateValid) ? \"\" : \"please enter a valid number\"}\n            label=\"Jog Rate\"\n            placeholder={String(store.getState().defaultParameters.jogRate)}/>\n\n            <TextInputField\n              onChange={e => {\n                let valid = utils.isNum(e.target.value);\n                setState({...state, jogHeightValid:valid})\n              }}\n              isInvalid={!state.jogHeightValid}\n              name=\"jogHeight\"\n              description={(state.jogHeightValid) ? \"\" : \"please enter a valid number\"}\n              label=\"Jog Height\"\n              placeholder={String(store.getState().defaultParameters.jogHeight)}/>\n\n            <TextInputField\n              marginTop={20}\n              onChange={e => {\n                let valid = e.target.value !== \"\";\n                setState({...state, nameValid:valid})\n              }}\n              isInvalid={!state.nameValid}\n              name=\"name\"\n              description={(state.nameValid) ? \"\" : \"please enter something\"}\n              label=\"Name for this Profile\"\n              placeholder={String(store.getState().defaultParameters.name)}/>\n\n      </Dialog>\n      <Button\n        disabled={disabled}\n        onClick={() => setState({...state, isShown:true})}>\n        Drill\n      </Button>\n    </div>\n  );\n}\n\nexport {DrillButton};\n","import React, { useState } from 'react';\nimport {Dialog, TextInputField, SegmentedControl, Heading, Link} from 'evergreen-ui';\nimport * as utils from '../utils.js';\nimport store from '../store.js';\nimport {profile} from '../toolpaths/profile.js';\nimport {pocket} from '../toolpaths/pocket.js';\nimport {drill} from '../toolpaths/drill.js';\n\nconst AdvancedOptions = ({params, setDefault, name, disabled, index}) => {\n\n  const [state, setState] = useState({\n    isShown: false,\n    nameValid: true,\n    cutDepthValid: true,\n    toolDiameterValid: true,\n    stepoverPercentageValid: true,\n    toleranceValid: true,\n    jogHeightValid: true,\n    jogRateValid: true,\n    feedRateValid: true,\n    tabThicknessValid: true,\n    offsetTemp: params.offset,\n    tabsTemp: params.tabs,\n    dogboneTemp: params.dogbone,\n  });\n\n  const validateSubmit = () => {\n\n    let valid = state.nameValid &&\n                state.cutDepthValid &&\n                state.toolDiameterValid &&\n                state.stepoverPercentageValid &&\n                state.toleranceValid &&\n                state.jogHeightValid &&\n                state.jogRateValid &&\n                state.feedRateValid;\n    if (valid) {\n\n      let name = !setDefault ? utils.helpExtract(\"name\") : \"\";\n      let cutDepth = Number(utils.helpExtract(\"cutDepth\"));\n      let toolDiameter = Number(utils.helpExtract(\"toolDiameter\"));\n      let stepoverPercentage = Number(utils.helpExtract(\"stepoverPercentage\")); //must be between 1 and 100%\n      let tolerance = Number(utils.helpExtract(\"tolerance\"));\n      let jogHeight = Number(utils.helpExtract(\"jogHeight\"));\n      let jogRate = Number(utils.helpExtract(\"jogRate\"));\n      let feedRate = Number(utils.helpExtract(\"feedRate\"));\n      let tabThickness = Number(utils.helpExtract(\"tabThickness\"));\n\n\n      if (!setDefault) {\n        if (utils.helpExtract(\"name\") === \"\") name = false;\n      }\n      if (utils.helpExtract(\"cutDepth\") === \"\") cutDepth = params.cutDepth;\n      if (utils.helpExtract(\"toolDiameter\") === \"\") toolDiameter = params.toolDiameter;\n      if (utils.helpExtract(\"stepoverPercentage\") === \"\") stepoverPercentage = params.stepoverPercentage; //must be between 1 and 100%\n      if (utils.helpExtract(\"tolerance\") === \"\") tolerance = params.tolerance;\n      if (utils.helpExtract(\"jogHeight\") === \"\") jogHeight = params.jogHeight;\n      if (utils.helpExtract(\"jogRate\") === \"\") jogRate = params.jogRate;\n      if (utils.helpExtract(\"feedRate\") === \"\") feedRate = params.feedRate;\n      if (utils.helpExtract(\"tabThickness\") === \"\") tabThickness = params.tabThickness;\n\n      let dogbone = state.dogboneTemp;\n      let tabs = state.tabsTemp;\n      let offset = state.offsetTemp;\n\n      //derived parameters\n      let passDepth = cutDepth/2;\n      let toolRadius = toolDiameter/2;\n      let compensatedRadius = toolRadius + tolerance;\n      let tempFloor = Math.ceil(cutDepth/passDepth); //should this be ceiling or floor, I think ceil\n      let actualPassDepth = cutDepth/tempFloor;\n      let depthOfPasses = utils.makeSeries(actualPassDepth, actualPassDepth, tempFloor).map(n => -n);\n\n      //settings will be compiled to a single object here\n      let parameters = utils.deepcopy(params);\n\n      parameters[\"dogbone\"] = dogbone;\n      parameters[\"tabs\"] = tabs;\n      parameters[\"offset\"] = offset;\n      parameters[\"tolerance\"] = tolerance;\n      parameters[\"tabThickness\"] = tabThickness;\n      parameters[\"toolDiameter\"] = toolDiameter;\n      parameters[\"compensatedRadius\"] = compensatedRadius;\n      parameters[\"cutDepth\"] = cutDepth;\n      parameters[\"depthOfPasses\"] = depthOfPasses;\n      parameters[\"feedRate\"] = feedRate;\n      parameters[\"jogHeight\"] = jogHeight;\n      parameters[\"jogRate\"] = jogRate;\n      // parameters[\"insideCutting\"] = insideCutting;\n      parameters[\"stepoverPercentage\"] = stepoverPercentage;\n\n      //console.log(\"parameters\", parameters);\n\n      setState({\n        ...state,\n        isShown:false,\n      });\n\n      //update app state here\n      // if default === true then update defaultParameters state, if false then update parameters of toolpath id\n      if (setDefault) {\n        console.log(\"update default parameters\", parameters)\n        store.update({defaultParameters:parameters});\n      } else {\n        let state = store.getState();\n        let toolpaths = state.toolpaths;\n        let path = toolpaths[index];\n\n        if (name) path.name = name;\n        path.parameters = parameters;\n        let sourceID = path.sourceGeometryID;\n        let sourceGeo = state.contours[sourceID];\n\n        if (path.type === \"profile\") {\n          let cutGeo = profile(sourceGeo, parameters);\n          path.geometry = cutGeo;\n        }\n\n        if (path.type === \"pocket\") {\n          let cutGeo = pocket(sourceGeo, parameters);\n          path.geometry = cutGeo;\n        }\n\n        if (path.type === \"drill\") {\n          let cutGeo = drill(sourceGeo, parameters);\n          path.geometry = cutGeo;\n        }\n\n        store.update({toolpaths});\n      }\n    }\n  }\n\n  return (\n    <div>\n      <Dialog\n        isShown={state.isShown}\n        title={setDefault ? \"Advanced Default Settings\" : \"Specific Toolpath Settings\"}\n        onCloseComplete={() => {\n          setState({\n            ...state,\n            isShown:false,\n            dogboneTemp: params.dogbone,\n            tabsTemp: params.tabs,\n            offsetTemp: params.offset,\n          })\n        }}\n        onConfirm={validateSubmit}>\n\n        <TextInputField\n          onChange={e => {\n            let valid = utils.isNum(e.target.value);\n            setState({...state, cutDepthValid:valid})\n          }}\n          isInvalid={!state.cutDepthValid}\n          name=\"cutDepth\"\n          description={(state.cutDepthValid) ? \"\" : \"please enter a valid number\"}\n          label=\"Depth of Cut\"\n          placeholder={String(params.cutDepth)}/>\n\n        <TextInputField\n          onChange={e => {\n            let valid = utils.isNum(e.target.value);\n            setState({...state, toolDiameterValid:valid})\n          }}\n          isInvalid={!state.toolDiameterValid}\n          name=\"toolDiameter\"\n          description={(state.toolDiameterValid) ? \"\" : \"please enter a valid number\"}\n          label=\"Tool Diameter\"\n          placeholder={String(params.toolDiameter)}/>\n\n        <TextInputField\n          onChange={e => {\n            let valid = utils.isNum(e.target.value);\n            valid = 0 < Number(e.target.value) && Number(e.target.value) <= 100;\n            //process value here\n            setState({...state, stepoverPercentageValid:valid})\n          }}\n          isInvalid={!state.stepoverPercentageValid}\n          name=\"stepoverPercentage\"\n          description={(state.stepoverPercentageValid) ? \"\" : \"please enter a valid number\"}\n          label=\"Stepover Percentage (this is only relevant for pocket cuts)\"\n          placeholder={String(params.stepoverPercentage)}/>\n\n          <TextInputField\n            onChange={e => {\n              let valid = utils.isNum(e.target.value);\n              setState({...state, feedRateValid:valid})\n            }}\n            isInvalid={!state.feedRateValid}\n            name=\"feedRate\"\n            description={(state.feedRateValid) ? \"\" : \"please enter a valid number\"}\n            label=\"Feed Rate\"\n            placeholder={String(params.feedRate)}/>\n\n            <TextInputField\n              onChange={e => {\n                let valid = utils.isNum(e.target.value);\n                setState({...state, toleranceValid:valid})\n              }}\n              isInvalid={!state.toleranceValid}\n              name=\"tolerance\"\n              description={(state.toleranceValid) ? \"\" : \"please enter a valid number\"}\n              label=\"Tolerance\"\n              placeholder={String(params.tolerance)}/>\n\n          <TextInputField\n            onChange={e => {\n              let valid = utils.isNum(e.target.value);\n              setState({...state, jogRateValid:valid})\n            }}\n            isInvalid={!state.jogRateValid}\n            name=\"jogRate\"\n            description={(state.jogRateValid) ? \"\" : \"please enter a valid number\"}\n            label=\"Jog Rate\"\n            placeholder={String(params.jogRate)}/>\n\n            <TextInputField\n              onChange={e => {\n                let valid = utils.isNum(e.target.value);\n                setState({...state, jogHeightValid:valid})\n              }}\n              isInvalid={!state.jogHeightValid}\n              name=\"jogHeight\"\n              description={(state.jogHeightValid) ? \"\" : \"please enter a valid number\"}\n              label=\"Jog Height\"\n              placeholder={String(params.jogHeight)}/>\n\n            <Heading marginTop={8} size={400} color={\"rgba(67, 90, 111, .91)\"}>Offset Direction (this is only relevant for profile cuts)</Heading>\n            <SegmentedControl\n              marginTop={4}\n              options={[\n                { label: 'outside', value: \"outside\" },\n                { label: 'inside', value: \"inside\" },\n                { label: 'none', value: \"none\"}\n              ]}\n              value={state.offsetTemp}\n              onChange={value => {\n                let offsetTemp = value;\n                setState({ ...state, offsetTemp });\n              }}\n            />\n\n            <Heading marginTop={20} size={400} color={\"rgba(67, 90, 111, .91)\"}>Auto Tabs (this is only relevant for profile cuts)</Heading>\n            <SegmentedControl\n              marginTop={4}\n              options={[\n                { label: 'true', value: true },\n                { label: 'false', value: false },\n              ]}\n              value={state.tabsTemp}\n              onChange={value => {\n                let tabsTemp = value;\n                setState({ ...state, tabsTemp });\n              }}\n            />\n\n            <TextInputField\n              marginTop={20}\n              onChange={e => {\n                let valid = utils.isNum(e.target.value);\n                setState({...state, tabThicknessValid:valid})\n              }}\n              isInvalid={!state.tabThicknessValid}\n              name=\"tabThickness\"\n              description={(state.tabThicknessValid) ? \"\" : \"please enter a valid number\"}\n              label=\"Tab Thickness\"\n              placeholder={String(params.tabThickness)}/>\n\n            <Heading marginTop={20} size={400} color={\"rgba(67, 90, 111, .91)\"}>Auto Dogbone</Heading>\n            <SegmentedControl\n              marginTop={4}\n              options={[\n                { label: 'true', value: true },\n                { label: 'false', value: false },\n              ]}\n              value={state.dogboneTemp}\n              onChange={value => {\n                let dogboneTemp = value;\n                setState({ ...state, dogboneTemp });\n              }}\n            />\n\n            {!setDefault &&\n            <TextInputField\n              marginTop={20}\n              onChange={e => {\n                let valid = e.target.value !== \"\";\n                setState({...state, nameValid:valid})\n              }}\n              isInvalid={!state.nameValid}\n              name=\"name\"\n              description={(state.nameValid) ? \"\" : \"please enter something\"}\n              label=\"Name for this Path\"\n              placeholder={name}/>}\n\n      </Dialog>\n      <Link onClick={() => setState({...state, isShown:!disabled})}>{setDefault ? \"Advanced Default Options\" : \"edit\"}</Link>\n    </div>\n  );\n}\n\nexport {AdvancedOptions};\n","import {gcode} from './exampleGCode.js';\nimport {line} from './unmakerjs/primitives.js';\n\n//gocode: string -> {points: list, preamble: list} :object\nconst getPoints = (gcode) => {\n  let gcodeList = gcode.split('\\n');\n  let preamble = [];\n  let points = [];\n\n  let sawPreamble = false;\n  gcodeList.forEach(e => {\n    if (sawPreamble) {\n      let xIndex = e.indexOf(\"X\");\n      let yIndex = e.indexOf(\"Y\");\n      let fIndex = e.indexOf(\"F\");\n\n      if (e.includes(\"X\")) {\n        //console.log(\"full\", e);\n\n        let x = e.substring(xIndex + 1, yIndex - 1);\n        //console.log(\"x\", x)\n        x = parseFloat(x);\n\n        let y = (fIndex === -1) ? e.substring(yIndex + 1, e.length) : e.substring(yIndex + 1, fIndex - 1);\n        //console.log(\"y\", y, \"f\", fIndex)\n        y = parseFloat(y);\n\n        points.push([x, y]);\n      }\n\n    } else {\n      preamble.push(e);\n    }\n\n    if (e === \"(end of preamble)\") sawPreamble = true;\n  })\n\n  return {points, preamble};\n}\n\n// finds center of a list of contours\nconst center = (contours) => {\n  let points = contours.flat(1);\n  points = points.map(line => [line.origin, line.end]).flat();\n\n  let xS = points.map(point => point[0]);\n  let medianX = (Math.max(...xS) + Math.min(...xS))/2\n  // let averageX = xS.reduce(sum, 0)/xS.length;\n\n  let yS = points.map(point => point[1]);\n  let medianY = (Math.max(...yS) + Math.min(...yS))/2\n  // let averageY = yS.reduce(sum, 0)/yS.length;\n\n  // return [averageX, averageY];\n  return [medianX, medianY];\n}\n\n// mirrors a list of contours\nconst mirror = (contours, line) => {};\n\nconst scale = (contours, xFactor, yFactor) => {\n  contours = contours.map(contour => {\n    return contour.map(l => {\n      let [originX, originY] = l.origin;\n      let [endX, endY] = l.end;\n\n      let newOrigin = [originX * xFactor, originY * yFactor];\n      let newEnd = [endX * xFactor, endY * yFactor];\n\n      return line(newOrigin, newEnd);\n    })\n  })\n\n  return contours\n};\n\n//offsets a list of contours\nconst offset = (contours, xOffset, yOffset) => {\n  contours = contours.map(contour => {\n    return contour.map(l => {\n      let [originX, originY] = l.origin;\n      let [endX, endY] = l.end;\n\n      let newOrigin = [originX + xOffset, originY + yOffset];\n      let newEnd = [endX + xOffset, endY + yOffset];\n\n      return line(newOrigin, newEnd);\n    })\n  })\n\n  return contours\n}\n\n//contours: list of lists, x: boolean, y: boolean -> new contours: list of lists\nconst reflect = (contours, x, y) => {\n  x = (x) ? -1 : 1;\n  y = (y) ? -1 : 1;\n\n  contours = contours.map(contour => {\n    return contour.map(l => {\n      let [originX, originY] = l.origin;\n      let [endX, endY] = l.end;\n\n      let newOrigin = [originX * x, originY * y];\n      let newEnd = [endX * x, endY * y];\n\n      return line(newOrigin, newEnd);\n    })\n  })\n\n  return contours\n}\n\nexport const transformations = {\n  offset,\n  mirror,\n  reflect,\n  scale\n}\n","import React from 'react';\nimport {Table, Checkbox, Button} from 'evergreen-ui';\nimport {AdvancedOptions} from './AdvancedOptions.js';\nimport * as utils from '../utils.js';\nimport store from '../store.js';\n\nimport {drillGcode} from '../toolpaths/drill.js';\nimport {pocketGcode} from '../toolpaths/pocket.js';\nimport {profileGcode} from '../toolpaths/profile.js';\n\nimport {transformations} from '../gcodeManipulations.js';\n\n\nconst ToolpathList = ({ state }) => {\n  let toolpaths = state.toolpaths;\n\n  return (\n    <Table>\n      <Table.Head>\n        <Table.TextHeaderCell>name</Table.TextHeaderCell>\n        <Table.TextHeaderCell>type</Table.TextHeaderCell>\n        <Table.TextHeaderCell>modify</Table.TextHeaderCell>\n        <Table.TextHeaderCell>reorder</Table.TextHeaderCell>\n        <Table.TextHeaderCell>select/view</Table.TextHeaderCell>\n      </Table.Head>\n      <Table.Body height={240}>\n        {toolpaths.map((path, i) => (\n          <Table.Row\n            key={path.id}\n            onMouseDown={() => {\n\n              // let toolpath = toolpaths[i];\n              //\n              // toolpath.cutSelected = !toolpath.cutSelected;\n              //\n              // store.update({ toolpaths })\n            }}\n            style={{background:(path.cutSelected) ? \"lightblue\" : \"white\"}}>\n            <Table.TextCell>{path.name}</Table.TextCell>\n            <Table.TextCell>{path.type}</Table.TextCell>\n            <Table.TextCell>\n              <AdvancedOptions\n                params={path.parameters}\n                name={path.name}\n                setDefault={false}\n                index={i}\n                onMouseDown={(e) => e.stopPropagation()}/>\n            </Table.TextCell>\n            <Table.TextCell>^ v</Table.TextCell>\n            <Table.TextCell>\n              <Checkbox\n                checked={path.visible}\n                onMouseDown={(e) => e.stopPropagation()}\n                onChange={e => {\n                  // let toolpaths = toolpaths;\n                  let toolpath = toolpaths[i];\n\n                  toolpath.visible = e.target.checked;\n\n                  store.update({ toolpaths })\n                }}\n              />\n            </Table.TextCell>\n          </Table.Row>\n        ))}\n      </Table.Body>\n      <Table.Row>\n        <Table.TextCell><Button onClick={() => {\n          let text = []\n          toolpaths.forEach(path => {\n            if (path.visible) { // if(path.cutSelected) {\n              let geometry = path.geometry.geometry;\n\n              let gcode;\n              if (path.type === \"drill\") gcode = drillGcode(geometry, path.parameters);\n              else {\n                //now I can mutate geometry\n                geometry = transformations.reflect(geometry, false, true);\n                geometry = transformations.scale(geometry, 0.5, 0.5);\n\n                if (path.type === \"profile\") gcode = profileGcode(geometry, path.parameters);\n                if (path.type === \"pocket\") gcode = pocketGcode(geometry, path.parameters);\n              }\n\n              text.push(gcode);\n            }\n          })\n\n          utils.download(\"toolpaths.gcode\", text.join(\"\\n\"));\n        }}>\n          Export\n        </Button></Table.TextCell>\n        <Table.TextCell>\n          <Button\n            onClick={() => {\n              //let toolpaths = store.state.toolpaths.filter(toolpath => !toolpath.cutSelected);\n              let toolpaths = store.state.toolpaths.filter(toolpath => !toolpath.visible);\n\n\n              // console.log(toolpaths);\n\n              store.update({ toolpaths })\n            }}>\n              Delete\n          </Button>\n        </Table.TextCell>\n        <Table.TextCell>\n          <Button onClick={() => {\n            toolpaths = store.getState().toolpaths; //TODO: fix this hack not sure why I have to do this here\n\n            let allVisible = toolpaths.every(path => path.visible);\n\n            toolpaths = toolpaths.map((path, i) => {\n              path.visible = !allVisible;\n\n              return path;\n            })\n\n            //console.log(store.getState())\n\n            store.update({ toolpaths })\n          }}>\n            Select/View All\n          </Button>\n        </Table.TextCell>\n      </Table.Row>\n    </Table>\n  )\n}\n\nexport {ToolpathList}\n//\n// <Table.TextCell>\n//   <Button onClick={() => {\n//     toolpaths = store.getState().toolpaths; //TODO: fix this hack not sure why I have to do this here\n//\n//     let allSelected = toolpaths.every(path => path.cutSelected);\n//\n//     let toolpaths = toolpaths.map((path, i) => {\n//       path.cutSelected = !allSelected;\n//\n//       return path;\n//     })\n//\n//     //console.log(store.getState())\n//\n//     store.update({ toolpaths })\n//   }}>\n//     Select\n//   </Button>\n// </Table.TextCell>\n","import React, { useState } from 'react';\nimport {Button, Heading, Pane, Paragraph} from 'evergreen-ui';\nimport './App.css';\n\nimport simplify from 'simplify-js';\n\nimport * as utils from './utils.js';\n\nimport {uploadSVG, uploadBBJS} from './uploadSVG.js';\nimport {calculateSettings} from './jensSettings.js';\n\nimport {Workplane} from './components/Workplane.js'\nimport {MaterialType} from './components/MaterialType.js';\nimport {MaterialThickness} from './components/MaterialThickness.js';\nimport {Origin} from './components/Origin.js';\nimport {Units} from './components/Units.js';\nimport {PocketButton} from './components/PocketButton.js';\nimport {ProfileButton} from './components/ProfileButton.js';\nimport {DrillButton} from './components/DrillButton.js';\nimport {AdvancedOptions} from './components/AdvancedOptions.js';\nimport {ToolpathList} from './components/ToolpathList.js';\n\nimport {renderLine, connectPoints} from './unmakerjs/primitives.js';\n\nimport store from \"./store.js\"; //this is my global state library, this is the only file that will getState() it will pass that to all sub components or should i import store in respective components\n\nconst TOLERANCE = .1;\nconst HQ = false;\n\nconst linesToPolylinePoints = (lines, lastIndex) => lines.map((line, i) => {\n  if (i === lastIndex-1) return [{x:line.origin[0], y:line.origin[1]}, {x:line.end[0], y:line.end[1]}];\n\n  return {x:line.origin[0], y:line.origin[1]}\n}).flat()\n\nconst simplifyLines = (lines) => connectPoints(simplify(linesToPolylinePoints(lines, lines.length), TOLERANCE, HQ).map(el => [el.x, el.y]));\n\nconst simplifyToolpath = (toolpath) => toolpath.map(lines => {\n  if (!Array.isArray(lines[0])) return simplifyLines(lines, lines.length);\n\n  return lines.map(lines2 => simplifyLines(lines2, lines2.length)).flat();\n}).flat()\n\nconst App = () => {\n\n  const [state, setState] = useState({\n    thicknessSubmit : false,\n    materialSubmit: false,\n    originSubmit: false,\n    initialized: true, //will be false\n    groupHovered: [],\n  });\n\n  const firstSubmit = (name) => {\n    let old = state;\n    old[name] = true;\n\n    setState({...state, old});\n  }\n\n  const initialized = () => {\n    if (!state.initialized && (state.thicknessSubmit && state.materialSubmit && state.originSubmit)) {\n      setState({...state, initialized:true});\n    }\n  }\n\n  const groupHover = (id, enter) => {\n    id = id.split('_');\n    let toolpath = (id[1] === \"toolpath\")\n    id = id[0];\n\n    let currentGroupHovered = state.groupHovered;\n    currentGroupHovered.push(id);\n\n\n    if (id && !toolpath && enter) {\n      setState({...state, groupHovered: currentGroupHovered});\n    } else {\n      setState({...state, groupHovered: []});\n    }\n\n  }\n\n  // const hover = (id) => {\n  //   id = id.split('_');\n  //   let toolpath = (id[1] === \"toolpath\")\n  //\n  //   id = id[0];\n  //\n  //   if (id && !toolpath) {\n  //     store.update({ hovered: [id] });\n  //   } else {\n  //     store.update({ hovered: [] }); //this is a bit hackish\n  //   }\n  //\n  // }\n\n  const select = (id) => {\n    id = id.split('_');\n    let toolpath = (id[1] === \"toolpath\")\n\n    id = id[0];\n\n    if (id && !store.state.selected.includes(id) && !toolpath) {\n      store.update(s => s.selected.push(id));;\n    } else {\n      store.update({selected: []}); //this is a bit hackish\n    }\n\n  }\n\n\n\n  //should I put everying in a list or all to one model, there seem to be some issues with origins if I mjs.exporter.toSVG() seperately\n  if (!state.initialized) {\n    initialized();\n  };\n\n  let set = calculateSettings(\"aluminum_roughing\", 3, 1, 60000);\n  console.log(\"settings\", set);\n\n  let viewModel = Object.entries(store.state.contours).map(([id, lines]) => (\n    <g\n      onMouseEnter={(e) => groupHover(e.target.parentNode.id, true)}\n      onMouseLeave={(e) => groupHover(e.target.parentNode.id, false)}\n      key={`${id}`}\n      id={`${id}_contour`}>\n      {simplifyLines(lines, lines.length).map((line, i) => renderLine(\n        line,\n        `${id}_index${i}`,\n        {\n          selected: store.state.selected.includes(id),\n          highlighted: state.groupHovered.includes(id)\n        }))}\n     </g>\n  ));\n\n  let toolpathView = store.state.toolpaths.map(toolpath => (\n    <g\n      key={`${toolpath.id}`}\n      id={`${toolpath.id}_toolpath`}>\n      {toolpath.visible && simplifyToolpath(toolpath.geometry.drawing).map((line, i) => renderLine(line,\n        `${toolpath.id}_index${i}`,\n        {\n         toolpath: true\n        }))}\n    </g>\n  ));\n\n  let origin = <circle cx=\"0\" cy=\"0\" r=\"2\" stroke=\"orange\" strokeWidth=\"1\" fill=\"orange\" opacity=\".8\" key=\"origin\"/>\n\n  viewModel = [...viewModel, ...toolpathView, origin]\n\n  return (\n    <div\n      className=\"wrapper\"\n      >\n\n\n      <div>\n        <div\n          onMouseDown={(e) => select(e.target.parentNode.id)}\n          className=\"mainEvent\">\n          <Workplane groups={viewModel}/>\n          <svg width={0} height={0} id={\"thisIsDumb\"}></svg>\n        </div>\n\n        <div>\n          <input\n            id=\"myInput\"\n            type=\"file\"\n            style={{display:\"none\"}}\n            onChange={(e) => {\n              let files = e.target.files;\n              let file = files[0];\n\n              let filetype = file.name.split('.')[1];\n\n              if (filetype === \"bbjs\") return uploadBBJS(e);\n              if (filetype === \"svg\") return uploadSVG(e)\n            }}/>\n          <Button\n            marginRight={4}\n            onClick={() => document.getElementById(\"myInput\").click()}>\n              upload (SVG or BBJS)\n          </Button>\n          <Button\n            onClick={() => {\n              utils.download(\"save.bbjs\", JSON.stringify(store.state));\n              }}>\n            save\n          </Button>\n          <br/>\n          Number Selected: {store.state.selected.length}\n          &nbsp;\n          <Button\n            onClick={() => {\n              let contours = Object.entries(store.state.contours);\n              contours = contours.filter(([id, contour]) => !store.state.selected.includes(id))\n\n              let toolpaths = store.state.toolpaths.filter(toolpath => !store.state.selected.includes(toolpath.sourceGeometryID));\n\n              let newContours = {};\n\n              contours.forEach(contour => {\n                newContours[contour[0]] = contour[1];\n              })\n\n              contours = newContours;\n\n              store.update({\n                contours,\n                toolpaths,\n                selected: []\n              })\n\n            }}>\n            Delete\n          </Button>\n        </div>\n      </div>\n\n      <div className=\"sidebar\">\n        <div>\n          <Heading>Settings</Heading>\n          <Pane marginTop={4}> <MaterialType firstSubmit={firstSubmit}/></Pane>\n          <Pane marginTop={4}> <MaterialThickness firstSubmit={firstSubmit}/></Pane>\n          <Pane marginTop={4}> <Units/></Pane>\n          <Pane marginTop={4}> <Origin firstSubmit={firstSubmit}/></Pane>\n          {(!state.initialized) ? <Paragraph marginTop={4}>select settings before editting options</Paragraph> : \"\"}\n          <Pane> <AdvancedOptions disabled={!state.initialized} setDefault={true} params={store.getState().defaultParameters}/></Pane>\n        </div>\n\n        <div>\n          <Heading marginTop={8}>Create Toolpaths</Heading>\n          {(!state.initialized) ? <Paragraph marginTop={4}>select settings before creating toolpaths</Paragraph> : \"\"}\n          <div className=\"toolpaths\">\n            <Pane marginLeft={8} marginTop={4}><ProfileButton disabled={!state.initialized}/></Pane>\n            <Pane marginLeft={8} marginTop={4}><PocketButton disabled={!state.initialized}/></Pane>\n            <Pane marginLeft={8} marginTop={4}><DrillButton disabled={!state.initialized}/></Pane>\n          </div>\n        </div>\n\n        <div>\n          <Heading marginTop={8}>Toolpaths</Heading>\n          <ToolpathList marginTop={4} state={store.getState()}/>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import * as utils from './utils.js';\nimport {flattenSVG} from 'flatten-svg';\n\nimport {connectPoints} from './unmakerjs/primitives.js';\n\nimport store from \"./store.js\"; //this is my global state library, this is the only file that will getState() it will pass that to all sub components or should i import store in respective components\n\n\nconst uploadSVG = (e) => {\n\n  //main event\n  let files = e.target.files;\n  let file = files[0];\n\n  var reader = new FileReader();\n\n  reader.onload = (event) => {\n    let text = event.target.result;\n\n    let hmm = document.getElementById('thisIsDumb');\n    hmm.innerHTML = text;\n\n    let paths = flattenSVG(hmm);\n\n    let contours = {};\n\n    Object.values(paths).forEach(path => {\n      let lines = connectPoints(path.points);\n      contours[utils.makeID()] = lines;\n    })\n\n    contours = {...store.state.contours, ...contours}\n\n    store.update({contours});\n\n  };\n\n  reader.readAsText(file);\n}\n\nconst uploadBBJS = (e) => {\n\n  //main event\n  let files = e.target.files;\n  let file = files[0];\n\n  var reader = new FileReader();\n\n  reader.onload = (event) => {\n    let text = event.target.result;\n    let state = JSON.parse(text);\n\n    store.update(state);\n\n  };\n\n  reader.readAsText(file);\n}\n\nexport {uploadSVG, uploadBBJS};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './store.js';\n// import \"@blueprintjs/icons/lib/css/blueprint-icons.css\";\n// import \"@blueprintjs/core/lib/css/blueprint.css\";\n// import \"normalize.css/normalize.css\";\n// import 'elemental/less/elemental.less';\n\nconst render = () => {\n  ReactDOM.render(<App/>, document.getElementById('root'));\n}\n\nstore.subscribe(render)\nrender();\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}