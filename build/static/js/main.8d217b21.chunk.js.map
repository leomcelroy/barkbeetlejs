{"version":3,"sources":["components/millingCalculatorConstants.js","utils.js","parameters.js","unmakerjs/primitives.js","unmakerjs/clipper.js","toolpaths/profile.js","toolpaths/pocket.js","toolpaths/drill.js","store.js","components/MillingCalculator.js","components/Workplane.js","components/PocketButton.js","components/ProfileButton.js","components/DrillButton.js","components/AdvancedOptions.js","gcodeManipulations.js","components/ToolpathList.js","App.js","uploadSVG.js","serviceWorker.js","index.js"],"names":["bitChoice","mdf","2","diameter","type","3","4","6","7","8","10","12","15","16","18","20","25","30","40","plywood","plastic","aluminum","steel","presets6mm","chiploads","passdepths","rampAngle","wood","hardwood","foam_or_wax","plastic_roughing","plastic_finishing","aluminum_roughing","aluminum_finishing","steel_roughing","steel_finishing","makeSeries","s","n","c","l","push","i","download","filename","text","pom","document","createElement","setAttribute","encodeURIComponent","createEvent","event","initEvent","dispatchEvent","click","deepcopy","thing","JSON","parse","stringify","makeID","Math","random","toString","substr","isNum","str","regex","found","match","length","helpExtract","p","getElementsByName","value","depthOfPasses","cutDepthArg","passDepthArg","tempFloor","ceil","actualPassDepth","utils","map","params","name","dogbone","tabThickness","tabs","compensatedRadius","toolDiameter","cutDepth","passDepth","jogHeight","stepoverPercentage","feedRate","jogRate","units","plungeRate","tolerance","line","origin","end","connectPoints","pointsArray","lastPoint","lines","forEach","point","index","renderLine","id","options","arguments","undefined","defaultOptions","selected","highlighted","toolpath","Object","keys","key","includes","pathData","_ref","_ref2","slicedToArray","x","y","concat","color","style","fill","strokeWidth","stroke","strokeLinejoin","strokeLinecap","opacity","vectorEffect","react_default","a","d","EndTypes","JoinTypes","ClipperLib","JoinType","jtSquare","jtRound","jtMiter","clipOffsetContour","contour","offset","joints","start","endless","every","entry","keyPoints","X","round","Y","paths","co","ClipperOffset","offsetted","Paths","Clear","AddPaths","MiterLimit","ArcTolerance","Execute","newContours","points","result","profile","toolpaths","offsetFunc","createToolpaths","drawing","geometry","isToolpath","len","pocket","geo","contours","count","pass","flat","drill","center","lastIndex","polyline","xS","medianX","max","apply","toConsumableArray","min","yS","getCenter","testContour","profileCut","pocketCut","drillCut","defaultParameters","store","createStore","parameters","sourceGeometryID","cutSelected","visible","hovered","material","thickness","zero","initialized","MillingCalculator","_useState","useState","feedrate","plungerate","rpmDisabled","flutesDisabled","bitDiameterDisabled","submit2Disabled","submit1Text","_useState2","state","setState","submit2","materialThickness","parseFloat","getElementById","bitDiameter","set","numberOfFlutes","rpm","plungRateReductionFactor","input","presetDiameter","materialToCut","millingBitDiameter","fluteReduction","output","calculateSettings","objectSpread","current","update","onClick","isNaN","close","counts","e","goal","disabled","Workplane","width","height","v0","v1","v2","v3","ctrlKey","deltaY","this","deltaX","_this2","viewBox","xmlns","onWheel","wheel","border","props","groups","Component","PocketButton","isShown","nameValid","cutDepthValid","toolDiameterValid","stepoverPercentageValid","toleranceValid","jogHeightValid","jogRateValid","feedRateValid","dogboneTemp","getState","console","log","Dialog","title","onCloseComplete","showAdvanced","onConfirm","Number","oldToolpaths","newPockets","path","newToolpaths","TextInputField","onChange","valid","target","isInvalid","description","label","placeholder","String","marginTop","Heading","size","SegmentedControl","Button","ProfileButton","tabThicknessValid","offsetTemp","tabsTemp","newProfiles","DrillButton","AdvancedOptions","setDefault","sourceID","sourceGeo","cutGeo","Link","transformations","_l$origin3","originX","originY","_l$end3","endX","endY","xFactor","yFactor","_l$origin","_l$end","ToolpathList","Table","Head","TextHeaderCell","Body","Row","onMouseDown","background","TextCell","AdvancedOptions_AdvancedOptions","stopPropagation","Checkbox","checked","gcode","join","drillGcode","gcodePoints","firstPoint","passDepths","profileGcode","outline","raise","paths2","pocketGcode","filter","allVisible","simplifyLines","simplify","linesToPolylinePoints","el","groupHover","enter","split","currentGroupHovered","groupHovered","getCursorPoint","evt","svg","pt","createSVGPoint","clientX","clientY","cursorpt","matrixTransform","getScreenCTM","inverse","App","mouseDown","downPoint","drag","selectionBoxWidth","selectionBoxHeight","selectionBoxOrigin","viewModel","entries","onMouseEnter","parentNode","onMouseLeave","toolpathView","Array","isArray","lines2","simplifyToolpath","cx","cy","r","className","onMouseMove","_state$downPoint","downPointX","downPointY","_getCursorPoint","_getCursorPoint2","cursorPointX","cursorPointY","abs","onMouseUp","_ref3","_ref4","select","Workplane_Workplane","display","filetype","files","file","reader","FileReader","onload","readAsText","uploadBBJS","hmm","innerHTML","flattenSVG","values","uploadSVG","marginRight","_ref5","_ref6","MillingCalculator_MillingCalculator","Paragraph","Pane","marginLeft","ProfileButton_ProfileButton","PocketButton_PocketButton","DrillButton_DrillButton","ToolpathList_ToolpathList","Boolean","window","location","hostname","render","ReactDOM","src_App_0","subscribe","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8d217b21.chunk.js","sourcesContent":["export const bitChoice = {\n  mdf: {\n    2: {\n      diameter: 2,\n      type: \"down-cut\",\n    },\n    3: {\n      diameter: 2,\n      type: \"down-cut\",\n    },\n    4: {\n      diameter: 3,\n      type: \"down-cut\",\n    },\n    6: {\n      diameter: 3,\n      type: \"up-cut\",\n    },\n    7: {\n      diameter: 3,\n      type: \"up-cut\",\n    },\n    8: {\n      diameter: 3,\n      type: \"up-cut\",\n    },\n    10: {\n      diameter: 3,\n      type: \"up-cut\",\n    },\n    12: {\n      diameter: 4,\n      type: \"up-cut\",\n    },\n    15: {\n      diameter: 4,\n      type: \"up-cut\",\n    },\n    16: {\n      diameter: 6,\n      type: \"up-cut\",\n    },\n    18: {\n      diameter: 6,\n      type: \"up-cut\",\n    },\n    20: {\n      diameter: 8,\n      type: \"up-cut\",\n    },\n    25: {\n      diameter: 8,\n      type: \"up-cut\",\n    },\n    30: {\n      diameter: 10,\n      type: \"up-cut\",\n    },\n    40: {\n      diameter: 12,\n      type: \"up-cut\",\n    },\n  },\n  plywood: {\n    2: {\n      diameter: 2,\n      type: \"up-cut\",\n    },\n    3: {\n      diameter: 2,\n      type: \"up-cut\",\n    },\n    4: {\n      diameter: 3,\n      type: \"compression\",\n    },\n    6: {\n      diameter: 3,\n      type: \"compression\",\n    },\n    8: {\n      diameter: 3,\n      type: \"compression\",\n    },\n    10: {\n      diameter: 3,\n      type: \"compression\",\n    },\n    12: {\n      diameter: 4,\n      type: \"compression\",\n    },\n    15: {\n      diameter: 4,\n      type: \"compression\",\n    },\n    16: {\n      diameter: 6,\n      type: \"compression\",\n    },\n    18: {\n      diameter: 6,\n      type: \"compression\",\n    },\n    20: {\n      diameter: 8,\n      type: \"compression\",\n    },\n    25: {\n      diameter: 8,\n      type: \"compression\",\n    },\n    30: {\n      diameter: 10,\n      type: \"compression\",\n    },\n    40: {\n      diameter: 12,\n      type: \"compression\",\n    },\n  },\n  plastic: {\n    2: {\n      diameter: 2,\n      type: \"down-cut\",\n    },\n    3: {\n      diameter: 2,\n      type: \"up-cut\",\n    },\n    4: {\n      diameter: 3,\n      type: \"up-cut\",\n    },\n    6: {\n      diameter: 4,\n      type: \"up-cut\",\n    },\n    8: {\n      diameter: 4,\n      type: \"up-cut\",\n    },\n    10: {\n      diameter: 4,\n      type: \"up-cut\",\n    },\n    12: {\n      diameter: 6,\n      type: \"up-cut\",\n    },\n    15: {\n      diameter: 6,\n      type: \"up-cut\",\n    },\n    16: {\n      diameter: 8,\n      type: \"up-cut\",\n    },\n    18: {\n      diameter: 8,\n      type: \"up-cut\",\n    },\n    20: {\n      diameter: 10,\n      type: \"up-cut\",\n    },\n    25: {\n      diameter: 12,\n      type: \"up-cut\",\n    },\n    30: {\n      diameter: 14,\n      type: \"up-cut\",\n    },\n    40: {\n      diameter: 16,\n      type: \"up-cut\",\n    },\n  },\n  aluminum: {\n    2: {\n      diameter: 2,\n      type: \"up-cut\",\n    },\n    3: {\n      diameter: 2,\n      type: \"up-cut\",\n    },\n    4: {\n      diameter: 3,\n      type: \"up-cut\",\n    },\n    6: {\n      diameter: 4,\n      type: \"up-cut\",\n    },\n    8: {\n      diameter: 6,\n      type: \"up-cut\",\n    },\n    10: {\n      diameter: 6,\n      type: \"up-cut\",\n    },\n    12: {\n      diameter: 8,\n      type: \"up-cut\",\n    },\n    15: {\n      diameter: 10,\n      type: \"up-cut\",\n    },\n    16: {\n      diameter: 12,\n      type: \"up-cut\",\n    },\n    18: {\n      diameter: 16,\n      type: \"up-cut\",\n    },\n    20: {\n      diameter: 16,\n      type: \"up-cut\",\n    },\n    25: {\n      diameter: 20,\n      type: \"up-cut\",\n    },\n    30: {\n      diameter: 20,\n      type: \"up-cut\",\n    },\n    40: {\n      diameter: 25,\n      type: \"up-cut\",\n    },\n  },\n  steel: {\n    2: {\n      diameter: 3,\n      type: \"up-cut\",\n    },\n    3: {\n      diameter: 4,\n      type: \"up-cut\",\n    },\n    4: {\n      diameter: 4,\n      type: \"up-cut\",\n    },\n    6: {\n      diameter: 6,\n      type: \"up-cut\",\n    },\n    8: {\n      diameter: 8,\n      type: \"up-cut\",\n    },\n    10: {\n      diameter: 10,\n      type: \"up-cut\",\n    },\n    12: {\n      diameter: 12,\n      type: \"up-cut\",\n    },\n    15: {\n      diameter: 16,\n      type: \"up-cut\",\n    },\n    16: {\n      diameter: 16,\n      type: \"up-cut\",\n    },\n    18: {\n      diameter: 20,\n      type: \"up-cut\",\n    },\n    20: {\n      diameter: 20,\n      type: \"up-cut\",\n    },\n    25: {\n      diameter: 25,\n      type: \"up-cut\",\n    },\n    30: {\n      diameter: 30,\n      type: \"up-cut\",\n    },\n    40: {\n      diameter: 40,\n      type: \"up-cut\",\n    },\n  },\n};\n\nexport const presets6mm = {\n  mdf: {\n    chiploads: 0.25,\n    passdepths: 17,\n    rampAngle: 90,\n  },\n  wood: {\n    chiploads: 0.2,\n    passdepths: 16,\n    rampAngle: 90,\n  },\n  hardwood: {\n    chiploads: 0.133,\n    passdepths: 12,\n    rampAngle: 45,\n  },\n  foam_or_wax: {\n    chiploads: 0.3,\n    passdepths: 19,\n    rampAngle: 90,\n  },\n  plastic_roughing: {\n    chiploads: 0.15,\n    passdepths: 8,\n    rampAngle: 18,\n  },\n  plastic_finishing: {\n    chiploads: 0.073,\n    passdepths: 8,\n    rampAngle: 18,\n  },\n  aluminum_roughing: {\n    chiploads: 0.12,\n    passdepths: 1.8,\n    rampAngle: 12,\n  },\n  aluminum_finishing: {\n    chiploads: 0.06,\n    passdepths: 1.8,\n    rampAngle: 12,\n  },\n  steel_roughing: {\n    chiploads: 0.08,\n    passdepths: 0.6,\n    rampAngle: 5,\n  },\n  steel_finishing: {\n    chiploads: 0.04,\n    passdepths: 0.6,\n    rampAngle: 5,\n  },\n}\n","const makeSeries = (s, n, c) => {\n  let l = [];\n  l.push(s);\n\n  for (let i = 0; i < c - 1; i++) {\n    l.push(l[i] + n);\n  }\n\n  return l;\n}\n\n//const editSVG  = (svg) => `<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" ${svg.slice(4)}`;\nconst editSVG  = (svg) => {\n  // console.log(svg);\n  //let path = `${svg.slice(226, svg.length-10)}`;\n  let group = `${svg.slice(52, svg.length-6)}`;\n\n  //console.log(group);\n  return group;\n}\n\nconst download = (filename, text) => {\n  var pom = document.createElement('a');\n\n  pom.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(text));\n  pom.setAttribute('download', filename);\n\n  if (document.createEvent) {\n      var event = document.createEvent('MouseEvents');\n      event.initEvent('click', true, true);\n      pom.dispatchEvent(event);\n  }\n  else {\n      pom.click();\n  }\n}\n\nconst getSVGpoint = (evt, v0, v1, v2, v3, width, height) => { //should this be a method on Workplane in Workplane.js\n  var svg = document.querySelector('svg');\n  var pt = {x: 0, y: 0};\n\n  let svgBox = svg.getBoundingClientRect();\n  let boxWidth = svgBox.width;\n  let boxHeight = svgBox.height;\n  let xOffset = svgBox.x;\n  let yOffset = svgBox.y;\n  let xScale = v2/boxWidth;\n  let yScale = v3/boxHeight;\n\n  //console.log(xScale, yScale)\n\n  pt.x = (evt.clientX - xOffset)/boxWidth * width * xScale + v0;\n  pt.y = (evt.clientY - yOffset)/boxHeight * height * yScale + v1;\n\n  return pt;\n  //return pt.matrixTransform(svg.getScreenCTM().inverse());\n}\n\nconst deepcopy = (thing) => JSON.parse(JSON.stringify(thing));\n\nconst flattenDeep = (arr1) => {\n   return arr1.reduce((acc, val) => Array.isArray(val) ? acc.concat(flattenDeep(val)) : acc.concat(val), []);\n}\n\n//align curve directions\n\n//detect curves inside curves\n\n//generate uuid\nconst makeID = () => Math.random().toString(36).substr(2, 9); //id\n\n//check if number\nconst isNum = (str) => {\n  let regex = /[0-9.]+$/;\n  let found = str.match(regex);\n\n  if (found === null || found.length !== 1) {\n    return false\n  }\n\n  return str.match(regex)[0].length === str.length;\n}\n\nconst helpExtract = (p) => document.getElementsByName(p)[0].value;\n\n\nexport {\n  makeSeries,\n  editSVG,\n  download,\n  getSVGpoint,\n  deepcopy,\n  makeID,\n  isNum,\n  helpExtract,\n  flattenDeep\n}\n","// these are the default settings\nimport * as utils from './utils.js';\n\n//inputs\nlet cutDepth = 1;\nlet toolDiameter = 3;\nlet flutes = 1;\n\n// calculate from material and bit\nlet feedRate = 3600;\nlet plungeRate = 2100;\nlet passDepth = .6;\nlet rampAngle = 90;\n\n// from settings\nlet units = \"mm\"\n\n// default\nlet name = \"anon\"\nlet stepoverPercentage = 60;\nlet tolerance = 0;\nlet offset = \"outside\";\nlet jogHeight = 10;\nlet jogRate = 6000;\nlet tabs = false;\nlet tabThickness = 0;\nlet dogbone = false;\n//let millOuterFirst = false;\n//let climbDirection = false;\n\nexport const depthOfPasses = (cutDepthArg, passDepthArg) => {\n  let tempFloor = Math.ceil(cutDepthArg/passDepthArg); //should this be ceiling or floor, I think ceil\n  let actualPassDepth = cutDepthArg/tempFloor;\n\n  return utils.makeSeries(actualPassDepth, actualPassDepth, tempFloor).map(n => -n);\n};\n\nexport const params = {\n  name, //used\n  dogbone, //used\n  tabThickness, //used\n  tabs, //used\n  compensatedRadius: toolDiameter/2 + tolerance, //used\n  cutDepth, //used\n  passDepth, //used\n  jogHeight, //used\n  stepoverPercentage, //used\n  feedRate, //used\n  jogRate, //used\n  units, //used\n  plungeRate, //used\n  tolerance,\n  toolDiameter,\n  rampAngle,\n  // toolRadius: toolDiameter/2,\n  // flutes,\n}\n","import React from 'react';\n\n// const isPrimitive = (stroke) => {\n//   if (stroke.hasOwnProperty(\"type\")) {\n//\n//     if (stroke.type === \"line\" ||\n//         stroke.type === \"arc\" ||\n//         stroke.type === \"circle\" ||\n//         stroke.type === \"bezier\") {\n//           return true;\n//         } else {\n//           return false;\n//         }\n//\n//   } else {\n//     return false;\n//   }\n// }\n\nexport const line = (origin, end) => {\n  return {\n    type: \"line\",\n    origin,\n    end,\n  }\n}\n\nexport const connectPoints = (pointsArray) => {\n  let lines = [];\n  let lastPoint;\n\n  pointsArray.forEach((point, index) => {\n    if (index === 0) {\n      lastPoint = point;\n      return\n    } else {\n      lines.push(line(lastPoint, point));\n      lastPoint = point;\n    }\n  })\n\n  return lines;\n}\n\nexport const renderLine = (line, id, options = {} ) => {\n  let defaultOptions = {selected: false, highlighted: false, toolpath: false};\n  Object.keys(defaultOptions).forEach(key => {\n    if (!Object.keys(options).includes(key)) {\n      options[key] = defaultOptions[key];\n    }\n  })\n\n  let points = [line.origin, line.end];\n\n  let pathData = \"M \" + points.map(([x, y]) => `${x} ${y}`);\n\n  let color = \"black\";\n\n  if (options.selected) color = \"blue\";\n  if (options.highlighted) color = \"yellow\";\n  if (options.toolpath) color = \"red\";\n\n  let style = {\n        fill: \"none\",\n        strokeWidth: \"2px\",\n        stroke: color,\n        strokeLinejoin: \"round\",\n        strokeLinecap: \"round\",\n        opacity: \"1\",\n        vectorEffect: \"non-scaling-stroke\"\n      }\n\n  let path = <path d={pathData} style={style} key={id}/>;\n\n  return path;\n\n}\n\n// const arc = (origin, radius, startAngle, endAngle) => {\n//   return {\n//     type: \"arc\",\n//     origin,\n//     radius,\n//     startAngle,\n//     endAngle,\n//   }\n// }\n//\n// const circle = (origin, radius) => {\n//   return {\n//     type: \"circle\",\n//     origin,\n//     radius,\n//   }\n// }\n//\n// const bezier = (origin, cOrigin, end, cEnd) => {\n//   return {\n//     type: \"bezier\",\n//     origin,\n//     cOrigin,\n//     end,\n//     cEnd\n//   }\n// }\n","//This code is adapted from https://github.com/makercam/makercam/blob/master/src/clipperOffset.ts\n\nimport ClipperLib from 'js-clipper';\n\nimport {connectPoints} from './primitives.js';\n\nconst EndTypes = {\n    etOpenSquare: 0,\n    etOpenRound: 1,\n    etOpenButt: 2,\n    etClosedPolygon: 3,\n    etClosedLine: 4\n};\n\nconst JoinTypes = [\n    ClipperLib.JoinType.jtSquare,\n    ClipperLib.JoinType.jtRound,\n    ClipperLib.JoinType.jtMiter\n]\n\n// single contour -> list of offset contours\nexport const clipOffsetContour = (contour, offset, joints = 1, tolerance = 0.01) => {\n    const scale = 1000\n    let start = contour[0].origin;\n    let end = contour[contour.length - 1].end;\n    let endless = end.every((entry, i) => entry === start[i]);\n\n    // console.log(\"contour\", contour);\n\n    let keyPoints = contour.map(line => { return {X: Math.round(line.origin[0] * scale), Y: Math.round(line.origin[1] * scale)} });\n\n    if (endless) {\n        keyPoints.push(keyPoints[0]);\n    } else {\n        end = {X: Math.round(end[0] * scale), Y: Math.round(end[1] * scale)};\n        keyPoints.push(end);\n    }\n\n    let paths = [keyPoints]\n\n    // console.log(\"paths\", paths);\n\n    const co = new ClipperLib.ClipperOffset()\n    const offsetted = new ClipperLib.Paths()\n    co.Clear()\n    co.AddPaths(paths, JoinTypes[joints], endless ? EndTypes.etClosedLine : EndTypes.etOpenButt) //chain.endless ? EndTypes.etClosedLine : EndTypes.etOpenButt\n    co.MiterLimit = 2\n    co.ArcTolerance = 0.25\n    co.Execute(offsetted, offset * scale);\n\n    // console.log(\"offsetted\", offsetted)\n\n    // console.log(\"endless\",endless)\n\n    let newContours = []; //what should I return a list or a js object\n\n    // console.log(\"offsetted\", offsetted)\n\n    offsetted.forEach((points) => {\n        // console.log(\"points\", points)\n        if (points.length === 0) return\n        let result = []\n        points.forEach((point) => {\n            result.push([point.X / scale, point.Y / scale])\n        })\n\n        if (endless) result.push(result[0]); //to close it\n        // console.log(\"result\", result);\n        // console.log(\"connected\", connectPoints(result))\n\n        newContours.push(connectPoints(result));\n    })\n\n    // console.log(\"newContours\", newContours)\n\n    return newContours;\n}\n\n// list of contours -> list of offset contours\nexport const clipOffsetContours = (contours, offset, joints = 1, tolerance = 0.01) => {\n    const scale = 1000\n    const newContours = contours.reduce((memo, contour, i) => {\n        let start = contour[0].origin;\n        let end = contour[contour.length - 1].end;\n        let endless = end.every((entry, i) => entry === start[i]);\n\n        let keyPoints = contour.map(line => { return {X: Math.round(line.origin[0] * scale), Y: Math.round(line.origin[1] * scale)} });\n\n        if (endless) {\n            keyPoints.push(keyPoints[0])\n        }\n\n        let paths = [keyPoints]\n\n        const co = new ClipperLib.ClipperOffset()\n        const offsetted = new ClipperLib.Paths()\n        co.Clear()\n        co.AddPaths(paths, JoinTypes[joints], endless ? EndTypes.etClosedLine : EndTypes.etOpenButt)\n        co.MiterLimit = 2\n        co.ArcTolerance = 0.25\n        co.Execute(offsetted, offset * scale);\n        offsetted.forEach((points, j) => {\n            if (points.length === 0) return\n            let result = []\n            points.forEach((point: any) => {\n                result.push([point.X / scale, point.Y / scale])\n            })\n\n            if (endless) result.push(result[0]); //to close it\n            const newModel = connectPoints(result)\n\n            memo.push(newModel);\n        })\n        return memo\n    }, [])\n    return newContours;\n}\n","import {clipOffsetContour} from '../unmakerjs/clipper.js'\nimport {depthOfPasses} from '../parameters.js'\n\n\nconst offsetFunc = (offset) => {\n  if (offset === \"outside\") {\n    return false;\n  } else if (offset === \"inside\") {\n    return true;\n  } else if (offset === \"none\") {\n    return \"none\";\n  }\n}\n\nconst createToolpaths = (contour, params) => {\n  let outline;\n  let offset = offsetFunc(params.offset);\n  if (offset === \"none\") {\n    outline = [contour];\n  } else {\n    //outline = mjs.model.outline(p, params.compensatedRadius, 0, offset); //third parameter is what type of corners, 0 (rounded) by default\n    offset = (offset === true) ? -1 : 1;\n\n    outline = clipOffsetContour(contour, offset * params.compensatedRadius);\n  }\n\n  // outline = outline.flat(); //TODO: BUG this is a hack to deal with not raising the bit yet\n\n  return outline;\n}\n\nexport const profileGcode = (toolpaths, params) => {\n  toolpaths = toolpaths.flat(); //TODO: BUG this is a hack to deal with not raising the bit yet\n\n  let keyPoints = toolpaths.map(line => [line.origin[0], line.origin[1]]);\n\n  let gcodePoints = keyPoints.map(p => `G1 X${p[0]} Y${p[1]} F${params.feedRate}`)\n  //let gcode = JSON.parse(JSON.stringify(gcodePoints));\n\n  let firstPoint = keyPoints[0]; //TODO: BUG what if there are no key points\n\n  let passDepths = depthOfPasses(params.cutDepth, params.passDepth);\n\n  let paths = passDepths.map((p,i) => [\n    `G1 Z${passDepths[i]} F${params.plungeRate}`, //plunge rate\n    ...gcodePoints,\n    `G1 X${firstPoint[0]} Y${firstPoint[1]} F${params.feedRate}`\n  ])\n\n  paths = paths.flat(1);\n\n  let units;\n  if (params.units === \"in\") units = \"G20\";\n  if (params.units === \"mm\") units = \"G21\";\n\n  let preamble = [units, \"G90\"];\n\n  let gcode = [\n    ...preamble,\n    \"(end of preamble)\",\n    `G1 Z${params.jogHeight} F${params.jogRate}`,\n    `G0 X${firstPoint[0]} Y${firstPoint[1]}`,\n    ...paths,\n    `G1 Z${params.jogHeight} F${params.jogRate}`,\n  ]\n\n  let text = gcode.join('\\n');\n\n  return text\n}\n\nexport const profile = (contour, params) => {\n\n  let toolpaths = createToolpaths(contour, params);\n  // let gcode = profileGcode(toolpaths, params);\n\n  return {drawing: toolpaths, geometry: toolpaths};\n};\n","import {clipOffsetContour} from '../unmakerjs/clipper.js'\nimport {depthOfPasses} from '../parameters.js'\n\n\nconst len = (toolpath) => Object.keys(toolpath).length;\n\nconst isToolpath = (toolpath) => {\n  // console.log(\"toolpath\", toolpath);\n\n  if (len(toolpath) >= 1) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\nconst createToolpaths = (geo, params) => {\n  let contours = [];\n  let count = 0;\n\n  let pass = clipOffsetContour(geo, -params.compensatedRadius); //returns array of contours\n\n  if (isToolpath(pass) !== true) {\n    return contours;\n  }\n\n  while (isToolpath(pass)) {\n    contours.push(pass);\n    count++;\n    let lastPass = contours[count - 1];\n    // console.log(\"lastPass\", lastPass)\n    pass = lastPass.map(contour => clipOffsetContour(contour, -params.compensatedRadius * params.stepoverPercentage/100)).flat();\n\n  }\n\n  return contours.flat();\n}\n\nexport const pocketGcode = (toolpaths, params) => {\n  let keyPoints = toolpaths.map(outline => outline.map(line => [line.origin[0], line.origin[1]]));\n\n  // toolpaths = Object.values(toolpaths).flat(2);\n  // console.log(\"toolpaths\", toolpaths);\n\n  // console.log(\"keyPoints\", keyPoints);\n\n  let gcodePoints = keyPoints.map(points => {\n    let raise = points.length > 1;\n    let firstPoint = points[0];\n\n    firstPoint = `G1 X${firstPoint[0]} Y${firstPoint[1]} F${params.feedRate}`;\n\n    if (raise) {\n      return [\n        `G1 Z${params.jogHeight} F${params.jogRate}`,\n        firstPoint, //want to jog to this one\n        \"plunge\",\n        ...points.map(point => `G1 X${point[0]} Y${point[1]} F${params.feedRate}`),\n        firstPoint,\n        `G1 Z${params.jogHeight} F${params.jogRate}`,\n      ]\n    } else {\n      return [\n        firstPoint,\n        \"plunge\",\n        ...points.map(point => `G1 X${point[0]} Y${point[1]} F${params.feedRate}`),\n        firstPoint\n      ]\n    }\n  });\n\n  let paths = gcodePoints.flat();\n\n  // let firstPoint = keyPoints[0][0][0];\n\n  let passDepths = depthOfPasses(params.cutDepth, params.passDepth);\n\n  let paths2 = passDepths.map((p,i) => [\n    ...paths.map(x => (x === \"plunge\") ? `G1 Z${passDepths[i]} F${params.plungeRate}` : x), //plunge rate\n  ])\n\n  // console.log(paths2)\n\n  paths2 = paths2.flat();\n\n  let units;\n  if (params.units === \"in\") units = \"G20\";\n  if (params.units === \"mm\") units = \"G21\";\n\n  let preamble = [units, \"G90\"];\n\n  let gcode = [\n    ...preamble,\n    \"(end of preamble)\",\n    `G1 Z${params.jogHeight} F${params.jogRate}`,\n    // `G0 X${firstPoint[0]} Y${firstPoint[1]}`,\n    ...paths2,\n    `G1 Z${params.jogHeight} F${params.jogRate}`,\n  ]\n\n\n  let text = gcode.join('\\n');\n\n  return text;\n}\n\nexport const pocket = (contour, params) => {\n\n  let toolpaths = createToolpaths(contour, params);\n  //let gcode = pocketGcode(toolpaths, params)\n\n  return {drawing: toolpaths, geometry: toolpaths};\n};\n","import {line} from '../unmakerjs/primitives.js';\n\nconst linesToPolylinePoints = (lines, lastIndex) => lines.map((line, i) => { //should import this instead\n  if (i === lastIndex-1) return [{x:line.origin[0], y:line.origin[1]}, {x:line.end[0], y:line.end[1]}];\n\n  return {x:line.origin[0], y:line.origin[1]}\n}).flat()\n\n// let sum = (a, b) => a + b;\n\nconst getCenter = (contour) => {\n  let polyline = linesToPolylinePoints(contour);\n\n  let xS = polyline.map(point => point.x);\n  let medianX = (Math.max(...xS) + Math.min(...xS))/2\n  // let averageX = xS.reduce(sum, 0)/xS.length;\n\n  let yS = polyline.map(point => point.y);\n  let medianY = (Math.max(...yS) + Math.min(...yS))/2\n  // let averageY = yS.reduce(sum, 0)/yS.length;\n\n  // return [averageX, averageY];\n  return [medianX, medianY];\n\n}\n\nexport const drillGcode = (center, params) => {\n  let units;\n  if (params.units === \"in\") units = \"G20\";\n  if (params.units === \"mm\") units = \"G21\";\n\n  let preamble = [units, \"G90\"];\n\n  let gcode = [\n    ...preamble,\n    \"(end of preamble)\",\n    `G1 Z${params.jogHeight} F${params.jogRate}`,\n    `G0 X${center[0]} Y${center[1]}`,\n    `G1 Z-${params.cutDepth} F${params.plungeRate}`, //plunge rate\n    `G1 Z${params.jogHeight} F${params.jogRate}`,\n  ]\n\n  let text = gcode.join('\\n');\n\n  return text;\n}\n\nexport const drill = (contour, params) => {\n  let center = getCenter(contour);\n\n  // let gcode = drillGcode(center, params);\n\n  let drawing = [\n    [line([center[0] - params.compensatedRadius, center[1]], [center[0] + params.compensatedRadius, center[1]])],\n    [line([center[0], center[1] - params.compensatedRadius], [center[0], center[1] + params.compensatedRadius])]\n  ]\n\n  return {drawing, geometry: center};\n};\n","import createStore from 'pure-store';\nimport * as utils from './utils.js';\n\nimport {params} from './parameters.js';\nimport {profile} from './toolpaths/profile.js';\nimport {pocket} from './toolpaths/pocket.js';\nimport {drill} from './toolpaths/drill.js';\n\nimport {line} from './unmakerjs/primitives.js'\n\nlet testContour = [line([0,0],[40,40]), line([40,40],[20,40]), line([20,40],[0,0])];\nlet profileCut = profile(testContour, params);\nlet pocketCut = pocket(testContour, params);\nlet drillCut = drill(testContour, params);\n\n\nlet defaultParameters = params;\n\n\nconst store = createStore({\n  contours: {\n    3: testContour,\n  },\n  toolpaths:[\n    {\n      type: \"profile\",\n      name: \"Profile 1\",\n      parameters: defaultParameters,\n      sourceGeometryID: \"3\",\n      geometry: profileCut,\n      id: utils.makeID(),\n      cutSelected: false,\n      visible: true,\n    },\n    {\n      type: \"pocket\",\n      name: \"Pocket 1\",\n      parameters: defaultParameters,\n      sourceGeometryID: \"3\",\n      geometry: pocketCut,\n      id: utils.makeID(),\n      cutSelected: false,\n      visible: true,\n    },\n    {\n      type: \"drill\",\n      name: \"Drill 1\",\n      parameters: defaultParameters,\n      sourceGeometryID: \"3\",\n      geometry: drillCut,\n      id: utils.makeID(),\n      cutSelected: false,\n      visible: true,\n    },\n  ],\n  selected: [],\n  hovered: [],\n  material: \"wood\",\n  thickness: 34,\n  units: \"mm\",\n  zero: \"bottomleft\",\n  initialized: false,\n  defaultParameters: defaultParameters, //need to generate these from material, thickness, units\n});\n\nexport default store;\n","import React, { useState } from 'react';\nimport {bitChoice, presets6mm} from './millingCalculatorConstants.js'\n\nimport store from \"../store.js\";\n\nconst output = (input, rpm, presets6mm, presetDiameter, plungRateReductionFactor) => {\n  let {materialToCut, millingBitDiameter, numberOfFlutes} = input;\n\n  let feedrate = (presets6mm[materialToCut].chiploads * rpm * numberOfFlutes * millingBitDiameter)/presetDiameter;\n  let plungerate = feedrate * plungRateReductionFactor;\n\n  let fluteReduction = 1-numberOfFlutes*.15;\n\n  let passDepth = presets6mm[materialToCut].passdepths/presetDiameter*millingBitDiameter*(fluteReduction);\n  let rampAngle = presets6mm[materialToCut].rampAngle;\n\n  return {\n    feedrate,\n    plungerate,\n    passDepth,\n    rampAngle,\n  };\n}\n\nconst calculateSettings = (material, bitDiameter, numberOfFlutes, rpm, plungRateReductionFactor = 0.6) => {\n  let input = {\n    materialToCut: material,\n    millingBitDiameter: bitDiameter,\n    numberOfFlutes: numberOfFlutes,\n  };\n\n  return output(input, rpm, presets6mm, 6, plungRateReductionFactor);\n}\n\n\nexport const MillingCalculator = () => {\n  const [state, setState] = useState({\n    feedrate: 0,\n    plungerate: 0,\n    passDepth: 0,\n    rampAngle: 0,\n    rpmDisabled: true,\n    flutesDisabled: true,\n    bitDiameterDisabled: true,\n    submit2Disabled: true,\n    submit1Text: \"Submit to Enable Calculator\",\n  });\n\n  const submit1 = () => {\n    let material = document.getElementById(\"material\").value;\n    let materialThickness = parseFloat(document.getElementById(\"materialThickness\").value);\n\n    //aluminum, plastic, plywood, mdf\n    if (!isNaN(materialThickness)) {\n      let diameter;\n      let close = (bitChoice, materialThickness) => {\n        let counts = Object.keys(bitChoice).map(e => parseFloat(e));\n        let goal = materialThickness;\n\n        let found = false;\n        counts.forEach((count, index) => {\n          if (count >= goal && !found) {\n            found = true;\n            materialThickness = count;\n          }\n\n          if (goal > counts[counts.length-1]) {\n            materialThickness = count;\n          }\n        })\n\n        return materialThickness;\n      }\n\n      if (material === \"wood\") {\n        materialThickness = close(bitChoice[\"plywood\"], materialThickness);\n        diameter = bitChoice[\"plywood\"][materialThickness].diameter\n      };\n      if (material === \"hardwood\") {\n        materialThickness = close(bitChoice[\"plywood\"], materialThickness)\n        diameter = bitChoice[\"plywood\"][materialThickness].diameter\n      };\n      if (material === \"plastic_roughing\" || material === \"plastic_finishing\") {\n        materialThickness = close(bitChoice[\"plastic\"], materialThickness);\n        diameter = bitChoice[\"plastic\"][materialThickness].diameter\n      };\n      if (material === \"aluminum_roughing\" || material === \"aluminum_finishing\") {\n        materialThickness = close(bitChoice[\"aluminum\"], materialThickness)\n        diameter = bitChoice[\"aluminum\"][materialThickness].diameter\n      };\n      if (material === \"steel_roughing\" || material === \"steel_finishing\") {\n        materialThickness = close(bitChoice[\"steel\"], materialThickness)\n        diameter = bitChoice[\"aluminum\"][materialThickness].diameter\n      };\n      if (material === \"foam_or_wax\" || material === \"mdf\") {\n        materialThickness = close(bitChoice[\"mdf\"], materialThickness)\n        diameter = bitChoice[\"mdf\"][materialThickness].diameter\n      };\n\n      document.getElementById(\"bitDiameter\").value = diameter;\n      document.getElementById(\"flutes\").value = 1;\n      document.getElementById(\"rpm\").value = 18000;\n\n      submit2();\n    }\n  }\n\n  const submit2 = () => {\n    let materialThickness = parseFloat(document.getElementById(\"materialThickness\").value);\n    let material = document.getElementById(\"material\").value;\n    let bitDiameter = parseFloat(document.getElementById(\"bitDiameter\").value);\n    let flutes = parseFloat(document.getElementById(\"flutes\").value);\n    let rpm = parseFloat(document.getElementById(\"rpm\").value);\n\n    let set = calculateSettings(material, bitDiameter, flutes, rpm);\n\n    setState({\n      ...state,\n      feedrate: set.feedrate,\n      plungerate: set.plungerate,\n      passDepth: set.passDepth,\n      rampAngle: set.rampAngle,\n      submit2Disabled: false,\n      rpmDisabled: false,\n      flutesDisabled: false,\n      bitDiameterDisabled: false,\n      submit1Text: \"Suggest Bit\"\n    })\n\n    let current = store.state;\n\n    store.update({\n      ...current,\n      defaultParameters: {\n        ...current.defaultParameters,\n        feedRate: set.feedrate,\n        passDepth: set.passDepth,\n        plungeRate: set.plungerate,\n        rampAngle: set.rampAngle,\n        cutDepth: materialThickness,\n        toolDiameter: bitDiameter,\n      },\n      initialized: true,\n    })\n  }\n\n  return (\n    <div>\n      <b>Automill Calculator</b>\n      <form id=\"inputs\">\n        Material:\n        <select id=\"material\">\n          <option value=\"wood\">wood</option>\n          <option value=\"mdf\">mdf</option>\n          <option value=\"foam_or_wax\">foam_or_wax</option>\n          <option value=\"hardwood\">hardwood</option>\n          <option value=\"plastic_roughing\">plastic_roughing</option>\n          <option value=\"plastic_finishing\">plastic_finishing</option>\n          <option value=\"aluminum_roughing\">aluminum_roughing</option>\n          <option value=\"aluminum_finishing\">aluminum_finishing</option>\n          <option value=\"steel_roughing\">steel_roughing</option>\n          <option value=\"steel_finishing\">steel_finishing</option>\n        </select>\n        <br/>\n        Thickness: <input type=\"number\" id=\"materialThickness\"/> <br/>\n        Unit: mm\n      </form>\n      <button type=\"submit\" id=\"submit1\" onClick={submit1}>{state.submit1Text}</button>\n      <form id=\"inputs2\">\n         Bit Diameter: <input type=\"number\" id=\"bitDiameter\" disabled={state.bitDiameterDisabled}/> <br/>\n         Flutes: <input type=\"number\" id=\"flutes\" disabled={state.flutesDisabled}/> <br/>\n         RPM: <input type=\"number\" id=\"rpm\" disabled={state.rpmDisabled}/> <br/>\n      </form>\n      <button type=\"submit\" id=\"submit2\" onClick={submit2} disabled={state.submit2Disabled}>Re-calculate</button> <br/>\n      <br/>\n      <b>Settings</b> <br/>\n      Feed Rate: {state.feedrate} mm/min <br/>\n      Plunge Rate: {state.plungerate} mm/min <br/>\n      Pass Depth: {Math.round(state.passDepth * 100) / 100} mm <br/>\n      Ramp Angle: {state.rampAngle} degrees\n    </div>\n  )\n\n};\n","import React, { Component } from 'react';\n\nclass Workplane extends Component {\n\n  state = {\n      width: \"95%\",\n      height: \"95%\",\n      v0: 0,\n      v1: 0,\n      v2: 500,\n      v3: 500,\n    };\n\n  wheel(e) {\n    // let loc = utils.getSVGpoint(e, this.state.v0, this.state.v1, this.state.v2, this.state.v3 ,this.state.width, this.state.height);\n\n    if (e.ctrlKey) {\n\n      let zoomRate = 10;\n      //zooms to center now\n\n      if (e.deltaY < 0) {\n        //console.log('zoom in');\n\n        let v2 = (e.deltaY * zoomRate + this.state.v2 > 1) ? e.deltaY * zoomRate + this.state.v2 : this.state.v2;\n        let v3 = (e.deltaY * zoomRate + this.state.v3 > 1) ? e.deltaY * zoomRate + this.state.v3 : this.state.v3;\n\n        let v0 = this.state.v0 - e.deltaY * zoomRate/2;\n        let v1 = this.state.v1 - e.deltaY * zoomRate/2;\n        // console.log(\"e.deltaY * zoomRate\", e.deltaY * zoomRate)\n        // console.log(\"v0\", e.deltaY * zoomRate, v0)\n        // console.log(\"v1\", this.state.v1, v1)\n\n        this.setState({v0, v1, v2, v3})\n      }\n\n      if (e.deltaY > 0) {\n        //console.log('zoom out');\n\n        let v2 = e.deltaY * zoomRate + this.state.v2;\n        let v3 = e.deltaY * zoomRate + this.state.v3;\n\n        let v0 = this.state.v0 - e.deltaY * zoomRate/2;\n        let v1 = this.state.v1 - e.deltaY * zoomRate/2;\n\n        this.setState({v0,v1, v2, v3})\n      }\n\n      return\n    }\n\n    if (e.deltaY < 0) {\n      //console.log('scrolling up');\n\n      let v1 = this.state.v1 + e.deltaY;\n      this.setState({v1});\n    }\n    if (e.deltaY > 0) {\n      //console.log('scrolling down');\n\n      let v1 = this.state.v1 + e.deltaY;\n      this.setState({v1});\n    }\n    if (e.deltaX < 0) {\n      //console.log('scrolling left');\n\n      let v0 = this.state.v0 + e.deltaX;\n      this.setState({v0});\n    }\n    if (e.deltaX > 0) {\n      //console.log('scrolling right');\n\n      let v0 = this.state.v0 + e.deltaX;\n      this.setState({v0});\n    }\n  }\n\n  render() {\n\n    return (\n      <svg\n        width={this.state.width}\n        height={this.state.height}\n        viewBox={`${this.state.v0} ${this.state.v1} ${this.state.v2} ${this.state.v3}`}\n        xmlns={\"http://www.w3.org/2000/svg\"}\n        onWheel={(e) => this.wheel(e)}\n        style={{border: \"1px solid #cccccc\"}}\n        id=\"tempSVGID\">\n          {this.props.groups}\n      </svg>\n    );\n  }\n}\n\nexport {Workplane}\n\n// import React, { Component, useState} from 'react';\n// import * as utils from './utils.js';\n//\n//\n// const Workplane = ({groups}) => {\n//\n//   const [state, setState] = useState({\n//       width: 500,\n//       height: 500,\n//     });\n//\n//   const [v0, setV0] = useState(0);\n//   const [v1, setV1] = useState(0);\n//   const [v2, setV2] = useState(500);\n//   const [v3, setV3] = useState(500);\n//\n//   const wheel = (e) => {\n//     e.preventDefault();\n//     let loc = utils.getSVGpoint(e, v0, v1, v2, v3 ,state.width, state.height);\n//\n//     if (e.ctrlKey) {\n//\n//       let zoomRate = 10;\n//       //zooms to center now\n//\n//       if (e.deltaY < 0) {\n//         //console.log('zoom in');\n//\n//         let v2Temp = (e.deltaY * zoomRate + v2 > 1) ? e.deltaY * zoomRate + v2 : v2;\n//         let v3Temp = (e.deltaY * zoomRate + v3 > 1) ? e.deltaY * zoomRate + v3 : v3;\n//\n//         let v0Temp = v0 - e.deltaY * zoomRate/2;\n//         let v1Temp = v1 - e.deltaY * zoomRate/2;\n//         // console.log(\"e.deltaY * zoomRate\", e.deltaY * zoomRate)\n//         // console.log(\"v0\", e.deltaY * zoomRate, v0)\n//         // console.log(\"v1\", state.v1, v1)\n//\n//         setV0(v0Temp);\n//         setV1(v1Temp);\n//         setV2(v2Temp);\n//         setV3(v3Temp);\n//       }\n//\n//       if (e.deltaY > 0) {\n//         //console.log('zoom out');\n//\n//         let v2Temp = e.deltaY * zoomRate + v2;\n//         let v3Temp = e.deltaY * zoomRate + v3;\n//\n//         let v0Temp = v0 - e.deltaY * zoomRate/2;\n//         let v1Temp = v1 - e.deltaY * zoomRate/2;\n//\n//         setV0(v0Temp);\n//         setV1(v1Temp);\n//         setV2(v2Temp);\n//         setV3(v3Temp);\n//       }\n//\n//       return\n//     }\n//\n//     if (e.deltaY < 0) {\n//       console.log('scrolling up');\n//\n//       let v1Temp = v1 + e.deltaY;\n//       setV1(v1Temp);\n//     }\n//     if (e.deltaY > 0) {\n//       console.log('scrolling down');\n//\n//       let v1Temp = v1 + e.deltaY;\n//       setV1(v1Temp);\n//     }\n//     if (e.deltaX < 0) {\n//       console.log('scrolling left');\n//\n//       let v0Temp = v0 + e.deltaX;\n//       setV0(v0Temp);\n//     }\n//     if (e.deltaX > 0) {\n//       console.log('scrolling right');\n//\n//       let v0Temp = v0 + e.deltaX;\n//       setV0(v0Temp);\n//     }\n//   }\n//\n//   console.log(v0, v1)\n//\n//   return (\n//       <svg\n//         width={state.width}\n//         height={state.height}\n//         viewBox={`${v0} ${v1} ${v2} ${v3}`}\n//         xmlns={\"http://www.w3.org/2000/svg\"}\n//         onWheel={(e) => wheel(e)}\n//         style={{border: \"1px solid #cccccc\"}}>\n//\n//           {groups}\n//       </svg>\n//   );\n//\n// }\n//\n// export {Workplane}\n","import React, { useState } from 'react';\nimport {Button, Dialog, TextInputField, SegmentedControl, Heading} from 'evergreen-ui';\nimport * as utils from '../utils.js';\nimport {pocket} from '../toolpaths/pocket.js';\n\nimport store from '../store.js';\n\nconst PocketButton = ({ disabled }) => {\n\n  const [state, setState] = useState({\n    isShown: false,\n    nameValid: true,\n    cutDepthValid: true,\n    toolDiameterValid: true,\n    stepoverPercentageValid: true,\n    toleranceValid: true,\n    jogHeightValid: true,\n    jogRateValid: true,\n    feedRateValid: true,\n    dogboneTemp: store.getState().defaultParameters.dogbone,\n  });\n\n  if ((state.dogboneTemp !== store.getState().defaultParameters.dogbone) && !state.isShown) {\n    console.log(\"bug fixin time\")\n    setState({\n      ...state,\n      dogboneTemp: store.getState().defaultParameters.dogbone,\n    })\n  }\n\n  return (\n      <div>\n        <Dialog\n          isShown={state.isShown}\n          title=\"Settings for this Pocket Cut\"\n          onCloseComplete={() => setState({\n            ...state,\n            isShown:false,\n            showAdvanced: false,\n            dogboneTemp: store.getState().defaultParameters.dogbone,\n          })}\n          onConfirm={() => {\n\n            let valid = state.nameValid &&\n                        state.cutDepthValid &&\n                        state.toolDiameterValid &&\n                        state.stepoverPercentageValid &&\n                        state.toleranceValid &&\n                        state.jogHeightValid &&\n                        state.jogRateValid &&\n                        state.feedRateValid;\n            if (valid) {\n\n              let name = utils.helpExtract(\"name\");\n              let cutDepth = Number(utils.helpExtract(\"cutDepth\"));\n              let toolDiameter = Number(utils.helpExtract(\"toolDiameter\"));\n              let stepoverPercentage = Number(utils.helpExtract(\"stepoverPercentage\")); //must be between 1 and 100%\n              let tolerance = Number(utils.helpExtract(\"tolerance\"));\n              let jogHeight = Number(utils.helpExtract(\"jogHeight\"));\n              let jogRate = Number(utils.helpExtract(\"jogRate\"));\n              let feedRate = Number(utils.helpExtract(\"feedRate\"));\n\n              if (utils.helpExtract(\"name\") === \"\") name = store.getState().defaultParameters.name;\n              if (utils.helpExtract(\"cutDepth\") === \"\") cutDepth = store.getState().defaultParameters.cutDepth;\n              if (utils.helpExtract(\"toolDiameter\") === \"\") toolDiameter = store.getState().defaultParameters.toolDiameter;\n              if (utils.helpExtract(\"stepoverPercentage\") === \"\") stepoverPercentage = store.getState().defaultParameters.stepoverPercentage; //must be between 1 and 100%\n              if (utils.helpExtract(\"tolerance\") === \"\") tolerance = store.getState().defaultParameters.tolerance;\n              if (utils.helpExtract(\"jogHeight\") === \"\") jogHeight = store.getState().defaultParameters.jogHeight;\n              if (utils.helpExtract(\"jogRate\") === \"\") jogRate = store.getState().defaultParameters.jogRate;\n              if (utils.helpExtract(\"feedRate\") === \"\") feedRate = store.getState().defaultParameters.feedRate;\n\n              if (isNaN(cutDepth)) cutDepth = store.getState().defaultParameters.cutDepth;\n              if (isNaN(toolDiameter)) toolDiameter = store.getState().defaultParameters.toolDiameter;\n              if (isNaN(stepoverPercentage)) stepoverPercentage = store.getState().defaultParameters.stepoverPercentage; //must be between 1 and 100%\n              if (isNaN(tolerance)) tolerance = store.getState().defaultParameters.tolerance;\n              if (isNaN(jogHeight)) jogHeight = store.getState().defaultParameters.jogHeight;\n              if (isNaN(jogRate)) jogRate = store.getState().defaultParameters.jogRate;\n              if (isNaN(feedRate)) feedRate = store.getState().defaultParameters.feedRate;\n\n              let dogbone = state.dogboneTemp;\n\n              //derived parameters\n              let passDepth = toolDiameter/2;\n              let toolRadius = toolDiameter/2;\n              let compensatedRadius = toolRadius + tolerance;\n              let tempFloor = Math.ceil(cutDepth/passDepth); //should this be ceiling or floor, I think ceil\n              let actualPassDepth = cutDepth/tempFloor;\n              let depthOfPasses = utils.makeSeries(actualPassDepth, actualPassDepth, tempFloor).map(n => -n);\n\n              //settings will be compiled to a single object here\n              let parameters = utils.deepcopy(store.getState().defaultParameters);\n\n              parameters[\"dogbone\"] = dogbone;\n\n              if (!isNaN(tolerance)) { parameters[\"tolerance\"] = tolerance; }\n\n              if (!isNaN(toolDiameter)) {\n                parameters[\"toolDiameter\"] = toolDiameter;\n                parameters[\"compensatedRadius\"] = compensatedRadius;\n\n              }\n              if (!isNaN(cutDepth)) {\n                parameters[\"cutDepth\"] = cutDepth;\n                parameters[\"depthOfPasses\"] = depthOfPasses;\n              }\n              if (!isNaN(feedRate)) { parameters[\"feedRate\"] = feedRate; }\n              if (!isNaN(jogHeight)) { parameters[\"jogHeight\"] = jogHeight; }\n              if (!isNaN(jogRate)) { parameters[\"jogRate\"] = jogRate; }\n\n              if (!isNaN(stepoverPercentage)) {\n                //stepoverPercentage = stepoverPercentage/100;\n                parameters[\"stepoverPercentage\"] = stepoverPercentage;\n              }\n\n              //console.log(\"parameters\", parameters);\n\n              setState({\n                ...state,\n                isShown:false,\n              });\n\n              //TODO: create toolpath with parameter settings here\n              let oldToolpaths = store.state.toolpaths;\n              let newPockets = store.state.selected.map(path => {\n\n                return {\n                  type: \"pocket\",\n                  name: name,\n                  parameters: parameters,\n                  sourceGeometryID: path,\n                  geometry: pocket(store.state.contours[path], parameters),\n                  id: utils.makeID(),\n                  cutSelected: false,\n                  visible: true,\n                }\n              })\n\n              let newToolpaths = [...oldToolpaths, ...newPockets];\n\n              console.log(\"newToolpaths\", newToolpaths);\n\n              store.update({toolpaths:newToolpaths});\n\n            }\n          }}>\n\n          <TextInputField\n            onChange={e => {\n              let valid = utils.isNum(e.target.value);\n              setState({...state, cutDepthValid:valid})\n            }}\n            isInvalid={!state.cutDepthValid}\n            name=\"cutDepth\"\n            description={(state.cutDepthValid) ? \"\" : \"please enter a valid number\"}\n            label=\"Depth of Cut for this Pocket\"\n            placeholder={String(store.getState().defaultParameters.cutDepth)}/>\n\n          <TextInputField\n            marginTop={20}\n            onChange={e => {\n              let valid = utils.isNum(e.target.value);\n              setState({...state, toolDiameterValid:valid})\n            }}\n            isInvalid={!state.toolDiameterValid}\n            name=\"toolDiameter\"\n            description={(state.toolDiameterValid) ? \"\" : \"please enter a valid number\"}\n            label=\"Tool Diameter\"\n            placeholder={String(store.getState().defaultParameters.toolDiameter)}/>\n\n          <TextInputField\n            onChange={e => {\n              let valid = utils.isNum(e.target.value);\n              valid = 0 < Number(e.target.value) && Number(e.target.value) <= 100;\n              //process value here\n              setState({...state, stepoverPercentageValid:valid})\n            }}\n            isInvalid={!state.stepoverPercentageValid}\n            name=\"stepoverPercentage\"\n            description={(state.stepoverPercentageValid) ? \"\" : \"please enter a valid number\"}\n            label=\"Stepover Percentage\"\n            placeholder={String(store.getState().defaultParameters.stepoverPercentage)}/>\n\n            <TextInputField\n              onChange={e => {\n                let valid = utils.isNum(e.target.value);\n                setState({...state, feedRateValid:valid})\n              }}\n              isInvalid={!state.feedRateValid}\n              name=\"feedRate\"\n              description={(state.feedRateValid) ? \"\" : \"please enter a valid number\"}\n              label=\"Feed Rate\"\n              placeholder={String(store.getState().defaultParameters.feedRate)}/>\n\n            <TextInputField\n              onChange={e => {\n                let valid = utils.isNum(e.target.value);\n                setState({...state, toleranceValid:valid})\n              }}\n              isInvalid={!state.toleranceValid}\n              name=\"tolerance\"\n              description={(state.toleranceValid) ? \"\" : \"please enter a valid number\"}\n              label=\"Tolerance\"\n              placeholder={String(store.getState().defaultParameters.tolerance)}/>\n\n            <TextInputField\n              onChange={e => {\n                let valid = utils.isNum(e.target.value);\n                setState({...state, jogRateValid:valid})\n              }}\n              isInvalid={!state.jogRateValid}\n              name=\"jogRate\"\n              description={(state.jogRateValid) ? \"\" : \"please enter a valid number\"}\n              label=\"Jog Rate\"\n              placeholder={String(store.getState().defaultParameters.jogRate)}/>\n\n              <TextInputField\n                onChange={e => {\n                  let valid = utils.isNum(e.target.value);\n                  setState({...state, jogHeightValid:valid})\n                }}\n                isInvalid={!state.jogHeightValid}\n                name=\"jogHeight\"\n                description={(state.jogHeightValid) ? \"\" : \"please enter a valid number\"}\n                label=\"Jog Height\"\n                placeholder={String(store.getState().defaultParameters.jogHeight)}/>\n\n              <Heading marginTop={20} size={400} color={\"rgba(67, 90, 111, .91)\"}>Auto Dogbone</Heading>\n              <SegmentedControl\n                marginTop={4}\n                options={[\n                  { label: 'true', value: true },\n                  { label: 'false', value: false },\n                ]}\n                value={state.dogboneTemp}\n                onChange={value => {\n                  let dogboneTemp = value;\n                  setState({...state, dogboneTemp });\n                }}\n              />\n\n              <TextInputField\n                marginTop={20}\n                onChange={e => {\n                  let valid = e.target.value !== \"\";\n                  setState({...state, nameValid:valid})\n                }}\n                isInvalid={!state.nameValid}\n                name=\"name\"\n                description={(state.nameValid) ? \"\" : \"please enter something\"}\n                label=\"Name for this Pocket\"\n                placeholder={String(store.getState().defaultParameters.name)}/>\n\n        </Dialog>\n        <Button disabled={disabled} onClick={() => setState({...state, isShown:true})}>Pocket</Button>\n      </div>\n    );\n}\n\nexport {PocketButton};\n","import React, { useState } from 'react';\nimport {Button, Dialog, TextInputField, SegmentedControl, Heading} from 'evergreen-ui';\nimport * as utils from '../utils.js';\nimport {profile} from '../toolpaths/profile.js';\n\nimport store from '../store.js';\n\nconst ProfileButton = ({disabled}) => {\n\n  const [state, setState] = useState({\n    isShown: false,\n    nameValid: true,\n    cutDepthValid: true,\n    toolDiameterValid: true,\n    toleranceValid: true,\n    jogHeightValid: true,\n    jogRateValid: true,\n    feedRateValid: true,\n    tabThicknessValid: true,\n    offsetTemp: store.state.defaultParameters.offset,\n    tabsTemp: store.state.defaultParameters.tabs,\n    dogboneTemp: store.state.defaultParameters.dogbone,\n  });\n\n  if (((state.offsetTemp !== store.getState().defaultParameters.offset) ||\n      (state.tabsTemp !== store.getState().defaultParameters.tabs) ||\n      (state.dogboneTemp !== store.getState().defaultParameters.dogbone)) &&\n      !state.isShown) {\n    console.log(\"bug fixin time\")\n    setState({\n      ...state,\n      offsetTemp: store.state.defaultParameters.offset,\n      tabsTemp: store.state.defaultParameters.tabs,\n      dogboneTemp: store.state.defaultParameters.dogbone,\n    })\n  }\n\n  const validateSubmit = () => {\n\n    let valid = state.nameValid &&\n                state.cutDepthValid &&\n                state.toolDiameterValid &&\n                state.toleranceValid &&\n                state.jogHeightValid &&\n                state.jogRateValid &&\n                state.feedRateValid;\n    if (valid) {\n\n      let name = utils.helpExtract(\"name\");\n      let cutDepth = Number(utils.helpExtract(\"cutDepth\"));\n      let toolDiameter = Number(utils.helpExtract(\"toolDiameter\"));\n      let tolerance = Number(utils.helpExtract(\"tolerance\"));\n      let jogHeight = Number(utils.helpExtract(\"jogHeight\"));\n      let jogRate = Number(utils.helpExtract(\"jogRate\"));\n      let feedRate = Number(utils.helpExtract(\"feedRate\"));\n      let tabThickness = Number(utils.helpExtract(\"tabThickness\"));\n\n      if (utils.helpExtract(\"name\") === \"\") name = store.getState().defaultParameters.name;\n      if (utils.helpExtract(\"cutDepth\") === \"\") cutDepth = store.getState().defaultParameters.cutDepth;\n      if (utils.helpExtract(\"toolDiameter\") === \"\") toolDiameter = store.getState().defaultParameters.toolDiameter;\n      if (utils.helpExtract(\"tolerance\") === \"\") tolerance = store.getState().defaultParameters.tolerance;\n      if (utils.helpExtract(\"jogHeight\") === \"\") jogHeight = store.getState().defaultParameters.jogHeight;\n      if (utils.helpExtract(\"jogRate\") === \"\") jogRate = store.getState().defaultParameters.jogRate;\n      if (utils.helpExtract(\"feedRate\") === \"\") feedRate = store.getState().defaultParameters.feedRate;\n      if (utils.helpExtract(\"tabThickness\") === \"\") tabThickness = store.getState().defaultParameters.tabThickness;\n\n      if (isNaN(cutDepth)) cutDepth = store.getState().defaultParameters.cutDepth;\n      if (isNaN(toolDiameter)) toolDiameter = store.getState().defaultParameters.toolDiameter;\n      if (isNaN(tolerance)) tolerance = store.getState().defaultParameters.tolerance;\n      if (isNaN(jogHeight)) jogHeight = store.getState().defaultParameters.jogHeight;\n      if (isNaN(jogRate)) jogRate = store.getState().defaultParameters.jogRate;\n      if (isNaN(feedRate)) feedRate = store.getState().defaultParameters.feedRate;\n      if (isNaN(tabThickness)) tabThickness = store.getState().defaultParameters.tabThickness;\n\n      let dogbone = state.dogboneTemp;\n      let tabs = state.tabsTemp;\n      let offset = state.offsetTemp;\n\n      //derived parameters\n      let passDepth = toolDiameter/2;\n      let toolRadius = toolDiameter/2;\n      let compensatedRadius = toolRadius + tolerance;\n      let tempFloor = Math.ceil(cutDepth/passDepth); //should this be ceiling or floor, I think ceil\n      let actualPassDepth = cutDepth/tempFloor;\n      let depthOfPasses = utils.makeSeries(actualPassDepth, actualPassDepth, tempFloor).map(n => -n);\n\n      //settings will be compiled to a single object here\n      let parameters = utils.deepcopy(store.state.defaultParameters);\n\n      parameters[\"dogbone\"] = dogbone;\n      parameters[\"tabs\"] = tabs;\n      parameters[\"offset\"] = offset;\n      parameters[\"tolerance\"] = tolerance;\n      parameters[\"tabThickness\"] = tabThickness;\n      parameters[\"toolDiameter\"] = toolDiameter;\n      parameters[\"compensatedRadius\"] = compensatedRadius;\n      parameters[\"cutDepth\"] = cutDepth;\n      parameters[\"depthOfPasses\"] = depthOfPasses;\n      parameters[\"feedRate\"] = feedRate;\n      parameters[\"jogHeight\"] = jogHeight;\n      parameters[\"jogRate\"] = jogRate;\n      // parameters[\"insideCutting\"] = insideCutting;\n\n      //console.log(\"parameters\", parameters);\n\n      setState({\n        ...state,\n        isShown:false,\n      });\n\n      //update app state here\n      let oldToolpaths = store.state.toolpaths;\n      let newProfiles = store.state.selected.map(path => {\n\n        return {\n          type: \"profile\",\n          name: name,\n          parameters: parameters,\n          sourceGeometryID: path,\n          geometry: profile(store.state.contours[path], parameters),\n          id: utils.makeID(),\n          cutSelected: false,\n          visible: true,\n        }\n      })\n\n      let newToolpaths = [...oldToolpaths, ...newProfiles];\n\n      // console.log(\"newToolpaths\", newToolpaths);\n\n      store.update({toolpaths:newToolpaths});\n\n    }\n  }\n\n  return (\n    <div>\n      <Dialog\n        isShown={state.isShown}\n        title={\"Settings for this Profile Cut\"}\n        onCloseComplete={() => {\n          setState({\n            ...state,\n            isShown:false,\n            dogboneTemp: store.getState().defaultParameters.dogbone,\n            tabsTemp: store.getState().defaultParameters.tabs,\n            offsetTemp: store.getState().defaultParameters.offset,\n          })\n        }}\n        onConfirm={validateSubmit}>\n\n        <TextInputField\n          onChange={e => {\n            let valid = utils.isNum(e.target.value);\n            setState({...state, cutDepthValid:valid})\n          }}\n          isInvalid={!state.cutDepthValid}\n          name=\"cutDepth\"\n          description={(state.cutDepthValid) ? \"\" : \"please enter a valid number\"}\n          label=\"Depth of Cut\"\n          placeholder={String(store.getState().defaultParameters.cutDepth)}/>\n\n        <TextInputField\n          onChange={e => {\n            let valid = utils.isNum(e.target.value);\n            setState({...state, toolDiameterValid:valid})\n          }}\n          isInvalid={!state.toolDiameterValid}\n          name=\"toolDiameter\"\n          description={(state.toolDiameterValid) ? \"\" : \"please enter a valid number\"}\n          label=\"Tool Diameter\"\n          placeholder={String(store.getState().defaultParameters.toolDiameter)}/>\n\n          <TextInputField\n            onChange={e => {\n              let valid = utils.isNum(e.target.value);\n              setState({...state, feedRateValid:valid})\n            }}\n            isInvalid={!state.feedRateValid}\n            name=\"feedRate\"\n            description={(state.feedRateValid) ? \"\" : \"please enter a valid number\"}\n            label=\"Feed Rate\"\n            placeholder={String(store.getState().defaultParameters.feedRate)}/>\n\n            <TextInputField\n              onChange={e => {\n                let valid = utils.isNum(e.target.value);\n                setState({...state, toleranceValid:valid})\n              }}\n              isInvalid={!state.toleranceValid}\n              name=\"tolerance\"\n              description={(state.toleranceValid) ? \"\" : \"please enter a valid number\"}\n              label=\"Tolerance\"\n              placeholder={String(store.getState().defaultParameters.tolerance)}/>\n\n          <TextInputField\n            onChange={e => {\n              let valid = utils.isNum(e.target.value);\n              setState({...state, jogRateValid:valid})\n            }}\n            isInvalid={!state.jogRateValid}\n            name=\"jogRate\"\n            description={(state.jogRateValid) ? \"\" : \"please enter a valid number\"}\n            label=\"Jog Rate\"\n            placeholder={String(store.getState().defaultParameters.jogRate)}/>\n\n            <TextInputField\n              onChange={e => {\n                let valid = utils.isNum(e.target.value);\n                setState({...state, jogHeightValid:valid})\n              }}\n              isInvalid={!state.jogHeightValid}\n              name=\"jogHeight\"\n              description={(state.jogHeightValid) ? \"\" : \"please enter a valid number\"}\n              label=\"Jog Height\"\n              placeholder={String(store.getState().defaultParameters.jogHeight)}/>\n\n            <Heading marginTop={8} size={400} color={\"rgba(67, 90, 111, .91)\"}>Offset Direction</Heading>\n            <SegmentedControl\n              marginTop={4}\n              options={[\n                { label: 'outside', value: \"outside\" },\n                { label: 'inside', value: \"inside\" },\n                { label: 'none', value: \"none\"}\n              ]}\n              value={state.offsetTemp}\n              onChange={value => {\n                let offsetTemp = value;\n                setState({...state, offsetTemp });\n              }}\n            />\n\n            <Heading marginTop={20} size={400} color={\"rgba(67, 90, 111, .91)\"}>Auto Tabs</Heading>\n            <SegmentedControl\n              marginTop={4}\n              options={[\n                { label: 'true', value: true },\n                { label: 'false', value: false },\n              ]}\n              value={state.tabsTemp}\n              onChange={value => {\n                let tabsTemp = value;\n                setState({...state, tabsTemp });\n              }}\n            />\n\n            <TextInputField\n              marginTop={20}\n              onChange={e => {\n                let valid = utils.isNum(e.target.value);\n                setState({...state, tabThicknessValid:valid})\n              }}\n              isInvalid={!state.tabThicknessValid}\n              name=\"tabThickness\"\n              description={(state.tabThicknessValid) ? \"\" : \"please enter a valid number\"}\n              label=\"Tab Thickness\"\n              placeholder={String(store.getState().defaultParameters.tabThickness)}/>\n\n            <Heading marginTop={20} size={400} color={\"rgba(67, 90, 111, .91)\"}>Auto Dogbone</Heading>\n            <SegmentedControl\n              marginTop={4}\n              options={[\n                { label: 'true', value: true },\n                { label: 'false', value: false },\n              ]}\n              value={state.dogboneTemp}\n              onChange={value => {\n                let dogboneTemp = value;\n                setState({...state, dogboneTemp });\n              }}\n            />\n\n            <TextInputField\n              marginTop={20}\n              onChange={e => {\n                let valid = e.target.value !== \"\";\n                setState({...state, nameValid:valid})\n              }}\n              isInvalid={!state.nameValid}\n              name=\"name\"\n              description={(state.nameValid) ? \"\" : \"please enter something\"}\n              label=\"Name for this Profile\"\n              placeholder={String(store.getState().defaultParameters.name)}/>\n\n      </Dialog>\n      <Button disabled={disabled} onClick={() => setState({...state, isShown:true})}>Profile</Button>\n    </div>\n  );\n\n}\n\nexport {ProfileButton};\n","import React, { useState } from 'react';\nimport {Button, Dialog, TextInputField} from 'evergreen-ui';\nimport * as utils from '../utils.js';\nimport {drill} from '../toolpaths/drill.js';\n\nimport store from '../store.js';\n\nconst DrillButton = ({disabled}) => {\n\n  const [state, setState] = useState({\n    isShown: false,\n    nameValid: true,\n    cutDepthValid: true,\n    toolDiameterValid: true,\n    toleranceValid: true,\n    jogHeightValid: true,\n    jogRateValid: true,\n    feedRateValid: true,\n  });\n\n  const validateSubmit = () => {\n\n    let valid = state.nameValid &&\n                state.cutDepthValid &&\n                state.toolDiameterValid &&\n                state.toleranceValid &&\n                state.jogHeightValid &&\n                state.jogRateValid &&\n                state.feedRateValid;\n    if (valid) {\n\n      let name = utils.helpExtract(\"name\");\n      let cutDepth = Number(utils.helpExtract(\"cutDepth\"));\n      let toolDiameter = Number(utils.helpExtract(\"toolDiameter\"));\n      let tolerance = Number(utils.helpExtract(\"tolerance\"));\n      let jogHeight = Number(utils.helpExtract(\"jogHeight\"));\n      let jogRate = Number(utils.helpExtract(\"jogRate\"));\n      let feedRate = Number(utils.helpExtract(\"feedRate\"));\n\n      if (utils.helpExtract(\"name\") === \"\") name = store.getState().defaultParameters.name;\n      if (utils.helpExtract(\"cutDepth\") === \"\") cutDepth = store.getState().defaultParameters.cutDepth;\n      if (utils.helpExtract(\"toolDiameter\") === \"\") toolDiameter = store.getState().defaultParameters.toolDiameter;\n      if (utils.helpExtract(\"tolerance\") === \"\") tolerance = store.getState().defaultParameters.tolerance;\n      if (utils.helpExtract(\"jogHeight\") === \"\") jogHeight = store.getState().defaultParameters.jogHeight;\n      if (utils.helpExtract(\"jogRate\") === \"\") jogRate = store.getState().defaultParameters.jogRate;\n      if (utils.helpExtract(\"feedRate\") === \"\") feedRate = store.getState().defaultParameters.feedRate;\n\n      if (isNaN(cutDepth)) cutDepth = store.getState().defaultParameters.cutDepth;\n      if (isNaN(toolDiameter)) toolDiameter = store.getState().defaultParameters.toolDiameter;\n      if (isNaN(tolerance)) tolerance = store.getState().defaultParameters.tolerance;\n      if (isNaN(jogHeight)) jogHeight = store.getState().defaultParameters.jogHeight;\n      if (isNaN(jogRate)) jogRate = store.getState().defaultParameters.jogRate;\n      if (isNaN(feedRate)) feedRate = store.getState().defaultParameters.feedRate;\n\n\n      //derived parameters\n      let toolRadius = toolDiameter/2;\n      let compensatedRadius = toolRadius + tolerance;\n\n      //settings will be compiled to a single object here\n      let parameters = utils.deepcopy(store.state.defaultParameters);\n\n      parameters[\"cutDepth\"] = cutDepth;\n      parameters[\"toolDiameter\"] = toolDiameter;\n      parameters[\"tolerance\"] = tolerance;\n      parameters[\"compensatedRadius\"] = compensatedRadius;\n      parameters[\"feedRate\"] = feedRate;\n      parameters[\"jogHeight\"] = jogHeight;\n      parameters[\"jogRate\"] = jogRate;\n      // parameters[\"insideCutting\"] = insideCutting;\n\n      //console.log(\"parameters\", parameters);\n\n      setState({\n        ...state,\n        isShown:false,\n      });\n\n      //update app state here\n      let oldToolpaths = store.state.toolpaths;\n      let newProfiles = store.state.selected.map(path => {\n\n        return {\n          type: \"drill\",\n          name: name,\n          parameters: parameters,\n          sourceGeometryID: path,\n          geometry: drill(store.state.contours[path], parameters),\n          id: utils.makeID(),\n          cutSelected: false,\n          visible: true,\n        }\n      })\n\n      let newToolpaths = [...oldToolpaths, ...newProfiles];\n\n      // console.log(\"newToolpaths\", newToolpaths);\n\n      store.update({toolpaths:newToolpaths});\n\n    }\n  }\n\n  return (\n    <div>\n      <Dialog\n        isShown={state.isShown}\n        title={\"Settings for this Drill Cut\"}\n        onCloseComplete={() => {\n          setState({\n            ...state,\n            isShown:false,\n          })\n        }}\n        onConfirm={validateSubmit}>\n\n        <TextInputField\n          onChange={e => {\n            let valid = utils.isNum(e.target.value);\n            setState({...state, cutDepthValid:valid})\n          }}\n          isInvalid={!state.cutDepthValid}\n          name=\"cutDepth\"\n          description={(state.cutDepthValid) ? \"\" : \"please enter a valid number\"}\n          label=\"Depth of Cut\"\n          placeholder={String(store.getState().defaultParameters.cutDepth)}/>\n\n        <TextInputField\n          onChange={e => {\n            let valid = utils.isNum(e.target.value);\n            setState({...state, toolDiameterValid:valid})\n          }}\n          isInvalid={!state.toolDiameterValid}\n          name=\"toolDiameter\"\n          description={(state.toolDiameterValid) ? \"\" : \"please enter a valid number\"}\n          label=\"Tool Diameter\"\n          placeholder={String(store.getState().defaultParameters.toolDiameter)}/>\n\n          <TextInputField\n            onChange={e => {\n              let valid = utils.isNum(e.target.value);\n              setState({...state, feedRateValid:valid})\n            }}\n            isInvalid={!state.feedRateValid}\n            name=\"feedRate\"\n            description={(state.feedRateValid) ? \"\" : \"please enter a valid number\"}\n            label=\"Feed Rate\"\n            placeholder={String(store.getState().defaultParameters.feedRate)}/>\n\n            <TextInputField\n              onChange={e => {\n                let valid = utils.isNum(e.target.value);\n                setState({...state, toleranceValid:valid})\n              }}\n              isInvalid={!state.toleranceValid}\n              name=\"tolerance\"\n              description={(state.toleranceValid) ? \"\" : \"please enter a valid number\"}\n              label=\"Tolerance\"\n              placeholder={String(store.getState().defaultParameters.tolerance)}/>\n\n          <TextInputField\n            onChange={e => {\n              let valid = utils.isNum(e.target.value);\n              setState({...state, jogRateValid:valid})\n            }}\n            isInvalid={!state.jogRateValid}\n            name=\"jogRate\"\n            description={(state.jogRateValid) ? \"\" : \"please enter a valid number\"}\n            label=\"Jog Rate\"\n            placeholder={String(store.getState().defaultParameters.jogRate)}/>\n\n            <TextInputField\n              onChange={e => {\n                let valid = utils.isNum(e.target.value);\n                setState({...state, jogHeightValid:valid})\n              }}\n              isInvalid={!state.jogHeightValid}\n              name=\"jogHeight\"\n              description={(state.jogHeightValid) ? \"\" : \"please enter a valid number\"}\n              label=\"Jog Height\"\n              placeholder={String(store.getState().defaultParameters.jogHeight)}/>\n\n            <TextInputField\n              marginTop={20}\n              onChange={e => {\n                let valid = e.target.value !== \"\";\n                setState({...state, nameValid:valid})\n              }}\n              isInvalid={!state.nameValid}\n              name=\"name\"\n              description={(state.nameValid) ? \"\" : \"please enter something\"}\n              label=\"Name for this Profile\"\n              placeholder={String(store.getState().defaultParameters.name)}/>\n\n      </Dialog>\n      <Button\n        disabled={disabled}\n        onClick={() => setState({...state, isShown:true})}>\n        Drill\n      </Button>\n    </div>\n  );\n}\n\nexport {DrillButton};\n","import React, { useState } from 'react';\nimport {Dialog, TextInputField, SegmentedControl, Heading, Link} from 'evergreen-ui';\nimport * as utils from '../utils.js';\nimport store from '../store.js';\nimport {profile} from '../toolpaths/profile.js';\nimport {pocket} from '../toolpaths/pocket.js';\nimport {drill} from '../toolpaths/drill.js';\n\nconst AdvancedOptions = ({params, setDefault, name, disabled, index}) => {\n\n  const [state, setState] = useState({\n    isShown: false,\n    nameValid: true,\n    cutDepthValid: true,\n    toolDiameterValid: true,\n    stepoverPercentageValid: true,\n    toleranceValid: true,\n    jogHeightValid: true,\n    jogRateValid: true,\n    feedRateValid: true,\n    tabThicknessValid: true,\n    offsetTemp: params.offset,\n    tabsTemp: params.tabs,\n    dogboneTemp: params.dogbone,\n  });\n\n  const validateSubmit = () => {\n\n    let valid = state.nameValid &&\n                state.cutDepthValid &&\n                state.toolDiameterValid &&\n                state.stepoverPercentageValid &&\n                state.toleranceValid &&\n                state.jogHeightValid &&\n                state.jogRateValid &&\n                state.feedRateValid;\n    if (valid) {\n\n      let name = !setDefault ? utils.helpExtract(\"name\") : \"\";\n      let cutDepth = Number(utils.helpExtract(\"cutDepth\"));\n      let toolDiameter = Number(utils.helpExtract(\"toolDiameter\"));\n      let stepoverPercentage = Number(utils.helpExtract(\"stepoverPercentage\")); //must be between 1 and 100%\n      let tolerance = Number(utils.helpExtract(\"tolerance\"));\n      let jogHeight = Number(utils.helpExtract(\"jogHeight\"));\n      let jogRate = Number(utils.helpExtract(\"jogRate\"));\n      let feedRate = Number(utils.helpExtract(\"feedRate\"));\n      let tabThickness = Number(utils.helpExtract(\"tabThickness\"));\n\n\n      if (!setDefault) {\n        if (utils.helpExtract(\"name\") === \"\") name = false;\n      }\n      if (utils.helpExtract(\"cutDepth\") === \"\") cutDepth = params.cutDepth;\n      if (utils.helpExtract(\"toolDiameter\") === \"\") toolDiameter = params.toolDiameter;\n      if (utils.helpExtract(\"stepoverPercentage\") === \"\") stepoverPercentage = params.stepoverPercentage; //must be between 1 and 100%\n      if (utils.helpExtract(\"tolerance\") === \"\") tolerance = params.tolerance;\n      if (utils.helpExtract(\"jogHeight\") === \"\") jogHeight = params.jogHeight;\n      if (utils.helpExtract(\"jogRate\") === \"\") jogRate = params.jogRate;\n      if (utils.helpExtract(\"feedRate\") === \"\") feedRate = params.feedRate;\n      if (utils.helpExtract(\"tabThickness\") === \"\") tabThickness = params.tabThickness;\n\n      let dogbone = state.dogboneTemp;\n      let tabs = state.tabsTemp;\n      let offset = state.offsetTemp;\n\n      //derived parameters\n      let passDepth = cutDepth/2;\n      let toolRadius = toolDiameter/2;\n      let compensatedRadius = toolRadius + tolerance;\n      let tempFloor = Math.ceil(cutDepth/passDepth); //should this be ceiling or floor, I think ceil\n      let actualPassDepth = cutDepth/tempFloor;\n      let depthOfPasses = utils.makeSeries(actualPassDepth, actualPassDepth, tempFloor).map(n => -n);\n\n      //settings will be compiled to a single object here\n      let parameters = utils.deepcopy(params);\n\n      parameters[\"dogbone\"] = dogbone;\n      parameters[\"tabs\"] = tabs;\n      parameters[\"offset\"] = offset;\n      parameters[\"tolerance\"] = tolerance;\n      parameters[\"tabThickness\"] = tabThickness;\n      parameters[\"toolDiameter\"] = toolDiameter;\n      parameters[\"compensatedRadius\"] = compensatedRadius;\n      parameters[\"cutDepth\"] = cutDepth;\n      parameters[\"depthOfPasses\"] = depthOfPasses;\n      parameters[\"feedRate\"] = feedRate;\n      parameters[\"jogHeight\"] = jogHeight;\n      parameters[\"jogRate\"] = jogRate;\n      // parameters[\"insideCutting\"] = insideCutting;\n      parameters[\"stepoverPercentage\"] = stepoverPercentage;\n\n      //console.log(\"parameters\", parameters);\n\n      setState({\n        ...state,\n        isShown:false,\n      });\n\n      //update app state here\n      // if default === true then update defaultParameters state, if false then update parameters of toolpath id\n      if (setDefault) {\n        console.log(\"update default parameters\", parameters)\n        store.update({defaultParameters:parameters});\n      } else {\n        let state = store.getState();\n        let toolpaths = state.toolpaths;\n        let path = toolpaths[index];\n\n        if (name) path.name = name;\n        path.parameters = parameters;\n        let sourceID = path.sourceGeometryID;\n        let sourceGeo = state.contours[sourceID];\n\n        if (path.type === \"profile\") {\n          let cutGeo = profile(sourceGeo, parameters);\n          path.geometry = cutGeo;\n        }\n\n        if (path.type === \"pocket\") {\n          let cutGeo = pocket(sourceGeo, parameters);\n          path.geometry = cutGeo;\n        }\n\n        if (path.type === \"drill\") {\n          let cutGeo = drill(sourceGeo, parameters);\n          path.geometry = cutGeo;\n        }\n\n        store.update({toolpaths});\n      }\n    }\n  }\n\n  return (\n    <div>\n      <Dialog\n        isShown={state.isShown}\n        title={setDefault ? \"Advanced Default Settings\" : \"Specific Toolpath Settings\"}\n        onCloseComplete={() => {\n          setState({\n            ...state,\n            isShown:false,\n            dogboneTemp: params.dogbone,\n            tabsTemp: params.tabs,\n            offsetTemp: params.offset,\n          })\n        }}\n        onConfirm={validateSubmit}>\n\n        <TextInputField\n          onChange={e => {\n            let valid = utils.isNum(e.target.value);\n            setState({...state, cutDepthValid:valid})\n          }}\n          isInvalid={!state.cutDepthValid}\n          name=\"cutDepth\"\n          description={(state.cutDepthValid) ? \"\" : \"please enter a valid number\"}\n          label=\"Depth of Cut\"\n          placeholder={String(params.cutDepth)}/>\n\n        <TextInputField\n          onChange={e => {\n            let valid = utils.isNum(e.target.value);\n            setState({...state, toolDiameterValid:valid})\n          }}\n          isInvalid={!state.toolDiameterValid}\n          name=\"toolDiameter\"\n          description={(state.toolDiameterValid) ? \"\" : \"please enter a valid number\"}\n          label=\"Tool Diameter\"\n          placeholder={String(params.toolDiameter)}/>\n\n        <TextInputField\n          onChange={e => {\n            let valid = utils.isNum(e.target.value);\n            valid = 0 < Number(e.target.value) && Number(e.target.value) <= 100;\n            //process value here\n            setState({...state, stepoverPercentageValid:valid})\n          }}\n          isInvalid={!state.stepoverPercentageValid}\n          name=\"stepoverPercentage\"\n          description={(state.stepoverPercentageValid) ? \"\" : \"please enter a valid number\"}\n          label=\"Stepover Percentage (this is only relevant for pocket cuts)\"\n          placeholder={String(params.stepoverPercentage)}/>\n\n          <TextInputField\n            onChange={e => {\n              let valid = utils.isNum(e.target.value);\n              setState({...state, feedRateValid:valid})\n            }}\n            isInvalid={!state.feedRateValid}\n            name=\"feedRate\"\n            description={(state.feedRateValid) ? \"\" : \"please enter a valid number\"}\n            label=\"Feed Rate\"\n            placeholder={String(params.feedRate)}/>\n\n            <TextInputField\n              onChange={e => {\n                let valid = utils.isNum(e.target.value);\n                setState({...state, toleranceValid:valid})\n              }}\n              isInvalid={!state.toleranceValid}\n              name=\"tolerance\"\n              description={(state.toleranceValid) ? \"\" : \"please enter a valid number\"}\n              label=\"Tolerance\"\n              placeholder={String(params.tolerance)}/>\n\n          <TextInputField\n            onChange={e => {\n              let valid = utils.isNum(e.target.value);\n              setState({...state, jogRateValid:valid})\n            }}\n            isInvalid={!state.jogRateValid}\n            name=\"jogRate\"\n            description={(state.jogRateValid) ? \"\" : \"please enter a valid number\"}\n            label=\"Jog Rate\"\n            placeholder={String(params.jogRate)}/>\n\n            <TextInputField\n              onChange={e => {\n                let valid = utils.isNum(e.target.value);\n                setState({...state, jogHeightValid:valid})\n              }}\n              isInvalid={!state.jogHeightValid}\n              name=\"jogHeight\"\n              description={(state.jogHeightValid) ? \"\" : \"please enter a valid number\"}\n              label=\"Jog Height\"\n              placeholder={String(params.jogHeight)}/>\n\n            <Heading marginTop={8} size={400} color={\"rgba(67, 90, 111, .91)\"}>Offset Direction (this is only relevant for profile cuts)</Heading>\n            <SegmentedControl\n              marginTop={4}\n              options={[\n                { label: 'outside', value: \"outside\" },\n                { label: 'inside', value: \"inside\" },\n                { label: 'none', value: \"none\"}\n              ]}\n              value={state.offsetTemp}\n              onChange={value => {\n                let offsetTemp = value;\n                setState({ ...state, offsetTemp });\n              }}\n            />\n\n            <Heading marginTop={20} size={400} color={\"rgba(67, 90, 111, .91)\"}>Auto Tabs (this is only relevant for profile cuts)</Heading>\n            <SegmentedControl\n              marginTop={4}\n              options={[\n                { label: 'true', value: true },\n                { label: 'false', value: false },\n              ]}\n              value={state.tabsTemp}\n              onChange={value => {\n                let tabsTemp = value;\n                setState({ ...state, tabsTemp });\n              }}\n            />\n\n            <TextInputField\n              marginTop={20}\n              onChange={e => {\n                let valid = utils.isNum(e.target.value);\n                setState({...state, tabThicknessValid:valid})\n              }}\n              isInvalid={!state.tabThicknessValid}\n              name=\"tabThickness\"\n              description={(state.tabThicknessValid) ? \"\" : \"please enter a valid number\"}\n              label=\"Tab Thickness\"\n              placeholder={String(params.tabThickness)}/>\n\n            <Heading marginTop={20} size={400} color={\"rgba(67, 90, 111, .91)\"}>Auto Dogbone</Heading>\n            <SegmentedControl\n              marginTop={4}\n              options={[\n                { label: 'true', value: true },\n                { label: 'false', value: false },\n              ]}\n              value={state.dogboneTemp}\n              onChange={value => {\n                let dogboneTemp = value;\n                setState({ ...state, dogboneTemp });\n              }}\n            />\n\n            {!setDefault &&\n            <TextInputField\n              marginTop={20}\n              onChange={e => {\n                let valid = e.target.value !== \"\";\n                setState({...state, nameValid:valid})\n              }}\n              isInvalid={!state.nameValid}\n              name=\"name\"\n              description={(state.nameValid) ? \"\" : \"please enter something\"}\n              label=\"Name for this Path\"\n              placeholder={name}/>}\n\n      </Dialog>\n      <Link onClick={() => setState({...state, isShown:!disabled})}>{setDefault ? \"Advanced Default Options\" : \"edit\"}</Link>\n    </div>\n  );\n}\n\nexport {AdvancedOptions};\n","import {gcode} from './exampleGCode.js';\nimport {line} from './unmakerjs/primitives.js';\n\n//gocode: string -> {points: list, preamble: list} :object\nconst getPoints = (gcode) => {\n  let gcodeList = gcode.split('\\n');\n  let preamble = [];\n  let points = [];\n\n  let sawPreamble = false;\n  gcodeList.forEach(e => {\n    if (sawPreamble) {\n      let xIndex = e.indexOf(\"X\");\n      let yIndex = e.indexOf(\"Y\");\n      let fIndex = e.indexOf(\"F\");\n\n      if (e.includes(\"X\")) {\n        //console.log(\"full\", e);\n\n        let x = e.substring(xIndex + 1, yIndex - 1);\n        //console.log(\"x\", x)\n        x = parseFloat(x);\n\n        let y = (fIndex === -1) ? e.substring(yIndex + 1, e.length) : e.substring(yIndex + 1, fIndex - 1);\n        //console.log(\"y\", y, \"f\", fIndex)\n        y = parseFloat(y);\n\n        points.push([x, y]);\n      }\n\n    } else {\n      preamble.push(e);\n    }\n\n    if (e === \"(end of preamble)\") sawPreamble = true;\n  })\n\n  return {points, preamble};\n}\n\n// finds center of a list of contours\nconst center = (contours) => {\n  let points = contours.flat(1);\n  points = points.map(line => [line.origin, line.end]).flat();\n\n  let xS = points.map(point => point[0]);\n  let medianX = (Math.max(...xS) + Math.min(...xS))/2\n  // let averageX = xS.reduce(sum, 0)/xS.length;\n\n  let yS = points.map(point => point[1]);\n  let medianY = (Math.max(...yS) + Math.min(...yS))/2\n  // let averageY = yS.reduce(sum, 0)/yS.length;\n\n  // return [averageX, averageY];\n  return [medianX, medianY];\n}\n\n// mirrors a list of contours\nconst mirror = (contours, line) => {};\n\nconst scale = (contours, xFactor, yFactor) => {\n  contours = contours.map(contour => {\n    return contour.map(l => {\n      let [originX, originY] = l.origin;\n      let [endX, endY] = l.end;\n\n      let newOrigin = [originX * xFactor, originY * yFactor];\n      let newEnd = [endX * xFactor, endY * yFactor];\n\n      return line(newOrigin, newEnd);\n    })\n  })\n\n  return contours\n};\n\n//offsets a list of contours\nconst offset = (contours, xOffset, yOffset) => {\n  contours = contours.map(contour => {\n    return contour.map(l => {\n      let [originX, originY] = l.origin;\n      let [endX, endY] = l.end;\n\n      let newOrigin = [originX + xOffset, originY + yOffset];\n      let newEnd = [endX + xOffset, endY + yOffset];\n\n      return line(newOrigin, newEnd);\n    })\n  })\n\n  return contours\n}\n\n//contours: list of lists, x: boolean, y: boolean -> new contours: list of lists\nconst reflect = (contours, x, y) => {\n  x = (x) ? -1 : 1;\n  y = (y) ? -1 : 1;\n\n  contours = contours.map(contour => {\n    return contour.map(l => {\n      let [originX, originY] = l.origin;\n      let [endX, endY] = l.end;\n\n      let newOrigin = [originX * x, originY * y];\n      let newEnd = [endX * x, endY * y];\n\n      return line(newOrigin, newEnd);\n    })\n  })\n\n  return contours\n}\n\nexport const transformations = {\n  offset,\n  mirror,\n  reflect,\n  scale\n}\n","import React from 'react';\nimport {Table, Checkbox, Button} from 'evergreen-ui';\nimport {AdvancedOptions} from './AdvancedOptions.js';\nimport * as utils from '../utils.js';\nimport store from '../store.js';\n\nimport {drillGcode} from '../toolpaths/drill.js';\nimport {pocketGcode} from '../toolpaths/pocket.js';\nimport {profileGcode} from '../toolpaths/profile.js';\n\nimport {transformations} from '../gcodeManipulations.js';\n\n\nconst ToolpathList = ({ state }) => {\n  let toolpaths = state.toolpaths;\n\n  return (\n    <Table>\n      <Table.Head>\n        <Table.TextHeaderCell>name</Table.TextHeaderCell>\n        <Table.TextHeaderCell>type</Table.TextHeaderCell>\n        <Table.TextHeaderCell>modify</Table.TextHeaderCell>\n        <Table.TextHeaderCell>reorder</Table.TextHeaderCell>\n        <Table.TextHeaderCell>select/view</Table.TextHeaderCell>\n      </Table.Head>\n      <Table.Body height={240}>\n        {toolpaths.map((path, i) => (\n          <Table.Row\n            key={path.id}\n            onMouseDown={() => {\n\n              // let toolpath = toolpaths[i];\n              //\n              // toolpath.cutSelected = !toolpath.cutSelected;\n              //\n              // store.update({ toolpaths })\n            }}\n            style={{background:(path.cutSelected) ? \"lightblue\" : \"white\"}}>\n            <Table.TextCell>{path.name}</Table.TextCell>\n            <Table.TextCell>{path.type}</Table.TextCell>\n            <Table.TextCell>\n              <AdvancedOptions\n                params={path.parameters}\n                name={path.name}\n                setDefault={false}\n                index={i}\n                onMouseDown={(e) => e.stopPropagation()}/>\n            </Table.TextCell>\n            <Table.TextCell>^ v</Table.TextCell>\n            <Table.TextCell>\n              <Checkbox\n                checked={path.visible}\n                onMouseDown={(e) => e.stopPropagation()}\n                onChange={e => {\n                  // let toolpaths = toolpaths;\n                  let toolpath = toolpaths[i];\n\n                  toolpath.visible = e.target.checked;\n\n                  store.update({ toolpaths })\n                }}\n              />\n            </Table.TextCell>\n          </Table.Row>\n        ))}\n      </Table.Body>\n      <Table.Row>\n        <Table.TextCell><Button onClick={() => {\n          let text = []\n          toolpaths.forEach(path => {\n            if (path.visible) { // if(path.cutSelected) {\n              let geometry = path.geometry.geometry;\n\n              let gcode;\n              if (path.type === \"drill\") gcode = drillGcode(geometry, path.parameters);\n              else {\n                //now I can mutate geometry\n                geometry = transformations.reflect(geometry, false, true);\n                geometry = transformations.scale(geometry, 0.5, 0.5);\n\n                if (path.type === \"profile\") gcode = profileGcode(geometry, path.parameters);\n                if (path.type === \"pocket\") gcode = pocketGcode(geometry, path.parameters);\n              }\n\n              text.push(gcode);\n            }\n          })\n\n          utils.download(\"toolpaths.gcode\", text.join(\"\\n\"));\n        }}>\n          Export\n        </Button></Table.TextCell>\n        <Table.TextCell>\n          <Button\n            onClick={() => {\n              //let toolpaths = store.state.toolpaths.filter(toolpath => !toolpath.cutSelected);\n              let toolpaths = store.state.toolpaths.filter(toolpath => !toolpath.visible);\n\n\n              // console.log(toolpaths);\n\n              store.update({ toolpaths })\n            }}>\n              Delete\n          </Button>\n        </Table.TextCell>\n        <Table.TextCell>\n          <Button onClick={() => {\n            toolpaths = store.getState().toolpaths; //TODO: fix this hack not sure why I have to do this here\n\n            let allVisible = toolpaths.every(path => path.visible);\n\n            toolpaths = toolpaths.map((path, i) => {\n              path.visible = !allVisible;\n\n              return path;\n            })\n\n            //console.log(store.getState())\n\n            store.update({ toolpaths })\n          }}>\n            Select/View All\n          </Button>\n        </Table.TextCell>\n      </Table.Row>\n    </Table>\n  )\n}\n\nexport {ToolpathList}\n//\n// <Table.TextCell>\n//   <Button onClick={() => {\n//     toolpaths = store.getState().toolpaths; //TODO: fix this hack not sure why I have to do this here\n//\n//     let allSelected = toolpaths.every(path => path.cutSelected);\n//\n//     let toolpaths = toolpaths.map((path, i) => {\n//       path.cutSelected = !allSelected;\n//\n//       return path;\n//     })\n//\n//     //console.log(store.getState())\n//\n//     store.update({ toolpaths })\n//   }}>\n//     Select\n//   </Button>\n// </Table.TextCell>\n","import React, { useState } from 'react';\nimport {Button, Heading, Pane, Paragraph} from 'evergreen-ui';\nimport './App.css';\n\nimport {MillingCalculator} from './components/MillingCalculator.js';\n\nimport simplify from 'simplify-js';\n\nimport * as utils from './utils.js';\n\nimport {uploadSVG, uploadBBJS} from './uploadSVG.js';\nimport {calculateSettings} from './jensSettings.js';\n\nimport {Workplane} from './components/Workplane.js'\nimport {MaterialType} from './components/MaterialType.js';\nimport {MaterialThickness} from './components/MaterialThickness.js';\nimport {Origin} from './components/Origin.js';\nimport {Units} from './components/Units.js';\nimport {PocketButton} from './components/PocketButton.js';\nimport {ProfileButton} from './components/ProfileButton.js';\nimport {DrillButton} from './components/DrillButton.js';\nimport {AdvancedOptions} from './components/AdvancedOptions.js';\nimport {ToolpathList} from './components/ToolpathList.js';\n\nimport {renderLine, connectPoints} from './unmakerjs/primitives.js';\n\nimport store from \"./store.js\"; //this is my global state library, this is the only file that will getState() it will pass that to all sub components or should i import store in respective components\n\nconst TOLERANCE = .1;\nconst HQ = false;\n\nconst linesToPolylinePoints = (lines, lastIndex) => lines.map((line, i) => {\n  if (i === lastIndex-1) return [{x:line.origin[0], y:line.origin[1]}, {x:line.end[0], y:line.end[1]}];\n\n  return {x:line.origin[0], y:line.origin[1]}\n}).flat()\n\nconst simplifyLines = (lines) => connectPoints(simplify(linesToPolylinePoints(lines, lines.length), TOLERANCE, HQ).map(el => [el.x, el.y]));\n\nconst simplifyToolpath = (toolpath) => toolpath.map(lines => {\n  if (!Array.isArray(lines[0])) return simplifyLines(lines, lines.length);\n\n  return lines.map(lines2 => simplifyLines(lines2, lines2.length)).flat();\n}).flat()\n\nconst groupHover = (id, enter, state, setState) => {\n  id = id.split('_');\n  let toolpath = (id[1] === \"toolpath\")\n  id = id[0];\n\n  let currentGroupHovered = state.groupHovered;\n  currentGroupHovered.push(id);\n\n\n  if (id && !toolpath && enter) {\n    setState({...state, groupHovered: currentGroupHovered});\n  } else {\n    setState({...state, groupHovered: []});\n  }\n\n}\n\nconst getCursorPoint = (evt) => {\n  let svg = document.getElementById(\"tempSVGID\");\n  let pt = svg.createSVGPoint();  // Created once for document\n\n  pt.x = evt.clientX;\n  pt.y = evt.clientY;\n\n  // The cursor point, translated into svg coordinates\n  let cursorpt =  pt.matrixTransform(svg.getScreenCTM().inverse());\n  return [cursorpt.x, cursorpt.y];\n}\n\nconst drawSelectionBox = () => {};\n\nconst insideSelectionBox = () => {};\n\nconst select = (id) => {\n  id = id.split('_');\n  let toolpath = (id[1] === \"toolpath\")\n\n  id = id[0];\n\n  if (id && !store.state.selected.includes(id) && !toolpath) {\n    store.update(s => s.selected.push(id));;\n  } else {\n    store.update({selected: []}); //this is a bit hackish\n  }\n\n}\n\nconst App = () => {\n\n  const [state, setState] = useState({\n    // thicknessSubmit : false,\n    // materialSubmit: false,\n    // originSubmit: false,\n    groupHovered: [],\n    mouseDown: false,\n    downPoint: undefined,\n    drag: false,\n    selectionBoxWidth: undefined,\n    selectionBoxHeight: undefined,\n    selectionBoxOrigin: [0,0],\n  });\n\n  const firstSubmit = (name) => {\n    let old = state;\n    old[name] = true;\n\n    setState({...state, old});\n  }\n\n  // const initialized = () => {\n  //   if (!state.initialized && (state.thicknessSubmit && state.materialSubmit && state.originSubmit)) {\n  //     setState({...state, initialized:true});\n  //   }\n  // }\n\n  // const hover = (id) => {\n  //   id = id.split('_');\n  //   let toolpath = (id[1] === \"toolpath\")\n  //\n  //   id = id[0];\n  //\n  //   if (id && !toolpath) {\n  //     store.update({ hovered: [id] });\n  //   } else {\n  //     store.update({ hovered: [] }); //this is a bit hackish\n  //   }\n  //\n  // }\n\n  //should I put everying in a list or all to one model, there seem to be some issues with origins if I mjs.exporter.toSVG() seperately\n  // if (!state.initialized) {\n  //   initialized();\n  // };\n\n  //let set = calculateSettings(\"aluminum_roughing\", 3, 1, 18000);\n  //console.log(\"settings\", set);\n\n  let viewModel = Object.entries(store.state.contours).map(([id, lines]) => (\n    <g\n      onMouseEnter={(e) => groupHover(e.target.parentNode.id, true, state, setState)}\n      onMouseLeave={(e) => groupHover(e.target.parentNode.id, false, state, setState)}\n      key={`${id}`}\n      id={`${id}_contour`}>\n      {simplifyLines(lines, lines.length).map((line, i) => renderLine(\n        line,\n        `${id}_index${i}`,\n        {\n          selected: store.state.selected.includes(id),\n          highlighted: state.groupHovered.includes(id)\n        }))}\n     </g>\n  ));\n\n  let toolpathView = store.state.toolpaths.map(toolpath => (\n    <g\n      key={`${toolpath.id}`}\n      id={`${toolpath.id}_toolpath`}>\n      {toolpath.visible && simplifyToolpath(toolpath.geometry.drawing).map((line, i) => renderLine(line,\n        `${toolpath.id}_index${i}`,\n        {\n         toolpath: true\n        }))}\n    </g>\n  ));\n\n  let origin = <circle cx=\"0\" cy=\"0\" r=\"2\" stroke=\"orange\" strokeWidth=\"1\" fill=\"orange\" opacity=\".8\" key=\"origin\"/>\n\n  viewModel = [...viewModel, ...toolpathView, origin]\n  // let viewModel = [];\n\n  return (\n    <div\n      className=\"wrapper\"\n      >\n\n\n      <div>\n        <div\n          onMouseDown={(e) => {\n            let point = getCursorPoint(e);\n\n            console.log(point);\n\n            setState({\n              ...state,\n              mouseDown: true,\n              downPoint: point,\n            })\n\n          }}\n          onMouseMove={(e) => {\n\n            if (state.mouseDown) {\n              let [downPointX, downPointY] = state.downPoint;\n              let [cursorPointX, cursorPointY] = getCursorPoint(e);\n\n              let selectionBoxWidth =  Math.abs(downPointX - cursorPointX);\n              let selectionBoxHeight = Math.abs(downPointY - cursorPointY);\n              let selectionBoxOrigin = [0,0];\n\n              if (downPointX < cursorPointX && downPointY < cursorPointY) {\n                selectionBoxOrigin = state.downPoint;\n              }\n\n              else if (downPointX < cursorPointX && downPointY > cursorPointY) {\n                selectionBoxOrigin = [downPointX, downPointY - selectionBoxHeight];\n              }\n\n              else if (downPointX > cursorPointX && downPointY < cursorPointY) {\n                selectionBoxOrigin = [downPointX - selectionBoxWidth, downPointY];\n              }\n\n              else if (downPointX > cursorPointX && downPointY > cursorPointY) {\n                selectionBoxOrigin = [downPointX - selectionBoxWidth, downPointY - selectionBoxHeight];\n              }\n\n              setState({\n                ...state,\n                drag: true,\n                selectionBoxWidth,\n                selectionBoxHeight,\n                selectionBoxOrigin,\n              })\n            }\n          }}\n          onMouseUp={(e) => {\n            console.log(store.state)\n            let newlySelected = [];\n            Object.entries(store.state.contours).forEach(([key, contour]) => {\n              // if selection box contains a point of contour then I should add contour id to selected list\n              console.log(key, contour)\n            })\n\n            store.update({selected: [...store.state.selected, ...newlySelected]})\n\n            if(!state.drag) select(e.target.parentNode.id);\n\n            setState({\n              ...state,\n              mouseDown: false,\n              drag: false,\n            })\n          }}\n          className=\"mainEvent\">\n          {state.drag ?\n            <Workplane\n              groups={[\n                ...viewModel,\n                <rect\n                  key=\"selectionBox\"\n                  x={`${state.selectionBoxOrigin[0]}`}\n                  y={`${state.selectionBoxOrigin[1]}`}\n                  width={`${state.selectionBoxWidth}`}\n                  height={`${state.selectionBoxHeight}`}\n                  style={{fill:\"blue\", opacity:.1}}\n                />\n              ]}\n            />\n          :\n            <Workplane\n              groups={[\n                ...viewModel\n              ]}\n            />\n          }\n          <svg width={0} height={0} id={\"thisIsDumb\"}></svg>\n        </div>\n\n        <div>\n          <input\n            id=\"myInput\"\n            type=\"file\"\n            style={{display:\"none\"}}\n            onChange={(e) => {\n              let files = e.target.files;\n              let file = files[0];\n\n              let filetype = file.name.split('.')[1];\n\n              if (filetype === \"bbjs\") return uploadBBJS(e);\n              if (filetype === \"svg\") return uploadSVG(e)\n            }}/>\n          <Button\n            marginRight={4}\n            onClick={() => document.getElementById(\"myInput\").click()}>\n              upload (SVG or BBJS)\n          </Button>\n          <Button\n            onClick={() => {\n              utils.download(\"save.bbjs\", JSON.stringify(store.state));\n              }}>\n            save\n          </Button>\n          <br/>\n          Number Selected: {store.state.selected.length}\n          &nbsp;\n          <Button\n            onClick={() => {\n              let contours = Object.entries(store.state.contours);\n              contours = contours.filter(([id, contour]) => !store.state.selected.includes(id))\n\n              let toolpaths = store.state.toolpaths.filter(toolpath => !store.state.selected.includes(toolpath.sourceGeometryID));\n\n              let newContours = {};\n\n              contours.forEach(contour => {\n                newContours[contour[0]] = contour[1];\n              })\n\n              contours = newContours;\n\n              store.update({\n                contours,\n                toolpaths,\n                selected: []\n              })\n\n            }}>\n            Delete\n          </Button>\n        </div>\n      </div>\n\n      <div className=\"sidebar\">\n        <div>\n          <MillingCalculator/>\n\n          <br/>\n          <div>Origin: Top Left</div>\n          <br/>\n\n          {(!store.state.initialized) ? <Paragraph marginTop={4}>enable calculator before editting options</Paragraph> : \"\"}\n          <Pane> <AdvancedOptions disabled={!store.state.initialized} setDefault={true} params={store.getState().defaultParameters}/></Pane>\n        </div>\n\n        <div>\n          <Heading marginTop={8}>Create Toolpaths</Heading>\n          {(!store.state.initialized) ? <Paragraph marginTop={4}>enable calculator before creating toolpaths</Paragraph> : \"\"}\n          <div className=\"toolpaths\">\n            <Pane marginLeft={8} marginTop={4}><ProfileButton disabled={!store.state.initialized}/></Pane>\n            <Pane marginLeft={8} marginTop={4}><PocketButton disabled={!store.state.initialized}/></Pane>\n            <Pane marginLeft={8} marginTop={4}><DrillButton disabled={!store.state.initialized}/></Pane>\n          </div>\n        </div>\n\n        <div>\n          <Heading marginTop={8}>Toolpaths</Heading>\n          <ToolpathList marginTop={4} state={store.getState()}/>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import * as utils from './utils.js';\nimport {flattenSVG} from 'flatten-svg';\n\nimport {connectPoints} from './unmakerjs/primitives.js';\n\nimport store from \"./store.js\"; //this is my global state library, this is the only file that will getState() it will pass that to all sub components or should i import store in respective components\n\n\nconst uploadSVG = (e) => {\n\n  //main event\n  let files = e.target.files;\n  let file = files[0];\n\n  var reader = new FileReader();\n\n  reader.onload = (event) => {\n    let text = event.target.result;\n\n    let hmm = document.getElementById('thisIsDumb');\n    hmm.innerHTML = text;\n\n    let paths = flattenSVG(hmm);\n\n    let contours = {};\n\n    Object.values(paths).forEach(path => {\n      let lines = connectPoints(path.points);\n      contours[utils.makeID()] = lines;\n    })\n\n    contours = {...store.state.contours, ...contours}\n\n    store.update({contours});\n\n  };\n\n  reader.readAsText(file);\n}\n\nconst uploadBBJS = (e) => {\n\n  //main event\n  let files = e.target.files;\n  let file = files[0];\n\n  var reader = new FileReader();\n\n  reader.onload = (event) => {\n    let text = event.target.result;\n    let state = JSON.parse(text);\n\n    store.update(state);\n\n  };\n\n  reader.readAsText(file);\n}\n\nexport {uploadSVG, uploadBBJS};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './store.js';\n// import \"@blueprintjs/icons/lib/css/blueprint-icons.css\";\n// import \"@blueprintjs/core/lib/css/blueprint.css\";\n// import \"normalize.css/normalize.css\";\n// import 'elemental/less/elemental.less';\n\nconst render = () => {\n  ReactDOM.render(<App/>, document.getElementById('root'));\n}\n\nstore.subscribe(render)\nrender();\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}