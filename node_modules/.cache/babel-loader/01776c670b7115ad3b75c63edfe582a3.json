{"ast":null,"code":"var _jsxFileName = \"/Users/leomcelroy/Desktop/barkbeetle_js/src/components/ToolpathList.js\";\nimport React from 'react';\nimport { Table, Checkbox, Button } from 'evergreen-ui';\nimport { AdvancedOptions } from './AdvancedOptions.js';\nimport * as utils from '../utils.js';\nimport store from '../store.js';\nimport { drillGcode } from '../toolpaths/drill.js';\nimport { pocketGcode } from '../toolpaths/pocket.js';\nimport { profileGcode } from '../toolpaths/profile.js';\n\nvar ToolpathList = function ToolpathList(_ref) {\n  var state = _ref.state;\n  var toolpaths = state.toolpaths;\n  return React.createElement(Table, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17\n    },\n    __self: this\n  }, React.createElement(Table.Head, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18\n    },\n    __self: this\n  }, React.createElement(Table.TextHeaderCell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19\n    },\n    __self: this\n  }, \"name\"), React.createElement(Table.TextHeaderCell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20\n    },\n    __self: this\n  }, \"type\"), React.createElement(Table.TextHeaderCell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21\n    },\n    __self: this\n  }, \"modify\"), React.createElement(Table.TextHeaderCell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }, \"reorder\"), React.createElement(Table.TextHeaderCell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }, \"select/view\")), React.createElement(Table.Body, {\n    height: 240,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  }, toolpaths.map(function (path, i) {\n    return React.createElement(Table.Row, {\n      key: path.id,\n      onMouseDown: function onMouseDown() {// let toolpath = toolpaths[i];\n        //\n        // toolpath.cutSelected = !toolpath.cutSelected;\n        //\n        // store.update({ toolpaths })\n      },\n      style: {\n        background: path.cutSelected ? \"lightblue\" : \"white\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27\n      },\n      __self: this\n    }, React.createElement(Table.TextCell, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }, path.name), React.createElement(Table.TextCell, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }, path.type), React.createElement(Table.TextCell, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }, React.createElement(AdvancedOptions, {\n      params: path.parameters,\n      name: path.name,\n      setDefault: false,\n      index: i,\n      onMouseDown: function onMouseDown(e) {\n        return e.stopPropagation();\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    })), React.createElement(Table.TextCell, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }, \"^ v\"), React.createElement(Table.TextCell, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, React.createElement(Checkbox, {\n      checked: path.visible,\n      onMouseDown: function onMouseDown(e) {\n        return e.stopPropagation();\n      },\n      onChange: function onChange(e) {\n        // let toolpaths = toolpaths;\n        var toolpath = toolpaths[i];\n        toolpath.visible = e.target.checked;\n        store.update({\n          toolpaths: toolpaths\n        });\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    })));\n  })), React.createElement(Table.Row, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }, React.createElement(Table.TextCell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, React.createElement(Button, {\n    onClick: function onClick() {\n      var text = [];\n      toolpaths.forEach(function (path) {\n        if (path.visible) {\n          // if(path.cutSelected) {\n          console.log(path.type);\n          var gcode;\n          if (path.type === \"profile\") gcode = profileGcode(path.geometry.geometry, path.parameters);\n          if (path.type === \"pocket\") gcode = pocketGcode(path.geometry.geometry);\n          if (path.type === \"drill\") gcode = drillGcode(path.geometry.geometry);\n          text.push(path.geometry.gcode);\n        }\n      });\n      utils.download(\"toolpaths.gcode\", text.join(\"\\n\"));\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, \"Export\")), React.createElement(Table.TextCell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }, React.createElement(Button, {\n    onClick: function onClick() {\n      //let toolpaths = store.state.toolpaths.filter(toolpath => !toolpath.cutSelected);\n      var toolpaths = store.state.toolpaths.filter(function (toolpath) {\n        return !toolpath.visible;\n      }); // console.log(toolpaths);\n\n      store.update({\n        toolpaths: toolpaths\n      });\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }, \"Delete\")), React.createElement(Table.TextCell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  }, React.createElement(Button, {\n    onClick: function onClick() {\n      toolpaths = store.getState().toolpaths; //TODO: fix this hack not sure why I have to do this here\n\n      var allVisible = toolpaths.every(function (path) {\n        return path.visible;\n      });\n      toolpaths = toolpaths.map(function (path, i) {\n        path.visible = !allVisible;\n        return path;\n      }); //console.log(store.getState())\n\n      store.update({\n        toolpaths: toolpaths\n      });\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  }, \"Select/View All\"))));\n};\n\nexport { ToolpathList }; //\n// <Table.TextCell>\n//   <Button onClick={() => {\n//     toolpaths = store.getState().toolpaths; //TODO: fix this hack not sure why I have to do this here\n//\n//     let allSelected = toolpaths.every(path => path.cutSelected);\n//\n//     let toolpaths = toolpaths.map((path, i) => {\n//       path.cutSelected = !allSelected;\n//\n//       return path;\n//     })\n//\n//     //console.log(store.getState())\n//\n//     store.update({ toolpaths })\n//   }}>\n//     Select\n//   </Button>\n// </Table.TextCell>","map":{"version":3,"sources":["/Users/leomcelroy/Desktop/barkbeetle_js/src/components/ToolpathList.js"],"names":["React","Table","Checkbox","Button","AdvancedOptions","utils","store","drillGcode","pocketGcode","profileGcode","ToolpathList","state","toolpaths","map","path","i","id","background","cutSelected","name","type","parameters","e","stopPropagation","visible","toolpath","target","checked","update","text","forEach","console","log","gcode","geometry","push","download","join","filter","getState","allVisible","every"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {Table, Checkbox, Button} from 'evergreen-ui';\nimport {AdvancedOptions} from './AdvancedOptions.js';\nimport * as utils from '../utils.js';\nimport store from '../store.js';\n\nimport {drillGcode} from '../toolpaths/drill.js';\nimport {pocketGcode} from '../toolpaths/pocket.js';\nimport {profileGcode} from '../toolpaths/profile.js';\n\n\n\nconst ToolpathList = ({ state }) => {\n  let toolpaths = state.toolpaths;\n\n  return (\n    <Table>\n      <Table.Head>\n        <Table.TextHeaderCell>name</Table.TextHeaderCell>\n        <Table.TextHeaderCell>type</Table.TextHeaderCell>\n        <Table.TextHeaderCell>modify</Table.TextHeaderCell>\n        <Table.TextHeaderCell>reorder</Table.TextHeaderCell>\n        <Table.TextHeaderCell>select/view</Table.TextHeaderCell>\n      </Table.Head>\n      <Table.Body height={240}>\n        {toolpaths.map((path, i) => (\n          <Table.Row\n            key={path.id}\n            onMouseDown={() => {\n\n              // let toolpath = toolpaths[i];\n              //\n              // toolpath.cutSelected = !toolpath.cutSelected;\n              //\n              // store.update({ toolpaths })\n            }}\n            style={{background:(path.cutSelected) ? \"lightblue\" : \"white\"}}>\n            <Table.TextCell>{path.name}</Table.TextCell>\n            <Table.TextCell>{path.type}</Table.TextCell>\n            <Table.TextCell>\n              <AdvancedOptions\n                params={path.parameters}\n                name={path.name}\n                setDefault={false}\n                index={i}\n                onMouseDown={(e) => e.stopPropagation()}/>\n            </Table.TextCell>\n            <Table.TextCell>^ v</Table.TextCell>\n            <Table.TextCell>\n              <Checkbox\n                checked={path.visible}\n                onMouseDown={(e) => e.stopPropagation()}\n                onChange={e => {\n                  // let toolpaths = toolpaths;\n                  let toolpath = toolpaths[i];\n\n                  toolpath.visible = e.target.checked;\n\n                  store.update({ toolpaths })\n                }}\n              />\n            </Table.TextCell>\n          </Table.Row>\n        ))}\n      </Table.Body>\n      <Table.Row>\n        <Table.TextCell><Button onClick={() => {\n          let text = []\n          toolpaths.forEach(path => {\n            if (path.visible) { // if(path.cutSelected) {\n              console.log(path.type)\n\n              let gcode;\n              if (path.type === \"profile\") gcode = profileGcode(path.geometry.geometry, path.parameters);\n              if (path.type === \"pocket\") gcode = pocketGcode(path.geometry.geometry);\n              if (path.type === \"drill\") gcode = drillGcode(path.geometry.geometry);\n\n              text.push(path.geometry.gcode);\n            }\n          })\n\n          utils.download(\"toolpaths.gcode\", text.join(\"\\n\"));\n        }}>\n          Export\n        </Button></Table.TextCell>\n        <Table.TextCell>\n          <Button\n            onClick={() => {\n              //let toolpaths = store.state.toolpaths.filter(toolpath => !toolpath.cutSelected);\n              let toolpaths = store.state.toolpaths.filter(toolpath => !toolpath.visible);\n\n\n              // console.log(toolpaths);\n\n              store.update({ toolpaths })\n            }}>\n              Delete\n          </Button>\n        </Table.TextCell>\n        <Table.TextCell>\n          <Button onClick={() => {\n            toolpaths = store.getState().toolpaths; //TODO: fix this hack not sure why I have to do this here\n\n            let allVisible = toolpaths.every(path => path.visible);\n\n            toolpaths = toolpaths.map((path, i) => {\n              path.visible = !allVisible;\n\n              return path;\n            })\n\n            //console.log(store.getState())\n\n            store.update({ toolpaths })\n          }}>\n            Select/View All\n          </Button>\n        </Table.TextCell>\n      </Table.Row>\n    </Table>\n  )\n}\n\nexport {ToolpathList}\n//\n// <Table.TextCell>\n//   <Button onClick={() => {\n//     toolpaths = store.getState().toolpaths; //TODO: fix this hack not sure why I have to do this here\n//\n//     let allSelected = toolpaths.every(path => path.cutSelected);\n//\n//     let toolpaths = toolpaths.map((path, i) => {\n//       path.cutSelected = !allSelected;\n//\n//       return path;\n//     })\n//\n//     //console.log(store.getState())\n//\n//     store.update({ toolpaths })\n//   }}>\n//     Select\n//   </Button>\n// </Table.TextCell>\n"]},"metadata":{},"sourceType":"module"}