{"ast":null,"code":"import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport ToastManager from './ToastManager';\nvar isBrowser = typeof window !== 'undefined' && typeof window.document !== 'undefined';\n/**\n * The Toaster manages the interactionsb between\n * the ToasterManger and the toast API.\n */\n\nvar Toaster = function Toaster() {\n  var _this = this;\n\n  _classCallCheck(this, Toaster);\n\n  _defineProperty(this, \"_bindNotify\", function (handler) {\n    _this.notifyHandler = handler;\n  });\n\n  _defineProperty(this, \"_bindGetToasts\", function (handler) {\n    _this.getToastsHandler = handler;\n  });\n\n  _defineProperty(this, \"_bindCloseAll\", function (handler) {\n    _this.closeAllHandler = handler;\n  });\n\n  _defineProperty(this, \"getToasts\", function () {\n    return _this.getToastsHandler();\n  });\n\n  _defineProperty(this, \"closeAll\", function () {\n    return _this.closeAllHandler();\n  });\n\n  _defineProperty(this, \"notify\", function (title) {\n    var settings = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return _this.notifyHandler(title, _objectSpread({}, settings, {\n      intent: 'none'\n    }));\n  });\n\n  _defineProperty(this, \"success\", function (title) {\n    var settings = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return _this.notifyHandler(title, _objectSpread({}, settings, {\n      intent: 'success'\n    }));\n  });\n\n  _defineProperty(this, \"warning\", function (title) {\n    var settings = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return _this.notifyHandler(title, _objectSpread({}, settings, {\n      intent: 'warning'\n    }));\n  });\n\n  _defineProperty(this, \"danger\", function (title) {\n    var settings = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return _this.notifyHandler(title, _objectSpread({}, settings, {\n      intent: 'danger'\n    }));\n  });\n\n  if (!isBrowser) return;\n  var container = document.createElement('div');\n  container.setAttribute('data-evergreen-toaster-container', '');\n  document.body.appendChild(container);\n  ReactDOM.render(React.createElement(ToastManager, {\n    bindNotify: this._bindNotify,\n    bindGetToasts: this._bindGetToasts,\n    bindCloseAll: this._bindCloseAll\n  }), container);\n};\n\nexport { Toaster as default };","map":null,"metadata":{},"sourceType":"module"}