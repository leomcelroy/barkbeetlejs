{"ast":null,"code":"import _slicedToArray from \"/Users/leomcelroy/Desktop/barkbeetle_js/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/leomcelroy/Desktop/barkbeetle_js/src/Workplane.js\";\n// import React, { Component } from 'react';\n// import * as utils from './utils.js';\n// class Workplane extends Component {\n//\n//   state = {\n//       width: 500,\n//       height: 500,\n//       v0: 0,\n//       v1: 0,\n//       v2: 500,\n//       v3: 500,\n//       mousedown: false,\n//       //zoomDelta: 0,\n//     };\n//\n//   wheel(e) {\n//     e.preventDefault();\n//     let loc = utils.getSVGpoint(e, this.state.v0, this.state.v1, this.state.v2, this.state.v3 ,this.state.width, this.state.height);\n//\n//     if (e.ctrlKey) {\n//\n//       let zoomRate = 10;\n//       //zooms to center now\n//\n//       if (e.deltaY < 0) {\n//         //console.log('zoom in');\n//\n//         let v2 = (e.deltaY * zoomRate + this.state.v2 > 1) ? e.deltaY * zoomRate + this.state.v2 : this.state.v2;\n//         let v3 = (e.deltaY * zoomRate + this.state.v3 > 1) ? e.deltaY * zoomRate + this.state.v3 : this.state.v3;\n//\n//         let v0 = this.state.v0 - e.deltaY * zoomRate/2;\n//         let v1 = this.state.v1 - e.deltaY * zoomRate/2;\n//         // console.log(\"e.deltaY * zoomRate\", e.deltaY * zoomRate)\n//         // console.log(\"v0\", e.deltaY * zoomRate, v0)\n//         // console.log(\"v1\", this.state.v1, v1)\n//\n//         this.setState({v0, v1, v2, v3})\n//       }\n//\n//       if (e.deltaY > 0) {\n//         //console.log('zoom out');\n//\n//         let v2 = e.deltaY * zoomRate + this.state.v2;\n//         let v3 = e.deltaY * zoomRate + this.state.v3;\n//\n//         let v0 = this.state.v0 - e.deltaY * zoomRate/2;\n//         let v1 = this.state.v1 - e.deltaY * zoomRate/2;\n//\n//         this.setState({v0,v1, v2, v3})\n//       }\n//\n//       return\n//     }\n//\n//     if (e.deltaY < 0) {\n//       //console.log('scrolling up');\n//\n//       let v1 = this.state.v1 + e.deltaY;\n//       this.setState({v1});\n//     }\n//     if (e.deltaY > 0) {\n//       //console.log('scrolling down');\n//\n//       let v1 = this.state.v1 + e.deltaY;\n//       this.setState({v1});\n//     }\n//     if (e.deltaX < 0) {\n//       //console.log('scrolling left');\n//\n//       let v0 = this.state.v0 + e.deltaX;\n//       this.setState({v0});\n//     }\n//     if (e.deltaX > 0) {\n//       //console.log('scrolling right');\n//\n//       let v0 = this.state.v0 + e.deltaX;\n//       this.setState({v0});\n//     }\n//   }\n//\n// //   // Find your root SVG element\n// // var svg = document.querySelector('svg');\n// //\n// // // Create an SVGPoint for future math\n// // var pt = svg.createSVGPoint();\n// //\n// // // Get point in global SVG space\n// // function cursorPoint(evt){\n// //   pt.x = evt.clientX; pt.y = evt.clientY;\n// //   return pt.matrixTransform(svg.getScreenCTM().inverse());\n// // }\n// //\n// // svg.addEventListener('mousemove',function(evt){\n// //   var loc = cursorPoint(evt);\n// //   // Use loc.x and loc.y here\n// // },false);\n//\n//   mouseDown(e) {\n//     this.setState({\n//       mousedown: true\n//     });\n//\n//   }\n//\n//   mouseMove(e) {\n//     let loc = utils.getSVGpoint(e, this.state.v0, this.state.v1, this.state.v2, this.state.v3 ,this.state.width, this.state.height);\n//\n//     // console.log(loc.x, loc.y)\n//   }\n//\n//   mouseUp(e) {\n//     this.setState({\n//       mousedown: false\n//     });\n//   }\n//\n//   render() {\n//\n//     return (\n//       <svg\n//         width={this.state.width}\n//         height={this.state.height}\n//         viewBox={`${this.state.v0} ${this.state.v1} ${this.state.v2} ${this.state.v3}`}\n//         xmlns={\"http://www.w3.org/2000/svg\"}\n//         onWheel={(e) => this.wheel(e)}\n//         onMouseDown={(e) => this.mouseDown(e)}\n//         onMouseMove={(e) => this.mouseMove(e)}\n//         onMouseUp={(e) => this.mouseUp(e)}\n//         style={{border: \"1px solid #cccccc\"}}>\n//\n//           {this.props.groups}\n//       </svg>\n//     );\n//   }\n// }\n//\n// export {Workplane}\nimport React, { Component, useState } from 'react';\nimport * as utils from './utils.js';\n\nvar Workplane = function Workplane(_ref) {\n  var groups = _ref.groups;\n\n  var _useState = useState({\n    width: 500,\n    height: 500\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      state = _useState2[0],\n      setState = _useState2[1];\n\n  var _useState3 = useState(0),\n      _useState4 = _slicedToArray(_useState3, 2),\n      v0 = _useState4[0],\n      setV0 = _useState4[1];\n\n  var _useState5 = useState(0),\n      _useState6 = _slicedToArray(_useState5, 2),\n      v1 = _useState6[0],\n      setV1 = _useState6[1];\n\n  var _useState7 = useState(500),\n      _useState8 = _slicedToArray(_useState7, 2),\n      v2 = _useState8[0],\n      setV2 = _useState8[1];\n\n  var _useState9 = useState(500),\n      _useState10 = _slicedToArray(_useState9, 2),\n      v3 = _useState10[0],\n      setV3 = _useState10[1];\n\n  var wheel = function wheel(e) {\n    e.preventDefault();\n    var loc = utils.getSVGpoint(e, v0, v1, v2, v3, state.width, state.height);\n\n    if (e.ctrlKey) {\n      var zoomRate = 10; //zooms to center now\n\n      if (e.deltaY < 0) {\n        //console.log('zoom in');\n        var _v = e.deltaY * zoomRate + _v > 1 ? e.deltaY * zoomRate + _v : _v;\n\n        var _v2 = e.deltaY * zoomRate + _v2 > 1 ? e.deltaY * zoomRate + _v2 : _v2;\n\n        var _v3 = _v3 - e.deltaY * zoomRate / 2;\n\n        var _v4 = _v4 - e.deltaY * zoomRate / 2; // console.log(\"e.deltaY * zoomRate\", e.deltaY * zoomRate)\n        // console.log(\"v0\", e.deltaY * zoomRate, v0)\n        // console.log(\"v1\", state.v1, v1)\n\n\n        setV0(_v3);\n        setV1(_v4);\n        setV2(_v);\n        setV3(_v2);\n      }\n\n      if (e.deltaY > 0) {\n        //console.log('zoom out');\n        var _v5 = e.deltaY * zoomRate + state.v2;\n\n        var _v6 = e.deltaY * zoomRate + state.v3;\n\n        var _v7 = state.v0 - e.deltaY * zoomRate / 2;\n\n        var _v8 = state.v1 - e.deltaY * zoomRate / 2;\n\n        setV0(_v7);\n        setV1(_v8);\n        setV2(_v5);\n        setV3(_v6);\n      }\n\n      return;\n    }\n\n    if (e.deltaY < 0) {\n      //console.log('scrolling up');\n      var _v9 = _v9 + e.deltaY;\n\n      setV1(_v9);\n    }\n\n    if (e.deltaY > 0) {\n      //console.log('scrolling down');\n      var _v10 = _v10 + e.deltaY;\n\n      setV1(_v10);\n    }\n\n    if (e.deltaX < 0) {\n      //console.log('scrolling left');\n      var _v11 = _v11 + e.deltaX;\n\n      setV0(_v11);\n    }\n\n    if (e.deltaX > 0) {\n      //console.log('scrolling right');\n      var _v12 = _v12 + e.deltaX;\n\n      setV0(_v12);\n    }\n  };\n\n  return React.createElement(\"svg\", {\n    width: state.width,\n    height: state.height,\n    viewBox: \"\".concat(v0, \" \").concat(v1, \" \").concat(v2, \" \").concat(v3),\n    xmlns: \"http://www.w3.org/2000/svg\",\n    onWheel: function onWheel(e) {\n      return wheel(e);\n    },\n    style: {\n      border: \"1px solid #cccccc\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 229\n    },\n    __self: this\n  }, groups);\n};\n\nexport { Workplane };","map":{"version":3,"sources":["/Users/leomcelroy/Desktop/barkbeetle_js/src/Workplane.js"],"names":["React","Component","useState","utils","Workplane","groups","width","height","state","setState","v0","setV0","v1","setV1","v2","setV2","v3","setV3","wheel","e","preventDefault","loc","getSVGpoint","ctrlKey","zoomRate","deltaY","deltaX","border"],"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","sourcesContent":["// import React, { Component } from 'react';\n// import * as utils from './utils.js';\n\n\n// class Workplane extends Component {\n//\n//   state = {\n//       width: 500,\n//       height: 500,\n//       v0: 0,\n//       v1: 0,\n//       v2: 500,\n//       v3: 500,\n//       mousedown: false,\n//       //zoomDelta: 0,\n//     };\n//\n//   wheel(e) {\n//     e.preventDefault();\n//     let loc = utils.getSVGpoint(e, this.state.v0, this.state.v1, this.state.v2, this.state.v3 ,this.state.width, this.state.height);\n//\n//     if (e.ctrlKey) {\n//\n//       let zoomRate = 10;\n//       //zooms to center now\n//\n//       if (e.deltaY < 0) {\n//         //console.log('zoom in');\n//\n//         let v2 = (e.deltaY * zoomRate + this.state.v2 > 1) ? e.deltaY * zoomRate + this.state.v2 : this.state.v2;\n//         let v3 = (e.deltaY * zoomRate + this.state.v3 > 1) ? e.deltaY * zoomRate + this.state.v3 : this.state.v3;\n//\n//         let v0 = this.state.v0 - e.deltaY * zoomRate/2;\n//         let v1 = this.state.v1 - e.deltaY * zoomRate/2;\n//         // console.log(\"e.deltaY * zoomRate\", e.deltaY * zoomRate)\n//         // console.log(\"v0\", e.deltaY * zoomRate, v0)\n//         // console.log(\"v1\", this.state.v1, v1)\n//\n//         this.setState({v0, v1, v2, v3})\n//       }\n//\n//       if (e.deltaY > 0) {\n//         //console.log('zoom out');\n//\n//         let v2 = e.deltaY * zoomRate + this.state.v2;\n//         let v3 = e.deltaY * zoomRate + this.state.v3;\n//\n//         let v0 = this.state.v0 - e.deltaY * zoomRate/2;\n//         let v1 = this.state.v1 - e.deltaY * zoomRate/2;\n//\n//         this.setState({v0,v1, v2, v3})\n//       }\n//\n//       return\n//     }\n//\n//     if (e.deltaY < 0) {\n//       //console.log('scrolling up');\n//\n//       let v1 = this.state.v1 + e.deltaY;\n//       this.setState({v1});\n//     }\n//     if (e.deltaY > 0) {\n//       //console.log('scrolling down');\n//\n//       let v1 = this.state.v1 + e.deltaY;\n//       this.setState({v1});\n//     }\n//     if (e.deltaX < 0) {\n//       //console.log('scrolling left');\n//\n//       let v0 = this.state.v0 + e.deltaX;\n//       this.setState({v0});\n//     }\n//     if (e.deltaX > 0) {\n//       //console.log('scrolling right');\n//\n//       let v0 = this.state.v0 + e.deltaX;\n//       this.setState({v0});\n//     }\n//   }\n//\n// //   // Find your root SVG element\n// // var svg = document.querySelector('svg');\n// //\n// // // Create an SVGPoint for future math\n// // var pt = svg.createSVGPoint();\n// //\n// // // Get point in global SVG space\n// // function cursorPoint(evt){\n// //   pt.x = evt.clientX; pt.y = evt.clientY;\n// //   return pt.matrixTransform(svg.getScreenCTM().inverse());\n// // }\n// //\n// // svg.addEventListener('mousemove',function(evt){\n// //   var loc = cursorPoint(evt);\n// //   // Use loc.x and loc.y here\n// // },false);\n//\n//   mouseDown(e) {\n//     this.setState({\n//       mousedown: true\n//     });\n//\n//   }\n//\n//   mouseMove(e) {\n//     let loc = utils.getSVGpoint(e, this.state.v0, this.state.v1, this.state.v2, this.state.v3 ,this.state.width, this.state.height);\n//\n//     // console.log(loc.x, loc.y)\n//   }\n//\n//   mouseUp(e) {\n//     this.setState({\n//       mousedown: false\n//     });\n//   }\n//\n//   render() {\n//\n//     return (\n//       <svg\n//         width={this.state.width}\n//         height={this.state.height}\n//         viewBox={`${this.state.v0} ${this.state.v1} ${this.state.v2} ${this.state.v3}`}\n//         xmlns={\"http://www.w3.org/2000/svg\"}\n//         onWheel={(e) => this.wheel(e)}\n//         onMouseDown={(e) => this.mouseDown(e)}\n//         onMouseMove={(e) => this.mouseMove(e)}\n//         onMouseUp={(e) => this.mouseUp(e)}\n//         style={{border: \"1px solid #cccccc\"}}>\n//\n//           {this.props.groups}\n//       </svg>\n//     );\n//   }\n// }\n//\n// export {Workplane}\n\nimport React, { Component, useState} from 'react';\nimport * as utils from './utils.js';\n\n\nconst Workplane = ({groups}) => {\n\n  const [state, setState] = useState({\n      width: 500,\n      height: 500,\n    });\n\n  const [v0, setV0] = useState(0);\n  const [v1, setV1] = useState(0);\n  const [v2, setV2] = useState(500);\n  const [v3, setV3] = useState(500);\n\n  const wheel = (e) => {\n    e.preventDefault();\n    let loc = utils.getSVGpoint(e, v0, v1, v2, v3 ,state.width, state.height);\n\n    if (e.ctrlKey) {\n\n      let zoomRate = 10;\n      //zooms to center now\n\n      if (e.deltaY < 0) {\n        //console.log('zoom in');\n\n        let v2 = (e.deltaY * zoomRate + v2 > 1) ? e.deltaY * zoomRate + v2 : v2;\n        let v3 = (e.deltaY * zoomRate + v3 > 1) ? e.deltaY * zoomRate + v3 : v3;\n\n        let v0 = v0 - e.deltaY * zoomRate/2;\n        let v1 = v1 - e.deltaY * zoomRate/2;\n        // console.log(\"e.deltaY * zoomRate\", e.deltaY * zoomRate)\n        // console.log(\"v0\", e.deltaY * zoomRate, v0)\n        // console.log(\"v1\", state.v1, v1)\n\n        setV0(v0);\n        setV1(v1);\n        setV2(v2);\n        setV3(v3);\n      }\n\n      if (e.deltaY > 0) {\n        //console.log('zoom out');\n\n        let v2 = e.deltaY * zoomRate + state.v2;\n        let v3 = e.deltaY * zoomRate + state.v3;\n\n        let v0 = state.v0 - e.deltaY * zoomRate/2;\n        let v1 = state.v1 - e.deltaY * zoomRate/2;\n\n        setV0(v0);\n        setV1(v1);\n        setV2(v2);\n        setV3(v3);\n      }\n\n      return\n    }\n\n    if (e.deltaY < 0) {\n      //console.log('scrolling up');\n\n      let v1 = v1 + e.deltaY;\n      setV1(v1);\n    }\n    if (e.deltaY > 0) {\n      //console.log('scrolling down');\n\n      let v1 = v1 + e.deltaY;\n      setV1(v1);\n    }\n    if (e.deltaX < 0) {\n      //console.log('scrolling left');\n\n      let v0 = v0 + e.deltaX;\n      setV0(v0);\n    }\n    if (e.deltaX > 0) {\n      //console.log('scrolling right');\n\n      let v0 = v0 + e.deltaX;\n      setV0(v0);\n    }\n  }\n\n  return (\n      <svg\n        width={state.width}\n        height={state.height}\n        viewBox={`${v0} ${v1} ${v2} ${v3}`}\n        xmlns={\"http://www.w3.org/2000/svg\"}\n        onWheel={(e) => wheel(e)}\n        style={{border: \"1px solid #cccccc\"}}>\n\n          {groups}\n      </svg>\n  );\n\n}\n\nexport {Workplane}\n"]},"metadata":{},"sourceType":"module"}