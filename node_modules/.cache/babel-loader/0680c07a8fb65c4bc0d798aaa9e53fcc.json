{"ast":null,"code":"/*\n * Copyright 2017 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the terms of the LICENSE file distributed with this project.\n */\nimport * as tslib_1 from \"tslib\";\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport { Manager, Popper, Reference } from \"react-popper\";\nimport { AbstractPureComponent } from \"../../common/abstractPureComponent\";\nimport * as Classes from \"../../common/classes\";\nimport * as Errors from \"../../common/errors\";\nimport { DISPLAYNAME_PREFIX } from \"../../common/props\";\nimport * as Utils from \"../../common/utils\";\nimport { Overlay } from \"../overlay/overlay\";\nimport { ResizeSensor } from \"../resize-sensor/resizeSensor\";\nimport { Tooltip } from \"../tooltip/tooltip\";\nimport { PopoverArrow } from \"./popoverArrow\";\nimport { positionToPlacement } from \"./popoverMigrationUtils\";\nimport { arrowOffsetModifier, getTransformOrigin } from \"./popperUtils\";\nexport var PopoverInteractionKind = {\n  CLICK: \"click\",\n  CLICK_TARGET_ONLY: \"click-target\",\n  HOVER: \"hover\",\n  HOVER_TARGET_ONLY: \"hover-target\"\n};\n\nvar Popover =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(Popover, _super);\n\n  function Popover() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.state = {\n      hasDarkParent: false,\n      isOpen: _this.getIsOpen(_this.props),\n      transformOrigin: \"\"\n    }; // a flag that lets us detect mouse movement between the target and popover,\n    // now that mouseleave is triggered when you cross the gap between the two.\n\n    _this.isMouseInTargetOrPopover = false; // a flag that indicates whether the target previously lost focus to another\n    // element on the same page.\n\n    _this.lostFocusOnSamePage = true;\n    _this.refHandlers = {\n      popover: function popover(ref) {\n        _this.popoverElement = ref;\n        Utils.safeInvoke(_this.props.popoverRef, ref);\n      },\n      target: function target(ref) {\n        return _this.targetElement = ref;\n      }\n    };\n    /**\n     * Instance method to instruct the `Popover` to recompute its position.\n     *\n     * This method should only be used if you are updating the target in a way\n     * that does not cause it to re-render, such as changing its _position_\n     * without changing its _size_ (since `Popover` already repositions when it\n     * detects a resize).\n     */\n\n    _this.reposition = function () {\n      return Utils.safeInvoke(_this.popperScheduleUpdate);\n    };\n\n    _this.renderPopover = function (popperProps) {\n      var _a = _this.props,\n          usePortal = _a.usePortal,\n          interactionKind = _a.interactionKind;\n      var transformOrigin = _this.state.transformOrigin; // Need to update our reference to this on every render as it will change.\n\n      _this.popperScheduleUpdate = popperProps.scheduleUpdate;\n      var popoverHandlers = {\n        // always check popover clicks for dismiss class\n        onClick: _this.handlePopoverClick\n      };\n\n      if (interactionKind === PopoverInteractionKind.HOVER || !usePortal && interactionKind === PopoverInteractionKind.HOVER_TARGET_ONLY) {\n        popoverHandlers.onMouseEnter = _this.handleMouseEnter;\n        popoverHandlers.onMouseLeave = _this.handleMouseLeave;\n      }\n\n      var popoverClasses = classNames(Classes.POPOVER, (_b = {}, _b[Classes.DARK] = _this.props.inheritDarkTheme && _this.state.hasDarkParent, _b[Classes.MINIMAL] = _this.props.minimal, _b), _this.props.popoverClassName);\n      return React.createElement(\"div\", {\n        className: Classes.TRANSITION_CONTAINER,\n        ref: popperProps.ref,\n        style: popperProps.style\n      }, React.createElement(ResizeSensor, {\n        onResize: _this.reposition\n      }, React.createElement(\"div\", tslib_1.__assign({\n        className: popoverClasses,\n        style: {\n          transformOrigin: transformOrigin\n        }\n      }, popoverHandlers), _this.isArrowEnabled() && React.createElement(PopoverArrow, {\n        arrowProps: popperProps.arrowProps,\n        placement: popperProps.placement\n      }), React.createElement(\"div\", {\n        className: Classes.POPOVER_CONTENT\n      }, _this.understandChildren().content))));\n\n      var _b;\n    };\n\n    _this.renderTarget = function (referenceProps) {\n      var _a = _this.props,\n          openOnTargetFocus = _a.openOnTargetFocus,\n          targetClassName = _a.targetClassName,\n          _b = _a.targetProps,\n          targetProps = _b === void 0 ? {} : _b,\n          TagName = _a.targetTagName;\n      var isOpen = _this.state.isOpen;\n\n      var isHoverInteractionKind = _this.isHoverInteractionKind();\n\n      var finalTargetProps = isHoverInteractionKind ? {\n        // HOVER handlers\n        onBlur: _this.handleTargetBlur,\n        onFocus: _this.handleTargetFocus,\n        onMouseEnter: _this.handleMouseEnter,\n        onMouseLeave: _this.handleMouseLeave\n      } : {\n        // CLICK needs only one handler\n        onClick: _this.handleTargetClick\n      };\n      finalTargetProps.className = classNames(Classes.POPOVER_TARGET, (_c = {}, _c[Classes.POPOVER_OPEN] = isOpen, _c), targetProps.className, targetClassName);\n      finalTargetProps.ref = referenceProps.ref;\n      var rawTarget = Utils.ensureElement(_this.understandChildren().target);\n      var rawTabIndex = rawTarget.props.tabIndex; // ensure target is focusable if relevant prop enabled\n\n      var tabIndex = rawTabIndex == null && openOnTargetFocus && isHoverInteractionKind ? 0 : rawTabIndex;\n      var clonedTarget = React.cloneElement(rawTarget, {\n        className: classNames(rawTarget.props.className, (_d = {}, _d[Classes.ACTIVE] = isOpen && !isHoverInteractionKind, _d)),\n        // force disable single Tooltip child when popover is open (BLUEPRINT-552)\n        disabled: isOpen && Utils.isElementOfType(rawTarget, Tooltip) ? true : rawTarget.props.disabled,\n        tabIndex: tabIndex\n      });\n      return React.createElement(ResizeSensor, {\n        onResize: _this.reposition\n      }, React.createElement(TagName, tslib_1.__assign({}, targetProps, finalTargetProps), clonedTarget));\n\n      var _c, _d;\n    };\n\n    _this.handleTargetFocus = function (e) {\n      if (_this.props.openOnTargetFocus && _this.isHoverInteractionKind()) {\n        if (e.relatedTarget == null && !_this.lostFocusOnSamePage) {\n          // ignore this focus event -- the target was already focused but the page itself\n          // lost focus (e.g. due to switching tabs).\n          return;\n        }\n\n        _this.handleMouseEnter(e);\n      }\n\n      Utils.safeInvokeMember(_this.props.targetProps, \"onFocus\", e);\n    };\n\n    _this.handleTargetBlur = function (e) {\n      if (_this.props.openOnTargetFocus && _this.isHoverInteractionKind()) {\n        // if the next element to receive focus is within the popover, we'll want to leave the\n        // popover open.\n        if (!_this.isElementInPopover(e.relatedTarget)) {\n          _this.handleMouseLeave(e);\n        }\n      }\n\n      _this.lostFocusOnSamePage = e.relatedTarget != null;\n      Utils.safeInvokeMember(_this.props.targetProps, \"onBlur\", e);\n    };\n\n    _this.handleMouseEnter = function (e) {\n      _this.isMouseInTargetOrPopover = true; // if we're entering the popover, and the mode is set to be HOVER_TARGET_ONLY, we want to manually\n      // trigger the mouse leave event, as hovering over the popover shouldn't count.\n\n      if (!_this.props.usePortal && _this.isElementInPopover(e.target) && _this.props.interactionKind === PopoverInteractionKind.HOVER_TARGET_ONLY && !_this.props.openOnTargetFocus) {\n        _this.handleMouseLeave(e);\n      } else if (!_this.props.disabled) {\n        // only begin opening popover when it is enabled\n        _this.setOpenState(true, e, _this.props.hoverOpenDelay);\n      }\n\n      Utils.safeInvokeMember(_this.props.targetProps, \"onMouseEnter\", e);\n    };\n\n    _this.handleMouseLeave = function (e) {\n      _this.isMouseInTargetOrPopover = false; // wait until the event queue is flushed, because we want to leave the\n      // popover open if the mouse entered the popover immediately after\n      // leaving the target (or vice versa).\n\n      _this.setTimeout(function () {\n        if (_this.isMouseInTargetOrPopover) {\n          return;\n        } // user-configurable closing delay is helpful when moving mouse from target to popover\n\n\n        _this.setOpenState(false, e, _this.props.hoverCloseDelay);\n      });\n\n      Utils.safeInvokeMember(_this.props.targetProps, \"onMouseLeave\", e);\n    };\n\n    _this.handlePopoverClick = function (e) {\n      var eventTarget = e.target; // an OVERRIDE inside a DISMISS does not dismiss, and a DISMISS inside an OVERRIDE will dismiss.\n\n      var dismissElement = eventTarget.closest(\".\" + Classes.POPOVER_DISMISS + \", .\" + Classes.POPOVER_DISMISS_OVERRIDE);\n      var shouldDismiss = dismissElement != null && dismissElement.classList.contains(Classes.POPOVER_DISMISS);\n      var isDisabled = eventTarget.closest(\":disabled, .\" + Classes.DISABLED) != null;\n\n      if (shouldDismiss && !isDisabled && !e.isDefaultPrevented()) {\n        _this.setOpenState(false, e);\n\n        if (_this.props.captureDismiss) {\n          e.preventDefault();\n        }\n      }\n    };\n\n    _this.handleOverlayClose = function (e) {\n      var eventTarget = e.target; // if click was in target, target event listener will handle things, so don't close\n\n      if (!Utils.elementIsOrContains(_this.targetElement, eventTarget) || e.nativeEvent instanceof KeyboardEvent) {\n        _this.setOpenState(false, e);\n      }\n    };\n\n    _this.handleTargetClick = function (e) {\n      // ensure click did not originate from within inline popover before closing\n      if (!_this.props.disabled && !_this.isElementInPopover(e.target)) {\n        if (_this.props.isOpen == null) {\n          _this.setState(function (prevState) {\n            return {\n              isOpen: !prevState.isOpen\n            };\n          });\n        } else {\n          _this.setOpenState(!_this.props.isOpen, e);\n        }\n      }\n\n      Utils.safeInvokeMember(_this.props.targetProps, \"onClick\", e);\n    };\n    /** Popper modifier that updates React state (for style properties) based on latest data. */\n\n\n    _this.updatePopoverState = function (data) {\n      // always set string; let shouldComponentUpdate determine if update is necessary\n      _this.setState({\n        transformOrigin: getTransformOrigin(data)\n      });\n\n      return data;\n    };\n\n    return _this;\n  }\n\n  Popover.prototype.render = function () {\n    // rename wrapper tag to begin with uppercase letter so it's recognized\n    // as JSX component instead of intrinsic element. but because of its\n    // type, tsc actually recognizes that it is _any_ intrinsic element, so\n    // it can typecheck the HTML props!!\n    var _a = this.props,\n        className = _a.className,\n        disabled = _a.disabled,\n        WrapperTagName = _a.wrapperTagName;\n    var isOpen = this.state.isOpen;\n    var isContentEmpty = Utils.ensureElement(this.understandChildren().content) == null; // need to do this check in render(), because `isOpen` is derived from\n    // state, and state can't necessarily be accessed in validateProps.\n\n    if (isContentEmpty && !disabled && isOpen !== false && !Utils.isNodeEnv(\"production\")) {\n      console.warn(Errors.POPOVER_WARN_EMPTY_CONTENT);\n    }\n\n    return React.createElement(Manager, null, React.createElement(WrapperTagName, {\n      className: classNames(Classes.POPOVER_WRAPPER, className)\n    }, React.createElement(Reference, {\n      innerRef: this.refHandlers.target\n    }, this.renderTarget), React.createElement(Overlay, {\n      autoFocus: this.props.autoFocus,\n      backdropClassName: Classes.POPOVER_BACKDROP,\n      backdropProps: this.props.backdropProps,\n      canEscapeKeyClose: this.props.canEscapeKeyClose,\n      canOutsideClickClose: this.props.interactionKind === PopoverInteractionKind.CLICK,\n      className: this.props.portalClassName,\n      enforceFocus: this.props.enforceFocus,\n      hasBackdrop: this.props.hasBackdrop,\n      isOpen: isOpen && !isContentEmpty,\n      onClose: this.handleOverlayClose,\n      onClosed: this.props.onClosed,\n      onClosing: this.props.onClosing,\n      onOpened: this.props.onOpened,\n      onOpening: this.props.onOpening,\n      transitionDuration: this.props.transitionDuration,\n      transitionName: Classes.POPOVER,\n      usePortal: this.props.usePortal,\n      portalContainer: this.props.portalContainer\n    }, React.createElement(Popper, {\n      innerRef: this.refHandlers.popover,\n      placement: positionToPlacement(this.props.position),\n      modifiers: this.getPopperModifiers()\n    }, this.renderPopover))));\n  };\n\n  Popover.prototype.componentDidMount = function () {\n    this.updateDarkParent();\n  };\n\n  Popover.prototype.componentWillReceiveProps = function (nextProps) {\n    _super.prototype.componentWillReceiveProps.call(this, nextProps);\n\n    var nextIsOpen = this.getIsOpen(nextProps);\n\n    if (nextProps.isOpen != null && nextIsOpen !== this.state.isOpen) {\n      this.setOpenState(nextIsOpen); // tricky: setOpenState calls setState only if this.props.isOpen is\n      // not controlled, so we need to invoke setState manually here.\n\n      this.setState({\n        isOpen: nextIsOpen\n      });\n    } else if (this.state.isOpen && nextProps.isOpen == null && nextProps.disabled) {\n      // special case: close an uncontrolled popover when disabled is set to true\n      this.setOpenState(false);\n    }\n  };\n\n  Popover.prototype.componentDidUpdate = function () {\n    this.updateDarkParent();\n  };\n\n  Popover.prototype.validateProps = function (props) {\n    if (props.isOpen == null && props.onInteraction != null) {\n      console.warn(Errors.POPOVER_WARN_UNCONTROLLED_ONINTERACTION);\n    }\n\n    if (props.hasBackdrop && !props.usePortal) {\n      console.warn(Errors.POPOVER_WARN_HAS_BACKDROP_INLINE);\n    }\n\n    if (props.hasBackdrop && props.interactionKind !== PopoverInteractionKind.CLICK) {\n      throw new Error(Errors.POPOVER_HAS_BACKDROP_INTERACTION);\n    }\n\n    var childrenCount = React.Children.count(props.children);\n    var hasContentProp = props.content !== undefined;\n    var hasTargetProp = props.target !== undefined;\n\n    if (childrenCount === 0 && !hasTargetProp) {\n      throw new Error(Errors.POPOVER_REQUIRES_TARGET);\n    }\n\n    if (childrenCount > 2) {\n      console.warn(Errors.POPOVER_WARN_TOO_MANY_CHILDREN);\n    }\n\n    if (childrenCount > 0 && hasTargetProp) {\n      console.warn(Errors.POPOVER_WARN_DOUBLE_TARGET);\n    }\n\n    if (childrenCount === 2 && hasContentProp) {\n      console.warn(Errors.POPOVER_WARN_DOUBLE_CONTENT);\n    }\n  };\n\n  Popover.prototype.updateDarkParent = function () {\n    if (this.props.usePortal && this.state.isOpen) {\n      var hasDarkParent = this.targetElement != null && this.targetElement.closest(\".\" + Classes.DARK) != null;\n      this.setState({\n        hasDarkParent: hasDarkParent\n      });\n    }\n  }; // content and target can be specified as props or as children. this method\n  // normalizes the two approaches, preferring child over prop.\n\n\n  Popover.prototype.understandChildren = function () {\n    var _a = this.props,\n        children = _a.children,\n        contentProp = _a.content,\n        targetProp = _a.target; // #validateProps asserts that 1 <= children.length <= 2 so content is optional\n\n    var _b = React.Children.toArray(children),\n        targetChild = _b[0],\n        contentChild = _b[1];\n\n    return {\n      content: contentChild == null ? contentProp : contentChild,\n      target: targetChild == null ? targetProp : targetChild\n    };\n  };\n\n  Popover.prototype.getIsOpen = function (props) {\n    // disabled popovers should never be allowed to open.\n    if (props.disabled) {\n      return false;\n    } else if (props.isOpen != null) {\n      return props.isOpen;\n    } else {\n      return props.defaultIsOpen;\n    }\n  };\n\n  Popover.prototype.getPopperModifiers = function () {\n    var _a = this.props,\n        boundary = _a.boundary,\n        modifiers = _a.modifiers;\n    var _b = modifiers.flip,\n        flip = _b === void 0 ? {} : _b,\n        _c = modifiers.preventOverflow,\n        preventOverflow = _c === void 0 ? {} : _c;\n    return tslib_1.__assign({}, modifiers, {\n      arrowOffset: {\n        enabled: this.isArrowEnabled(),\n        fn: arrowOffsetModifier,\n        order: 510\n      },\n      flip: tslib_1.__assign({\n        boundariesElement: boundary\n      }, flip),\n      preventOverflow: tslib_1.__assign({\n        boundariesElement: boundary\n      }, preventOverflow),\n      updatePopoverState: {\n        enabled: true,\n        fn: this.updatePopoverState,\n        order: 900\n      }\n    });\n  }; // a wrapper around setState({isOpen}) that will call props.onInteraction instead when in controlled mode.\n  // starts a timeout to delay changing the state if a non-zero duration is provided.\n\n\n  Popover.prototype.setOpenState = function (isOpen, e, timeout) {\n    var _this = this; // cancel any existing timeout because we have new state\n\n\n    Utils.safeInvoke(this.cancelOpenTimeout);\n\n    if (timeout > 0) {\n      this.cancelOpenTimeout = this.setTimeout(function () {\n        return _this.setOpenState(isOpen, e);\n      }, timeout);\n    } else {\n      if (this.props.isOpen == null) {\n        this.setState({\n          isOpen: isOpen\n        });\n      } else {\n        Utils.safeInvoke(this.props.onInteraction, isOpen, e);\n      }\n\n      if (!isOpen) {\n        Utils.safeInvoke(this.props.onClose, e);\n      }\n    }\n  };\n\n  Popover.prototype.isArrowEnabled = function () {\n    var _a = this.props,\n        minimal = _a.minimal,\n        arrow = _a.modifiers.arrow; // omitting `arrow` from `modifiers` uses Popper default, which does show an arrow.\n\n    return !minimal && (arrow == null || arrow.enabled);\n  };\n\n  Popover.prototype.isElementInPopover = function (element) {\n    return this.popoverElement != null && this.popoverElement.contains(element);\n  };\n\n  Popover.prototype.isHoverInteractionKind = function () {\n    return this.props.interactionKind === PopoverInteractionKind.HOVER || this.props.interactionKind === PopoverInteractionKind.HOVER_TARGET_ONLY;\n  };\n\n  Popover.displayName = DISPLAYNAME_PREFIX + \".Popover\";\n  Popover.defaultProps = {\n    boundary: \"scrollParent\",\n    captureDismiss: false,\n    defaultIsOpen: false,\n    disabled: false,\n    hasBackdrop: false,\n    hoverCloseDelay: 300,\n    hoverOpenDelay: 150,\n    inheritDarkTheme: true,\n    interactionKind: PopoverInteractionKind.CLICK,\n    minimal: false,\n    modifiers: {},\n    openOnTargetFocus: true,\n    position: \"auto\",\n    targetTagName: \"span\",\n    transitionDuration: 300,\n    usePortal: true,\n    wrapperTagName: \"span\"\n  };\n  return Popover;\n}(AbstractPureComponent);\n\nexport { Popover };","map":null,"metadata":{},"sourceType":"module"}