{"ast":null,"code":"var _possibleConstructorReturn = require(\"/Users/leomcelroy/Desktop/barkbeetle_js/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/Users/leomcelroy/Desktop/barkbeetle_js/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/Users/leomcelroy/Desktop/barkbeetle_js/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _classCallCheck = require(\"/Users/leomcelroy/Desktop/barkbeetle_js/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/leomcelroy/Desktop/barkbeetle_js/node_modules/@babel/runtime/helpers/createClass\");\n\nvar regex = require('../utils/regex');\n\nvar Point = require('./Point');\n\nvar Box =\n/*#__PURE__*/\nfunction () {\n  \"use strict\";\n\n  function Box(source) {\n    _classCallCheck(this, Box);\n\n    var base = [0, 0, 0, 0];\n    source = typeof source === 'string' ? source.split(regex.delimiter).map(parseFloat) : Array.isArray(source) ? source : typeof source === 'object' ? [source.left != null ? source.left : source.x, source.top != null ? source.top : source.y, source.width, source.height] : arguments.length === 4 ? [].slice.call(arguments) : base;\n    this.x = this.left = source[0];\n    this.y = this.top = source[1];\n    this.width = source[2];\n    this.height = source[3];\n  } // Merge rect box with another, return a new instance\n\n\n  _createClass(Box, [{\n    key: \"merge\",\n    value: function merge(box) {\n      if (box instanceof NoBox) return new Box(this);\n      var x = Math.min(this.x, box.x);\n      var y = Math.min(this.y, box.y);\n      return new Box(x, y, Math.max(this.x + this.width, box.x + box.width) - x, Math.max(this.y + this.height, box.y + box.height) - y);\n    }\n  }, {\n    key: \"transform\",\n    value: function transform(m) {\n      var xMin = Infinity;\n      var xMax = -Infinity;\n      var yMin = Infinity;\n      var yMax = -Infinity;\n      var pts = [new Point(this.x, this.y), new Point(this.x + this.width, this.y), new Point(this.x, this.y + this.height), new Point(this.x + this.width, this.y + this.height)];\n      pts.forEach(function (p) {\n        p = p.transform(m);\n        xMin = Math.min(xMin, p.x);\n        xMax = Math.max(xMax, p.x);\n        yMin = Math.min(yMin, p.y);\n        yMax = Math.max(yMax, p.y);\n      });\n      return new Box(xMin, yMin, xMax - xMin, yMax - yMin);\n    }\n  }]);\n\n  return Box;\n}();\n\nvar NoBox =\n/*#__PURE__*/\nfunction (_Box) {\n  \"use strict\";\n\n  _inherits(NoBox, _Box);\n\n  function NoBox() {\n    var _this;\n\n    _classCallCheck(this, NoBox);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(NoBox).call(this));\n    _this.x = 0;\n    _this.y = 0;\n    _this.width = 0;\n    _this.height = 0;\n    return _this;\n  } // NoBox has no valid values so it cant be merged\n\n\n  _createClass(NoBox, [{\n    key: \"merge\",\n    value: function merge(box) {\n      return box instanceof NoBox ? new NoBox() : new Box(box);\n    }\n  }, {\n    key: \"transform\",\n    value: function transform(m) {\n      return new NoBox();\n    }\n  }]);\n\n  return NoBox;\n}(Box);\n\nBox.NoBox = NoBox;\nmodule.exports = Box;","map":null,"metadata":{},"sourceType":"script"}