{"ast":null,"code":"(function () {\n  var Query, pathScorer, pluckCandidates, scorer, sortCandidates;\n  scorer = require('./scorer');\n  pathScorer = require('./pathScorer');\n  Query = require('./query');\n\n  pluckCandidates = function pluckCandidates(a) {\n    return a.candidate;\n  };\n\n  sortCandidates = function sortCandidates(a, b) {\n    return b.score - a.score;\n  };\n\n  module.exports = function (candidates, query, options) {\n    var bKey, candidate, key, maxInners, maxResults, score, scoreProvider, scoredCandidates, spotLeft, string, usePathScoring, _i, _len;\n\n    scoredCandidates = [];\n    key = options.key, maxResults = options.maxResults, maxInners = options.maxInners, usePathScoring = options.usePathScoring;\n    spotLeft = maxInners != null && maxInners > 0 ? maxInners : candidates.length + 1;\n    bKey = key != null;\n    scoreProvider = usePathScoring ? pathScorer : scorer;\n\n    for (_i = 0, _len = candidates.length; _i < _len; _i++) {\n      candidate = candidates[_i];\n      string = bKey ? candidate[key] : candidate;\n\n      if (!string) {\n        continue;\n      }\n\n      score = scoreProvider.score(string, query, options);\n\n      if (score > 0) {\n        scoredCandidates.push({\n          candidate: candidate,\n          score: score\n        });\n\n        if (! --spotLeft) {\n          break;\n        }\n      }\n    }\n\n    scoredCandidates.sort(sortCandidates);\n    candidates = scoredCandidates.map(pluckCandidates);\n\n    if (maxResults != null) {\n      candidates = candidates.slice(0, maxResults);\n    }\n\n    return candidates;\n  };\n}).call(this);","map":null,"metadata":{},"sourceType":"script"}