{"ast":null,"code":"var _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nimport React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport cn from 'classnames';\nimport updateUnit from '../utils/NumberUtils/updateUnit';\nimport TrackFill from './TrackFill';\nimport Thumb from './Thumb';\nimport ThumbMask from './ThumbMask';\nimport DiscreteValue from './DiscreteValue';\n\nvar half = function half(w) {\n  return w / 2;\n};\n/**\n * The `Track` component is used for showing the current state of the slider.\n * It will render the `TrackFill`, `Thumb`, and `ThumbMask` components.\n */\n\n\nvar Track = function (_PureComponent) {\n  _inherits(Track, _PureComponent);\n\n  function Track() {\n    _classCallCheck(this, Track);\n\n    return _possibleConstructorReturn(this, _PureComponent.apply(this, arguments));\n  }\n\n  Track.prototype.render = function render() {\n    var _props = this.props,\n        on = _props.on,\n        off = _props.off,\n        active = _props.active,\n        disabled = _props.disabled,\n        dragging = _props.dragging,\n        className = _props.className,\n        thumbLeft = _props.thumbLeft,\n        trackFillWidth = _props.trackFillWidth,\n        trackFillStyle = _props.trackFillStyle,\n        trackFillClassName = _props.trackFillClassName,\n        discreteValueStyle = _props.discreteValueStyle,\n        discreteValueClassName = _props.discreteValueClassName,\n        maskInked = _props.maskInked,\n        maskLeaving = _props.maskLeaving,\n        thumbStyle = _props.thumbStyle,\n        thumbClassName = _props.thumbClassName,\n        discrete = _props.discrete,\n        onThumbFocus = _props.onThumbFocus,\n        onThumbKeyUp = _props.onThumbKeyUp,\n        onThumbKeyDown = _props.onThumbKeyDown,\n        value = _props.value,\n        tickWidth = _props.tickWidth,\n        discreteTicks = _props.discreteTicks,\n        scale = _props.scale,\n        step = _props.step,\n        valuePrecision = _props.valuePrecision,\n        props = _objectWithoutProperties(_props, ['on', 'off', 'active', 'disabled', 'dragging', 'className', 'thumbLeft', 'trackFillWidth', 'trackFillStyle', 'trackFillClassName', 'discreteValueStyle', 'discreteValueClassName', 'maskInked', 'maskLeaving', 'thumbStyle', 'thumbClassName', 'discrete', 'onThumbFocus', 'onThumbKeyUp', 'onThumbKeyDown', 'value', 'tickWidth', 'discreteTicks', 'scale', 'step', 'valuePrecision']);\n\n    var ticks = [];\n\n    if (typeof discreteTicks !== 'undefined' && !disabled && discrete) {\n      var amt = scale / (discreteTicks / step);\n      var offset = updateUnit(tickWidth, half, 'px');\n      var inc = 100 / amt;\n\n      for (var i = 0; i <= amt; i++) {\n        var left = i * inc + '%';\n        var width = tickWidth;\n\n        if (i === 0 || i === amt) {\n          width = updateUnit(tickWidth, half);\n        } else {\n          left = 'calc(' + left + ' - ' + offset + ')';\n        }\n\n        ticks.push(React.createElement('span', {\n          key: 'tick-' + i,\n          className: 'md-slider-discrete-tick',\n          style: {\n            left: left,\n            width: width\n          }\n        }));\n      }\n    }\n\n    return React.createElement('div', _extends({}, props, {\n      className: cn('md-slider-track', className)\n    }), ticks, React.createElement(TrackFill, {\n      style: trackFillStyle,\n      className: trackFillClassName,\n      disabled: disabled,\n      dragging: dragging,\n      trackFillWidth: trackFillWidth\n    }), React.createElement(Thumb, {\n      style: thumbStyle,\n      className: thumbClassName,\n      on: on,\n      off: off,\n      disabled: disabled,\n      dragging: dragging,\n      active: active,\n      thumbLeft: thumbLeft,\n      onFocus: onThumbFocus,\n      onKeyUp: onThumbKeyUp,\n      onKeyDown: onThumbKeyDown,\n      discrete: discrete\n    }), React.createElement(DiscreteValue, {\n      style: discreteValueStyle,\n      className: discreteValueClassName,\n      discrete: discrete,\n      dragging: dragging,\n      active: active,\n      value: value,\n      thumbLeft: thumbLeft,\n      valuePrecision: valuePrecision\n    }), React.createElement(ThumbMask, {\n      dragging: dragging,\n      disabled: disabled,\n      thumbLeft: thumbLeft,\n      maskInked: maskInked,\n      discrete: discrete,\n      leaving: maskLeaving\n    }));\n  };\n\n  return Track;\n}(PureComponent);\n\nTrack.propTypes = {\n  style: PropTypes.object,\n  className: PropTypes.string,\n  thumbStyle: PropTypes.object,\n  thumbClassName: PropTypes.string,\n  trackFillStyle: PropTypes.object,\n  trackFillClassName: PropTypes.string,\n  discreteValueStyle: PropTypes.object,\n  discreteValueClassName: PropTypes.string,\n  on: PropTypes.bool,\n  off: PropTypes.bool,\n  active: PropTypes.bool,\n  dragging: PropTypes.bool,\n  disabled: PropTypes.bool,\n  thumbLeft: PropTypes.string.isRequired,\n  trackFillWidth: PropTypes.string.isRequired,\n  value: PropTypes.number.isRequired,\n  discrete: PropTypes.bool,\n  maskInked: PropTypes.bool,\n  maskLeaving: PropTypes.bool,\n  onThumbKeyUp: PropTypes.func.isRequired,\n  onThumbKeyDown: PropTypes.func.isRequired,\n  onThumbFocus: PropTypes.func.isRequired,\n  scale: PropTypes.number,\n  step: PropTypes.number,\n  discreteTicks: PropTypes.number,\n  tickWidth: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  valuePrecision: PropTypes.number.isRequired\n};\nexport default Track;","map":null,"metadata":{},"sourceType":"module"}