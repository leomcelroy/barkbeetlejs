{"ast":null,"code":"/**\n * from redux.compose https://github.com/reactjs/redux/blob/master/src/compose.js\n * Composes single-argument functions from right to left. The rightmost\n * function can take multiple arguments as it provides the signature for\n * the resulting composite function.\n *\n * @param {...Function} funcs The functions to compose.\n * @returns {Function} A function obtained by composing the argument functions\n * from right to left. For example, compose(f, g, h) is identical to doing\n * (...args) => f(g(h(...args))).\n */\nexport function compose() {\n  for (var _len = arguments.length, funcs = new Array(_len), _key = 0; _key < _len; _key++) {\n    funcs[_key] = arguments[_key];\n  }\n\n  if (funcs.length === 0) {\n    return function (arg) {\n      return arg;\n    };\n  } else {\n    var last = funcs[funcs.length - 1];\n    var rest = funcs.slice(0, -1);\n    return function () {\n      return rest.reduceRight(function (composed, f) {\n        return f(composed);\n      }, last.apply(void 0, arguments));\n    };\n  }\n}","map":null,"metadata":{},"sourceType":"module"}