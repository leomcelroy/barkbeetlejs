{"ast":null,"code":"// these are the default settings\nimport * as utils from './utils.js'; //name\n\nvar name = \"anon\"; //sampling rate of gcode points, not used when taking keyPoints\n\nvar minimumSpacing = 2; //units\n\nvar units = \"mm\"; //generate gcode data\n\nvar cutDepth = 8.5;\nvar toolDiameter = 4;\nvar passDepth = .3; //toolDiameter/2;\n//let numberOfOffsets = 3;\n//let stepover = 2;\n\nvar stepoverPercentage = 60; // stepoverPercentage = stepoverPercentage/100;\n\nvar tolerance = 0; //let climbDirection = false;\n\nvar offset = \"outside\"; //let millOuterFirst = false;\n\nvar jogHeight = 10;\nvar jogRate = 6000;\nvar feedRate = 2200;\nvar plungeRate = 1000; //derived parameters\n\nvar toolRadius = toolDiameter / 2; //let nSeries = toolDiameter * stepover;\n\nvar compensatedRadius = toolRadius + tolerance;\nexport var depthOfPasses = function depthOfPasses(cutDepthArg, passDepthArg) {\n  var tempFloor = Math.ceil(cutDepthArg / passDepthArg); //should this be ceiling or floor, I think ceil\n\n  var actualPassDepth = cutDepthArg / tempFloor;\n  return utils.makeSeries(actualPassDepth, actualPassDepth, tempFloor).map(function (n) {\n    return -n;\n  });\n};\nvar tabs = false;\nvar tabThickness = 0;\nvar dogbone = false;\nexport { name, dogbone, tabThickness, tabs, tolerance, toolDiameter, compensatedRadius, cutDepth, passDepth, jogHeight, minimumSpacing, offset, stepoverPercentage, feedRate, jogRate, units, plungeRate };","map":{"version":3,"sources":["/Users/leomcelroy/Desktop/barkbeetle_js/src/parameters.js"],"names":["utils","name","minimumSpacing","units","cutDepth","toolDiameter","passDepth","stepoverPercentage","tolerance","offset","jogHeight","jogRate","feedRate","plungeRate","toolRadius","compensatedRadius","depthOfPasses","cutDepthArg","passDepthArg","tempFloor","Math","ceil","actualPassDepth","makeSeries","map","n","tabs","tabThickness","dogbone"],"mappings":"AAAA;AAEA,OAAO,KAAKA,KAAZ,MAAuB,YAAvB,C,CAEA;;AACA,IAAIC,IAAI,GAAG,MAAX,C,CAEA;;AACA,IAAIC,cAAc,GAAG,CAArB,C,CAEA;;AACA,IAAIC,KAAK,GAAG,IAAZ,C,CAEA;;AACA,IAAIC,QAAQ,GAAG,GAAf;AACA,IAAIC,YAAY,GAAG,CAAnB;AACA,IAAIC,SAAS,GAAG,EAAhB,C,CAAoB;AAEpB;AACA;;AACA,IAAIC,kBAAkB,GAAG,EAAzB,C,CACA;;AAEA,IAAIC,SAAS,GAAG,CAAhB,C,CAEA;;AACA,IAAIC,MAAM,GAAG,SAAb,C,CACA;;AAEA,IAAIC,SAAS,GAAG,EAAhB;AACA,IAAIC,OAAO,GAAG,IAAd;AACA,IAAIC,QAAQ,GAAG,IAAf;AACA,IAAIC,UAAU,GAAG,IAAjB,C,CAEA;;AACA,IAAIC,UAAU,GAAGT,YAAY,GAAC,CAA9B,C,CACA;;AACA,IAAIU,iBAAiB,GAAGD,UAAU,GAAGN,SAArC;AAEA,OAAO,IAAMQ,aAAa,GAAG,SAAhBA,aAAgB,CAACC,WAAD,EAAcC,YAAd,EAA+B;AAC1D,MAAIC,SAAS,GAAGC,IAAI,CAACC,IAAL,CAAUJ,WAAW,GAACC,YAAtB,CAAhB,CAD0D,CACL;;AACrD,MAAII,eAAe,GAAGL,WAAW,GAACE,SAAlC;AAEA,SAAOnB,KAAK,CAACuB,UAAN,CAAiBD,eAAjB,EAAkCA,eAAlC,EAAmDH,SAAnD,EAA8DK,GAA9D,CAAkE,UAAAC,CAAC;AAAA,WAAI,CAACA,CAAL;AAAA,GAAnE,CAAP;AACD,CALM;AAOP,IAAIC,IAAI,GAAG,KAAX;AACA,IAAIC,YAAY,GAAG,CAAnB;AACA,IAAIC,OAAO,GAAG,KAAd;AAEA,SACE3B,IADF,EAEE2B,OAFF,EAGED,YAHF,EAIED,IAJF,EAKElB,SALF,EAMEH,YANF,EAOEU,iBAPF,EAQEX,QARF,EASEE,SATF,EAUEI,SAVF,EAWER,cAXF,EAYEO,MAZF,EAaEF,kBAbF,EAcEK,QAdF,EAeED,OAfF,EAgBER,KAhBF,EAiBEU,UAjBF","sourcesContent":["// these are the default settings\n\nimport * as utils from './utils.js';\n\n//name\nlet name = \"anon\"\n\n//sampling rate of gcode points, not used when taking keyPoints\nlet minimumSpacing = 2;\n\n//units\nlet units = \"mm\"\n\n//generate gcode data\nlet cutDepth = 8.5;\nlet toolDiameter = 4;\nlet passDepth = .3; //toolDiameter/2;\n\n//let numberOfOffsets = 3;\n//let stepover = 2;\nlet stepoverPercentage = 60;\n// stepoverPercentage = stepoverPercentage/100;\n\nlet tolerance = 0;\n\n//let climbDirection = false;\nlet offset = \"outside\";\n//let millOuterFirst = false;\n\nlet jogHeight = 10;\nlet jogRate = 6000;\nlet feedRate = 2200;\nlet plungeRate = 1000\n\n//derived parameters\nlet toolRadius = toolDiameter/2;\n//let nSeries = toolDiameter * stepover;\nlet compensatedRadius = toolRadius + tolerance;\n\nexport const depthOfPasses = (cutDepthArg, passDepthArg) => {\n  let tempFloor = Math.ceil(cutDepthArg/passDepthArg); //should this be ceiling or floor, I think ceil\n  let actualPassDepth = cutDepthArg/tempFloor;\n\n  return utils.makeSeries(actualPassDepth, actualPassDepth, tempFloor).map(n => -n);\n};\n\nlet tabs = false;\nlet tabThickness = 0;\nlet dogbone = false;\n\nexport {\n  name,\n  dogbone,\n  tabThickness,\n  tabs,\n  tolerance,\n  toolDiameter,\n  compensatedRadius,\n  cutDepth,\n  passDepth,\n  jogHeight,\n  minimumSpacing,\n  offset,\n  stepoverPercentage,\n  feedRate,\n  jogRate,\n  units,\n  plungeRate,\n}\n"]},"metadata":{},"sourceType":"module"}