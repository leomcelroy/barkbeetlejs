{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends2 = require('babel-runtime/helpers/extends');\n\nvar _extends3 = _interopRequireDefault(_extends2);\n\nvar _objectWithoutProperties2 = require('babel-runtime/helpers/objectWithoutProperties');\n\nvar _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);\n\nexports.PopperMixin = PopperMixin;\nexports.PopperReactMixin = PopperReactMixin;\n\nvar _popper = require('popper.js');\n\nvar _popper2 = _interopRequireDefault(_popper);\n\nvar _assert = require('./assert');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar mixinPrototype = {\n  //---------- start: public methods\n\n  /**\n   * @param {HTMLElement} popupElement - The reference element used to position the popper.\n   * @param {HTMLElement} refElement - The HTML element used as popper, or a configuration used to generate the popper.\n   * @param {object} popperOptions, PopperJS options\n   */\n  createPopper: function createPopper(popupElement, refElement, popperOptions) {\n    var _this = this;\n\n    (0, _assert.require_condition)(popupElement && refElement);\n    var _popper_config = this._popper_config,\n        visibleArrow = _popper_config.visibleArrow,\n        placement = _popper_config.placement,\n        zIndex = _popper_config.zIndex,\n        offset = _popper_config.offset,\n        width = _popper_config.width,\n        others = (0, _objectWithoutProperties3.default)(_popper_config, ['visibleArrow', 'placement', 'zIndex', 'offset', 'width']);\n    popperOptions = (0, _extends3.default)({}, popperOptions, others);\n\n    if (!/^(top|bottom|left|right)(-start|-end)?$/g.test(placement)) {\n      return;\n    }\n\n    var popper = popupElement;\n    var reference = refElement;\n    if (!popper || !reference) return;\n    if (visibleArrow) this._appendArrow(popper);\n\n    if (this._poperJS) {\n      this._poperJS.destroy();\n    } // these options are perserved only for smooth the migiration from eleme/element\n\n\n    if (!popperOptions.placement) {\n      popperOptions.placement = placement;\n    }\n\n    if (!popperOptions.offset) {\n      popperOptions.offset = offset;\n    }\n\n    popperOptions.onCreate = function () {\n      _this._resetTransformOrigin();\n\n      _this._popper_state.isCreated = true;\n      _this._poperJS.popper.style.zIndex = zIndex;\n      _this._poperJS.popper.style.width = width !== null ? width + 'px' : reference.getBoundingClientRect().width + 'px';\n    };\n\n    this._poperJS = new _popper2.default(reference, popper, popperOptions);\n  },\n  destroyPopper: function destroyPopper() {\n    if (this._poperJS && this._popper_state.isCreated) {\n      this._poperJS.destroy();\n\n      this._poperJS = null;\n      this._popper_state = {};\n      this._popper_config = {};\n    }\n  },\n  updatePopper: function updatePopper() {\n    if (!this._poperJS && this._popper_state.isCreated) return;\n\n    this._poperJS.update();\n  },\n  //---------- end: public methods\n  _resetTransformOrigin: function _resetTransformOrigin() {\n    var placementMap = {\n      top: 'bottom',\n      bottom: 'top',\n      left: 'right',\n      right: 'left'\n    };\n\n    var placement = this._poperJS.popper.getAttribute('x-placement').split('-')[0];\n\n    var origin = placementMap[placement];\n    this._poperJS.popper.style.transformOrigin = ['top', 'bottom'].indexOf(placement) > -1 ? 'center ' + origin : origin + ' center';\n  },\n  _appendArrow: function _appendArrow(element) {\n    if (this._popper_state.appended) {\n      return;\n    }\n\n    this._popper_state.appended = true;\n    var arrow = document.createElement('div');\n    arrow.setAttribute('x-arrow', '');\n    arrow.className = 'popper__arrow';\n    element.appendChild(arrow);\n  }\n};\n/**\n * @param {args} @see PopperMixin\n * @param {object} config\n    * @param {String} [placement=button] - Placement of the popper accepted values: top(-start, -end), right(-start, -end), bottom(-start, -right), left(-start, -end)\n    * @param {Number} [offset=0] - Amount of pixels the popper will be shifted (can be negative).\n    * @param {Number} [boundariesPadding=5]\n    * @param {Boolean} [visibleArrow=false] Visibility of the arrow, no style.\n*/\n\nfunction PopperMixin(config) {\n  this._popper_config = Object.assign({}, {\n    width: null,\n    zIndex: 1050,\n    offset: 0,\n    placement: 'bottom',\n    boundariesPadding: 5,\n    visibleArrow: false\n  }, config);\n  this._popper_state = {};\n}\n\nPopperMixin.prototype = mixinPrototype;\nvar PopperReactMixinMethods = {\n  hookReactLifeCycle: function hookReactLifeCycle(getPopperRootDom, getRefDom) {\n    var componentDidMount = this.componentDidMount;\n    var componentWillUnmount = this.componentWillUnmount;\n\n    this.componentDidMount = function () {\n      var root = getPopperRootDom();\n      var ref = getRefDom();\n      (0, _assert.require_condition)(root, 'method `getPopperRootDom()` require a HTMLElement instance when componentDidMount is called');\n      (0, _assert.require_condition)(ref, 'method `getRefDom()` require a HTMLElement instance when componentDidMount is called');\n      this.createPopper(root, ref);\n      this._animateRef = window.requestAnimationFrame(this.updatePopper.bind(this));\n\n      if (typeof componentDidMount === 'function') {\n        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n\n        componentDidMount.apply(this, args);\n      }\n    };\n\n    this.componentWillUnmount = function () {\n      window.cancelAnimationFrame(this._animateRef);\n      this.destroyPopper();\n\n      if (typeof componentWillUnmount === 'function') {\n        for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n          args[_key2] = arguments[_key2];\n        }\n\n        componentWillUnmount.apply(this, args);\n      }\n    };\n  }\n};\n/**\n * this Mixin provide utility method to hook reactjs component lifecycle\n *\n * @param getPopperRootDom: ()=>HTMLElement, return your popper root HTMLElement when componentDidMount is called\n * @param getRefDom: ()=>HTMLElement, ref node, the node that popper aligns its pop-up to, see the popperjs doc for more information\n */\n\nfunction PopperReactMixin(getPopperRootDom, getRefDom, config) {\n  var _this2 = this;\n\n  (0, _assert.require_condition)(typeof getPopperRootDom === 'function', '`getPopperRootDom` func is required!');\n  (0, _assert.require_condition)(typeof getRefDom === 'function', '`getRefDom` func is required!');\n  PopperMixin.call(this, config);\n  Object.keys(mixinPrototype).forEach(function (k) {\n    return _this2[k] = mixinPrototype[k];\n  });\n  PopperReactMixinMethods.hookReactLifeCycle.call(this, getPopperRootDom, getRefDom);\n  return this;\n}\n\n;\n\nvar _temp = function () {\n  if (typeof __REACT_HOT_LOADER__ === 'undefined') {\n    return;\n  }\n\n  __REACT_HOT_LOADER__.register(mixinPrototype, 'mixinPrototype', 'libs/utils/popper-mixins.js');\n\n  __REACT_HOT_LOADER__.register(PopperMixin, 'PopperMixin', 'libs/utils/popper-mixins.js');\n\n  __REACT_HOT_LOADER__.register(PopperReactMixinMethods, 'PopperReactMixinMethods', 'libs/utils/popper-mixins.js');\n\n  __REACT_HOT_LOADER__.register(PopperReactMixin, 'PopperReactMixin', 'libs/utils/popper-mixins.js');\n}();\n\n;","map":null,"metadata":{},"sourceType":"script"}