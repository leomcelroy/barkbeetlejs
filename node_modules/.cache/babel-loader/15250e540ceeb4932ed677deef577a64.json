{"ast":null,"code":"import { gcode } from './exampleGCode.js'; //gocode: string -> points: list\n\nvar getPoints = function getPoints(gcode) {\n  var gcodeList = gcode.split('\\n');\n  var preamble = [];\n  var points = [];\n  var sawPreamble = false;\n  gcodeList.forEach(function (e) {\n    if (sawPreamble) {\n      var xIndex = e.indexOf(\"X\");\n      var yIndex = e.indexOf(\"Y\");\n      var fIndex = e.indexOf(\"F\");\n\n      if (e.includes(\"X\")) {\n        var x = e.substring(xIndex + 1, yIndex - 1);\n        console.log(x);\n        x = parseFloat(x);\n        var y = e.substring(yIndex + 1, fIndex - 1);\n        console.log(y);\n        y = parseFloat(y);\n        points.push([x, y]);\n      }\n    } else {\n      preamble.push(e);\n    }\n\n    if (e === \"(end of preamble)\") sawPreamble = true;\n  });\n  return points;\n}; //points: list -> single point: technically list\n\n\nvar center = function center(points) {}; //points: list, x: boolean, y: boolean -> mirrored points: list\n\n\nvar mirror = function mirror(points, x, y) {}; //points: list, xOffset: number, yOffset: number -> offsetPoints: list\n\n\nvar offset = function offset(points) {};\n\nexport var test = function test() {\n  var points = getPoints(gcode);\n  console.log(points);\n};","map":{"version":3,"sources":["/Users/leomcelroy/Desktop/barkbeetle_js/src/gcodeManipulations.js"],"names":["gcode","getPoints","gcodeList","split","preamble","points","sawPreamble","forEach","e","xIndex","indexOf","yIndex","fIndex","includes","x","substring","console","log","parseFloat","y","push","center","mirror","offset","test"],"mappings":"AAAA,SAAQA,KAAR,QAAoB,mBAApB,C,CAEA;;AACA,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAACD,KAAD,EAAW;AAC3B,MAAIE,SAAS,GAAGF,KAAK,CAACG,KAAN,CAAY,IAAZ,CAAhB;AACA,MAAIC,QAAQ,GAAG,EAAf;AACA,MAAIC,MAAM,GAAG,EAAb;AAEA,MAAIC,WAAW,GAAG,KAAlB;AACAJ,EAAAA,SAAS,CAACK,OAAV,CAAkB,UAAAC,CAAC,EAAI;AACrB,QAAIF,WAAJ,EAAiB;AACf,UAAIG,MAAM,GAAGD,CAAC,CAACE,OAAF,CAAU,GAAV,CAAb;AACA,UAAIC,MAAM,GAAGH,CAAC,CAACE,OAAF,CAAU,GAAV,CAAb;AACA,UAAIE,MAAM,GAAGJ,CAAC,CAACE,OAAF,CAAU,GAAV,CAAb;;AAEA,UAAIF,CAAC,CAACK,QAAF,CAAW,GAAX,CAAJ,EAAqB;AACnB,YAAIC,CAAC,GAAGN,CAAC,CAACO,SAAF,CAAYN,MAAM,GAAG,CAArB,EAAwBE,MAAM,GAAG,CAAjC,CAAR;AACAK,QAAAA,OAAO,CAACC,GAAR,CAAYH,CAAZ;AACAA,QAAAA,CAAC,GAAGI,UAAU,CAACJ,CAAD,CAAd;AAEA,YAAIK,CAAC,GAAGX,CAAC,CAACO,SAAF,CAAYJ,MAAM,GAAG,CAArB,EAAwBC,MAAM,GAAG,CAAjC,CAAR;AACAI,QAAAA,OAAO,CAACC,GAAR,CAAYE,CAAZ;AACAA,QAAAA,CAAC,GAAGD,UAAU,CAACC,CAAD,CAAd;AAEAd,QAAAA,MAAM,CAACe,IAAP,CAAY,CAACN,CAAD,EAAIK,CAAJ,CAAZ;AACD;AAEF,KAjBD,MAiBO;AACLf,MAAAA,QAAQ,CAACgB,IAAT,CAAcZ,CAAd;AACD;;AAED,QAAIA,CAAC,KAAK,mBAAV,EAA+BF,WAAW,GAAG,IAAd;AAChC,GAvBD;AAyBA,SAAOD,MAAP;AACD,CAhCD,C,CAkCA;;;AACA,IAAMgB,MAAM,GAAG,SAATA,MAAS,CAAChB,MAAD,EAAY,CAE1B,CAFD,C,CAIA;;;AACA,IAAMiB,MAAM,GAAG,SAATA,MAAS,CAACjB,MAAD,EAASS,CAAT,EAAYK,CAAZ,EAAkB,CAEhC,CAFD,C,CAIA;;;AACA,IAAMI,MAAM,GAAG,SAATA,MAAS,CAAClB,MAAD,EAAY,CAE1B,CAFD;;AAIA,OAAO,IAAMmB,IAAI,GAAG,SAAPA,IAAO,GAAM;AACxB,MAAInB,MAAM,GAAGJ,SAAS,CAACD,KAAD,CAAtB;AACAgB,EAAAA,OAAO,CAACC,GAAR,CAAYZ,MAAZ;AACD,CAHM","sourcesContent":["import {gcode} from './exampleGCode.js';\n\n//gocode: string -> points: list\nconst getPoints = (gcode) => {\n  let gcodeList = gcode.split('\\n');\n  let preamble = [];\n  let points = [];\n\n  let sawPreamble = false;\n  gcodeList.forEach(e => {\n    if (sawPreamble) {\n      let xIndex = e.indexOf(\"X\");\n      let yIndex = e.indexOf(\"Y\");\n      let fIndex = e.indexOf(\"F\");\n\n      if (e.includes(\"X\")) {\n        let x = e.substring(xIndex + 1, yIndex - 1);\n        console.log(x)\n        x = parseFloat(x);\n\n        let y = e.substring(yIndex + 1, fIndex - 1);\n        console.log(y)\n        y = parseFloat(y);\n\n        points.push([x, y]);\n      }\n\n    } else {\n      preamble.push(e);\n    }\n\n    if (e === \"(end of preamble)\") sawPreamble = true;\n  })\n\n  return points;\n}\n\n//points: list -> single point: technically list\nconst center = (points) => {\n\n}\n\n//points: list, x: boolean, y: boolean -> mirrored points: list\nconst mirror = (points, x, y) => {\n\n}\n\n//points: list, xOffset: number, yOffset: number -> offsetPoints: list\nconst offset = (points) => {\n\n}\n\nexport const test = () => {\n  let points = getPoints(gcode);\n  console.log(points)\n}\n"]},"metadata":{},"sourceType":"module"}