{"ast":null,"code":"var _require = require('./mapUtils'),\n    mapMap = _require.mapMap;\n\nvar htmlEntities = function htmlEntities(str) {\n  return String(str).replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\"/g, '&quot;');\n};\n\nvar emptyElements = {\n  br: true,\n  hr: true,\n  img: true,\n  link: true\n};\n\nvar tag = function tag(node) {\n  var attrs = new Map(node.attrs);\n  var name = node.nodeName;\n  var style = node.getAttribute('style');\n  attrs.delete('style');\n\n  if (style) {\n    attrs.set('style', style);\n  }\n\n  if (attrs.has('xmlns') && node.dropNameSpace(attrs.get('xmlns'))) {\n    attrs.delete('xmlns');\n  }\n\n  attrs = mapMap(attrs, function (value, key) {\n    return key + '=\"' + htmlEntities(value) + '\"';\n  });\n  return '<' + [].concat(name, attrs).join(' ') + '>' + (emptyElements[name] ? '' : node.innerHTML + '</' + name + '>');\n};\n\nvar cloneNode = function cloneNode(node) {\n  var clone = new node.constructor(node.nodeName, {\n    attrs: node.attrs,\n    data: node.data,\n    ownerDocument: node.ownerDocument\n  }); // clone styles\n\n  Object.keys(node._style).forEach(function (el) {\n    clone._style[el] = node._style[el];\n  });\n  clone.nodeType = node.nodeType;\n  return clone;\n};\n\nmodule.exports = {\n  tag: tag,\n  cloneNode: cloneNode\n};","map":null,"metadata":{},"sourceType":"script"}