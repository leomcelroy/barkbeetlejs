{"ast":null,"code":"import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport { spacing, dimensions, position, layout } from 'ui-box';\nimport { withTheme } from '../../theme';\nimport { Pane } from '../../layers';\nimport { Heading, Paragraph } from '../../typography';\nimport { IconButton } from '../../buttons';\nimport { Icon } from '../../icon';\n\nvar Alert =\n/*#__PURE__*/\nfunction (_PureComponent) {\n  _inherits(Alert, _PureComponent);\n\n  function Alert() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Alert);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Alert)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"getIconForIntent\", function (intent) {\n      var theme = _this.props.theme;\n      return React.createElement(Icon, _extends({\n        size: 14\n      }, theme.getIconForIntent(intent)));\n    });\n\n    return _this;\n  }\n\n  _createClass(Alert, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          theme = _this$props.theme,\n          title = _this$props.title,\n          intent = _this$props.intent,\n          hasTrim = _this$props.hasTrim,\n          hasIcon = _this$props.hasIcon,\n          children = _this$props.children,\n          appearance = _this$props.appearance,\n          isRemoveable = _this$props.isRemoveable,\n          onRemove = _this$props.onRemove,\n          props = _objectWithoutProperties(_this$props, [\"theme\", \"title\", \"intent\", \"hasTrim\", \"hasIcon\", \"children\", \"appearance\", \"isRemoveable\", \"onRemove\"]);\n      /**\n       * Note that Alert return a className and additional properties.\n       */\n\n\n      var _theme$getAlertProps = theme.getAlertProps({\n        appearance: appearance,\n        intent: intent,\n        hasTrim: hasTrim\n      }),\n          className = _theme$getAlertProps.className,\n          themeProps = _objectWithoutProperties(_theme$getAlertProps, [\"className\"]);\n\n      return React.createElement(Pane, _extends({\n        className: className,\n        role: \"alert\",\n        backgroundColor: \"white\",\n        overflow: \"hidden\",\n        position: \"relative\",\n        display: \"flex\",\n        paddingY: 12,\n        paddingX: 16\n      }, themeProps, props), hasIcon && React.createElement(Pane, {\n        marginRight: 10,\n        marginLeft: 2,\n        height: 14,\n        display: \"block\",\n        marginTop: 2\n      }, this.getIconForIntent(intent)), React.createElement(Pane, {\n        display: \"flex\",\n        width: \"100%\"\n      }, React.createElement(Pane, {\n        flex: 1\n      }, React.createElement(Heading, {\n        is: \"h4\",\n        fontWeight: 600,\n        size: 400,\n        marginTop: 0,\n        marginBottom: 0\n      }, title), typeof children === 'string' ? React.createElement(Paragraph, {\n        size: 400,\n        color: \"muted\"\n      }, children) : children), isRemoveable && React.createElement(Pane, {\n        marginLeft: 24,\n        flexShrink: 0,\n        marginBottom: -2,\n        marginTop: -2,\n        marginRight: -2\n      }, React.createElement(IconButton, {\n        icon: \"cross\",\n        appearance: \"minimal\",\n        height: 24,\n        onClick: onRemove\n      }))));\n    }\n  }]);\n\n  return Alert;\n}(PureComponent);\n\nAlert.displayName = \"Alert\";\n\n_defineProperty(Alert, \"propTypes\", _objectSpread({}, spacing.propTypes, position.propTypes, layout.propTypes, dimensions.propTypes, {\n  /**\n   * The content of the alert. When a string is passed it is wrapped in a `<Text size={400} />` component.\n   */\n  children: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n\n  /**\n   * The intent of the alert.\n   */\n  intent: PropTypes.oneOf(['none', 'success', 'warning', 'danger']).isRequired,\n\n  /**\n   * The title of the alert.\n   */\n  title: PropTypes.node,\n\n  /**\n   * When true, show a border on the left matching the type.\n   */\n  hasTrim: PropTypes.bool,\n\n  /**\n   * When true, show a icon on the left matching the type,\n   */\n  hasIcon: PropTypes.bool,\n\n  /**\n   * When true, show a remove icon button.\n   */\n  isRemoveable: PropTypes.bool,\n\n  /**\n   * Function called when the remove button is clicked.\n   */\n  onRemove: PropTypes.func,\n\n  /**\n   * The appearance of the alert.\n   */\n  appearance: PropTypes.oneOf(['default', 'card']),\n\n  /**\n   * Theme provided by ThemeProvider.\n   */\n  theme: PropTypes.object.isRequired\n}));\n\n_defineProperty(Alert, \"defaultProps\", {\n  intent: 'none',\n  hasTrim: true,\n  hasIcon: true,\n  isRemoveable: false,\n  appearance: 'default'\n});\n\nexport default withTheme(Alert);","map":null,"metadata":{},"sourceType":"module"}