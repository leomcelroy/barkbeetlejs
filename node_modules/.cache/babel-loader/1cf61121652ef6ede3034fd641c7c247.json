{"ast":null,"code":"var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n/** @module utils/findIgnoreCase */\n\n\nimport React from 'react';\n/**\n * This function finds the first item in a `haystack` that starts with every\n * letter of the `value` in order. It will ignore:\n *  - null or undefined\n *  - valid React components\n *\n * @param {Array.<string|number|Object|function>} haystack - the haystack to search.\n * @param {string} value - the current value to use.\n * @param {string=} dataLabel - the object key to use to extract the comparing value.\n *\n * @return {string} the found element or the empty string.\n */\n\nexport default function findIgnoreCase(haystack, value, dataLabel) {\n  var needle = value ? value.toLowerCase() : '';\n\n  if (!needle) {\n    return needle;\n  }\n\n  var suggestion = '';\n  haystack.some(function (hay) {\n    if (hay === null || typeof hay === 'undefined' || React.isValidElement(hay)) {\n      return false;\n    }\n\n    var hayStr = (typeof hay === 'undefined' ? 'undefined' : _typeof(hay)) === 'object' ? hay[dataLabel] : hay.toString();\n\n    if (hayStr.toLowerCase().indexOf(needle) === 0) {\n      suggestion = hayStr;\n    }\n\n    return suggestion;\n  });\n  return suggestion;\n}","map":null,"metadata":{},"sourceType":"module"}