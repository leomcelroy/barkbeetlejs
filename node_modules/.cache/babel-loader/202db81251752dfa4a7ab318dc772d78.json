{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport debounce from 'lodash.debounce';\nimport { Positioner } from '../../positioner';\nimport { Position } from '../../constants';\nimport TooltipStateless from './TooltipStateless';\nvar idCounter = 0;\n\nvar Tooltip =\n/*#__PURE__*/\nfunction (_PureComponent) {\n  _inherits(Tooltip, _PureComponent);\n\n  function Tooltip(props, context) {\n    var _this;\n\n    _classCallCheck(this, Tooltip);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Tooltip).call(this, props, context));\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"show\", function () {\n      if (_this.state.isShown) return;\n\n      _this.setState({\n        isShown: true\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"hide\", function () {\n      if (!_this.state.isShown) return;\n\n      _this.setState({\n        isShown: false\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"renderTarget\", function (_ref) {\n      var getRef = _ref.getRef;\n      var children = _this.props.children;\n      var tooltipTargetProps = {\n        onMouseEnter: _this.show,\n        onMouseLeave: _this.hide,\n        'aria-describedby': _this.state.id\n        /**\n         * Tooltips can be used within a Popover (not the other way around)\n         * When a Tooltip is used within a Popover, the Popover passes\n         * its props to the Tooltip in a `popoverProps` object.\n         */\n        // eslint-disable-next-line react/prop-types\n\n      };\n\n      if (_this.props.popoverProps) {\n        var _this$props$popoverPr = _this.props.popoverProps,\n            getTargetRef = _this$props$popoverPr.getTargetRef,\n            isShown = _this$props$popoverPr.isShown,\n            popoverTargetProps = _objectWithoutProperties(_this$props$popoverPr, [\"getTargetRef\", \"isShown\"]);\n\n        return React.cloneElement(children, _objectSpread({}, popoverTargetProps, tooltipTargetProps, {\n          innerRef: function innerRef(ref) {\n            // Get the ref for the Tooltip.\n            getRef(ref); // Pass the ref to the Popover.\n\n            getTargetRef(ref);\n          }\n        }));\n      }\n      /**\n       * With normal usage only the props for a Tooltip are passed to the target.\n       */\n\n\n      return React.cloneElement(children, _objectSpread({}, tooltipTargetProps, {\n        innerRef: function innerRef(ref) {\n          getRef(ref);\n        }\n      }));\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"isPopoverShown\", function () {\n      return _this.props.popoverProps && _this.props.popoverProps.isShown;\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"handleMouseEnterTarget\", function () {\n      _this.setState({\n        isShownByTarget: true\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"handleMouseLeaveTarget\", function () {\n      _this.setState({\n        isShownByTarget: false\n      });\n    });\n\n    _this.state = {\n      id: \"evergreen-tooltip-\".concat(++idCounter),\n      isShown: props.isShown,\n      isShownByTarget: false\n    };\n    _this.handleMouseLeaveTarget = debounce(_this.handleMouseLeaveTarget, _this.props.hideDelay);\n    _this.hide = debounce(_this.hide, _this.props.hideDelay);\n    return _this;\n  }\n\n  _createClass(Tooltip, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          appearance = _this$props.appearance,\n          isShown = _this$props.isShown,\n          content = _this$props.content,\n          position = _this$props.position,\n          statelessProps = _this$props.statelessProps;\n      var _this$state = this.state,\n          stateIsShown = _this$state.isShown,\n          isShownByTarget = _this$state.isShownByTarget;\n      var shown = (isShown || stateIsShown || isShownByTarget) && !this.isPopoverShown(); // Tooltip was explicitly set to not be shown\n\n      if (isShown === false) {\n        shown = false;\n      }\n\n      return React.createElement(Positioner, {\n        target: function target(_ref2) {\n          var getRef = _ref2.getRef;\n          return _this2.renderTarget({\n            getRef: getRef\n          });\n        },\n        isShown: shown,\n        position: position,\n        animationDuration: 160\n      }, function (_ref3) {\n        var css = _ref3.css,\n            style = _ref3.style,\n            state = _ref3.state,\n            getRef = _ref3.getRef;\n        return React.createElement(TooltipStateless, _extends({\n          id: _this2.state.id,\n          appearance: appearance,\n          innerRef: function innerRef(ref) {\n            return getRef(ref);\n          },\n          \"data-state\": state,\n          css: css,\n          style: style,\n          onMouseEnter: _this2.handleMouseEnterTarget,\n          onMouseLeave: _this2.handleMouseLeaveTarget\n        }, statelessProps), content);\n      });\n    }\n  }]);\n\n  return Tooltip;\n}(PureComponent);\n\nTooltip.displayName = \"Tooltip\";\n\n_defineProperty(Tooltip, \"propTypes\", {\n  /**\n   * The appearance of the tooltip.\n   */\n  appearance: PropTypes.oneOf(['default', 'card']).isRequired,\n\n  /**\n   * The position the Popover is on.\n   */\n  position: PropTypes.oneOf([Position.TOP, Position.TOP_LEFT, Position.TOP_RIGHT, Position.BOTTOM, Position.BOTTOM_LEFT, Position.BOTTOM_RIGHT, Position.LEFT, Position.RIGHT]),\n\n  /**\n   * The content of the Popover.\n   */\n  content: PropTypes.node.isRequired,\n\n  /**\n   * Time in ms before hiding the Tooltip.\n   */\n  hideDelay: PropTypes.number.isRequired,\n\n  /**\n   * When True, manually show the Tooltip.\n   */\n  isShown: PropTypes.bool,\n\n  /**\n   * The target button of the Tooltip.\n   */\n  children: PropTypes.node.isRequired,\n\n  /**\n   * Properties passed through to the Tooltip.\n   */\n  statelessProps: PropTypes.object\n});\n\n_defineProperty(Tooltip, \"defaultProps\", {\n  appearance: 'default',\n  position: Position.BOTTOM,\n  hideDelay: 120\n});\n\nexport { Tooltip as default };","map":null,"metadata":{},"sourceType":"module"}