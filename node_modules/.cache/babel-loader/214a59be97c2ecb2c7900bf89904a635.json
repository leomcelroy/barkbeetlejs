{"ast":null,"code":"//This code is adapted from https://github.com/makercam/makercam/blob/master/src/clipperOffset.ts\nimport ClipperLib from 'js-clipper';\nimport { connectPoints } from './primitives.js';\nimport * as utils from '../utils.js';\nvar EndTypes = {\n  etOpenSquare: 0,\n  etOpenRound: 1,\n  etOpenButt: 2,\n  etClosedPolygon: 3,\n  etClosedLine: 4\n};\nvar JoinTypes = [ClipperLib.JoinType.jtSquare, ClipperLib.JoinType.jtRound, ClipperLib.JoinType.jtMiter];\nexport var clipOffset = function clipOffset(contour, offset) {\n  var joints = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  var tolerance = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0.01;\n  var scale = 1000; // console.log(\"contour\", contour);\n\n  var keyPoints = contour.map(function (line) {\n    return [{\n      X: Math.round(line.origin[0] * scale),\n      Y: Math.round(line.origin[1] * scale)\n    }];\n  }).flat();\n  console.log(contour[contour.length - 1].end);\n  keyPoints.push(keyPoints[0]);\n  var paths = [keyPoints]; //console.log(\"paths\", paths);\n\n  var co = new ClipperLib.ClipperOffset();\n  var offsetted = new ClipperLib.Paths();\n  co.Clear();\n  co.AddPaths(paths, JoinTypes[joints], ClipperLib.EndType.etClosedPolygon); //chain.endless ? EndTypes.etClosedLine : EndTypes.etOpenButt\n\n  co.MiterLimit = 2;\n  co.ArcTolerance = 0.25;\n  co.Execute(offsetted, offset * scale);\n  var newContours = []; //what should I return a list or a js object\n  // console.log(\"offsetted\", offsetted)\n\n  offsetted.forEach(function (points) {\n    // console.log(\"points\", points)\n    if (points.length === 0) return;\n    var result = [];\n    points.forEach(function (point) {\n      result.push([point.X / scale, point.Y / scale]);\n    });\n    result.push(result[0]); //to close it\n    // console.log(\"result\", result);\n    // console.log(\"connected\", connectPoints(result))\n\n    newContours.push(connectPoints(result));\n  }); // console.log(\"newContours\", newContours)\n\n  return newContours.flat();\n}; // let paths = contour.map(line => ([\n//                     {X: Math.round(line.origin[0] * scale), Y: Math.round(line.origin[1] * scale)},\n//                     {X: Math.round(line.end[0] * scale), Y: Math.round(line.end[1] * scale)}\n//             ])).reduce((result, value, index, array) => {\n//                 if (index % 2 === 0) {\n//                     result.push(array.slice(index, index + 2).flat());\n//                 }\n//                 return result;\n//\n//             }, []);","map":{"version":3,"sources":["/Users/leomcelroy/Desktop/barkbeetle_js/src/unmakerjs/clipper.js"],"names":["ClipperLib","connectPoints","utils","EndTypes","etOpenSquare","etOpenRound","etOpenButt","etClosedPolygon","etClosedLine","JoinTypes","JoinType","jtSquare","jtRound","jtMiter","clipOffset","contour","offset","joints","tolerance","scale","keyPoints","map","line","X","Math","round","origin","Y","flat","console","log","length","end","push","paths","co","ClipperOffset","offsetted","Paths","Clear","AddPaths","EndType","MiterLimit","ArcTolerance","Execute","newContours","forEach","points","result","point"],"mappings":"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","sourcesContent":["//This code is adapted from https://github.com/makercam/makercam/blob/master/src/clipperOffset.ts\n\nimport ClipperLib from 'js-clipper';\n\nimport {connectPoints} from './primitives.js';\nimport * as utils from '../utils.js';\n\nconst EndTypes = {\n    etOpenSquare: 0,\n    etOpenRound: 1,\n    etOpenButt: 2,\n    etClosedPolygon: 3,\n    etClosedLine: 4\n};\n\nconst JoinTypes = [\n    ClipperLib.JoinType.jtSquare,\n    ClipperLib.JoinType.jtRound,\n    ClipperLib.JoinType.jtMiter\n]\n\nexport const clipOffset = (contour, offset, joints = 1, tolerance = 0.01) => {\n    const scale = 1000\n    // console.log(\"contour\", contour);\n\n    let keyPoints = contour.map(line =>\n        ([\n            {X: Math.round(line.origin[0] * scale), Y: Math.round(line.origin[1] * scale)},\n            //{X: Math.round(line.end[0] * scale), Y: Math.round(line.end[1] * scale)}\n        ])).flat();\n\n    console.log(contour[contour.length - 1].end);\n\n    keyPoints.push(keyPoints[0]);\n\n    let paths = [keyPoints]\n    //console.log(\"paths\", paths);\n\n    const co = new ClipperLib.ClipperOffset()\n    const offsetted = new ClipperLib.Paths()\n    co.Clear()\n    co.AddPaths(paths, JoinTypes[joints], ClipperLib.EndType.etClosedPolygon) //chain.endless ? EndTypes.etClosedLine : EndTypes.etOpenButt\n    co.MiterLimit = 2\n    co.ArcTolerance = 0.25\n    co.Execute(offsetted, offset * scale);\n\n    let newContours = []; //what should I return a list or a js object\n\n    // console.log(\"offsetted\", offsetted)\n\n    offsetted.forEach((points) => {\n        // console.log(\"points\", points)\n        if (points.length === 0) return\n        let result = []\n        points.forEach((point) => {\n            result.push([point.X / scale, point.Y / scale])\n        })\n\n        result.push(result[0]); //to close it\n        // console.log(\"result\", result);\n        // console.log(\"connected\", connectPoints(result))\n\n        newContours.push(connectPoints(result));\n    })\n\n    // console.log(\"newContours\", newContours)\n\n    return newContours.flat();\n}\n\n// let paths = contour.map(line => ([\n//                     {X: Math.round(line.origin[0] * scale), Y: Math.round(line.origin[1] * scale)},\n//                     {X: Math.round(line.end[0] * scale), Y: Math.round(line.end[1] * scale)}\n//             ])).reduce((result, value, index, array) => {\n//                 if (index % 2 === 0) {\n//                     result.push(array.slice(index, index + 2).flat());\n//                 }\n//                 return result;\n//\n//             }, []);\n"]},"metadata":{},"sourceType":"module"}