{"ast":null,"code":"import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport { dimensions, spacing, position, layout } from 'ui-box';\nimport { Text } from '../../typography';\nimport { Icon } from '../../icon';\nimport { Spinner } from '../../spinner';\nimport { withTheme } from '../../theme';\n\nvar Button =\n/*#__PURE__*/\nfunction (_PureComponent) {\n  _inherits(Button, _PureComponent);\n\n  function Button() {\n    _classCallCheck(this, Button);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Button).apply(this, arguments));\n  }\n\n  _createClass(Button, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          theme = _this$props.theme,\n          className = _this$props.className,\n          intent = _this$props.intent,\n          height = _this$props.height,\n          isActive = _this$props.isActive,\n          children = _this$props.children,\n          disabled = _this$props.disabled,\n          appearance = _this$props.appearance,\n          isLoading = _this$props.isLoading,\n          paddingRight = _this$props.paddingRight,\n          paddingLeft = _this$props.paddingLeft,\n          paddingTop = _this$props.paddingTop,\n          paddingBottom = _this$props.paddingBottom,\n          iconBeforeKey = _this$props.iconBefore,\n          iconAfterKey = _this$props.iconAfter,\n          props = _objectWithoutProperties(_this$props, [\"theme\", \"className\", \"intent\", \"height\", \"isActive\", \"children\", \"disabled\", \"appearance\", \"isLoading\", \"paddingRight\", \"paddingLeft\", \"paddingTop\", \"paddingBottom\", \"iconBefore\", \"iconAfter\"]);\n\n      var themedClassName = theme.getButtonClassName(appearance, intent);\n      var textSize = theme.getTextSizeForControlHeight(height);\n      var borderRadius = theme.getBorderRadiusForControlHeight(height);\n      var iconSize = theme.getIconSizeForButton(height);\n      var pr = paddingRight !== undefined ? paddingRight : Math.round(height / 2); // eslint-disable-line no-negated-condition\n\n      var pl = paddingLeft !== undefined ? paddingLeft : Math.round(height / 2); // eslint-disable-line no-negated-condition\n\n      var iconBefore;\n\n      if (iconBeforeKey) {\n        iconBefore = React.createElement(Icon, {\n          icon: iconBeforeKey,\n          size: iconSize,\n          marginLeft: -Math.round(pl * 0.2),\n          marginRight: Math.round(iconSize * 0.7)\n        });\n      }\n\n      var iconAfter;\n\n      if (iconAfterKey) {\n        iconAfter = React.createElement(Icon, {\n          icon: iconAfterKey,\n          size: iconSize,\n          marginRight: -Math.round(pl * 0.2),\n          marginLeft: Math.round(iconSize * 0.7)\n        });\n      }\n\n      return React.createElement(Text, _extends({\n        is: \"button\",\n        className: cx(themedClassName, className),\n        borderTopRightRadius: borderRadius,\n        borderBottomRightRadius: borderRadius,\n        borderTopLeftRadius: borderRadius,\n        borderBottomLeftRadius: borderRadius,\n        paddingTop: paddingTop,\n        paddingBottom: paddingBottom,\n        paddingRight: pr,\n        paddingLeft: pl,\n        marginLeft: 0 // Removes weird margins in Safari\n        ,\n        marginRight: 0 // Removes weird margins in Safari\n        ,\n        marginTop: 0 // Removes weird margins in Safari\n        ,\n        marginBottom: 0 // Removes weird margins in Safari\n        ,\n        size: textSize,\n        color: null // Prevent the Text color overriding the glamor appearanceStyle color\n        ,\n        height: height,\n        lineHeight: \"\".concat(height, \"px\")\n      }, isActive ? {\n        'data-active': true\n      } : {}, Button.styles, props, {\n        disabled: disabled || isLoading\n      }), isLoading && React.createElement(Spinner, {\n        marginLeft: -Math.round(height / 8),\n        marginRight: Math.round(height / 4),\n        size: Math.round(height / 2)\n      }), iconBefore || null, children, iconAfter || null);\n    }\n  }]);\n\n  return Button;\n}(PureComponent);\n\nButton.displayName = \"Button\";\n\n_defineProperty(Button, \"propTypes\", _objectSpread({}, dimensions.propTypes, spacing.propTypes, position.propTypes, layout.propTypes, {\n  /**\n   * The intent of the button.\n   */\n  intent: PropTypes.oneOf(['none', 'success', 'warning', 'danger']),\n\n  /**\n   * The appearance of the button.\n   */\n  appearance: PropTypes.oneOf(['default', 'minimal', 'primary']).isRequired,\n\n  /**\n   * When true, show a loading spinner before the children.\n   * This also disables the button.\n   */\n  isLoading: PropTypes.bool,\n\n  /**\n   * Forcefully set the active state of a button.\n   * Useful in conjuction with a Popover.\n   */\n  isActive: PropTypes.bool,\n\n  /**\n   * Sets an icon before the text. Can be any icon from Evergreen.\n   */\n  iconBefore: PropTypes.string,\n\n  /**\n   * Sets an icon after the text. Can be any icon from Evergreen.\n   */\n  iconAfter: PropTypes.string,\n\n  /**\n   * When true, the button is disabled.\n   * isLoading also sets the button to disabled.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * Theme provided by ThemeProvider.\n   */\n  theme: PropTypes.object.isRequired,\n\n  /**\n   * Class name passed to the button.\n   * Only use if you know what you are doing.\n   */\n  className: PropTypes.string\n}));\n\n_defineProperty(Button, \"defaultProps\", {\n  appearance: 'default',\n  height: 32,\n  intent: 'none',\n  isActive: false,\n  paddingBottom: 0,\n  paddingTop: 0\n});\n\n_defineProperty(Button, \"styles\", {\n  position: 'relative',\n  fontFamily: 'ui',\n  fontWeight: 500,\n  display: 'inline-flex',\n  alignItems: 'center',\n  flexWrap: 'nowrap'\n});\n\nexport default withTheme(Button);","map":null,"metadata":{},"sourceType":"module"}