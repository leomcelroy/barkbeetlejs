{"ast":null,"code":"import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport Box, { css } from 'ui-box';\nimport { withTheme } from '../../theme';\nvar loadingKeyframes = css.keyframes('loading', {\n  '0%': {\n    transform: 'rotate(0)'\n  },\n  '100%': {\n    transform: 'rotate(360deg)'\n  }\n});\nvar loadingCircleKeyframes = css.keyframes('loading-circle', {\n  '0%': {\n    strokeDashoffset: 600\n  },\n  '100%': {\n    strokeDashoffset: 0\n  }\n});\nvar outer = {\n  animation: \"\".concat(loadingKeyframes, \" 2s linear infinite\")\n};\n\nvar inner = function inner(color) {\n  return {\n    strokeDashoffset: 600,\n    strokeDasharray: 300,\n    strokeWidth: 12,\n    strokeMiterlimit: 10,\n    strokeLinecap: 'round',\n    animation: \"\".concat(loadingCircleKeyframes, \" 1.6s cubic-bezier(0.4, 0.15, 0.6, 0.85) infinite\"),\n    stroke: color,\n    fill: 'transparent'\n  };\n};\n\nvar Spinner =\n/*#__PURE__*/\nfunction (_PureComponent) {\n  _inherits(Spinner, _PureComponent);\n\n  function Spinner(_ref) {\n    var _this;\n\n    var delay = _ref.delay;\n\n    _classCallCheck(this, Spinner);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Spinner).call(this));\n    _this.state = {\n      isVisible: delay === 0\n    };\n    return _this;\n  }\n\n  _createClass(Spinner, [{\n    key: \"render\",\n    value: function render() {\n      if (!this.state.isVisible) {\n        return null;\n      }\n\n      var _this$props = this.props,\n          theme = _this$props.theme,\n          size = _this$props.size,\n          props = _objectWithoutProperties(_this$props, [\"theme\", \"size\"]);\n\n      return React.createElement(Box, _extends({\n        width: size,\n        height: size,\n        lineHeight: 0\n      }, props), React.createElement(Box, {\n        is: \"svg\",\n        css: outer,\n        x: \"0px\",\n        y: \"0px\",\n        viewBox: \"0 0 150 150\"\n      }, React.createElement(Box, {\n        is: \"circle\",\n        css: inner(theme.spinnerColor),\n        cx: \"75\",\n        cy: \"75\",\n        r: \"60\"\n      })));\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      var delay = this.props.delay;\n\n      if (delay > 0) {\n        this.delayTimer = setTimeout(function () {\n          _this2.setState({\n            isVisible: true\n          });\n        }, delay);\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      clearTimeout(this.delayTimer);\n    }\n  }]);\n\n  return Spinner;\n}(PureComponent);\n\nSpinner.displayName = \"Spinner\";\n\n_defineProperty(Spinner, \"propTypes\", _objectSpread({}, Box.propTypes, {\n  /**\n   * Delay after which spinner should be visible.\n   */\n  delay: PropTypes.number,\n\n  /**\n   * The size of the spinner.\n   */\n  size: PropTypes.number.isRequired,\n\n  /**\n   * Theme provided by ThemeProvider.\n   */\n  theme: PropTypes.object.isRequired\n}));\n\n_defineProperty(Spinner, \"defaultProps\", {\n  size: 40,\n  delay: 0\n});\n\nexport default withTheme(Spinner);","map":null,"metadata":{},"sourceType":"module"}