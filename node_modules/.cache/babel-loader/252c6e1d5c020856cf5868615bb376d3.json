{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeof2 = require('babel-runtime/helpers/typeof');\n\nvar _typeof3 = _interopRequireDefault(_typeof2);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _node = require('./node');\n\nvar _node2 = _interopRequireDefault(_node);\n\nvar _util = require('./util');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar TreeStore = function () {\n  function TreeStore(options) {\n    var _this = this;\n\n    (0, _classCallCheck3.default)(this, TreeStore);\n    this.currentNode = null;\n    this.currentNodeKey = null;\n\n    for (var option in options) {\n      if (options.hasOwnProperty(option)) {\n        this[option] = options[option];\n      }\n    }\n\n    this.nodesMap = {};\n    this.root = new _node2.default({\n      data: this.data,\n      store: this\n    });\n\n    if (this.lazy && this.load) {\n      var loadFn = this.load;\n      loadFn(this.root, function (data) {\n        _this.root.doCreateChildren(data);\n\n        _this._initDefaultCheckedNodes();\n      });\n    } else {\n      this._initDefaultCheckedNodes();\n    }\n  }\n\n  (0, _createClass3.default)(TreeStore, [{\n    key: 'filter',\n    value: function filter(value) {\n      var filterNodeMethod = this.filterNodeMethod;\n\n      var traverse = function traverse(node) {\n        var childNodes = node.root ? node.root.childNodes : node.childNodes;\n        childNodes.forEach(function (child) {\n          child.visible = filterNodeMethod.call(child, value, child.data, child);\n          traverse(child);\n        });\n\n        if (!node.visible && childNodes.length) {\n          var allHidden = true;\n          childNodes.forEach(function (child) {\n            if (child.visible) allHidden = false;\n          });\n\n          if (node.root) {\n            node.root.visible = allHidden === false;\n          } else {\n            node.visible = allHidden === false;\n          }\n        }\n\n        if (node.visible && !node.isLeaf) node.expand();\n      };\n\n      traverse(this);\n    }\n  }, {\n    key: 'setData',\n    value: function setData(newVal) {\n      var instanceChanged = newVal !== this.root.data;\n      this.root.setData(newVal);\n\n      if (instanceChanged) {\n        this._initDefaultCheckedNodes();\n      }\n    }\n  }, {\n    key: 'getNode',\n    value: function getNode(data) {\n      var key = (typeof data === 'undefined' ? 'undefined' : (0, _typeof3.default)(data)) !== 'object' ? data : (0, _util.getNodeKey)(this.key, data);\n      return this.nodesMap[key];\n    }\n  }, {\n    key: 'insertBefore',\n    value: function insertBefore(data, refData) {\n      var refNode = this.getNode(refData);\n      refNode.parent.insertBefore({\n        data: data\n      }, refNode);\n    }\n  }, {\n    key: 'insertAfter',\n    value: function insertAfter(data, refData) {\n      var refNode = this.getNode(refData);\n      refNode.parent.insertAfter({\n        data: data\n      }, refNode);\n    }\n  }, {\n    key: 'remove',\n    value: function remove(data) {\n      var node = this.getNode(data);\n\n      if (node) {\n        node.parent.removeChild(node);\n      }\n    }\n  }, {\n    key: 'append',\n    value: function append(data, parentData) {\n      var parentNode = parentData ? this.getNode(parentData) : this.root;\n\n      if (parentNode) {\n        parentNode.insertChild({\n          data: data\n        });\n      }\n    }\n  }, {\n    key: '_initDefaultCheckedNodes',\n    value: function _initDefaultCheckedNodes() {\n      var _this2 = this;\n\n      var defaultCheckedKeys = this.defaultCheckedKeys || [];\n      var nodesMap = this.nodesMap;\n      defaultCheckedKeys.forEach(function (checkedKey) {\n        var node = nodesMap[checkedKey];\n\n        if (node) {\n          node.setChecked(true, !_this2.checkStrictly);\n        }\n      });\n    }\n  }, {\n    key: '_initDefaultCheckedNode',\n    value: function _initDefaultCheckedNode(node) {\n      var defaultCheckedKeys = this.defaultCheckedKeys || [];\n\n      if (defaultCheckedKeys.indexOf(node.key) !== -1) {\n        node.setChecked(true, !this.checkStrictly);\n      }\n    }\n  }, {\n    key: 'setDefaultCheckedKey',\n    value: function setDefaultCheckedKey(newVal) {\n      if (newVal !== this.defaultCheckedKeys) {\n        this.defaultCheckedKeys = newVal;\n\n        this._initDefaultCheckedNodes();\n      }\n    }\n  }, {\n    key: 'registerNode',\n    value: function registerNode(node) {\n      var key = this.key;\n      if (!key || !node || !node.data) return;\n      var nodeKey = node.key;\n      if (nodeKey !== undefined) this.nodesMap[node.key] = node;\n    }\n  }, {\n    key: 'deregisterNode',\n    value: function deregisterNode(node) {\n      var key = this.key;\n      if (!key || !node || !node.data) return;\n      delete this.nodesMap[node.key];\n    }\n  }, {\n    key: 'getCheckedNodes',\n    value: function getCheckedNodes() {\n      var leafOnly = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      var checkedNodes = [];\n\n      var traverse = function traverse(node) {\n        var childNodes = node.root ? node.root.childNodes : node.childNodes;\n        childNodes.forEach(function (child) {\n          if (!leafOnly && child.checked || leafOnly && child.isLeaf && child.checked) {\n            checkedNodes.push(child.data);\n          }\n\n          traverse(child);\n        });\n      };\n\n      traverse(this);\n      return checkedNodes;\n    }\n  }, {\n    key: 'getCheckedKeys',\n    value: function getCheckedKeys() {\n      var leafOnly = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      var key = this.key;\n\n      var allNodes = this._getAllNodes();\n\n      var keys = [];\n      allNodes.forEach(function (node) {\n        if (!leafOnly || leafOnly && node.isLeaf) {\n          if (node.checked) {\n            keys.push((node.data || {})[key]);\n          }\n        }\n      });\n      return keys;\n    }\n  }, {\n    key: '_getAllNodes',\n    value: function _getAllNodes() {\n      var allNodes = [];\n      var nodesMap = this.nodesMap;\n\n      for (var nodeKey in nodesMap) {\n        if (nodesMap.hasOwnProperty(nodeKey)) {\n          allNodes.push(nodesMap[nodeKey]);\n        }\n      }\n\n      return allNodes;\n    }\n  }, {\n    key: '_setCheckedKeys',\n    value: function _setCheckedKeys(key) {\n      var _this3 = this;\n\n      var leafOnly = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var checkedKeys = arguments[2];\n\n      var allNodes = this._getAllNodes();\n\n      allNodes.sort(function (a, b) {\n        return b.level - a.level;\n      });\n      var keys = Object.keys(checkedKeys);\n      allNodes.forEach(function (node) {\n        var checked = keys.indexOf(node.data[key] + '') > -1;\n\n        if (!node.isLeaf) {\n          if (!_this3.checkStrictly) {\n            var childNodes = node.childNodes;\n            var all = true;\n            var none = true;\n\n            for (var i = 0, j = childNodes.length; i < j; i++) {\n              var child = childNodes[i];\n\n              if (child.checked !== true || child.indeterminate) {\n                all = false;\n              }\n\n              if (child.checked !== false || child.indeterminate) {\n                none = false;\n              }\n            }\n\n            if (all) {\n              node.setChecked(true, !_this3.checkStrictly);\n            } else if (!all && !none) {\n              checked = checked ? true : 'half';\n              node.setChecked(checked, !_this3.checkStrictly && checked === true);\n            } else if (none) {\n              node.setChecked(checked, !_this3.checkStrictly);\n            }\n          } else {\n            node.setChecked(checked, false);\n          }\n\n          if (leafOnly) {\n            node.setChecked(false, false);\n\n            var traverse = function traverse(node) {\n              var childNodes = node.childNodes;\n              childNodes.forEach(function (child) {\n                if (!child.isLeaf) {\n                  child.setChecked(false, false);\n                }\n\n                traverse(child);\n              });\n            };\n\n            traverse(node);\n          }\n        } else {\n          node.setChecked(checked, false);\n        }\n      });\n    }\n  }, {\n    key: 'setCheckedNodes',\n    value: function setCheckedNodes(array) {\n      var leafOnly = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var key = this.key;\n      var checkedKeys = {};\n      array.forEach(function (item) {\n        checkedKeys[(item || {})[key]] = true;\n      });\n\n      this._setCheckedKeys(key, leafOnly, checkedKeys);\n    }\n  }, {\n    key: 'setCheckedKeys',\n    value: function setCheckedKeys(keys) {\n      var leafOnly = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      this.defaultCheckedKeys = keys;\n      var key = this.key;\n      var checkedKeys = {};\n      keys.forEach(function (key) {\n        checkedKeys[key] = true;\n      });\n\n      this._setCheckedKeys(key, leafOnly, checkedKeys);\n    }\n  }, {\n    key: 'setDefaultExpandedKeys',\n    value: function setDefaultExpandedKeys(keys) {\n      var _this4 = this;\n\n      keys = keys || [];\n      this.defaultExpandedKeys = keys;\n      keys.forEach(function (key) {\n        var node = _this4.getNode(key);\n\n        if (node) node.expand(null, _this4.autoExpandParent);\n      });\n    }\n  }, {\n    key: 'setChecked',\n    value: function setChecked(data, checked, deep) {\n      var node = this.getNode(data);\n\n      if (node) {\n        node.setChecked(!!checked, deep);\n      }\n    }\n  }, {\n    key: 'getCurrentNode',\n    value: function getCurrentNode() {\n      return this.currentNode;\n    }\n  }, {\n    key: 'setCurrentNode',\n    value: function setCurrentNode(node) {\n      this.currentNode = node;\n    }\n  }, {\n    key: 'setCurrentNodeKey',\n    value: function setCurrentNodeKey(key) {\n      var node = this.getNode(key);\n\n      if (node) {\n        this.currentNode = node;\n      }\n    }\n  }]);\n  return TreeStore;\n}();\n\nvar _default = TreeStore;\nexports.default = _default;\n;\n\nvar _temp = function () {\n  if (typeof __REACT_HOT_LOADER__ === 'undefined') {\n    return;\n  }\n\n  __REACT_HOT_LOADER__.register(TreeStore, 'TreeStore', 'src/tree/model/tree-store.js');\n\n  __REACT_HOT_LOADER__.register(_default, 'default', 'src/tree/model/tree-store.js');\n}();\n\n;","map":null,"metadata":{},"sourceType":"script"}