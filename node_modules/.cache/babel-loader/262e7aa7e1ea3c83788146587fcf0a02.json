{"ast":null,"code":"import * as mjs from 'makerjs';\nimport * as s2p from 'shape2path';\nimport * as svgson from 'svgson';\nimport * as utils from './utils.js';\n\nvar uploadSVG = function uploadSVG(e) {\n  //helper function\n  var replaceWithPath = function replaceWithPath(child) {\n    //TODO: why cant I put this in a different file\n    console.log(\"child\", child);\n    console.log(\"child name\", child.name);\n\n    if (child.name === \"g\") {\n      return child.children.map(function (grandchild) {\n        return replaceWithPath(grandchild);\n      });\n    }\n\n    if (child.name === \"rectangle\") {\n      var x = child.attributes.x;\n      var y = child.attributes.y;\n      var width;\n      var height;\n      var rx;\n      var ry;\n      var temp = s2p.rect({\n        x: x,\n        y: y,\n        width: width,\n        height: height,\n        rx: rx,\n        ry: ry\n      });\n      return mjs.importer.fromSVGPathData(temp);\n    }\n\n    if (child.name === \"circle\") {\n      var cx = child.attributes.cx;\n      var cy = child.attributes.cy;\n      var r = child.attributes.r;\n\n      var _temp = s2p.rect({\n        cx: cx,\n        cy: cy,\n        r: r\n      });\n\n      return mjs.importer.fromSVGPathData(_temp);\n    }\n\n    if (child.name === \"ellipse\") {\n      var _cx = child.attributes.cx;\n      var _cy = child.attributes.cy;\n      var _rx = child.attributes.rx;\n      var _ry = child.attributes.ry;\n\n      var _temp2 = s2p.ellipse({\n        cx: _cx,\n        cy: _cy,\n        rx: _rx,\n        ry: _ry\n      });\n\n      return mjs.importer.fromSVGPathData(_temp2);\n    }\n\n    if (child.name === \"polygon\") {\n      var points;\n\n      var _temp3 = s2p.polygon({\n        points: points\n      });\n\n      return mjs.importer.fromSVGPathData(_temp3);\n    }\n\n    if (child.name === \"polyline\") {\n      var _points;\n\n      var _temp4 = s2p.polyline({\n        points: _points\n      });\n\n      return mjs.importer.fromSVGPathData(_temp4);\n    }\n\n    if (child.name === \"line\") {\n      var x1;\n      var x2;\n      var y1;\n      var y2;\n\n      var _temp5 = s2p.line({\n        x1: x1,\n        x2: x2,\n        y1: y1,\n        y2: y2\n      });\n\n      return mjs.importer.fromSVGPathData(_temp5);\n    }\n\n    if (child.name === \"path\") {\n      var makerjsPath = mjs.importer.fromSVGPathData(child.attributes.d);\n      return makerjsPath;\n    }\n  }; //main event\n\n\n  var files = e.target.files;\n  var file = files[0];\n  var reader = new FileReader();\n\n  reader.onload = function (event) {\n    var text = event.target.result;\n    svgson.parse(text).then(function (json) {\n      var svg = json.children.map(function (child) {\n        return replaceWithPath(child);\n      });\n      svg = svg.flat(1); //TODO: what does the argument do again?\n      //TODO: update state to have makerjs models\n      //console.log(\"svg\", svg);\n\n      var models = {};\n      svg.forEach(function (shape) {\n        models[utils.makeID()] = shape;\n      });\n      console.log(\"models\", models); //ultimately I will set state of app\n    });\n  };\n\n  reader.readAsText(file);\n};\n\nexport { uploadSVG };","map":{"version":3,"sources":["/Users/leomcelroy/Desktop/barkbeetle_js/src/uploadSVG.js"],"names":["mjs","s2p","svgson","utils","uploadSVG","e","replaceWithPath","child","console","log","name","children","map","grandchild","x","attributes","y","width","height","rx","ry","temp","rect","importer","fromSVGPathData","cx","cy","r","ellipse","points","polygon","polyline","x1","x2","y1","y2","line","makerjsPath","d","files","target","file","reader","FileReader","onload","event","text","result","parse","then","json","svg","flat","models","forEach","shape","makeID","readAsText"],"mappings":"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","sourcesContent":["import * as mjs from 'makerjs';\nimport * as s2p from 'shape2path';\nimport * as svgson from 'svgson';\nimport * as utils from './utils.js';\n\n\nconst uploadSVG = (e) => {\n  //helper function\n  const replaceWithPath = (child) => { //TODO: why cant I put this in a different file\n    console.log(\"child\", child);\n    console.log(\"child name\", child.name);\n\n    if (child.name === \"g\") {\n      return child.children.map(grandchild => replaceWithPath(grandchild));\n    }\n\n    if (child.name === \"rectangle\") {\n      let x = child.attributes.x;\n      let y = child.attributes.y;\n      let width;\n      let height;\n      let rx;\n      let ry;\n\n      let temp = s2p.rect({x, y, width, height, rx, ry});\n      return mjs.importer.fromSVGPathData(temp);\n    }\n\n    if (child.name === \"circle\") {\n      let cx = child.attributes.cx;\n      let cy = child.attributes.cy;\n      let r = child.attributes.r;\n\n      let temp = s2p.rect({cx, cy, r});\n      return mjs.importer.fromSVGPathData(temp);\n    }\n\n    if (child.name === \"ellipse\") {\n      let cx = child.attributes.cx;\n      let cy = child.attributes.cy;\n      let rx = child.attributes.rx;\n      let ry = child.attributes.ry;\n\n      let temp = s2p.ellipse({cx, cy, rx, ry});\n      return mjs.importer.fromSVGPathData(temp);\n    }\n\n    if (child.name === \"polygon\") {\n      let points\n\n      let temp = s2p.polygon({points});\n      return mjs.importer.fromSVGPathData(temp);\n    }\n\n    if (child.name === \"polyline\") {\n      let points\n\n      let temp = s2p.polyline({points});\n      return mjs.importer.fromSVGPathData(temp);\n    }\n\n    if (child.name === \"line\") {\n      let x1;\n      let x2;\n      let y1;\n      let y2;\n\n      let temp = s2p.line({x1, x2, y1, y2});\n      return mjs.importer.fromSVGPathData(temp);\n    }\n\n    if (child.name === \"path\") {\n      let makerjsPath = mjs.importer.fromSVGPathData(child.attributes.d);\n      return makerjsPath;\n    }\n  }\n\n  //main event\n  let files = e.target.files;\n  let file = files[0];\n\n  var reader = new FileReader();\n\n  reader.onload = (event) => {\n    let text = event.target.result;\n\n    svgson.parse(text).then((json) => {\n      let svg = json.children.map(child => {\n        return replaceWithPath(child);\n      });\n\n      svg = svg.flat(1); //TODO: what does the argument do again?\n\n      //TODO: update state to have makerjs models\n      //console.log(\"svg\", svg);\n      let models = {};\n\n      svg.forEach(shape => {\n        models[utils.makeID()] = shape;\n      })\n\n      console.log(\"models\", models);\n\n      //ultimately I will set state of app\n    });\n  };\n\n  reader.readAsText(file);\n}\n\nexport {uploadSVG};\n"]},"metadata":{},"sourceType":"module"}