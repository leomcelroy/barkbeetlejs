{"ast":null,"code":"import { isUndefined } from './utils';\nimport { translate } from './translate';\nimport { transform } from './transform';\nvar cos = Math.cos,\n    sin = Math.sin,\n    PI = Math.PI;\n/**\n * Calculate a rotation matrix\n * @param angle {number} Angle in radians\n * @param [cx] {number} If (cx,cy) are supplied the rotate is about this point\n * @param [cy] {number} If (cx,cy) are supplied the rotate is about this point\n * @returns {Matrix} Affine Matrix\n */\n\nexport function rotate(angle, cx, cy) {\n  var cosAngle = cos(angle);\n  var sinAngle = sin(angle);\n  var rotationMatrix = {\n    a: cosAngle,\n    c: -sinAngle,\n    e: 0,\n    b: sinAngle,\n    d: cosAngle,\n    f: 0\n  };\n\n  if (isUndefined(cx) || isUndefined(cy)) {\n    return rotationMatrix;\n  }\n\n  return transform([translate(cx, cy), rotationMatrix, translate(-cx, -cy)]);\n}\n/**\n * Calculate a rotation matrix with a DEG angle\n * @param angle {number} Angle in degree\n * @param [cx] {number} If (cx,cy) are supplied the rotate is about this point\n * @param [cy] {number} If (cx,cy) are supplied the rotate is about this point\n * @returns {Matrix} Affine Matrix\n */\n\nexport function rotateDEG(angle) {\n  var cx = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;\n  var cy = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;\n  return rotate(angle * PI / 180, cx, cy);\n}","map":null,"metadata":{},"sourceType":"module"}