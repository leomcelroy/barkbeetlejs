{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _libs = require('../../libs');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar Tabs = function (_Component) {\n  (0, _inherits3.default)(Tabs, _Component);\n\n  function Tabs(props) {\n    (0, _classCallCheck3.default)(this, Tabs);\n\n    var _this = (0, _possibleConstructorReturn3.default)(this, (Tabs.__proto__ || Object.getPrototypeOf(Tabs)).call(this, props));\n\n    var children = props.children,\n        activeName = props.activeName,\n        value = props.value;\n    children = _react2.default.Children.toArray(children);\n    _this.state = {\n      children: children,\n      currentName: value || activeName || children[0].props.name,\n      barStyle: {},\n      navStyle: {\n        transform: ''\n      },\n      scrollable: false,\n      scrollNext: false,\n      scrollPrev: false\n    };\n    return _this;\n  }\n\n  (0, _createClass3.default)(Tabs, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      this.calcBarStyle(true);\n      this.update();\n    }\n  }, {\n    key: 'componentDidUpdate',\n    value: function componentDidUpdate(prevProps, prevState) {\n      if (prevState.scrollable !== this.state.scrollable) {\n        this.scrollToActiveTab();\n      }\n    }\n  }, {\n    key: 'componentWillReceiveProps',\n    value: function componentWillReceiveProps(nextProps) {\n      var _this2 = this;\n\n      if (nextProps.activeName !== this.props.activeName) {\n        this.setState({\n          currentName: nextProps.activeName\n        }, function () {\n          return _this2.calcBarStyle();\n        });\n      }\n\n      if (nextProps.value !== this.props.value) {\n        this.setState({\n          currentName: nextProps.value\n        }, function () {\n          return _this2.calcBarStyle();\n        });\n      }\n\n      if (nextProps.children !== this.props.children) {\n        this.setState({\n          children: _react2.default.Children.toArray(nextProps.children)\n        }, function () {\n          return _this2.update();\n        });\n      }\n    }\n  }, {\n    key: 'handleTabAdd',\n    value: function handleTabAdd() {\n      var _props = this.props,\n          onTabAdd = _props.onTabAdd,\n          onTabEdit = _props.onTabEdit;\n      onTabEdit && onTabEdit('add');\n      onTabAdd && onTabAdd();\n    }\n  }, {\n    key: 'handleTabRemove',\n    value: function handleTabRemove(tab, index, e) {\n      var _state = this.state,\n          children = _state.children,\n          currentName = _state.currentName;\n      var _props2 = this.props,\n          onTabRemove = _props2.onTabRemove,\n          onTabEdit = _props2.onTabEdit;\n      e.stopPropagation();\n\n      if (children[index].props.name === currentName) {\n        var nextChild = children[index + 1];\n        var prevChild = children[index - 1];\n        this.setState({\n          currentName: nextChild ? nextChild.props.name : prevChild ? prevChild.props.name : '-1'\n        });\n      }\n\n      children.splice(index, 1);\n      this.setState({\n        children: children\n      }, function () {\n        onTabEdit && onTabEdit('remove', tab);\n        onTabRemove && onTabRemove(tab, e);\n      });\n    }\n  }, {\n    key: 'handleTabClick',\n    value: function handleTabClick(tab, e) {\n      var _this3 = this;\n\n      if (tab.props.disabled) {\n        return false;\n      }\n\n      this.setState({\n        currentName: tab.props.name\n      }, function () {\n        var onTabClick = _this3.props.onTabClick;\n\n        _this3.calcBarStyle();\n\n        _this3.scrollToActiveTab();\n\n        onTabClick && onTabClick(tab, e);\n      });\n    }\n  }, {\n    key: 'calcBarStyle',\n    value: function calcBarStyle(firstRendering) {\n      var _this4 = this;\n\n      if (this.props.type || !this.tabs.length) return {};\n      var style = {};\n      var offset = 0;\n      var tabWidth = 0;\n      var children = this.state.children instanceof Array ? this.state.children : [this.state.children];\n      children.every(function (item, index) {\n        var $el = _this4.tabs[index];\n\n        if (item.props.name !== _this4.state.currentName) {\n          offset += $el.clientWidth;\n          return true;\n        } else {\n          tabWidth = $el.clientWidth;\n          return false;\n        }\n      });\n      style.width = tabWidth + 'px';\n      style.transform = 'translateX(' + offset + 'px)';\n\n      if (!firstRendering) {\n        style.transition = 'transform .3s cubic-bezier(.645,.045,.355,1), -webkit-transform .3s cubic-bezier(.645,.045,.355,1)';\n      }\n\n      this.setState({\n        barStyle: style\n      });\n    }\n  }, {\n    key: 'scrollPrev',\n    value: function scrollPrev() {\n      var containerWidth = this.refs.navScroll.offsetWidth;\n      var currentOffset = this.getCurrentScrollOffset();\n      if (!currentOffset) return;\n      var newOffset = currentOffset > containerWidth ? currentOffset - containerWidth : 0;\n      this.setOffset(newOffset);\n    }\n  }, {\n    key: 'scrollNext',\n    value: function scrollNext() {\n      var navWidth = this.refs.nav.offsetWidth;\n      var containerWidth = this.refs.navScroll.offsetWidth;\n      var currentOffset = this.getCurrentScrollOffset();\n      if (navWidth - currentOffset <= containerWidth) return;\n      var newOffset = navWidth - currentOffset > containerWidth * 2 ? currentOffset + containerWidth : navWidth - containerWidth;\n      this.setOffset(newOffset);\n    }\n  }, {\n    key: 'scrollToActiveTab',\n    value: function scrollToActiveTab() {\n      if (!this.state.scrollable) return;\n      var nav = this.refs.nav;\n      var activeTab = nav.querySelector('.is-active');\n      var navScroll = this.refs.navScroll;\n      var activeTabBounding = activeTab.getBoundingClientRect();\n      var navScrollBounding = navScroll.getBoundingClientRect();\n      var navBounding = nav.getBoundingClientRect();\n      var currentOffset = this.getCurrentScrollOffset();\n      var newOffset = currentOffset;\n\n      if (activeTabBounding.left < navScrollBounding.left) {\n        newOffset = currentOffset - (navScrollBounding.left - activeTabBounding.left);\n      }\n\n      if (activeTabBounding.right > navScrollBounding.right) {\n        newOffset = currentOffset + activeTabBounding.right - navScrollBounding.right;\n      }\n\n      if (navBounding.right < navScrollBounding.right) {\n        newOffset = nav.offsetWidth - navScrollBounding.width;\n      }\n\n      this.setOffset(Math.max(newOffset, 0));\n    }\n  }, {\n    key: 'getCurrentScrollOffset',\n    value: function getCurrentScrollOffset() {\n      var navStyle = this.state.navStyle;\n      return navStyle.transform ? Number(navStyle.transform.match(/translateX\\(-(\\d+(\\.\\d+)*)px\\)/)[1]) : 0;\n    }\n  }, {\n    key: 'setOffset',\n    value: function setOffset(value) {\n      this.setState({\n        navStyle: {\n          transform: 'translateX(-' + value + 'px)'\n        }\n      });\n    }\n  }, {\n    key: 'update',\n    value: function update() {\n      var navWidth = this.refs.nav.offsetWidth;\n      var containerWidth = this.refs.navScroll.offsetWidth;\n      var currentOffset = this.getCurrentScrollOffset();\n\n      if (containerWidth < navWidth) {\n        var _currentOffset = this.getCurrentScrollOffset();\n\n        this.setState({\n          scrollable: true,\n          scrollablePrev: _currentOffset,\n          scrollableNext: _currentOffset + containerWidth < navWidth\n        });\n\n        if (navWidth - _currentOffset < containerWidth) {\n          this.setOffset(navWidth - containerWidth);\n        }\n      } else {\n        this.setState({\n          scrollable: false\n        });\n\n        if (currentOffset > 0) {\n          this.setOffset(0);\n        }\n      }\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this5 = this;\n\n      var _state2 = this.state,\n          children = _state2.children,\n          currentName = _state2.currentName,\n          barStyle = _state2.barStyle,\n          navStyle = _state2.navStyle,\n          scrollable = _state2.scrollable,\n          scrollNext = _state2.scrollNext,\n          scrollPrev = _state2.scrollPrev;\n      var _props3 = this.props,\n          type = _props3.type,\n          addable = _props3.addable,\n          closable = _props3.closable,\n          editable = _props3.editable;\n      var tabsCls = this.classNames({\n        'el-tabs': true,\n        'el-tabs--card': type === 'card',\n        'el-tabs--border-card': type === 'border-card'\n      });\n      var addButton = editable || addable ? _react2.default.createElement('span', {\n        className: 'el-tabs__new-tab',\n        onClick: function onClick() {\n          return _this5.handleTabAdd();\n        }\n      }, _react2.default.createElement('i', {\n        className: 'el-icon-plus'\n      })) : null;\n      var scrollBtn = scrollable ? [_react2.default.createElement('span', {\n        key: 'el-tabs__nav-prev',\n        className: scrollable.prev ? 'el-tabs__nav-prev' : 'el-tabs__nav-prev is-disabled',\n        onClick: function onClick() {\n          return _this5.scrollPrev();\n        }\n      }, _react2.default.createElement('i', {\n        className: 'el-icon-arrow-left'\n      })), _react2.default.createElement('span', {\n        key: 'el-tabs__nav-next',\n        className: scrollable.next ? 'el-tabs__nav-next' : 'el-tabs__nav-next is-disabled',\n        onClick: function onClick() {\n          return _this5.scrollNext();\n        }\n      }, _react2.default.createElement('i', {\n        className: 'el-icon-arrow-right'\n      }))] : null;\n      this.tabs = [];\n      return _react2.default.createElement('div', {\n        style: this.style(),\n        className: this.className(tabsCls)\n      }, _react2.default.createElement('div', {\n        className: 'el-tabs__header'\n      }, addButton, _react2.default.createElement('div', {\n        className: scrollable ? 'el-tabs__nav-wrap is-scrollable' : 'el-tabs__nav-wrap'\n      }, scrollBtn, _react2.default.createElement('div', {\n        className: 'el-tabs__nav-scroll',\n        ref: 'navScroll'\n      }, _react2.default.createElement('div', {\n        className: 'el-tabs__nav',\n        ref: 'nav',\n        style: navStyle\n      }, _react2.default.Children.map(children, function (item, index) {\n        var _item$props = item.props,\n            name = _item$props.name,\n            label = _item$props.label,\n            disabled = _item$props.disabled;\n\n        var tabCls = _this5.classNames({\n          'el-tabs__item': true,\n          'is-active': name === currentName,\n          'is-disabled': disabled,\n          'is-closable': closable || item.props.closable\n        });\n\n        return _react2.default.createElement('div', {\n          key: 'el-tabs__item-' + index,\n          ref: function ref(tab) {\n            return tab && _this5.tabs.push(tab);\n          },\n          name: name,\n          className: tabCls,\n          onClick: function onClick(e) {\n            return _this5.handleTabClick(item, e);\n          }\n        }, label, _react2.default.createElement(_libs.View, {\n          show: editable || closable || item.props.closable\n        }, _react2.default.createElement('span', {\n          className: 'el-icon-close',\n          onClick: function onClick(e) {\n            return _this5.handleTabRemove(item, index, e);\n          }\n        })));\n      }), _react2.default.createElement(_libs.View, {\n        show: !type\n      }, _react2.default.createElement('div', {\n        className: 'el-tabs__active-bar',\n        style: barStyle\n      })))))), _react2.default.createElement('div', {\n        className: 'el-tabs__content'\n      }, _react2.default.Children.map(children, function (item) {\n        var name = item.props.name; // let transitionName = '';\n        //\n        // if (name === currentName) {\n        //   transitionName = 'slideInRight';\n        // }\n\n        return _react2.default.createElement(_libs.View, {\n          show: name === currentName\n        }, item);\n      })));\n    }\n  }]);\n  return Tabs;\n}(_libs.Component);\n\nvar _default = Tabs;\nexports.default = _default;\nTabs.propTypes = {\n  type: _libs.PropTypes.oneOf(['card', 'border-card']),\n  activeName: _libs.PropTypes.string,\n  value: _libs.PropTypes.string,\n  closable: _libs.PropTypes.bool,\n  addable: _libs.PropTypes.bool,\n  editable: _libs.PropTypes.bool,\n  onTabClick: _libs.PropTypes.func,\n  onTabRemove: _libs.PropTypes.func,\n  onTabAdd: _libs.PropTypes.func,\n  onTabEdit: _libs.PropTypes.func\n};\nTabs.defaultProps = {\n  closable: false,\n  addable: false,\n  edidable: false\n};\n;\n\nvar _temp = function () {\n  if (typeof __REACT_HOT_LOADER__ === 'undefined') {\n    return;\n  }\n\n  __REACT_HOT_LOADER__.register(Tabs, 'Tabs', 'src/tabs/Tabs.jsx');\n\n  __REACT_HOT_LOADER__.register(_default, 'default', 'src/tabs/Tabs.jsx');\n}();\n\n;","map":null,"metadata":{},"sourceType":"script"}