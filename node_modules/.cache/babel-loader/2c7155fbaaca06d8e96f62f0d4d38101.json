{"ast":null,"code":"/*\n * Copyright 2015 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the terms of the LICENSE file distributed with this project.\n */\nimport * as tslib_1 from \"tslib\";\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport { AbstractPureComponent } from \"../../common/abstractPureComponent\";\nimport * as Classes from \"../../common/classes\";\nimport * as Keys from \"../../common/keys\";\nimport { DISPLAYNAME_PREFIX } from \"../../common/props\";\nimport * as Utils from \"../../common/utils\";\nimport { Tab } from \"./tab\";\nimport { generateTabPanelId, generateTabTitleId, TabTitle } from \"./tabTitle\";\nexport var Expander = function Expander() {\n  return React.createElement(\"div\", {\n    className: Classes.FLEX_EXPANDER\n  });\n};\nvar TAB_SELECTOR = \".\" + Classes.TAB;\n\nvar Tabs =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(Tabs, _super);\n\n  function Tabs(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this.refHandlers = {\n      tablist: function tablist(tabElement) {\n        return _this.tablistElement = tabElement;\n      }\n    };\n\n    _this.handleKeyDown = function (e) {\n      var focusedElement = document.activeElement.closest(TAB_SELECTOR); // rest of this is potentially expensive and futile, so bail if no tab is focused\n\n      if (focusedElement == null) {\n        return;\n      } // must rely on DOM state because we have no way of mapping `focusedElement` to a JSX.Element\n\n\n      var enabledTabElements = _this.getTabElements().filter(function (el) {\n        return el.getAttribute(\"aria-disabled\") === \"false\";\n      });\n\n      var focusedIndex = enabledTabElements.indexOf(focusedElement);\n\n      var direction = _this.getKeyCodeDirection(e);\n\n      if (focusedIndex >= 0 && direction !== undefined) {\n        e.preventDefault();\n        var length_1 = enabledTabElements.length; // auto-wrapping at 0 and `length`\n\n        var nextFocusedIndex = (focusedIndex + direction + length_1) % length_1;\n        enabledTabElements[nextFocusedIndex].focus();\n      }\n    };\n\n    _this.handleKeyPress = function (e) {\n      var targetTabElement = e.target.closest(TAB_SELECTOR);\n\n      if (targetTabElement != null && Keys.isKeyboardClick(e.which)) {\n        e.preventDefault();\n        targetTabElement.click();\n      }\n    };\n\n    _this.handleTabClick = function (newTabId, event) {\n      Utils.safeInvoke(_this.props.onChange, newTabId, _this.state.selectedTabId, event);\n\n      if (_this.props.selectedTabId === undefined) {\n        _this.setState({\n          selectedTabId: newTabId\n        });\n      }\n    };\n\n    _this.renderTabPanel = function (tab) {\n      var _a = tab.props,\n          className = _a.className,\n          panel = _a.panel,\n          id = _a.id;\n\n      if (panel === undefined) {\n        return undefined;\n      }\n\n      return React.createElement(\"div\", {\n        \"aria-labelledby\": generateTabTitleId(_this.props.id, id),\n        \"aria-hidden\": id !== _this.state.selectedTabId,\n        className: classNames(Classes.TAB_PANEL, className),\n        id: generateTabPanelId(_this.props.id, id),\n        key: id,\n        role: \"tabpanel\"\n      }, panel);\n    };\n\n    _this.renderTabTitle = function (child) {\n      if (isTabElement(child)) {\n        var id = child.props.id;\n        return React.createElement(TabTitle, tslib_1.__assign({}, child.props, {\n          parentId: _this.props.id,\n          onClick: _this.handleTabClick,\n          selected: id === _this.state.selectedTabId\n        }));\n      }\n\n      return child;\n    };\n\n    var selectedTabId = _this.getInitialSelectedTabId();\n\n    _this.state = {\n      selectedTabId: selectedTabId\n    };\n    return _this;\n  }\n\n  Tabs.prototype.render = function () {\n    var _a = this.state,\n        indicatorWrapperStyle = _a.indicatorWrapperStyle,\n        selectedTabId = _a.selectedTabId;\n    var tabTitles = React.Children.map(this.props.children, this.renderTabTitle);\n    var tabPanels = this.getTabChildren().filter(this.props.renderActiveTabPanelOnly ? function (tab) {\n      return tab.props.id === selectedTabId;\n    } : function () {\n      return true;\n    }).map(this.renderTabPanel);\n    var tabIndicator = this.props.animate ? React.createElement(\"div\", {\n      className: Classes.TAB_INDICATOR_WRAPPER,\n      style: indicatorWrapperStyle\n    }, React.createElement(\"div\", {\n      className: Classes.TAB_INDICATOR\n    })) : null;\n    var classes = classNames(Classes.TABS, (_b = {}, _b[Classes.VERTICAL] = this.props.vertical, _b), this.props.className);\n    var tabListClasses = classNames(Classes.TAB_LIST, (_c = {}, _c[Classes.LARGE] = this.props.large, _c));\n    return React.createElement(\"div\", {\n      className: classes\n    }, React.createElement(\"div\", {\n      className: tabListClasses,\n      onKeyDown: this.handleKeyDown,\n      onKeyPress: this.handleKeyPress,\n      ref: this.refHandlers.tablist,\n      role: \"tablist\"\n    }, tabIndicator, tabTitles), tabPanels);\n\n    var _b, _c;\n  };\n\n  Tabs.prototype.componentDidMount = function () {\n    this.moveSelectionIndicator();\n  };\n\n  Tabs.prototype.componentWillReceiveProps = function (_a) {\n    var selectedTabId = _a.selectedTabId;\n\n    if (selectedTabId !== undefined) {\n      // keep state in sync with controlled prop, so state is canonical source of truth\n      this.setState({\n        selectedTabId: selectedTabId\n      });\n    }\n  };\n\n  Tabs.prototype.componentDidUpdate = function (prevProps, prevState) {\n    if (this.state.selectedTabId !== prevState.selectedTabId) {\n      this.moveSelectionIndicator();\n    } else if (prevState.selectedTabId != null) {\n      // comparing React nodes is difficult to do with simple logic, so\n      // shallowly compare just their props as a workaround.\n      var didChildrenChange = !Utils.arraysEqual(this.getTabChildrenProps(prevProps), this.getTabChildrenProps(), Utils.shallowCompareKeys);\n\n      if (didChildrenChange) {\n        this.moveSelectionIndicator();\n      }\n    }\n  };\n\n  Tabs.prototype.getInitialSelectedTabId = function () {\n    // NOTE: providing an unknown ID will hide the selection\n    var _a = this.props,\n        defaultSelectedTabId = _a.defaultSelectedTabId,\n        selectedTabId = _a.selectedTabId;\n\n    if (selectedTabId !== undefined) {\n      return selectedTabId;\n    } else if (defaultSelectedTabId !== undefined) {\n      return defaultSelectedTabId;\n    } else {\n      // select first tab in absence of user input\n      var tabs = this.getTabChildren();\n      return tabs.length === 0 ? undefined : tabs[0].props.id;\n    }\n  };\n\n  Tabs.prototype.getKeyCodeDirection = function (e) {\n    if (isEventKeyCode(e, Keys.ARROW_LEFT, Keys.ARROW_UP)) {\n      return -1;\n    } else if (isEventKeyCode(e, Keys.ARROW_RIGHT, Keys.ARROW_DOWN)) {\n      return 1;\n    }\n\n    return undefined;\n  };\n\n  Tabs.prototype.getTabChildrenProps = function (props) {\n    if (props === void 0) {\n      props = this.props;\n    }\n\n    return this.getTabChildren(props).map(function (child) {\n      return child.props;\n    });\n  };\n  /** Filters children to only `<Tab>`s */\n\n\n  Tabs.prototype.getTabChildren = function (props) {\n    if (props === void 0) {\n      props = this.props;\n    }\n\n    return React.Children.toArray(props.children).filter(isTabElement);\n  };\n  /** Queries root HTML element for all tabs with optional filter selector */\n\n\n  Tabs.prototype.getTabElements = function (subselector) {\n    if (subselector === void 0) {\n      subselector = \"\";\n    }\n\n    if (this.tablistElement == null) {\n      return [];\n    }\n\n    return Array.from(this.tablistElement.querySelectorAll(TAB_SELECTOR + subselector));\n  };\n  /**\n   * Calculate the new height, width, and position of the tab indicator.\n   * Store the CSS values so the transition animation can start.\n   */\n\n\n  Tabs.prototype.moveSelectionIndicator = function () {\n    if (this.tablistElement == null || !this.props.animate) {\n      return;\n    }\n\n    var tabIdSelector = TAB_SELECTOR + \"[data-tab-id=\\\"\" + this.state.selectedTabId + \"\\\"]\";\n    var selectedTabElement = this.tablistElement.querySelector(tabIdSelector);\n    var indicatorWrapperStyle = {\n      display: \"none\"\n    };\n\n    if (selectedTabElement != null) {\n      var clientHeight = selectedTabElement.clientHeight,\n          clientWidth = selectedTabElement.clientWidth,\n          offsetLeft = selectedTabElement.offsetLeft,\n          offsetTop = selectedTabElement.offsetTop;\n      indicatorWrapperStyle = {\n        height: clientHeight,\n        transform: \"translateX(\" + Math.floor(offsetLeft) + \"px) translateY(\" + Math.floor(offsetTop) + \"px)\",\n        width: clientWidth\n      };\n    }\n\n    this.setState({\n      indicatorWrapperStyle: indicatorWrapperStyle\n    });\n  };\n  /** Insert a `Tabs.Expander` between any two children to right-align all subsequent children. */\n\n\n  Tabs.Expander = Expander;\n  Tabs.Tab = Tab;\n  Tabs.defaultProps = {\n    animate: true,\n    large: false,\n    renderActiveTabPanelOnly: false,\n    vertical: false\n  };\n  Tabs.displayName = DISPLAYNAME_PREFIX + \".Tabs\";\n  return Tabs;\n}(AbstractPureComponent);\n\nexport { Tabs };\n\nfunction isEventKeyCode(e) {\n  var codes = [];\n\n  for (var _i = 1; _i < arguments.length; _i++) {\n    codes[_i - 1] = arguments[_i];\n  }\n\n  return codes.indexOf(e.which) >= 0;\n}\n\nfunction isTabElement(child) {\n  return Utils.isElementOfType(child, Tab);\n}","map":null,"metadata":{},"sourceType":"module"}