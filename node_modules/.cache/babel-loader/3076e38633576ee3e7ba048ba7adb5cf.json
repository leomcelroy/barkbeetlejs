{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport Box from 'ui-box';\nimport { Button } from '../../buttons';\nimport { TextInput } from '../../text-input';\nexport var CLASS_PREFIX = 'evergreen-file-picker';\n\nvar FilePicker =\n/*#__PURE__*/\nfunction (_PureComponent) {\n  _inherits(FilePicker, _PureComponent);\n\n  function FilePicker() {\n    var _this;\n\n    _classCallCheck(this, FilePicker);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(FilePicker).call(this));\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"fileInputRef\", function (node) {\n      _this.fileInput = node;\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"handleFileChange\", function (e) {\n      var onChange = _this.props.onChange; // Firefox returns the same array instance each time for some reason\n\n      var files = _toConsumableArray(e.target.files);\n\n      _this.setState({\n        files: files\n      });\n\n      if (onChange) {\n        onChange(files);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"handleButtonClick\", function () {\n      _this.fileInput.click();\n    });\n\n    _this.state = {\n      files: []\n    };\n    return _this;\n  }\n\n  _createClass(FilePicker, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          name = _this$props.name,\n          accept = _this$props.accept,\n          required = _this$props.required,\n          multiple = _this$props.multiple,\n          disabled = _this$props.disabled,\n          capture = _this$props.capture,\n          height = _this$props.height,\n          onChange = _this$props.onChange,\n          props = _objectWithoutProperties(_this$props, [\"name\", \"accept\", \"required\", \"multiple\", \"disabled\", \"capture\", \"height\", \"onChange\"]);\n\n      var files = this.state.files;\n      var inputValue;\n\n      if (files.length === 0) {\n        inputValue = '';\n      } else if (files.length === 1) {\n        inputValue = files[0].name;\n      } else {\n        inputValue = \"\".concat(files.length, \" files\");\n      }\n\n      var buttonText;\n\n      if (files.length === 0) {\n        buttonText = 'Select file';\n      } else if (files.length === 1) {\n        buttonText = 'Replace file';\n      } else {\n        buttonText = 'Replace files';\n      }\n\n      return React.createElement(Box, _extends({\n        display: \"flex\",\n        className: \"\".concat(CLASS_PREFIX, \"-root\")\n      }, props), React.createElement(Box, {\n        innerRef: this.fileInputRef,\n        className: \"\".concat(CLASS_PREFIX, \"-file-input\"),\n        is: \"input\",\n        type: \"file\",\n        name: name,\n        accept: accept,\n        required: required,\n        multiple: multiple,\n        disabled: disabled,\n        capture: capture,\n        onChange: this.handleFileChange,\n        display: \"none\"\n      }), React.createElement(TextInput, {\n        className: \"\".concat(CLASS_PREFIX, \"-text-input\"),\n        readOnly: true,\n        value: inputValue,\n        placeholder: \"Select a file to upload\\u2026\" // There's a weird specifity issue when there's two differently sized inputs on the page\n        ,\n        borderTopRightRadius: \"0 !important\",\n        borderBottomRightRadius: \"0 !important\",\n        height: height,\n        flex: 1,\n        textOverflow: \"ellipsis\"\n      }), React.createElement(Button, {\n        className: \"\".concat(CLASS_PREFIX, \"-button\"),\n        onClick: this.handleButtonClick,\n        disabled: disabled,\n        borderTopLeftRadius: 0,\n        borderBottomLeftRadius: 0,\n        height: height,\n        flexShrink: 0,\n        type: \"button\"\n      }, buttonText));\n    }\n  }]);\n\n  return FilePicker;\n}(PureComponent);\n\nFilePicker.displayName = \"FilePicker\";\n\n_defineProperty(FilePicker, \"propTypes\", {\n  /**\n   * Name attribute of the input.\n   */\n  name: PropTypes.string,\n\n  /**\n   * The accept attribute of the input.\n   */\n  accept: PropTypes.oneOfType([PropTypes.string, PropTypes.arrayOf(PropTypes.string)]),\n\n  /**\n   * When true, the file picker is required.\n   */\n  required: PropTypes.bool,\n\n  /**\n   * When true, accept multiple files.\n   */\n  multiple: PropTypes.bool,\n\n  /**\n   * When true, the filepicker is disabled.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * The capture attribute of the input.\n   */\n  capture: PropTypes.bool,\n\n  /**\n   * The height of the file picker.\n   */\n  height: PropTypes.number,\n\n  /**\n   * Function called when onChange is fired\n   */\n  onChange: PropTypes.func\n});\n\nexport { FilePicker as default };","map":null,"metadata":{},"sourceType":"module"}