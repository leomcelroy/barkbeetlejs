{"ast":null,"code":"import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport { spacing, position, layout, dimensions } from 'ui-box';\nimport { Pane } from '../../layers';\nimport { Text } from '../../typography';\nimport Radio from './Radio';\nvar radioCount = 1; // Used for generating unique input names\n\nvar RadioGroup =\n/*#__PURE__*/\nfunction (_PureComponent) {\n  _inherits(RadioGroup, _PureComponent);\n\n  function RadioGroup(props, context) {\n    var _this;\n\n    _classCallCheck(this, RadioGroup);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(RadioGroup).call(this, props, context));\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"handleChange\", function (event) {\n      var value = event.target.value; // Save a render cycle when it's a controlled input\n\n      if (!_this.props.value) {\n        _this.setState({\n          value: value\n        });\n      }\n\n      if (_this.props.onChange) {\n        _this.props.onChange(value);\n      }\n    });\n\n    _this.state = {\n      value: props.defaultValue || props.options[0].value\n    };\n    _this.name = \"RadioGroup-\".concat(radioCount);\n    radioCount += 1;\n    return _this;\n  }\n\n  _createClass(RadioGroup, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          size = _this$props.size,\n          label = _this$props.label,\n          defaultValue = _this$props.defaultValue,\n          value = _this$props.value,\n          options = _this$props.options,\n          onChange = _this$props.onChange,\n          isRequired = _this$props.isRequired,\n          props = _objectWithoutProperties(_this$props, [\"size\", \"label\", \"defaultValue\", \"value\", \"options\", \"onChange\", \"isRequired\"]); // Allows it to behave like a controlled input\n\n\n      var selected = value || this.state.value;\n      return React.createElement(Pane, _extends({\n        role: \"group\",\n        \"aria-label\": label\n      }, props), label && React.createElement(Text, {\n        color: \"muted\",\n        fontWeight: 500\n      }, label), options.map(function (item) {\n        return React.createElement(Radio, {\n          key: item.value,\n          size: size,\n          name: _this2.name,\n          value: item.value,\n          label: item.label,\n          checked: selected === item.value,\n          disabled: item.isDisabled,\n          onChange: _this2.handleChange,\n          isRequired: isRequired\n        });\n      }));\n    }\n  }]);\n\n  return RadioGroup;\n}(PureComponent);\n\nRadioGroup.displayName = \"RadioGroup\";\n\n_defineProperty(RadioGroup, \"propTypes\", _objectSpread({}, spacing.propTypes, position.propTypes, layout.propTypes, dimensions.propTypes, {\n  /**\n   * The options for the radios of the Radio Group.\n   */\n  options: PropTypes.arrayOf(PropTypes.shape({\n    label: PropTypes.node.isRequired,\n    value: PropTypes.string.isRequired,\n    isDisabled: PropTypes.bool\n  })).isRequired,\n\n  /**\n   * The selected item value when controlled.\n   */\n  value: PropTypes.string,\n\n  /**\n   * The default value of the Radio Group when uncontrolled.\n   */\n  defaultValue: PropTypes.string,\n\n  /**\n   * Function called when state changes.\n   */\n  onChange: PropTypes.func.isRequired,\n\n  /**\n   * Label to display above the radio button options.\n   */\n  label: PropTypes.string,\n\n  /**\n   * The size of the radio circle. This also informs the text size and spacing.\n   */\n  size: PropTypes.oneOf([12, 16]).isRequired,\n\n  /**\n   * When true, the radio get the required attribute.\n   */\n  isRequired: PropTypes.bool.isRequired\n}));\n\n_defineProperty(RadioGroup, \"defaultProps\", {\n  options: [],\n  onChange: function onChange() {},\n  size: 12,\n  isRequired: false\n});\n\nexport { RadioGroup as default };","map":null,"metadata":{},"sourceType":"module"}