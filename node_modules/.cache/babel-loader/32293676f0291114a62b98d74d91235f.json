{"ast":null,"code":"import { TOOL_AUTO, TOOL_NONE, TOOL_PAN, TOOL_ZOOM_IN, TOOL_ZOOM_OUT, MODE_PANNING, MODE_ZOOMING, MODE_IDLE } from '../constants';\nimport { setFocus, setViewerCoords, getSVGPoint } from './common';\nimport { startPanning, updatePanning, stopPanning, autoPanIfNeeded } from './pan';\nimport { startZooming, updateZooming, stopZooming, zoom } from './zoom';\nimport mapRange from '../utils/mapRange';\nexport function onMouseDown(event, ViewerDOM, tool, value, props) {\n  var coords = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : null;\n  var x, y;\n\n  if (coords) {\n    x = coords.x;\n    y = coords.y;\n  } else {\n    var _ViewerDOM$getBoundin = ViewerDOM.getBoundingClientRect(),\n        left = _ViewerDOM$getBoundin.left,\n        top = _ViewerDOM$getBoundin.top;\n\n    x = event.clientX - Math.round(left);\n    y = event.clientY - Math.round(top);\n  }\n\n  var nextValue = value;\n\n  switch (tool) {\n    case TOOL_ZOOM_OUT:\n      var SVGPoint = getSVGPoint(value, x, y);\n      nextValue = zoom(value, SVGPoint.x, SVGPoint.y, 1 / props.scaleFactor, props);\n      break;\n\n    case TOOL_ZOOM_IN:\n      nextValue = startZooming(value, x, y);\n      break;\n\n    case TOOL_AUTO:\n    case TOOL_PAN:\n      nextValue = startPanning(value, x, y);\n      break;\n\n    default:\n      return value;\n  }\n\n  event.preventDefault();\n  return nextValue;\n}\nexport function onMouseMove(event, ViewerDOM, tool, value, props) {\n  var coords = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : null;\n  var x, y;\n\n  if (coords) {\n    x = coords.x;\n    y = coords.y;\n  } else {\n    var _ViewerDOM$getBoundin2 = ViewerDOM.getBoundingClientRect(),\n        left = _ViewerDOM$getBoundin2.left,\n        top = _ViewerDOM$getBoundin2.top;\n\n    x = event.clientX - Math.round(left);\n    y = event.clientY - Math.round(top);\n  }\n\n  var forceExit = event.buttons === 0; //the mouse exited and reentered into svg\n\n  var nextValue = value;\n\n  switch (tool) {\n    case TOOL_ZOOM_IN:\n      if (value.mode === MODE_ZOOMING) nextValue = forceExit ? stopZooming(value, x, y, props.scaleFactor, props) : updateZooming(value, x, y);\n      break;\n\n    case TOOL_AUTO:\n    case TOOL_PAN:\n      if (value.mode === MODE_PANNING) nextValue = forceExit ? stopPanning(value) : updatePanning(value, x, y, props.preventPanOutside ? 20 : undefined);\n      break;\n\n    default:\n      return value;\n  }\n\n  event.preventDefault();\n  return nextValue;\n}\nexport function onMouseUp(event, ViewerDOM, tool, value, props) {\n  var coords = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : null;\n  var x, y;\n\n  if (coords) {\n    x = coords.x;\n    y = coords.y;\n  } else {\n    var _ViewerDOM$getBoundin3 = ViewerDOM.getBoundingClientRect(),\n        left = _ViewerDOM$getBoundin3.left,\n        top = _ViewerDOM$getBoundin3.top;\n\n    x = event.clientX - Math.round(left);\n    y = event.clientY - Math.round(top);\n  }\n\n  var nextValue = value;\n\n  switch (tool) {\n    case TOOL_ZOOM_OUT:\n      if (value.mode === MODE_ZOOMING) nextValue = stopZooming(value, x, y, 1 / props.scaleFactor, props);\n      break;\n\n    case TOOL_ZOOM_IN:\n      if (value.mode === MODE_ZOOMING) nextValue = stopZooming(value, x, y, props.scaleFactor, props);\n      break;\n\n    case TOOL_AUTO:\n    case TOOL_PAN:\n      if (value.mode === MODE_PANNING) nextValue = stopPanning(value, x, y);\n      break;\n\n    default:\n      return value;\n  }\n\n  event.preventDefault();\n  return nextValue;\n}\nexport function onDoubleClick(event, ViewerDOM, tool, value, props) {\n  var coords = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : null;\n  var x, y;\n\n  if (coords) {\n    x = coords.x;\n    y = coords.y;\n  } else {\n    var _ViewerDOM$getBoundin4 = ViewerDOM.getBoundingClientRect(),\n        left = _ViewerDOM$getBoundin4.left,\n        top = _ViewerDOM$getBoundin4.top;\n\n    x = event.clientX - Math.round(left);\n    y = event.clientY - Math.round(top);\n  }\n\n  var nextValue = value;\n\n  switch (tool) {\n    case TOOL_AUTO:\n      if (!props.disableDoubleClickZoomWithToolAuto) {\n        var SVGPoint = getSVGPoint(value, x, y);\n\n        var modifierKeysReducer = function modifierKeysReducer(current, modifierKey) {\n          return current || event.getModifierState(modifierKey);\n        };\n\n        var modifierKeyActive = props.modifierKeys.reduce(modifierKeysReducer, false);\n        var scaleFactor = modifierKeyActive ? 1 / props.scaleFactor : props.scaleFactor;\n        nextValue = zoom(value, SVGPoint.x, SVGPoint.y, scaleFactor, props);\n      }\n\n      break;\n\n    default:\n      return value;\n  }\n\n  event.preventDefault();\n  return nextValue;\n}\nexport function onWheel(event, ViewerDOM, tool, value, props) {\n  var coords = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : null;\n  var x, y;\n\n  if (coords) {\n    x = coords.x;\n    y = coords.y;\n  } else {\n    var _ViewerDOM$getBoundin5 = ViewerDOM.getBoundingClientRect(),\n        left = _ViewerDOM$getBoundin5.left,\n        top = _ViewerDOM$getBoundin5.top;\n\n    x = event.clientX - Math.round(left);\n    y = event.clientY - Math.round(top);\n  }\n\n  if (!props.detectWheel) return value;\n  var delta = Math.max(-1, Math.min(1, event.deltaY));\n  var scaleFactor = mapRange(delta, -1, 1, props.scaleFactorOnWheel, 1 / props.scaleFactorOnWheel);\n  var SVGPoint = getSVGPoint(value, x, y);\n  var nextValue = zoom(value, SVGPoint.x, SVGPoint.y, scaleFactor, props);\n  event.preventDefault();\n  return nextValue;\n}\nexport function onMouseEnterOrLeave(event, ViewerDOM, tool, value, props) {\n  var coords = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : null;\n  var nextValue = setFocus(value, event.type === 'mouseenter');\n  event.preventDefault();\n  return nextValue;\n}\nexport function onInterval(event, ViewerDOM, tool, value, props) {\n  var coords = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : null;\n  var x = coords.x,\n      y = coords.y;\n  if (!([TOOL_NONE, TOOL_AUTO].indexOf(tool) >= 0)) return value;\n  if (!props.detectAutoPan) return value;\n  if (!value.focus) return value;\n  return autoPanIfNeeded(value, x, y);\n}","map":null,"metadata":{},"sourceType":"module"}