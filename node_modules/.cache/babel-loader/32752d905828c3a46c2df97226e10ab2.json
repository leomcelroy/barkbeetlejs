{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport { Pane } from '../../layers';\nimport { Heading } from '../../typography';\nimport { IconButton } from '../../buttons';\nimport OptionsList from './OptionsList';\nimport OptionShapePropType from './OptionShapePropType';\n\nvar DefaultTitleView = function DefaultTitleView(_ref) {\n  var close = _ref.close,\n      title = _ref.title,\n      headerHeight = _ref.headerHeight;\n  return React.createElement(Pane, {\n    display: \"flex\",\n    alignItems: \"center\",\n    borderBottom: \"default\",\n    padding: 8,\n    height: headerHeight,\n    boxSizing: \"border-box\"\n  }, React.createElement(Pane, {\n    flex: \"1\",\n    display: \"flex\",\n    alignItems: \"center\"\n  }, React.createElement(Heading, {\n    size: 400\n  }, title)), React.createElement(IconButton, {\n    icon: \"cross\",\n    appearance: \"minimal\",\n    height: 24,\n    onClick: close\n  }));\n};\n\nDefaultTitleView.displayName = \"DefaultTitleView\";\nDefaultTitleView.propTypes = {\n  close: PropTypes.func,\n  title: PropTypes.string,\n  headerHeight: PropTypes.number\n};\n\nvar SelectMenuContent =\n/*#__PURE__*/\nfunction (_PureComponent) {\n  _inherits(SelectMenuContent, _PureComponent);\n\n  function SelectMenuContent() {\n    _classCallCheck(this, SelectMenuContent);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(SelectMenuContent).apply(this, arguments));\n  }\n\n  _createClass(SelectMenuContent, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          title = _this$props.title,\n          width = _this$props.width,\n          height = _this$props.height,\n          options = _this$props.options,\n          hasTitle = _this$props.hasTitle,\n          hasFilter = _this$props.hasFilter,\n          filterPlaceholder = _this$props.filterPlaceholder,\n          filterIcon = _this$props.filterIcon,\n          close = _this$props.close,\n          listProps = _this$props.listProps,\n          titleView = _this$props.titleView,\n          detailView = _this$props.detailView,\n          emptyView = _this$props.emptyView,\n          isMultiSelect = _this$props.isMultiSelect;\n      var headerHeight = 40;\n      var optionsListHeight = hasTitle ? height - headerHeight : height;\n      var hasDetailView = Boolean(detailView);\n      var hasEmptyView = Boolean(emptyView);\n      return React.createElement(Pane, {\n        display: \"flex\",\n        height: height\n      }, React.createElement(Pane, {\n        width: width,\n        height: height,\n        display: \"flex\",\n        flexDirection: \"column\",\n        borderRight: hasDetailView ? 'muted' : null\n      }, hasTitle && titleView({\n        close: close,\n        title: title,\n        headerHeight: headerHeight\n      }), options.length === 0 && hasEmptyView ? React.createElement(Pane, {\n        height: optionsListHeight\n      }, emptyView) : React.createElement(OptionsList, _extends({\n        height: optionsListHeight,\n        hasFilter: hasFilter,\n        filterPlaceholder: filterPlaceholder,\n        filterIcon: filterIcon,\n        options: options,\n        isMultiSelect: isMultiSelect,\n        close: close\n      }, listProps))), hasDetailView && detailView);\n    }\n  }]);\n\n  return SelectMenuContent;\n}(PureComponent);\n\nSelectMenuContent.displayName = \"SelectMenuContent\";\n\n_defineProperty(SelectMenuContent, \"propTypes\", {\n  close: PropTypes.func,\n  title: PropTypes.string,\n  width: PropTypes.number,\n  height: PropTypes.number,\n  headerHeight: PropTypes.number,\n  options: PropTypes.arrayOf(OptionShapePropType),\n  hasTitle: PropTypes.bool,\n  hasFilter: PropTypes.bool,\n  filterPlaceholder: PropTypes.string,\n  filterIcon: PropTypes.string,\n  listProps: PropTypes.shape(OptionsList.propTypes),\n\n  /**\n   * When true, multi select is accounted for.\n   */\n  isMultiSelect: PropTypes.bool,\n\n  /**\n   * Node that is placed in the header section, above the options.\n   */\n  titleView: PropTypes.oneOfType([PropTypes.func, PropTypes.node]),\n\n  /**\n   * Node that is placed right next to the options.\n   */\n  detailView: PropTypes.node,\n\n  /**\n   * Node that is displayed instead of options list when there are no options.\n   */\n  emptyView: PropTypes.node\n});\n\n_defineProperty(SelectMenuContent, \"defaultProps\", {\n  options: [],\n  hasTitle: true,\n  hasFilter: true,\n  titleView: DefaultTitleView\n});\n\nexport { SelectMenuContent as default };","map":null,"metadata":{},"sourceType":"module"}