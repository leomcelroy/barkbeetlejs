{"ast":null,"code":"//This code is adapted from https://github.com/makercam/makercam/blob/master/src/clipperOffset.ts\nimport ClipperLib from 'js-clipper';\nimport { connectPoints } from './primitives.js';\nimport * as utils from '../utils.js';\nvar EndTypes = {\n  etOpenSquare: 0,\n  etOpenRound: 1,\n  etOpenButt: 2,\n  etClosedPolygon: 3,\n  etClosedLine: 4\n};\nvar JoinTypes = [ClipperLib.JoinType.jtSquare, ClipperLib.JoinType.jtRound, ClipperLib.JoinType.jtMiter];\nexport var clipOffset = function clipOffset(contour, offset) {\n  var joints = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  var tolerance = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0.01;\n  var scale = 1000; // let paths = contour.map(line => ([\n  //                     {X: Math.round(line.origin[0] * scale), Y: Math.round(line.origin[1] * scale)},\n  //                     {X: Math.round(line.end[0] * scale), Y: Math.round(line.end[1] * scale)}\n  //             ])).reduce((result, value, index, array) => {\n  //                 if (index % 2 === 0) {\n  //                     result.push(array.slice(index, index + 2).flat());\n  //                 }\n  //                 return result;\n  //\n  //             }, []);\n\n  var keyPoints = contour.map(function (line) {\n    return [{\n      X: Math.round(line.origin[0] * scale),\n      Y: Math.round(line.origin[1] * scale)\n    }, {\n      X: Math.round(line.end[0] * scale),\n      Y: Math.round(line.end[1] * scale)\n    }];\n  });\n  var paths = [keyPoints.map(function (point) {\n    return {\n      X: Math.round(point[0] * scale),\n      Y: Math.round(point[1] * scale)\n    };\n  })]; //console.log(\"paths\", paths);\n\n  var co = new ClipperLib.ClipperOffset();\n  var offsetted = new ClipperLib.Paths();\n  co.Clear();\n  co.AddPaths(paths, JoinTypes[joints], EndTypes.etClosedLine); //chain.endless ? EndTypes.etClosedLine : EndTypes.etOpenButt\n\n  co.MiterLimit = 2;\n  co.ArcTolerance = 0.25;\n  co.Execute(offsetted, offset * scale);\n  var newContours = [];\n  offsetted.forEach(function (points) {\n    if (points.length === 0) return;\n    var result = [];\n    points.forEach(function (point) {\n      result.push([point.X / scale, point.Y / scale]);\n    });\n    newContours[utils.makeID()] = connectPoints(result);\n  });\n  return newContours;\n};","map":{"version":3,"sources":["/Users/leomcelroy/Desktop/barkbeetle_js/src/unmakerjs/clipper.js"],"names":["ClipperLib","connectPoints","utils","EndTypes","etOpenSquare","etOpenRound","etOpenButt","etClosedPolygon","etClosedLine","JoinTypes","JoinType","jtSquare","jtRound","jtMiter","clipOffset","contour","offset","joints","tolerance","scale","keyPoints","map","line","X","Math","round","origin","Y","end","paths","point","co","ClipperOffset","offsetted","Paths","Clear","AddPaths","MiterLimit","ArcTolerance","Execute","newContours","forEach","points","length","result","push","makeID"],"mappings":"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","sourcesContent":["//This code is adapted from https://github.com/makercam/makercam/blob/master/src/clipperOffset.ts\n\nimport ClipperLib from 'js-clipper';\n\nimport {connectPoints} from './primitives.js';\nimport * as utils from '../utils.js';\n\n\n\nconst EndTypes = {\n    etOpenSquare: 0,\n    etOpenRound: 1,\n    etOpenButt: 2,\n    etClosedPolygon: 3,\n    etClosedLine: 4\n};\n\nconst JoinTypes = [\n    ClipperLib.JoinType.jtSquare,\n    ClipperLib.JoinType.jtRound,\n    ClipperLib.JoinType.jtMiter\n]\n\nexport const clipOffset = (contour, offset, joints = 0, tolerance = 0.01) => {\n    const scale = 1000\n\n    // let paths = contour.map(line => ([\n    //                     {X: Math.round(line.origin[0] * scale), Y: Math.round(line.origin[1] * scale)},\n    //                     {X: Math.round(line.end[0] * scale), Y: Math.round(line.end[1] * scale)}\n    //             ])).reduce((result, value, index, array) => {\n    //                 if (index % 2 === 0) {\n    //                     result.push(array.slice(index, index + 2).flat());\n    //                 }\n    //                 return result;\n    //\n    //             }, []);\n    let keyPoints = contour.map(line => ([\n            {X: Math.round(line.origin[0] * scale), Y: Math.round(line.origin[1] * scale)},\n            {X: Math.round(line.end[0] * scale), Y: Math.round(line.end[1] * scale)}\n    ]))\n    let paths = [\n        keyPoints.map((point) =>\n            ({\n                X: Math.round(point[0] * scale),\n                Y: Math.round(point[1] * scale)\n            })\n        )\n    ]\n    //console.log(\"paths\", paths);\n\n    const co = new ClipperLib.ClipperOffset()\n    const offsetted = new ClipperLib.Paths()\n    co.Clear()\n    co.AddPaths(paths, JoinTypes[joints], EndTypes.etClosedLine) //chain.endless ? EndTypes.etClosedLine : EndTypes.etOpenButt\n    co.MiterLimit = 2\n    co.ArcTolerance = 0.25\n    co.Execute(offsetted, offset * scale);\n\n    let newContours = [];\n\n    offsetted.forEach((points) => {\n        if (points.length === 0) return\n        let result = []\n        points.forEach((point) => {\n            result.push([point.X / scale, point.Y / scale])\n        })\n\n        newContours[utils.makeID()] = connectPoints(result);\n    })\n\n    return newContours;\n}\n"]},"metadata":{},"sourceType":"module"}