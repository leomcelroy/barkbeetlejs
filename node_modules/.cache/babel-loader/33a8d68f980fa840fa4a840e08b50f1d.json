{"ast":null,"code":"'use strict';\n\nvar svgReg = /<svg[^>]+[^>]*>/;\n\nfunction isSVG(buffer) {\n  return svgReg.test(buffer);\n}\n\nvar extractorRegExps = {\n  'root': /<svg\\s[^>]+>/,\n  'width': /\\bwidth=(['\"])([^%]+?)\\1/,\n  'height': /\\bheight=(['\"])([^%]+?)\\1/,\n  'viewbox': /\\bviewBox=(['\"])(.+?)\\1/\n};\n\nfunction parseViewbox(viewbox) {\n  var bounds = viewbox.split(' ');\n  return {\n    'width': parseInt(bounds[2], 10),\n    'height': parseInt(bounds[3], 10)\n  };\n}\n\nfunction parseAttributes(root) {\n  var width = root.match(extractorRegExps.width);\n  var height = root.match(extractorRegExps.height);\n  var viewbox = root.match(extractorRegExps.viewbox);\n  return {\n    'width': width && parseInt(width[2], 10),\n    'height': height && parseInt(height[2], 10),\n    'viewbox': viewbox && parseViewbox(viewbox[2])\n  };\n}\n\nfunction calculateByDimensions(attrs) {\n  return {\n    'width': attrs.width,\n    'height': attrs.height\n  };\n}\n\nfunction calculateByViewbox(attrs) {\n  var ratio = attrs.viewbox.width / attrs.viewbox.height;\n\n  if (attrs.width) {\n    return {\n      'width': attrs.width,\n      'height': Math.floor(attrs.width / ratio)\n    };\n  }\n\n  if (attrs.height) {\n    return {\n      'width': Math.floor(attrs.height * ratio),\n      'height': attrs.height\n    };\n  }\n\n  return {\n    'width': attrs.viewbox.width,\n    'height': attrs.viewbox.height\n  };\n}\n\nfunction calculate(buffer) {\n  var root = buffer.toString('utf8').match(extractorRegExps.root);\n\n  if (root) {\n    var attrs = parseAttributes(root[0]);\n\n    if (attrs.width && attrs.height) {\n      return calculateByDimensions(attrs);\n    }\n\n    if (attrs.viewbox) {\n      return calculateByViewbox(attrs);\n    }\n  }\n\n  throw new TypeError('invalid svg');\n}\n\nmodule.exports = {\n  'detect': isSVG,\n  'calculate': calculate\n};","map":null,"metadata":{},"sourceType":"script"}