{"ast":null,"code":"'use strict';\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nvar React = require('react');\n\nvar blacklist = require('blacklist');\n\nvar classNames = require('classnames');\n\nmodule.exports = React.createClass({\n  displayName: 'FormInput',\n  propTypes: {\n    autoFocus: React.PropTypes.bool,\n    className: React.PropTypes.string,\n    disabled: React.PropTypes.bool,\n    href: React.PropTypes.string,\n    id: React.PropTypes.string,\n    multiline: React.PropTypes.bool,\n    name: React.PropTypes.string,\n    noedit: React.PropTypes.bool,\n    onChange: React.PropTypes.func,\n    size: React.PropTypes.oneOf(['lg', 'sm', 'xs']),\n    type: React.PropTypes.string,\n    value: React.PropTypes.oneOfType([React.PropTypes.number, React.PropTypes.string])\n  },\n  getDefaultProps: function getDefaultProps() {\n    return {\n      type: 'text'\n    };\n  },\n  componentDidMount: function componentDidMount() {\n    if (this.props.autoFocus) {\n      this.focus();\n    }\n  },\n  focus: function focus() {\n    this.refs.input.focus();\n  },\n  render: function render() {\n    var _props = this.props;\n    var noedit = _props.noedit;\n    var multiline = _props.multiline;\n    var size = _props.size;\n    var className = _props.className;\n\n    var rest = _objectWithoutProperties(_props, ['noedit', 'multiline', 'size', 'className']); // classes\n\n\n    var newClassName = classNames({\n      'FormInput-noedit': noedit,\n      'FormInput-noedit--multiline': noedit && multiline,\n      'FormInput': !noedit\n    }, size ? 'FormInput--' + size : null, className);\n\n    var props = _extends({}, rest, {\n      className: newClassName,\n      ref: 'input'\n    });\n\n    var Element = 'input';\n\n    if (noedit && this.props.href) {\n      Element = 'a';\n      props.type = null;\n      props.children = props.children || props.value;\n    } else if (noedit) {\n      Element = 'div';\n      props.type = null;\n      props.children = props.children || props.value;\n    } else if (multiline) {\n      Element = 'textarea';\n    }\n\n    return React.createElement(Element, props);\n  }\n});","map":null,"metadata":{},"sourceType":"script"}