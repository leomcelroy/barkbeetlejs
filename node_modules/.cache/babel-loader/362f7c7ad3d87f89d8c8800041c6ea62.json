{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _util = require('./util');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar reInitChecked = function reInitChecked(node) {\n  var siblings = node.childNodes;\n  var all = true;\n  var none = true;\n\n  for (var i = 0, j = siblings.length; i < j; i++) {\n    var sibling = siblings[i];\n\n    if (sibling.checked !== true || sibling.indeterminate) {\n      all = false;\n    }\n\n    if (sibling.checked !== false || sibling.indeterminate) {\n      none = false;\n    }\n  }\n\n  if (all) {\n    node.setChecked(true);\n  } else if (!all && !none) {\n    node.setChecked('half');\n  } else if (none) {\n    node.setChecked(false);\n  }\n};\n\nvar getPropertyFromData = function getPropertyFromData(node, prop) {\n  var props = node.store.props;\n  var data = node.data || {};\n  var config = props[prop];\n\n  if (typeof config === 'function') {\n    return config(data, node);\n  } else if (typeof config === 'string') {\n    return data[config];\n  } else if (typeof config === 'undefined') {\n    return '';\n  }\n};\n\nvar nodeIdSeed = 0;\n\nvar Node = function () {\n  function Node(options) {\n    (0, _classCallCheck3.default)(this, Node);\n    this.id = nodeIdSeed++;\n    this.text = null;\n    this.checked = false;\n    this.indeterminate = false;\n    this.data = null;\n    this.expanded = false;\n    this.parent = null;\n    this.visible = true;\n\n    for (var name in options) {\n      if (options.hasOwnProperty(name)) {\n        this[name] = options[name];\n      }\n    } // internal\n\n\n    this.level = 0;\n    this.loaded = false;\n    this.childNodes = [];\n    this.loading = false;\n\n    if (this.parent) {\n      this.level = this.parent.level + 1;\n    }\n\n    var store = this.store;\n\n    if (!store) {\n      throw new Error('[Node]store is required!');\n    }\n\n    store.registerNode(this);\n    var props = store.props;\n\n    if (props && typeof props.isLeaf !== 'undefined') {\n      var isLeaf = getPropertyFromData(this, 'isLeaf');\n\n      if (typeof isLeaf === 'boolean') {\n        this.isLeafByUser = isLeaf;\n      }\n    }\n\n    if (store.lazy !== true && this.data) {\n      this.setData(this.data);\n\n      if (store.defaultExpandAll) {\n        this.expanded = true;\n      }\n    } else if (this.level > 0 && store.lazy && store.defaultExpandAll) {\n      this.expand();\n    }\n\n    if (!this.data) return;\n    var defaultExpandedKeys = store.defaultExpandedKeys;\n    var key = store.key;\n\n    if (key && defaultExpandedKeys && defaultExpandedKeys.indexOf(this.key) !== -1) {\n      this.expand(null, store.autoExpandParent);\n    }\n\n    if (key && store.currentNodeKey && this.key === store.currentNodeKey) {\n      store.currentNode = this;\n    }\n\n    if (store.lazy) {\n      store._initDefaultCheckedNode(this);\n    }\n\n    this.updateLeafState();\n  }\n\n  (0, _createClass3.default)(Node, [{\n    key: 'setData',\n    value: function setData(data) {\n      if (!Array.isArray(data)) {\n        (0, _util.markNodeData)(this, data);\n      }\n\n      this.data = data;\n      this.childNodes = [];\n      var children = void 0;\n\n      if (this.level === 0 && this.data instanceof Array) {\n        children = this.data;\n      } else {\n        children = getPropertyFromData(this, 'children') || [];\n      }\n\n      for (var i = 0, j = children.length; i < j; i++) {\n        this.insertChild({\n          data: children[i]\n        });\n      }\n    }\n  }, {\n    key: 'insertChild',\n    value: function insertChild(child, index) {\n      if (!child) throw new Error('insertChild error: child is required.');\n\n      if (!(child instanceof Node)) {\n        Object.assign(child, {\n          parent: this,\n          store: this.store\n        });\n        child = new Node(child);\n      }\n\n      child.level = this.level + 1;\n\n      if (typeof index === 'undefined' || index < 0) {\n        this.childNodes.push(child);\n      } else {\n        this.childNodes.splice(index, 0, child);\n      }\n\n      this.updateLeafState();\n    }\n  }, {\n    key: 'insertBefore',\n    value: function insertBefore(child, ref) {\n      var index = void 0;\n\n      if (ref) {\n        index = this.childNodes.indexOf(ref);\n      }\n\n      this.insertChild(child, index);\n    }\n  }, {\n    key: 'insertAfter',\n    value: function insertAfter(child, ref) {\n      var index = void 0;\n\n      if (ref) {\n        index = this.childNodes.indexOf(ref);\n        if (index !== -1) index += 1;\n      }\n\n      this.insertChild(child, index);\n    }\n  }, {\n    key: 'removeChild',\n    value: function removeChild(child) {\n      var index = this.childNodes.indexOf(child);\n\n      if (index > -1) {\n        this.store && this.store.deregisterNode(child);\n        child.parent = null;\n        this.childNodes.splice(index, 1);\n      }\n\n      this.updateLeafState();\n    }\n  }, {\n    key: 'removeChildByData',\n    value: function removeChildByData(data) {\n      var targetNode = null;\n      this.childNodes.forEach(function (node) {\n        if (node.data === data) {\n          targetNode = node;\n        }\n      });\n\n      if (targetNode) {\n        this.removeChild(targetNode);\n      }\n    }\n  }, {\n    key: 'expand',\n    value: function expand(callback, expandParent) {\n      var _this = this;\n\n      var done = function done() {\n        if (expandParent) {\n          var parent = _this.parent;\n\n          while (parent.level > 0) {\n            parent.expanded = true;\n            parent = parent.parent;\n          }\n        }\n\n        _this.expanded = true;\n        if (callback) callback();\n      };\n\n      if (this.shouldLoadData()) {\n        this.loadData(function (data) {\n          if (data instanceof Array) {\n            done();\n          }\n        });\n      } else {\n        done();\n      }\n    }\n  }, {\n    key: 'doCreateChildren',\n    value: function doCreateChildren(array) {\n      var _this2 = this;\n\n      var defaultProps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      array.forEach(function (item) {\n        _this2.insertChild(Object.assign({\n          data: item\n        }, defaultProps));\n      });\n    }\n  }, {\n    key: 'collapse',\n    value: function collapse() {\n      this.expanded = false;\n    }\n  }, {\n    key: 'shouldLoadData',\n    value: function shouldLoadData() {\n      return this.store.lazy === true && this.store.load && !this.loaded;\n    }\n  }, {\n    key: 'updateLeafState',\n    value: function updateLeafState() {\n      if (this.store.lazy === true && this.loaded !== true && typeof this.isLeafByUser !== 'undefined') {\n        this.isLeaf = this.isLeafByUser;\n        return;\n      }\n\n      var childNodes = this.childNodes;\n\n      if (!this.store.lazy || this.store.lazy === true && this.loaded === true) {\n        this.isLeaf = !childNodes || childNodes.length === 0;\n        return;\n      }\n\n      this.isLeaf = false;\n    }\n  }, {\n    key: 'setChecked',\n    value: function setChecked(value, deep) {\n      var _this3 = this;\n\n      this.indeterminate = value === 'half';\n      this.checked = value === true;\n\n      var handleDescendants = function handleDescendants() {\n        if (deep) {\n          var childNodes = _this3.childNodes;\n\n          for (var i = 0, j = childNodes.length; i < j; i++) {\n            var child = childNodes[i];\n            child.setChecked(value !== false, deep);\n          }\n        }\n      };\n\n      if (!this.store.checkStrictly && this.shouldLoadData()) {\n        // Only work on lazy load data.\n        this.loadData(function () {\n          handleDescendants();\n        }, {\n          checked: value !== false\n        });\n      } else {\n        handleDescendants();\n      }\n\n      var parent = this.parent;\n      if (!parent || parent.level === 0) return;\n\n      if (!this.store.checkStrictly) {\n        reInitChecked(parent);\n      }\n    }\n  }, {\n    key: 'getChildren',\n    value: function getChildren() {\n      // this is data\n      var data = this.data;\n      if (!data) return null;\n      var props = this.store.props;\n      var children = 'children';\n\n      if (props) {\n        children = props.children || 'children';\n      }\n\n      if (data[children] === undefined) {\n        data[children] = null;\n      }\n\n      return data[children];\n    }\n  }, {\n    key: 'updateChildren',\n    value: function updateChildren() {\n      var _this4 = this;\n\n      var newData = this.getChildren() || [];\n      var oldData = this.childNodes.map(function (node) {\n        return node.data;\n      });\n      var newDataMap = {};\n      var newNodes = [];\n      newData.forEach(function (item, index) {\n        if (item[_util.NODE_KEY]) {\n          newDataMap[item[_util.NODE_KEY]] = {\n            index: index,\n            data: item\n          };\n        } else {\n          newNodes.push({\n            index: index,\n            data: item\n          });\n        }\n      });\n      oldData.forEach(function (item) {\n        if (!newDataMap[item[_util.NODE_KEY]]) _this4.removeChildByData(item);\n      });\n      newNodes.forEach(function (_ref) {\n        var index = _ref.index,\n            data = _ref.data;\n\n        _this4.insertChild({\n          data: data\n        }, index);\n      });\n      this.updateLeafState();\n    }\n  }, {\n    key: 'loadData',\n    value: function loadData(callback) {\n      var _this5 = this;\n\n      var defaultProps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      if (this.store.lazy === true && this.store.load && !this.loaded && !this.loading) {\n        this.loading = true;\n\n        var resolve = function resolve(children) {\n          _this5.loaded = true;\n          _this5.loading = false;\n          _this5.childNodes = [];\n\n          _this5.doCreateChildren(children, defaultProps);\n\n          _this5.updateLeafState();\n\n          if (callback) {\n            callback.call(_this5, children);\n          }\n        };\n\n        this.store.load(this, resolve);\n      } else {\n        if (callback) {\n          callback.call(this);\n        }\n      }\n    }\n  }, {\n    key: 'label',\n    get: function get() {\n      return getPropertyFromData(this, 'label');\n    }\n  }, {\n    key: 'icon',\n    get: function get() {\n      return getPropertyFromData(this, 'icon');\n    }\n  }, {\n    key: 'key',\n    get: function get() {\n      var nodeKey = this.store.key;\n      if (this.data) return this.data[nodeKey];\n      return null;\n    }\n  }]);\n  return Node;\n}();\n\nvar _default = Node;\nexports.default = _default;\n;\n\nvar _temp = function () {\n  if (typeof __REACT_HOT_LOADER__ === 'undefined') {\n    return;\n  }\n\n  __REACT_HOT_LOADER__.register(reInitChecked, 'reInitChecked', 'src/tree/model/node.js');\n\n  __REACT_HOT_LOADER__.register(getPropertyFromData, 'getPropertyFromData', 'src/tree/model/node.js');\n\n  __REACT_HOT_LOADER__.register(nodeIdSeed, 'nodeIdSeed', 'src/tree/model/node.js');\n\n  __REACT_HOT_LOADER__.register(Node, 'Node', 'src/tree/model/node.js');\n\n  __REACT_HOT_LOADER__.register(_default, 'default', 'src/tree/model/node.js');\n}();\n\n;","map":null,"metadata":{},"sourceType":"script"}