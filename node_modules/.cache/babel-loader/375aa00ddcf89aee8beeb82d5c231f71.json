{"ast":null,"code":"/*\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the terms of the LICENSE file distributed with this project.\n */\nimport * as tslib_1 from \"tslib\";\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport { AbstractPureComponent } from \"../../common/abstractPureComponent\";\nimport * as Classes from \"../../common/classes\";\nimport * as Keys from \"../../common/keys\";\nimport { DISPLAYNAME_PREFIX } from \"../../common/props\";\nimport { clamp, safeInvoke } from \"../../common/utils\";\nimport { Browser } from \"../../compatibility\";\nvar BUFFER_WIDTH_EDGE = 5;\nvar BUFFER_WIDTH_IE = 30;\n\nvar EditableText =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(EditableText, _super);\n\n  function EditableText(props, context) {\n    var _this = _super.call(this, props, context) || this;\n\n    _this.refHandlers = {\n      content: function content(spanElement) {\n        _this.valueElement = spanElement;\n      },\n      input: function input(_input) {\n        if (_input != null) {\n          _input.focus();\n\n          var length_1 = _input.value.length;\n\n          _input.setSelectionRange(_this.props.selectAllOnFocus ? 0 : length_1, length_1);\n\n          if (!_this.props.selectAllOnFocus) {\n            _input.scrollLeft = _input.scrollWidth;\n          }\n        }\n      }\n    };\n\n    _this.cancelEditing = function () {\n      var _a = _this.state,\n          lastValue = _a.lastValue,\n          value = _a.value;\n\n      _this.setState({\n        isEditing: false,\n        value: lastValue\n      });\n\n      if (value !== lastValue) {\n        safeInvoke(_this.props.onChange, lastValue);\n      }\n\n      safeInvoke(_this.props.onCancel, lastValue);\n    };\n\n    _this.toggleEditing = function () {\n      if (_this.state.isEditing) {\n        var value = _this.state.value;\n\n        _this.setState({\n          isEditing: false,\n          lastValue: value\n        });\n\n        safeInvoke(_this.props.onConfirm, value);\n      } else if (!_this.props.disabled) {\n        _this.setState({\n          isEditing: true\n        });\n      }\n    };\n\n    _this.handleFocus = function () {\n      if (!_this.props.disabled) {\n        _this.setState({\n          isEditing: true\n        });\n      }\n    };\n\n    _this.handleTextChange = function (event) {\n      var value = event.target.value; // state value should be updated only when uncontrolled\n\n      if (_this.props.value == null) {\n        _this.setState({\n          value: value\n        });\n      }\n\n      safeInvoke(_this.props.onChange, value);\n    };\n\n    _this.handleKeyEvent = function (event) {\n      var altKey = event.altKey,\n          ctrlKey = event.ctrlKey,\n          metaKey = event.metaKey,\n          shiftKey = event.shiftKey,\n          which = event.which;\n\n      if (which === Keys.ESCAPE) {\n        _this.cancelEditing();\n\n        return;\n      }\n\n      var hasModifierKey = altKey || ctrlKey || metaKey || shiftKey;\n\n      if (which === Keys.ENTER) {\n        // prevent IE11 from full screening with alt + enter\n        // shift + enter adds a newline by default\n        if (altKey || shiftKey) {\n          event.preventDefault();\n        }\n\n        if (_this.props.confirmOnEnterKey && _this.props.multiline) {\n          if (event.target != null && hasModifierKey) {\n            insertAtCaret(event.target, \"\\n\");\n\n            _this.handleTextChange(event);\n          } else {\n            _this.toggleEditing();\n          }\n        } else if (!_this.props.multiline || hasModifierKey) {\n          _this.toggleEditing();\n        }\n      }\n    };\n\n    var value = props.value == null ? props.defaultValue : props.value;\n    _this.state = {\n      inputHeight: 0,\n      inputWidth: 0,\n      isEditing: props.isEditing === true && props.disabled === false,\n      lastValue: value,\n      value: value\n    };\n    return _this;\n  }\n\n  EditableText.prototype.render = function () {\n    var _a = this.props,\n        disabled = _a.disabled,\n        multiline = _a.multiline;\n    var value = this.props.value == null ? this.state.value : this.props.value;\n    var hasValue = value != null && value !== \"\";\n    var classes = classNames(Classes.EDITABLE_TEXT, Classes.intentClass(this.props.intent), (_b = {}, _b[Classes.DISABLED] = disabled, _b[Classes.EDITABLE_TEXT_EDITING] = this.state.isEditing, _b[Classes.EDITABLE_TEXT_PLACEHOLDER] = !hasValue, _b[Classes.MULTILINE] = multiline, _b), this.props.className);\n    var contentStyle;\n\n    if (multiline) {\n      // set height only in multiline mode when not editing\n      // otherwise we're measuring this element to determine appropriate height of text\n      contentStyle = {\n        height: !this.state.isEditing ? this.state.inputHeight : null\n      };\n    } else {\n      // minWidth only applies in single line mode (multiline == width 100%)\n      contentStyle = {\n        height: this.state.inputHeight,\n        lineHeight: this.state.inputHeight != null ? this.state.inputHeight + \"px\" : null,\n        minWidth: this.props.minWidth\n      };\n    } // make enclosing div focusable when not editing, so it can still be tabbed to focus\n    // (when editing, input itself is focusable so div doesn't need to be)\n\n\n    var tabIndex = this.state.isEditing || disabled ? null : 0;\n    return React.createElement(\"div\", {\n      className: classes,\n      onFocus: this.handleFocus,\n      tabIndex: tabIndex\n    }, this.maybeRenderInput(value), React.createElement(\"span\", {\n      className: Classes.EDITABLE_TEXT_CONTENT,\n      ref: this.refHandlers.content,\n      style: contentStyle\n    }, hasValue ? value : this.props.placeholder));\n\n    var _b;\n  };\n\n  EditableText.prototype.componentDidMount = function () {\n    this.updateInputDimensions();\n  };\n\n  EditableText.prototype.componentDidUpdate = function (_, prevState) {\n    if (this.state.isEditing && !prevState.isEditing) {\n      safeInvoke(this.props.onEdit, this.state.value);\n    }\n\n    this.updateInputDimensions();\n  };\n\n  EditableText.prototype.componentWillReceiveProps = function (nextProps) {\n    var state = {};\n\n    if (nextProps.value != null) {\n      state.value = nextProps.value;\n    }\n\n    if (nextProps.isEditing != null) {\n      state.isEditing = nextProps.isEditing;\n    }\n\n    if (nextProps.disabled || nextProps.disabled == null && this.props.disabled) {\n      state.isEditing = false;\n    }\n\n    this.setState(state);\n  };\n\n  EditableText.prototype.maybeRenderInput = function (value) {\n    var _a = this.props,\n        maxLength = _a.maxLength,\n        multiline = _a.multiline,\n        placeholder = _a.placeholder;\n\n    if (!this.state.isEditing) {\n      return undefined;\n    }\n\n    var props = {\n      className: Classes.EDITABLE_TEXT_INPUT,\n      maxLength: maxLength,\n      onBlur: this.toggleEditing,\n      onChange: this.handleTextChange,\n      onKeyDown: this.handleKeyEvent,\n      placeholder: placeholder,\n      style: {\n        height: this.state.inputHeight,\n        lineHeight: !multiline && this.state.inputHeight != null ? this.state.inputHeight + \"px\" : null,\n        width: multiline ? \"100%\" : this.state.inputWidth\n      },\n      value: value\n    };\n    return multiline ? React.createElement(\"textarea\", tslib_1.__assign({\n      ref: this.refHandlers.input\n    }, props)) : React.createElement(\"input\", tslib_1.__assign({\n      ref: this.refHandlers.input,\n      type: \"text\"\n    }, props));\n  };\n\n  EditableText.prototype.updateInputDimensions = function () {\n    if (this.valueElement != null) {\n      var _a = this.props,\n          maxLines = _a.maxLines,\n          minLines = _a.minLines,\n          minWidth = _a.minWidth,\n          multiline = _a.multiline;\n      var _b = this.valueElement,\n          parentElement_1 = _b.parentElement,\n          textContent = _b.textContent;\n      var _c = this.valueElement,\n          scrollHeight_1 = _c.scrollHeight,\n          scrollWidth = _c.scrollWidth;\n      var lineHeight = getLineHeight(this.valueElement); // add one line to computed <span> height if text ends in newline\n      // because <span> collapses that trailing whitespace but <textarea> shows it\n\n      if (multiline && this.state.isEditing && /\\n$/.test(textContent)) {\n        scrollHeight_1 += lineHeight;\n      }\n\n      if (lineHeight > 0) {\n        // line height could be 0 if the isNaN block from getLineHeight kicks in\n        scrollHeight_1 = clamp(scrollHeight_1, minLines * lineHeight, maxLines * lineHeight);\n      } // Chrome's input caret height misaligns text so the line-height must be larger than font-size.\n      // The computed scrollHeight must also account for a larger inherited line-height from the parent.\n\n\n      scrollHeight_1 = Math.max(scrollHeight_1, getFontSize(this.valueElement) + 1, getLineHeight(parentElement_1)); // IE11 & Edge needs a small buffer so text does not shift prior to resizing\n\n      if (Browser.isEdge()) {\n        scrollWidth += BUFFER_WIDTH_EDGE;\n      } else if (Browser.isInternetExplorer()) {\n        scrollWidth += BUFFER_WIDTH_IE;\n      }\n\n      this.setState({\n        inputHeight: scrollHeight_1,\n        inputWidth: Math.max(scrollWidth, minWidth)\n      }); // synchronizes the ::before pseudo-element's height while editing for Chrome 53\n\n      if (multiline && this.state.isEditing) {\n        this.setTimeout(function () {\n          return parentElement_1.style.height = scrollHeight_1 + \"px\";\n        });\n      }\n    }\n  };\n\n  EditableText.displayName = DISPLAYNAME_PREFIX + \".EditableText\";\n  EditableText.defaultProps = {\n    confirmOnEnterKey: false,\n    defaultValue: \"\",\n    disabled: false,\n    maxLines: Infinity,\n    minLines: 1,\n    minWidth: 80,\n    multiline: false,\n    placeholder: \"Click to Edit\"\n  };\n  return EditableText;\n}(AbstractPureComponent);\n\nexport { EditableText };\n\nfunction getFontSize(element) {\n  var fontSize = getComputedStyle(element).fontSize;\n  return fontSize === \"\" ? 0 : parseInt(fontSize.slice(0, -2), 10);\n}\n\nfunction getLineHeight(element) {\n  // getComputedStyle() => 18.0001px => 18\n  var lineHeight = parseInt(getComputedStyle(element).lineHeight.slice(0, -2), 10); // this check will be true if line-height is a keyword like \"normal\"\n\n  if (isNaN(lineHeight)) {\n    // @see http://stackoverflow.com/a/18430767/6342931\n    var line = document.createElement(\"span\");\n    line.innerHTML = \"<br>\";\n    element.appendChild(line);\n    var singleLineHeight = element.offsetHeight;\n    line.innerHTML = \"<br><br>\";\n    var doubleLineHeight = element.offsetHeight;\n    element.removeChild(line); // this can return 0 in edge cases\n\n    lineHeight = doubleLineHeight - singleLineHeight;\n  }\n\n  return lineHeight;\n}\n\nfunction insertAtCaret(el, text) {\n  var selectionEnd = el.selectionEnd,\n      selectionStart = el.selectionStart,\n      value = el.value;\n\n  if (selectionStart >= 0) {\n    var before_1 = value.substring(0, selectionStart);\n    var after_1 = value.substring(selectionEnd, value.length);\n    var len = text.length;\n    el.value = \"\" + before_1 + text + after_1;\n    el.selectionStart = selectionStart + len;\n    el.selectionEnd = selectionStart + len;\n  }\n}","map":null,"metadata":{},"sourceType":"module"}