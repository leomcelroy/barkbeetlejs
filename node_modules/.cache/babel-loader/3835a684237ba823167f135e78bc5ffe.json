{"ast":null,"code":"import _objectSpread from \"/Users/leomcelroy/Desktop/barkbeetle_js/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport * as mjs from 'makerjs';\nimport * as s2p from 'shape2path';\nimport * as svgson from 'svgson';\nimport * as utils from './utils.js';\nimport { flattenSVG } from 'flatten-svg'; // import {Window} from 'svgdom';\n// import {readFileSync} from 'fs';\n\nimport store from \"./store.js\"; //this is my global state library, this is the only file that will getState() it will pass that to all sub components or should i import store in respective components\n// const parseSVG = (svg) => {\n//   const window = new Window\n//   window.document.documentElement.innerHTML = svg\n//   return window.document.documentElement\n// }\n\nvar uploadSVG = function uploadSVG(e) {\n  //main event\n  var files = e.target.files;\n  var file = files[0];\n  var reader = new FileReader();\n\n  reader.onload = function (event) {\n    var text = event.target.result; // console.log(\"text\", text)\n    // var parser = new DOMParser();\n    // var doc = parser.parseFromString(text, \"image/svg+xml\");\n    // console.log(\"doc\", doc)\n    //\n    // var placeholder = document.createElement('div');\n    // placeholder.innerHTML = text;\n    // var elem = placeholder.firstChild;\n    // console.log(\"elem\", elem)\n\n    var hmm = document.getElementById('thisIsDumb');\n    hmm.innerHTML = text; // console.log(\"hmm\", hmm);\n    // svgson.parse(text).then((json) => {\n    //   console.log(\"json\", json)\n    //   let paths = flattenSVG(doc);\n    //\n    //   console.log(\"path\", paths);\n    // })\n\n    var paths = flattenSVG(hmm);\n    var models = {};\n    Object.values(paths).forEach(function (path) {\n      var lines = new mjs.models.ConnectTheDots(path.points);\n      var reflectedY = mjs.models.mirror(lines, true, false);\n      models[utils.makeID()] = new mjs.models.ConnectTheDots(path.points);\n    }); // console.log(\"paths\", paths);\n    // console.log(\"models\", models);\n\n    var newShapes = _objectSpread({}, store.state.shapes, models);\n\n    store.update({\n      shapes: newShapes\n    });\n  };\n\n  reader.readAsText(file);\n};\n\nvar uploadSVGOld = function uploadSVGOld(e) {\n  //uploadSVGFlatten(e);\n  //helper function\n  var replaceWithPath = function replaceWithPath(child) {\n    //TODO: why cant I put this in a different file\n    // console.log(\"child\", child);\n    // console.log(\"child name\", child.name);\n    var name = child.name.toLowerCase();\n\n    if (name === \"g\" || name === \"defs\") {\n      return child.children.map(function (grandchild) {\n        return replaceWithPath(grandchild);\n      });\n    }\n\n    if (name === \"rectangle\" || name === \"rect\") {\n      var x = child.attributes.x;\n      var y = child.attributes.y;\n      var width = child.attributes.width;\n      var height = child.attributes.heigth;\n      var rx = child.attributes.rx;\n      var ry = child.attributes.ry;\n      if (name === \"rect\") height = child.attributes.height; //TODO: HACK: no idea why I need to do this\n\n      var temp = s2p.rect({\n        x: x,\n        y: y,\n        width: width,\n        height: height,\n        rx: rx,\n        ry: ry\n      });\n      return mjs.importer.fromSVGPathData(temp);\n    }\n\n    if (name === \"circle\") {\n      var cx = child.attributes.cx;\n      var cy = child.attributes.cy;\n      var r = child.attributes.r;\n\n      var _temp = s2p.rect({\n        cx: cx,\n        cy: cy,\n        r: r\n      });\n\n      return mjs.importer.fromSVGPathData(_temp);\n    }\n\n    if (name === \"ellipse\") {\n      var _cx = child.attributes.cx;\n      var _cy = child.attributes.cy;\n      var _rx = child.attributes.rx;\n      var _ry = child.attributes.ry;\n\n      var _temp2 = s2p.ellipse({\n        cx: _cx,\n        cy: _cy,\n        rx: _rx,\n        ry: _ry\n      });\n\n      return mjs.importer.fromSVGPathData(_temp2);\n    }\n\n    if (name === \"polygon\") {\n      var points = child.attributes.points;\n\n      var _temp3 = s2p.polygon({\n        points: points\n      });\n\n      return mjs.importer.fromSVGPathData(_temp3);\n    }\n\n    if (name === \"polyline\") {\n      var _points = child.attributes.points;\n\n      var _temp4 = s2p.polyline({\n        points: _points\n      });\n\n      return mjs.importer.fromSVGPathData(_temp4);\n    }\n\n    if (name === \"line\") {\n      var x1 = child.attributes.x1;\n      var x2 = child.attributes.x2;\n      var y1 = child.attributes.y1;\n      var y2 = child.attributes.y2;\n\n      var _temp5 = s2p.line({\n        x1: x1,\n        x2: x2,\n        y1: y1,\n        y2: y2\n      });\n\n      return mjs.importer.fromSVGPathData(_temp5);\n    }\n\n    if (name === \"path\") {\n      var makerjsPath = mjs.importer.fromSVGPathData(child.attributes.d); //console.log(\"mjspath\", makerjsPath);\n\n      return makerjsPath;\n    }\n  }; //main event\n\n\n  var files = e.target.files;\n  var file = files[0];\n  var reader = new FileReader();\n\n  reader.onload = function (event) {\n    var text = event.target.result;\n    svgson.parse(text).then(function (json) {\n      var svg = json.children.map(function (child) {\n        return replaceWithPath(child);\n      });\n      svg = utils.flattenDeep(svg); //console.log(\"svg\", svg);\n\n      var models = {};\n      svg.forEach(function (shape) {\n        if (shape !== undefined) {\n          var chains = mjs.model.findChains(shape); //console.log(\"chains\", chains)\n\n          chains.forEach(function (chain) {\n            var newModel = mjs.chain.toNewModel(chain); //console.log(\"newModel\", newModel);\n\n            models[utils.makeID()] = newModel;\n          });\n        }\n      });\n\n      var newShapes = _objectSpread({}, store.state.shapes, models);\n\n      store.update({\n        shapes: newShapes\n      });\n    });\n  };\n\n  reader.readAsText(file);\n};\n\nexport { uploadSVG };","map":{"version":3,"sources":["/Users/leomcelroy/Desktop/barkbeetle_js/src/uploadSVG.js"],"names":["mjs","s2p","svgson","utils","flattenSVG","store","uploadSVG","e","files","target","file","reader","FileReader","onload","event","text","result","hmm","document","getElementById","innerHTML","paths","models","Object","values","forEach","path","lines","ConnectTheDots","points","reflectedY","mirror","makeID","newShapes","state","shapes","update","readAsText","uploadSVGOld","replaceWithPath","child","name","toLowerCase","children","map","grandchild","x","attributes","y","width","height","heigth","rx","ry","temp","rect","importer","fromSVGPathData","cx","cy","r","ellipse","polygon","polyline","x1","x2","y1","y2","line","makerjsPath","d","parse","then","json","svg","flattenDeep","shape","undefined","chains","model","findChains","chain","newModel","toNewModel"],"mappings":"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","sourcesContent":["import * as mjs from 'makerjs';\nimport * as s2p from 'shape2path';\nimport * as svgson from 'svgson';\nimport * as utils from './utils.js';\nimport {flattenSVG} from 'flatten-svg';\n// import {Window} from 'svgdom';\n// import {readFileSync} from 'fs';\n\nimport store from \"./store.js\"; //this is my global state library, this is the only file that will getState() it will pass that to all sub components or should i import store in respective components\n\n// const parseSVG = (svg) => {\n//   const window = new Window\n//   window.document.documentElement.innerHTML = svg\n//   return window.document.documentElement\n// }\n\nconst uploadSVG = (e) => {\n\n  //main event\n  let files = e.target.files;\n  let file = files[0];\n\n  var reader = new FileReader();\n\n  reader.onload = (event) => {\n    let text = event.target.result;\n    // console.log(\"text\", text)\n\n    // var parser = new DOMParser();\n    // var doc = parser.parseFromString(text, \"image/svg+xml\");\n    // console.log(\"doc\", doc)\n    //\n    // var placeholder = document.createElement('div');\n    // placeholder.innerHTML = text;\n    // var elem = placeholder.firstChild;\n    // console.log(\"elem\", elem)\n\n    let hmm = document.getElementById('thisIsDumb');\n    hmm.innerHTML = text;\n\n    // console.log(\"hmm\", hmm);\n\n    // svgson.parse(text).then((json) => {\n    //   console.log(\"json\", json)\n    //   let paths = flattenSVG(doc);\n    //\n    //   console.log(\"path\", paths);\n    // })\n\n    let paths = flattenSVG(hmm);\n\n    let models = {};\n\n    Object.values(paths).forEach(path => {\n      let lines = new mjs.models.ConnectTheDots(path.points);\n      let reflectedY = mjs.models.mirror(lines, true, false);\n      models[utils.makeID()] = new mjs.models.ConnectTheDots(path.points);\n    })\n\n    // console.log(\"paths\", paths);\n    // console.log(\"models\", models);\n\n    let newShapes = {...store.state.shapes, ...models}\n\n    store.update({shapes: newShapes});\n\n  };\n\n  reader.readAsText(file);\n}\n\nconst uploadSVGOld = (e) => {\n  //uploadSVGFlatten(e);\n  //helper function\n  const replaceWithPath = (child) => { //TODO: why cant I put this in a different file\n    // console.log(\"child\", child);\n    // console.log(\"child name\", child.name);\n\n    let name = child.name.toLowerCase();\n\n    if (name === \"g\" || name === \"defs\") {\n      return child.children.map(grandchild => replaceWithPath(grandchild));\n    }\n\n    if (name === \"rectangle\" || name === \"rect\") {\n      let x = child.attributes.x;\n      let y = child.attributes.y;\n      let width = child.attributes.width;\n      let height = child.attributes.heigth;\n      let rx = child.attributes.rx;\n      let ry = child.attributes.ry;\n\n\n      if (name === \"rect\") height = child.attributes.height; //TODO: HACK: no idea why I need to do this\n\n      let temp = s2p.rect({x, y, width, height, rx, ry});\n      return mjs.importer.fromSVGPathData(temp);\n    }\n\n    if (name === \"circle\") {\n      let cx = child.attributes.cx;\n      let cy = child.attributes.cy;\n      let r = child.attributes.r;\n\n      let temp = s2p.rect({cx, cy, r});\n      return mjs.importer.fromSVGPathData(temp);\n    }\n\n    if (name === \"ellipse\") {\n      let cx = child.attributes.cx;\n      let cy = child.attributes.cy;\n      let rx = child.attributes.rx;\n      let ry = child.attributes.ry;\n\n      let temp = s2p.ellipse({cx, cy, rx, ry});\n      return mjs.importer.fromSVGPathData(temp);\n    }\n\n    if (name === \"polygon\") {\n      let points = child.attributes.points;\n\n      let temp = s2p.polygon({points});\n      return mjs.importer.fromSVGPathData(temp);\n    }\n\n    if (name === \"polyline\") {\n      let points = child.attributes.points;\n\n      let temp = s2p.polyline({points});\n      return mjs.importer.fromSVGPathData(temp);\n    }\n\n    if (name === \"line\") {\n      let x1 = child.attributes.x1;\n      let x2 = child.attributes.x2;\n      let y1 = child.attributes.y1;\n      let y2 = child.attributes.y2;\n\n      let temp = s2p.line({x1, x2, y1, y2});\n      return mjs.importer.fromSVGPathData(temp);\n    }\n\n    if (name === \"path\") {\n      let makerjsPath = mjs.importer.fromSVGPathData(child.attributes.d);\n      //console.log(\"mjspath\", makerjsPath);\n\n      return makerjsPath;\n    }\n  }\n\n  //main event\n  let files = e.target.files;\n  let file = files[0];\n\n  var reader = new FileReader();\n\n  reader.onload = (event) => {\n    let text = event.target.result;\n\n    svgson.parse(text).then((json) => {\n      let svg = json.children.map(child => {\n        return replaceWithPath(child);\n      });\n\n      svg = utils.flattenDeep(svg);\n      //console.log(\"svg\", svg);\n\n      let models = {};\n\n      svg.forEach(shape => {\n        if (shape !== undefined) {\n          let chains = mjs.model.findChains(shape);\n\n          //console.log(\"chains\", chains)\n\n          chains.forEach(chain => {\n            let newModel = mjs.chain.toNewModel(chain);\n\n            //console.log(\"newModel\", newModel);\n            models[utils.makeID()] = newModel;\n          })\n        }\n      })\n\n      let newShapes = {...store.state.shapes, ...models}\n\n      store.update({shapes: newShapes});\n\n    });\n  };\n\n  reader.readAsText(file);\n}\n\nexport {uploadSVG};\n"]},"metadata":{},"sourceType":"module"}