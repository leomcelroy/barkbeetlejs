{"ast":null,"code":"import _toConsumableArray from \"/Users/leomcelroy/Desktop/barkbeetle_js/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"/Users/leomcelroy/Desktop/barkbeetle_js/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"/Users/leomcelroy/Desktop/barkbeetle_js/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/leomcelroy/Desktop/barkbeetle_js/src/components/PocketButton.js\";\nimport React, { Component, useState } from 'react';\nimport { Button, Dialog, TextInputField, SegmentedControl, Heading, Link, Strong, Text } from 'evergreen-ui';\nimport * as utils from '../utils.js';\nimport { pocket } from '../toolpaths/pocket.js';\nimport store from '../store.js';\n\nvar PocketButton = function PocketButton(_ref) {\n  var disabled = _ref.disabled;\n\n  var _useState = useState({\n    isShown: false,\n    nameValid: true,\n    cutDepthValid: true,\n    toolDiameterValid: true,\n    stepoverPercentageValid: true,\n    toleranceValid: true,\n    jogHeightValid: true,\n    jogRateValid: true,\n    feedRateValid: true,\n    dogboneTemp: store.getState().defaultParameters.dogbone\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      state = _useState2[0],\n      setState = _useState2[1];\n\n  if (state.dogboneTemp !== store.getState().defaultParameters.dogbone && !state.isShown) {\n    console.log(\"bug fixin time\");\n    setState(_objectSpread({}, state, {\n      dogboneTemp: store.getState().defaultParameters.dogbone\n    }));\n  }\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }, React.createElement(Dialog, {\n    isShown: state.isShown,\n    title: \"Settings for this Pocket Cut\",\n    onCloseComplete: function onCloseComplete() {\n      return setState(_objectSpread({}, state, {\n        isShown: false,\n        showAdvanced: false,\n        dogboneTemp: store.getState().defaultParameters.dogbone\n      }));\n    },\n    onConfirm: function onConfirm() {\n      var valid = state.nameValid && state.cutDepthValid && state.toolDiameterValid && state.stepoverPercentageValid && state.toleranceValid && state.jogHeightValid && state.jogRateValid && state.feedRateValid;\n\n      if (valid) {\n        var name = utils.helpExtract(\"name\");\n        var cutDepth = Number(utils.helpExtract(\"cutDepth\"));\n        var toolDiameter = Number(utils.helpExtract(\"toolDiameter\"));\n        var stepoverPercentage = Number(utils.helpExtract(\"stepoverPercentage\")); //must be between 1 and 100%\n\n        var tolerance = Number(utils.helpExtract(\"tolerance\"));\n        var jogHeight = Number(utils.helpExtract(\"jogHeight\"));\n        var jogRate = Number(utils.helpExtract(\"jogRate\"));\n        var feedRate = Number(utils.helpExtract(\"feedRate\"));\n        if (utils.helpExtract(\"name\") === \"\") name = store.getState().defaultParameters.name;\n        if (utils.helpExtract(\"cutDepth\") === \"\") cutDepth = store.getState().defaultParameters.cutDepth;\n        if (utils.helpExtract(\"toolDiameter\") === \"\") toolDiameter = store.getState().defaultParameters.toolDiameter;\n        if (utils.helpExtract(\"stepoverPercentage\") === \"\") stepoverPercentage = store.getState().defaultParameters.stepoverPercentage; //must be between 1 and 100%\n\n        if (utils.helpExtract(\"tolerance\") === \"\") tolerance = store.getState().defaultParameters.tolerance;\n        if (utils.helpExtract(\"jogHeight\") === \"\") jogHeight = store.getState().defaultParameters.jogHeight;\n        if (utils.helpExtract(\"jogRate\") === \"\") jogRate = store.getState().defaultParameters.jogRate;\n        if (utils.helpExtract(\"feedRate\") === \"\") feedRate = store.getState().defaultParameters.feedRate;\n        if (isNaN(cutDepth)) cutDepth = store.getState().defaultParameters.cutDepth;\n        if (isNaN(toolDiameter)) toolDiameter = store.getState().defaultParameters.toolDiameter;\n        if (isNaN(stepoverPercentage)) stepoverPercentage = store.getState().defaultParameters.stepoverPercentage; //must be between 1 and 100%\n\n        if (isNaN(tolerance)) tolerance = store.getState().defaultParameters.tolerance;\n        if (isNaN(jogHeight)) jogHeight = store.getState().defaultParameters.jogHeight;\n        if (isNaN(jogRate)) jogRate = store.getState().defaultParameters.jogRate;\n        if (isNaN(feedRate)) feedRate = store.getState().defaultParameters.feedRate;\n        var dogbone = state.dogboneTemp; //derived parameters\n\n        var passDepth = cutDepth / 2;\n        var toolRadius = toolDiameter / 2;\n        var compensatedRadius = toolRadius + tolerance;\n        var tempFloor = Math.ceil(cutDepth / passDepth); //should this be ceiling or floor, I think ceil\n\n        var actualPassDepth = cutDepth / tempFloor;\n        var depthOfPasses = utils.makeSeries(actualPassDepth, actualPassDepth, tempFloor).map(function (n) {\n          return -n;\n        }); //settings will be compiled to a single object here\n\n        var parameters = utils.deepcopy(store.getState().defaultParameters);\n        parameters[\"dogbone\"] = dogbone;\n\n        if (!isNaN(tolerance)) {\n          parameters[\"tolerance\"] = tolerance;\n        }\n\n        if (!isNaN(toolDiameter)) {\n          parameters[\"toolDiameter\"] = toolDiameter;\n          parameters[\"compensatedRadius\"] = compensatedRadius;\n        }\n\n        if (!isNaN(cutDepth)) {\n          parameters[\"cutDepth\"] = cutDepth;\n          parameters[\"depthOfPasses\"] = depthOfPasses;\n        }\n\n        if (!isNaN(feedRate)) {\n          parameters[\"feedRate\"] = feedRate;\n        }\n\n        if (!isNaN(jogHeight)) {\n          parameters[\"jogHeight\"] = jogHeight;\n        }\n\n        if (!isNaN(jogRate)) {\n          parameters[\"jogRate\"] = jogRate;\n        }\n\n        if (!isNaN(stepoverPercentage)) {\n          //stepoverPercentage = stepoverPercentage/100;\n          parameters[\"stepoverPercentage\"] = stepoverPercentage;\n        } //console.log(\"parameters\", parameters);\n\n\n        setState(_objectSpread({}, state, {\n          isShown: false\n        })); //TODO: create toolpath with parameter settings here\n\n        var oldToolpaths = store.state.toolpaths;\n        var newPockets = store.state.selected.map(function (path) {\n          return {\n            type: \"pocket\",\n            name: name,\n            parameters: parameters,\n            sourceGeometryID: path,\n            geometry: pocket(store.state.contours[path], parameters),\n            id: utils.makeID(),\n            cutSelected: false,\n            visible: true\n          };\n        });\n        var newToolpaths = [].concat(_toConsumableArray(oldToolpaths), _toConsumableArray(newPockets));\n        console.log(\"newToolpaths\", newToolpaths);\n        store.update({\n          toolpaths: newToolpaths\n        });\n      }\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, React.createElement(TextInputField, {\n    onChange: function onChange(e) {\n      var valid = utils.isNum(e.target.value);\n      setState(_objectSpread({}, state, {\n        cutDepthValid: valid\n      }));\n    },\n    isInvalid: !state.cutDepthValid,\n    name: \"cutDepth\",\n    description: state.cutDepthValid ? \"\" : \"please enter a valid number\",\n    label: \"Depth of Cut for this Pocket\",\n    placeholder: String(store.getState().defaultParameters.cutDepth),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147\n    },\n    __self: this\n  }), React.createElement(TextInputField, {\n    marginTop: 20,\n    onChange: function onChange(e) {\n      var valid = utils.isNum(e.target.value);\n      setState(_objectSpread({}, state, {\n        toolDiameterValid: valid\n      }));\n    },\n    isInvalid: !state.toolDiameterValid,\n    name: \"toolDiameter\",\n    description: state.toolDiameterValid ? \"\" : \"please enter a valid number\",\n    label: \"Tool Diameter\",\n    placeholder: String(store.getState().defaultParameters.toolDiameter),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158\n    },\n    __self: this\n  }), React.createElement(TextInputField, {\n    onChange: function onChange(e) {\n      var valid = utils.isNum(e.target.value);\n      valid = 0 < Number(e.target.value) && Number(e.target.value) <= 100; //process value here\n\n      setState(_objectSpread({}, state, {\n        stepoverPercentageValid: valid\n      }));\n    },\n    isInvalid: !state.stepoverPercentageValid,\n    name: \"stepoverPercentage\",\n    description: state.stepoverPercentageValid ? \"\" : \"please enter a valid number\",\n    label: \"Stepover Percentage\",\n    placeholder: String(store.getState().defaultParameters.stepoverPercentage),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170\n    },\n    __self: this\n  }), React.createElement(TextInputField, {\n    onChange: function onChange(e) {\n      var valid = utils.isNum(e.target.value);\n      setState(_objectSpread({}, state, {\n        feedRateValid: valid\n      }));\n    },\n    isInvalid: !state.feedRateValid,\n    name: \"feedRate\",\n    description: state.feedRateValid ? \"\" : \"please enter a valid number\",\n    label: \"Feed Rate\",\n    placeholder: String(store.getState().defaultParameters.feedRate),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183\n    },\n    __self: this\n  }), React.createElement(TextInputField, {\n    onChange: function onChange(e) {\n      var valid = utils.isNum(e.target.value);\n      setState(_objectSpread({}, state, {\n        toleranceValid: valid\n      }));\n    },\n    isInvalid: !state.toleranceValid,\n    name: \"tolerance\",\n    description: state.toleranceValid ? \"\" : \"please enter a valid number\",\n    label: \"Tolerance\",\n    placeholder: String(store.getState().defaultParameters.tolerance),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194\n    },\n    __self: this\n  }), React.createElement(TextInputField, {\n    onChange: function onChange(e) {\n      var valid = utils.isNum(e.target.value);\n      setState(_objectSpread({}, state, {\n        jogRateValid: valid\n      }));\n    },\n    isInvalid: !state.jogRateValid,\n    name: \"jogRate\",\n    description: state.jogRateValid ? \"\" : \"please enter a valid number\",\n    label: \"Jog Rate\",\n    placeholder: String(store.getState().defaultParameters.jogRate),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205\n    },\n    __self: this\n  }), React.createElement(TextInputField, {\n    onChange: function onChange(e) {\n      var valid = utils.isNum(e.target.value);\n      setState(_objectSpread({}, state, {\n        jogHeightValid: valid\n      }));\n    },\n    isInvalid: !state.jogHeightValid,\n    name: \"jogHeight\",\n    description: state.jogHeightValid ? \"\" : \"please enter a valid number\",\n    label: \"Jog Height\",\n    placeholder: String(store.getState().defaultParameters.jogHeight),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 216\n    },\n    __self: this\n  }), React.createElement(Heading, {\n    marginTop: 20,\n    size: 400,\n    color: \"rgba(67, 90, 111, .91)\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 227\n    },\n    __self: this\n  }, \"Auto Dogbone\"), React.createElement(SegmentedControl, {\n    marginTop: 4,\n    options: [{\n      label: 'true',\n      value: true\n    }, {\n      label: 'false',\n      value: false\n    }],\n    value: state.dogboneTemp,\n    onChange: function onChange(value) {\n      var dogboneTemp = value;\n      setState(_objectSpread({}, state, {\n        dogboneTemp: dogboneTemp\n      }));\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 228\n    },\n    __self: this\n  }), React.createElement(TextInputField, {\n    marginTop: 20,\n    onChange: function onChange(e) {\n      var valid = e.target.value !== \"\";\n      setState(_objectSpread({}, state, {\n        nameValid: valid\n      }));\n    },\n    isInvalid: !state.nameValid,\n    name: \"name\",\n    description: state.nameValid ? \"\" : \"please enter something\",\n    label: \"Name for this Pocket\",\n    placeholder: String(store.getState().defaultParameters.name),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 241\n    },\n    __self: this\n  })), React.createElement(Button, {\n    disabled: disabled,\n    onClick: function onClick() {\n      return setState(_objectSpread({}, state, {\n        isShown: true\n      }));\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 254\n    },\n    __self: this\n  }, \"Pocket\"));\n};\n\nexport { PocketButton };","map":{"version":3,"sources":["/Users/leomcelroy/Desktop/barkbeetle_js/src/components/PocketButton.js"],"names":["React","Component","useState","Button","Dialog","TextInputField","SegmentedControl","Heading","Link","Strong","Text","utils","pocket","store","PocketButton","disabled","isShown","nameValid","cutDepthValid","toolDiameterValid","stepoverPercentageValid","toleranceValid","jogHeightValid","jogRateValid","feedRateValid","dogboneTemp","getState","defaultParameters","dogbone","state","setState","console","log","showAdvanced","valid","name","helpExtract","cutDepth","Number","toolDiameter","stepoverPercentage","tolerance","jogHeight","jogRate","feedRate","isNaN","passDepth","toolRadius","compensatedRadius","tempFloor","Math","ceil","actualPassDepth","depthOfPasses","makeSeries","map","n","parameters","deepcopy","oldToolpaths","toolpaths","newPockets","selected","path","type","sourceGeometryID","geometry","contours","id","makeID","cutSelected","visible","newToolpaths","update","e","isNum","target","value","String","label"],"mappings":"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","sourcesContent":["import React, { Component, useState } from 'react';\nimport {Button, Dialog, TextInputField, SegmentedControl, Heading, Link, Strong, Text} from 'evergreen-ui';\nimport * as utils from '../utils.js';\nimport {pocket} from '../toolpaths/pocket.js';\n\nimport store from '../store.js';\n\nconst PocketButton = ({ disabled }) => {\n\n  const [state, setState] = useState({\n    isShown: false,\n    nameValid: true,\n    cutDepthValid: true,\n    toolDiameterValid: true,\n    stepoverPercentageValid: true,\n    toleranceValid: true,\n    jogHeightValid: true,\n    jogRateValid: true,\n    feedRateValid: true,\n    dogboneTemp: store.getState().defaultParameters.dogbone,\n  });\n\n  if ((state.dogboneTemp !== store.getState().defaultParameters.dogbone) && !state.isShown) {\n    console.log(\"bug fixin time\")\n    setState({\n      ...state,\n      dogboneTemp: store.getState().defaultParameters.dogbone,\n    })\n  }\n\n  return (\n      <div>\n        <Dialog\n          isShown={state.isShown}\n          title=\"Settings for this Pocket Cut\"\n          onCloseComplete={() => setState({\n            ...state,\n            isShown:false,\n            showAdvanced: false,\n            dogboneTemp: store.getState().defaultParameters.dogbone,\n          })}\n          onConfirm={() => {\n\n            let valid = state.nameValid &&\n                        state.cutDepthValid &&\n                        state.toolDiameterValid &&\n                        state.stepoverPercentageValid &&\n                        state.toleranceValid &&\n                        state.jogHeightValid &&\n                        state.jogRateValid &&\n                        state.feedRateValid;\n            if (valid) {\n\n              let name = utils.helpExtract(\"name\");\n              let cutDepth = Number(utils.helpExtract(\"cutDepth\"));\n              let toolDiameter = Number(utils.helpExtract(\"toolDiameter\"));\n              let stepoverPercentage = Number(utils.helpExtract(\"stepoverPercentage\")); //must be between 1 and 100%\n              let tolerance = Number(utils.helpExtract(\"tolerance\"));\n              let jogHeight = Number(utils.helpExtract(\"jogHeight\"));\n              let jogRate = Number(utils.helpExtract(\"jogRate\"));\n              let feedRate = Number(utils.helpExtract(\"feedRate\"));\n\n              if (utils.helpExtract(\"name\") === \"\") name = store.getState().defaultParameters.name;\n              if (utils.helpExtract(\"cutDepth\") === \"\") cutDepth = store.getState().defaultParameters.cutDepth;\n              if (utils.helpExtract(\"toolDiameter\") === \"\") toolDiameter = store.getState().defaultParameters.toolDiameter;\n              if (utils.helpExtract(\"stepoverPercentage\") === \"\") stepoverPercentage = store.getState().defaultParameters.stepoverPercentage; //must be between 1 and 100%\n              if (utils.helpExtract(\"tolerance\") === \"\") tolerance = store.getState().defaultParameters.tolerance;\n              if (utils.helpExtract(\"jogHeight\") === \"\") jogHeight = store.getState().defaultParameters.jogHeight;\n              if (utils.helpExtract(\"jogRate\") === \"\") jogRate = store.getState().defaultParameters.jogRate;\n              if (utils.helpExtract(\"feedRate\") === \"\") feedRate = store.getState().defaultParameters.feedRate;\n\n              if (isNaN(cutDepth)) cutDepth = store.getState().defaultParameters.cutDepth;\n              if (isNaN(toolDiameter)) toolDiameter = store.getState().defaultParameters.toolDiameter;\n              if (isNaN(stepoverPercentage)) stepoverPercentage = store.getState().defaultParameters.stepoverPercentage; //must be between 1 and 100%\n              if (isNaN(tolerance)) tolerance = store.getState().defaultParameters.tolerance;\n              if (isNaN(jogHeight)) jogHeight = store.getState().defaultParameters.jogHeight;\n              if (isNaN(jogRate)) jogRate = store.getState().defaultParameters.jogRate;\n              if (isNaN(feedRate)) feedRate = store.getState().defaultParameters.feedRate;\n\n              let dogbone = state.dogboneTemp;\n\n              //derived parameters\n              let passDepth = cutDepth/2;\n              let toolRadius = toolDiameter/2;\n              let compensatedRadius = toolRadius + tolerance;\n              let tempFloor = Math.ceil(cutDepth/passDepth); //should this be ceiling or floor, I think ceil\n              let actualPassDepth = cutDepth/tempFloor;\n              let depthOfPasses = utils.makeSeries(actualPassDepth, actualPassDepth, tempFloor).map(n => -n);\n\n              //settings will be compiled to a single object here\n              let parameters = utils.deepcopy(store.getState().defaultParameters);\n\n              parameters[\"dogbone\"] = dogbone;\n\n              if (!isNaN(tolerance)) { parameters[\"tolerance\"] = tolerance; }\n\n              if (!isNaN(toolDiameter)) {\n                parameters[\"toolDiameter\"] = toolDiameter;\n                parameters[\"compensatedRadius\"] = compensatedRadius;\n\n              }\n              if (!isNaN(cutDepth)) {\n                parameters[\"cutDepth\"] = cutDepth;\n                parameters[\"depthOfPasses\"] = depthOfPasses;\n              }\n              if (!isNaN(feedRate)) { parameters[\"feedRate\"] = feedRate; }\n              if (!isNaN(jogHeight)) { parameters[\"jogHeight\"] = jogHeight; }\n              if (!isNaN(jogRate)) { parameters[\"jogRate\"] = jogRate; }\n\n              if (!isNaN(stepoverPercentage)) {\n                //stepoverPercentage = stepoverPercentage/100;\n                parameters[\"stepoverPercentage\"] = stepoverPercentage;\n              }\n\n              //console.log(\"parameters\", parameters);\n\n              setState({\n                ...state,\n                isShown:false,\n              });\n\n              //TODO: create toolpath with parameter settings here\n              let oldToolpaths = store.state.toolpaths;\n              let newPockets = store.state.selected.map(path => {\n\n                return {\n                  type: \"pocket\",\n                  name: name,\n                  parameters: parameters,\n                  sourceGeometryID: path,\n                  geometry: pocket(store.state.contours[path], parameters),\n                  id: utils.makeID(),\n                  cutSelected: false,\n                  visible: true,\n                }\n              })\n\n              let newToolpaths = [...oldToolpaths, ...newPockets];\n\n              console.log(\"newToolpaths\", newToolpaths);\n\n              store.update({toolpaths:newToolpaths});\n\n            }\n          }}>\n\n          <TextInputField\n            onChange={e => {\n              let valid = utils.isNum(e.target.value);\n              setState({...state, cutDepthValid:valid})\n            }}\n            isInvalid={!state.cutDepthValid}\n            name=\"cutDepth\"\n            description={(state.cutDepthValid) ? \"\" : \"please enter a valid number\"}\n            label=\"Depth of Cut for this Pocket\"\n            placeholder={String(store.getState().defaultParameters.cutDepth)}/>\n\n          <TextInputField\n            marginTop={20}\n            onChange={e => {\n              let valid = utils.isNum(e.target.value);\n              setState({...state, toolDiameterValid:valid})\n            }}\n            isInvalid={!state.toolDiameterValid}\n            name=\"toolDiameter\"\n            description={(state.toolDiameterValid) ? \"\" : \"please enter a valid number\"}\n            label=\"Tool Diameter\"\n            placeholder={String(store.getState().defaultParameters.toolDiameter)}/>\n\n          <TextInputField\n            onChange={e => {\n              let valid = utils.isNum(e.target.value);\n              valid = 0 < Number(e.target.value) && Number(e.target.value) <= 100;\n              //process value here\n              setState({...state, stepoverPercentageValid:valid})\n            }}\n            isInvalid={!state.stepoverPercentageValid}\n            name=\"stepoverPercentage\"\n            description={(state.stepoverPercentageValid) ? \"\" : \"please enter a valid number\"}\n            label=\"Stepover Percentage\"\n            placeholder={String(store.getState().defaultParameters.stepoverPercentage)}/>\n\n            <TextInputField\n              onChange={e => {\n                let valid = utils.isNum(e.target.value);\n                setState({...state, feedRateValid:valid})\n              }}\n              isInvalid={!state.feedRateValid}\n              name=\"feedRate\"\n              description={(state.feedRateValid) ? \"\" : \"please enter a valid number\"}\n              label=\"Feed Rate\"\n              placeholder={String(store.getState().defaultParameters.feedRate)}/>\n\n            <TextInputField\n              onChange={e => {\n                let valid = utils.isNum(e.target.value);\n                setState({...state, toleranceValid:valid})\n              }}\n              isInvalid={!state.toleranceValid}\n              name=\"tolerance\"\n              description={(state.toleranceValid) ? \"\" : \"please enter a valid number\"}\n              label=\"Tolerance\"\n              placeholder={String(store.getState().defaultParameters.tolerance)}/>\n\n            <TextInputField\n              onChange={e => {\n                let valid = utils.isNum(e.target.value);\n                setState({...state, jogRateValid:valid})\n              }}\n              isInvalid={!state.jogRateValid}\n              name=\"jogRate\"\n              description={(state.jogRateValid) ? \"\" : \"please enter a valid number\"}\n              label=\"Jog Rate\"\n              placeholder={String(store.getState().defaultParameters.jogRate)}/>\n\n              <TextInputField\n                onChange={e => {\n                  let valid = utils.isNum(e.target.value);\n                  setState({...state, jogHeightValid:valid})\n                }}\n                isInvalid={!state.jogHeightValid}\n                name=\"jogHeight\"\n                description={(state.jogHeightValid) ? \"\" : \"please enter a valid number\"}\n                label=\"Jog Height\"\n                placeholder={String(store.getState().defaultParameters.jogHeight)}/>\n\n              <Heading marginTop={20} size={400} color={\"rgba(67, 90, 111, .91)\"}>Auto Dogbone</Heading>\n              <SegmentedControl\n                marginTop={4}\n                options={[\n                  { label: 'true', value: true },\n                  { label: 'false', value: false },\n                ]}\n                value={state.dogboneTemp}\n                onChange={value => {\n                  let dogboneTemp = value;\n                  setState({...state, dogboneTemp });\n                }}\n              />\n\n              <TextInputField\n                marginTop={20}\n                onChange={e => {\n                  let valid = e.target.value !== \"\";\n                  setState({...state, nameValid:valid})\n                }}\n                isInvalid={!state.nameValid}\n                name=\"name\"\n                description={(state.nameValid) ? \"\" : \"please enter something\"}\n                label=\"Name for this Pocket\"\n                placeholder={String(store.getState().defaultParameters.name)}/>\n\n        </Dialog>\n        <Button disabled={disabled} onClick={() => setState({...state, isShown:true})}>Pocket</Button>\n      </div>\n    );\n}\n\nexport {PocketButton};\n"]},"metadata":{},"sourceType":"module"}