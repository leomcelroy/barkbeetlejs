{"ast":null,"code":"import _slicedToArray from \"/Users/leomcelroy/Desktop/barkbeetle_js/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/leomcelroy/Desktop/barkbeetle_js/src/components/AdvancedOptions.js\";\nimport React, { Component, PureComponent, useState } from 'react';\nimport { Button, Dialog, TextInputField, SegmentedControl, Heading, Link, Strong, Text } from 'evergreen-ui';\nimport * as utils from '../utils.js';\nimport store from '../store.js';\nimport { profile } from '../toolpaths/profile.js';\nimport { pocket } from '../toolpaths/pocket.js';\nimport { drill } from '../toolpaths/drill.js';\n\nvar AdvancedOptions = function AdvancedOptions(_ref) {\n  var params = _ref.params,\n      setDefault = _ref.setDefault,\n      name = _ref.name,\n      disabled = _ref.disabled;\n\n  var _useState = useState({\n    isShown: false,\n    nameValid: true,\n    cutDepthValid: true,\n    toolDiameterValid: true,\n    stepoverPercentageValid: true,\n    toleranceValid: true,\n    jogHeightValid: true,\n    jogRateValid: true,\n    feedRateValid: true,\n    tabThicknessValid: true,\n    offsetOptions: [{\n      label: 'outside',\n      value: \"outside\"\n    }, {\n      label: 'inside',\n      value: \"inside\"\n    }, {\n      label: 'none',\n      value: \"none\"\n    }],\n    tabOptions: [{\n      label: 'true',\n      value: true\n    }, {\n      label: 'false',\n      value: false\n    }],\n    dogboneOptions: [{\n      label: 'true',\n      value: true\n    }, {\n      label: 'false',\n      value: false\n    }],\n    offsetTemp: params.offset,\n    tabsTemp: params.tabs,\n    dogboneTemp: params.dogbone\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      state = _useState2[0],\n      setState = _useState2[1];\n\n  validateSubmit = function validateSubmit() {\n    var valid = state.nameValid && state.cutDepthValid && state.toolDiameterValid && state.stepoverPercentageValid && state.toleranceValid && state.jogHeightValid && state.jogRateValid && state.feedRateValid;\n\n    if (valid) {\n      var _name = utils.helpExtract(\"name\");\n\n      var cutDepth = Number(utils.helpExtract(\"cutDepth\"));\n      var toolDiameter = Number(utils.helpExtract(\"toolDiameter\"));\n      var stepoverPercentage = Number(utils.helpExtract(\"stepoverPercentage\")); //must be between 1 and 100%\n\n      var tolerance = Number(utils.helpExtract(\"tolerance\"));\n      var jogHeight = Number(utils.helpExtract(\"jogHeight\"));\n      var jogRate = Number(utils.helpExtract(\"jogRate\"));\n      var feedRate = Number(utils.helpExtract(\"feedRate\"));\n      var tabThickness = Number(utils.helpExtract(\"tabThickness\"));\n      if (utils.helpExtract(\"name\") === \"\") _name = false;\n      if (utils.helpExtract(\"cutDepth\") === \"\") cutDepth = params.cutDepth;\n      if (utils.helpExtract(\"toolDiameter\") === \"\") toolDiameter = params.toolDiameter;\n      if (utils.helpExtract(\"stepoverPercentage\") === \"\") stepoverPercentage = params.stepoverPercentage; //must be between 1 and 100%\n\n      if (utils.helpExtract(\"tolerance\") === \"\") tolerance = params.tolerance;\n      if (utils.helpExtract(\"jogHeight\") === \"\") jogHeight = params.jogHeight;\n      if (utils.helpExtract(\"jogRate\") === \"\") jogRate = params.jogRate;\n      if (utils.helpExtract(\"feedRate\") === \"\") feedRate = params.feedRate;\n      if (utils.helpExtract(\"tabThickness\") === \"\") tabThickness = params.tabThickness;\n      var dogbone = state.dogboneTemp;\n      var tabs = state.tabsTemp;\n      var offset = state.offsetTemp; //derived parameters\n\n      var passDepth = cutDepth / 2;\n      var toolRadius = toolDiameter / 2;\n      var compensatedRadius = toolRadius + tolerance;\n      var tempFloor = Math.ceil(cutDepth / passDepth); //should this be ceiling or floor, I think ceil\n\n      var actualPassDepth = cutDepth / tempFloor;\n      var depthOfPasses = utils.makeSeries(actualPassDepth, actualPassDepth, tempFloor).map(function (n) {\n        return -n;\n      }); //settings will be compiled to a single object here\n\n      var parameters = utils.deepcopy(params);\n      parameters[\"dogbone\"] = dogbone;\n      parameters[\"tabs\"] = tabs;\n      parameters[\"offset\"] = offset;\n      parameters[\"tolerance\"] = tolerance;\n      parameters[\"tabThickness\"] = tabThickness;\n      parameters[\"toolDiameter\"] = toolDiameter;\n      parameters[\"compensatedRadius\"] = compensatedRadius;\n      parameters[\"cutDepth\"] = cutDepth;\n      parameters[\"depthOfPasses\"] = depthOfPasses;\n      parameters[\"feedRate\"] = feedRate;\n      parameters[\"jogHeight\"] = jogHeight;\n      parameters[\"jogRate\"] = jogRate; // parameters[\"insideCutting\"] = insideCutting;\n\n      parameters[\"stepoverPercentage\"] = stepoverPercentage; //console.log(\"parameters\", parameters);\n\n      setState({\n        isShown: false\n      }); //update app state here\n      // if default === true then update defaultParameters state, if false then update parameters of toolpath id\n\n      if (setDefault) {\n        console.log(\"update default parameters\", parameters);\n        store.update({\n          defaultParameters: parameters\n        });\n      } else {\n        var _state = store.getState();\n\n        var toolpaths = _state.toolpaths;\n        var path = toolpaths[index];\n        if (_name) path.name = _name;\n        path.parameters = parameters;\n        var sourceID = path.sourceGeometryID;\n        var sourceGeo = _state.contours[sourceID];\n\n        if (path.type === \"profile\") {\n          var cutGeo = profile(sourceGeo, parameters);\n          path.geometry = cutGeo;\n        }\n\n        if (path.type === \"pocket\") {\n          var _cutGeo = pocket(sourceGeo, parameters);\n\n          path.geometry = _cutGeo;\n        }\n\n        if (path.type === \"drill\") {\n          var _cutGeo2 = drill(sourceGeo, parameters);\n\n          path.geometry = _cutGeo2;\n        }\n\n        store.update({\n          toolpaths: toolpaths\n        });\n      }\n    }\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145\n    },\n    __self: this\n  }, React.createElement(Dialog, {\n    isShown: state.isShown,\n    title: setDefault ? \"Advanced Default Settings\" : \"Specific Toolpath Settings\",\n    onCloseComplete: function onCloseComplete() {\n      setState({\n        isShown: false,\n        dogboneTemp: params.dogbone,\n        tabsTemp: params.tabs,\n        offsetTemp: params.offset\n      });\n    },\n    onConfirm: validateSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146\n    },\n    __self: this\n  }, React.createElement(TextInputField, {\n    onChange: function onChange(e) {\n      var valid = utils.isNum(e.target.value);\n      setState({\n        cutDepthValid: valid\n      });\n    },\n    isInvalid: !state.cutDepthValid,\n    name: \"cutDepth\",\n    description: state.cutDepthValid ? \"\" : \"please enter a valid number\",\n    label: \"Depth of Cut\",\n    placeholder: String(params.cutDepth),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159\n    },\n    __self: this\n  }), React.createElement(TextInputField, {\n    onChange: function onChange(e) {\n      var valid = utils.isNum(e.target.value);\n      setState({\n        toolDiameterValid: valid\n      });\n    },\n    isInvalid: !state.toolDiameterValid,\n    name: \"toolDiameter\",\n    description: state.toolDiameterValid ? \"\" : \"please enter a valid number\",\n    label: \"Tool Diameter\",\n    placeholder: String(params.toolDiameter),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170\n    },\n    __self: this\n  }), React.createElement(TextInputField, {\n    onChange: function onChange(e) {\n      var valid = utils.isNum(e.target.value);\n      valid = 0 < Number(e.target.value) && Number(e.target.value) <= 100; //process value here\n\n      setState({\n        stepoverPercentageValid: valid\n      });\n    },\n    isInvalid: !state.stepoverPercentageValid,\n    name: \"stepoverPercentage\",\n    description: state.stepoverPercentageValid ? \"\" : \"please enter a valid number\",\n    label: \"Stepover Percentage (this is only relevant for pocket cuts)\",\n    placeholder: String(params.stepoverPercentage),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181\n    },\n    __self: this\n  }), React.createElement(TextInputField, {\n    onChange: function onChange(e) {\n      var valid = utils.isNum(e.target.value);\n      setState({\n        feedRateValid: valid\n      });\n    },\n    isInvalid: !state.feedRateValid,\n    name: \"feedRate\",\n    description: state.feedRateValid ? \"\" : \"please enter a valid number\",\n    label: \"Feed Rate\",\n    placeholder: String(params.feedRate),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194\n    },\n    __self: this\n  }), React.createElement(TextInputField, {\n    onChange: function onChange(e) {\n      var valid = utils.isNum(e.target.value);\n      setState({\n        toleranceValid: valid\n      });\n    },\n    isInvalid: !state.toleranceValid,\n    name: \"tolerance\",\n    description: state.toleranceValid ? \"\" : \"please enter a valid number\",\n    label: \"Tolerance\",\n    placeholder: String(params.tolerance),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205\n    },\n    __self: this\n  }), React.createElement(TextInputField, {\n    onChange: function onChange(e) {\n      var valid = utils.isNum(e.target.value);\n      setState({\n        jogRateValid: valid\n      });\n    },\n    isInvalid: !state.jogRateValid,\n    name: \"jogRate\",\n    description: state.jogRateValid ? \"\" : \"please enter a valid number\",\n    label: \"Jog Rate\",\n    placeholder: String(params.jogRate),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 216\n    },\n    __self: this\n  }), React.createElement(TextInputField, {\n    onChange: function onChange(e) {\n      var valid = utils.isNum(e.target.value);\n      setState({\n        jogHeightValid: valid\n      });\n    },\n    isInvalid: !state.jogHeightValid,\n    name: \"jogHeight\",\n    description: state.jogHeightValid ? \"\" : \"please enter a valid number\",\n    label: \"Jog Height\",\n    placeholder: String(params.jogHeight),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 227\n    },\n    __self: this\n  }), React.createElement(Heading, {\n    marginTop: 8,\n    size: 400,\n    color: \"rgba(67, 90, 111, .91)\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 238\n    },\n    __self: this\n  }, \"Offset Direction (this is only relevant for profile cuts)\"), React.createElement(SegmentedControl, {\n    marginTop: 4,\n    options: state.offsetOptions,\n    value: state.offsetTemp,\n    onChange: function onChange(value) {\n      var offsetTemp = value;\n      setState({\n        offsetTemp: offsetTemp\n      });\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 239\n    },\n    __self: this\n  }), React.createElement(Heading, {\n    marginTop: 20,\n    size: 400,\n    color: \"rgba(67, 90, 111, .91)\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 249\n    },\n    __self: this\n  }, \"Auto Tabs (this is only relevant for profile cuts)\"), React.createElement(SegmentedControl, {\n    marginTop: 4,\n    options: state.tabOptions,\n    value: state.tabsTemp,\n    onChange: function onChange(value) {\n      var tabsTemp = value;\n      setState({\n        tabsTemp: tabsTemp\n      });\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 250\n    },\n    __self: this\n  }), React.createElement(TextInputField, {\n    marginTop: 20,\n    onChange: function onChange(e) {\n      var valid = utils.isNum(e.target.value);\n      setState({\n        tabThicknessValid: valid\n      });\n    },\n    isInvalid: !state.tabThicknessValid,\n    name: \"tabThickness\",\n    description: state.tabThicknessValid ? \"\" : \"please enter a valid number\",\n    label: \"Tab Thickness\",\n    placeholder: String(params.tabThickness),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 260\n    },\n    __self: this\n  }), React.createElement(Heading, {\n    marginTop: 20,\n    size: 400,\n    color: \"rgba(67, 90, 111, .91)\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 272\n    },\n    __self: this\n  }, \"Auto Dogbone\"), React.createElement(SegmentedControl, {\n    marginTop: 4,\n    options: state.dogboneOptions,\n    value: state.dogboneTemp,\n    onChange: function onChange(value) {\n      var dogboneTemp = value;\n      setState({\n        dogboneTemp: dogboneTemp\n      });\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 273\n    },\n    __self: this\n  }), !setDefault && React.createElement(TextInputField, {\n    marginTop: 20,\n    onChange: function onChange(e) {\n      var valid = e.target.value !== \"\";\n      setState({\n        nameValid: valid\n      });\n    },\n    isInvalid: !state.nameValid,\n    name: \"name\",\n    description: state.nameValid ? \"\" : \"please enter something\",\n    label: \"Name for this Path\",\n    placeholder: name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 284\n    },\n    __self: this\n  })), React.createElement(Link, {\n    onClick: function onClick() {\n      return setState({\n        isShown: !disabled\n      });\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 297\n    },\n    __self: this\n  }, setDefault ? \"Advanced Default Options\" : \"edit\"));\n};\n\nexport { AdvancedOptions };","map":{"version":3,"sources":["/Users/leomcelroy/Desktop/barkbeetle_js/src/components/AdvancedOptions.js"],"names":["React","Component","PureComponent","useState","Button","Dialog","TextInputField","SegmentedControl","Heading","Link","Strong","Text","utils","store","profile","pocket","drill","AdvancedOptions","params","setDefault","name","disabled","isShown","nameValid","cutDepthValid","toolDiameterValid","stepoverPercentageValid","toleranceValid","jogHeightValid","jogRateValid","feedRateValid","tabThicknessValid","offsetOptions","label","value","tabOptions","dogboneOptions","offsetTemp","offset","tabsTemp","tabs","dogboneTemp","dogbone","state","setState","validateSubmit","valid","helpExtract","cutDepth","Number","toolDiameter","stepoverPercentage","tolerance","jogHeight","jogRate","feedRate","tabThickness","passDepth","toolRadius","compensatedRadius","tempFloor","Math","ceil","actualPassDepth","depthOfPasses","makeSeries","map","n","parameters","deepcopy","console","log","update","defaultParameters","getState","toolpaths","path","index","sourceID","sourceGeometryID","sourceGeo","contours","type","cutGeo","geometry","e","isNum","target","String"],"mappings":"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","sourcesContent":["import React, { Component, PureComponent, useState } from 'react';\nimport {Button, Dialog, TextInputField, SegmentedControl, Heading, Link, Strong, Text} from 'evergreen-ui';\nimport * as utils from '../utils.js';\nimport store from '../store.js';\nimport {profile} from '../toolpaths/profile.js';\nimport {pocket} from '../toolpaths/pocket.js';\nimport {drill} from '../toolpaths/drill.js';\n\nconst AdvancedOptions = ({params, setDefault, name, disabled}) => {\n\n  const [state, setState] = useState({\n    isShown: false,\n    nameValid: true,\n    cutDepthValid: true,\n    toolDiameterValid: true,\n    stepoverPercentageValid: true,\n    toleranceValid: true,\n    jogHeightValid: true,\n    jogRateValid: true,\n    feedRateValid: true,\n    tabThicknessValid: true,\n    offsetOptions: [\n      { label: 'outside', value: \"outside\" },\n      { label: 'inside', value: \"inside\" },\n      { label: 'none', value: \"none\"}\n    ],\n    tabOptions: [\n      { label: 'true', value: true },\n      { label: 'false', value: false },\n    ],\n    dogboneOptions: [\n      { label: 'true', value: true },\n      { label: 'false', value: false },\n    ],\n    offsetTemp: params.offset,\n    tabsTemp: params.tabs,\n    dogboneTemp: params.dogbone,\n  });\n\n  validateSubmit = () => {\n\n    let valid = state.nameValid &&\n                state.cutDepthValid &&\n                state.toolDiameterValid &&\n                state.stepoverPercentageValid &&\n                state.toleranceValid &&\n                state.jogHeightValid &&\n                state.jogRateValid &&\n                state.feedRateValid;\n    if (valid) {\n\n      let name = utils.helpExtract(\"name\");\n      let cutDepth = Number(utils.helpExtract(\"cutDepth\"));\n      let toolDiameter = Number(utils.helpExtract(\"toolDiameter\"));\n      let stepoverPercentage = Number(utils.helpExtract(\"stepoverPercentage\")); //must be between 1 and 100%\n      let tolerance = Number(utils.helpExtract(\"tolerance\"));\n      let jogHeight = Number(utils.helpExtract(\"jogHeight\"));\n      let jogRate = Number(utils.helpExtract(\"jogRate\"));\n      let feedRate = Number(utils.helpExtract(\"feedRate\"));\n      let tabThickness = Number(utils.helpExtract(\"tabThickness\"));\n\n\n      if (utils.helpExtract(\"name\") === \"\") name = false;\n      if (utils.helpExtract(\"cutDepth\") === \"\") cutDepth = params.cutDepth;\n      if (utils.helpExtract(\"toolDiameter\") === \"\") toolDiameter = params.toolDiameter;\n      if (utils.helpExtract(\"stepoverPercentage\") === \"\") stepoverPercentage = params.stepoverPercentage; //must be between 1 and 100%\n      if (utils.helpExtract(\"tolerance\") === \"\") tolerance = params.tolerance;\n      if (utils.helpExtract(\"jogHeight\") === \"\") jogHeight = params.jogHeight;\n      if (utils.helpExtract(\"jogRate\") === \"\") jogRate = params.jogRate;\n      if (utils.helpExtract(\"feedRate\") === \"\") feedRate = params.feedRate;\n      if (utils.helpExtract(\"tabThickness\") === \"\") tabThickness = params.tabThickness;\n\n      let dogbone = state.dogboneTemp;\n      let tabs = state.tabsTemp;\n      let offset = state.offsetTemp;\n\n      //derived parameters\n      let passDepth = cutDepth/2;\n      let toolRadius = toolDiameter/2;\n      let compensatedRadius = toolRadius + tolerance;\n      let tempFloor = Math.ceil(cutDepth/passDepth); //should this be ceiling or floor, I think ceil\n      let actualPassDepth = cutDepth/tempFloor;\n      let depthOfPasses = utils.makeSeries(actualPassDepth, actualPassDepth, tempFloor).map(n => -n);\n\n      //settings will be compiled to a single object here\n      let parameters = utils.deepcopy(params);\n\n      parameters[\"dogbone\"] = dogbone;\n      parameters[\"tabs\"] = tabs;\n      parameters[\"offset\"] = offset;\n      parameters[\"tolerance\"] = tolerance;\n      parameters[\"tabThickness\"] = tabThickness;\n      parameters[\"toolDiameter\"] = toolDiameter;\n      parameters[\"compensatedRadius\"] = compensatedRadius;\n      parameters[\"cutDepth\"] = cutDepth;\n      parameters[\"depthOfPasses\"] = depthOfPasses;\n      parameters[\"feedRate\"] = feedRate;\n      parameters[\"jogHeight\"] = jogHeight;\n      parameters[\"jogRate\"] = jogRate;\n      // parameters[\"insideCutting\"] = insideCutting;\n      parameters[\"stepoverPercentage\"] = stepoverPercentage;\n\n      //console.log(\"parameters\", parameters);\n\n      setState({\n        isShown:false,\n      });\n\n      //update app state here\n      // if default === true then update defaultParameters state, if false then update parameters of toolpath id\n      if (setDefault) {\n        console.log(\"update default parameters\", parameters)\n        store.update({defaultParameters:parameters});\n      } else {\n        let state = store.getState();\n        let toolpaths = state.toolpaths;\n        let path = toolpaths[index];\n\n        if (name) path.name = name;\n        path.parameters = parameters;\n        let sourceID = path.sourceGeometryID;\n        let sourceGeo = state.contours[sourceID];\n\n        if (path.type === \"profile\") {\n          let cutGeo = profile(sourceGeo, parameters);\n          path.geometry = cutGeo;\n        }\n\n        if (path.type === \"pocket\") {\n          let cutGeo = pocket(sourceGeo, parameters);\n          path.geometry = cutGeo;\n        }\n\n        if (path.type === \"drill\") {\n          let cutGeo = drill(sourceGeo, parameters);\n          path.geometry = cutGeo;\n        }\n\n        store.update({toolpaths});\n      }\n    }\n  }\n\n    return (\n      <div>\n        <Dialog\n          isShown={state.isShown}\n          title={setDefault ? \"Advanced Default Settings\" : \"Specific Toolpath Settings\"}\n          onCloseComplete={() => {\n            setState({\n              isShown:false,\n              dogboneTemp: params.dogbone,\n              tabsTemp: params.tabs,\n              offsetTemp: params.offset,\n            })\n          }}\n          onConfirm={validateSubmit}>\n\n          <TextInputField\n            onChange={e => {\n              let valid = utils.isNum(e.target.value);\n              setState({cutDepthValid:valid})\n            }}\n            isInvalid={!state.cutDepthValid}\n            name=\"cutDepth\"\n            description={(state.cutDepthValid) ? \"\" : \"please enter a valid number\"}\n            label=\"Depth of Cut\"\n            placeholder={String(params.cutDepth)}/>\n\n          <TextInputField\n            onChange={e => {\n              let valid = utils.isNum(e.target.value);\n              setState({toolDiameterValid:valid})\n            }}\n            isInvalid={!state.toolDiameterValid}\n            name=\"toolDiameter\"\n            description={(state.toolDiameterValid) ? \"\" : \"please enter a valid number\"}\n            label=\"Tool Diameter\"\n            placeholder={String(params.toolDiameter)}/>\n\n          <TextInputField\n            onChange={e => {\n              let valid = utils.isNum(e.target.value);\n              valid = 0 < Number(e.target.value) && Number(e.target.value) <= 100;\n              //process value here\n              setState({stepoverPercentageValid:valid})\n            }}\n            isInvalid={!state.stepoverPercentageValid}\n            name=\"stepoverPercentage\"\n            description={(state.stepoverPercentageValid) ? \"\" : \"please enter a valid number\"}\n            label=\"Stepover Percentage (this is only relevant for pocket cuts)\"\n            placeholder={String(params.stepoverPercentage)}/>\n\n            <TextInputField\n              onChange={e => {\n                let valid = utils.isNum(e.target.value);\n                setState({feedRateValid:valid})\n              }}\n              isInvalid={!state.feedRateValid}\n              name=\"feedRate\"\n              description={(state.feedRateValid) ? \"\" : \"please enter a valid number\"}\n              label=\"Feed Rate\"\n              placeholder={String(params.feedRate)}/>\n\n              <TextInputField\n                onChange={e => {\n                  let valid = utils.isNum(e.target.value);\n                  setState({toleranceValid:valid})\n                }}\n                isInvalid={!state.toleranceValid}\n                name=\"tolerance\"\n                description={(state.toleranceValid) ? \"\" : \"please enter a valid number\"}\n                label=\"Tolerance\"\n                placeholder={String(params.tolerance)}/>\n\n            <TextInputField\n              onChange={e => {\n                let valid = utils.isNum(e.target.value);\n                setState({jogRateValid:valid})\n              }}\n              isInvalid={!state.jogRateValid}\n              name=\"jogRate\"\n              description={(state.jogRateValid) ? \"\" : \"please enter a valid number\"}\n              label=\"Jog Rate\"\n              placeholder={String(params.jogRate)}/>\n\n              <TextInputField\n                onChange={e => {\n                  let valid = utils.isNum(e.target.value);\n                  setState({jogHeightValid:valid})\n                }}\n                isInvalid={!state.jogHeightValid}\n                name=\"jogHeight\"\n                description={(state.jogHeightValid) ? \"\" : \"please enter a valid number\"}\n                label=\"Jog Height\"\n                placeholder={String(params.jogHeight)}/>\n\n              <Heading marginTop={8} size={400} color={\"rgba(67, 90, 111, .91)\"}>Offset Direction (this is only relevant for profile cuts)</Heading>\n              <SegmentedControl\n                marginTop={4}\n                options={state.offsetOptions}\n                value={state.offsetTemp}\n                onChange={value => {\n                  let offsetTemp = value;\n                  setState({ offsetTemp });\n                }}\n              />\n\n              <Heading marginTop={20} size={400} color={\"rgba(67, 90, 111, .91)\"}>Auto Tabs (this is only relevant for profile cuts)</Heading>\n              <SegmentedControl\n                marginTop={4}\n                options={state.tabOptions}\n                value={state.tabsTemp}\n                onChange={value => {\n                  let tabsTemp = value;\n                  setState({ tabsTemp });\n                }}\n              />\n\n              <TextInputField\n                marginTop={20}\n                onChange={e => {\n                  let valid = utils.isNum(e.target.value);\n                  setState({tabThicknessValid:valid})\n                }}\n                isInvalid={!state.tabThicknessValid}\n                name=\"tabThickness\"\n                description={(state.tabThicknessValid) ? \"\" : \"please enter a valid number\"}\n                label=\"Tab Thickness\"\n                placeholder={String(params.tabThickness)}/>\n\n              <Heading marginTop={20} size={400} color={\"rgba(67, 90, 111, .91)\"}>Auto Dogbone</Heading>\n              <SegmentedControl\n                marginTop={4}\n                options={state.dogboneOptions}\n                value={state.dogboneTemp}\n                onChange={value => {\n                  let dogboneTemp = value;\n                  setState({ dogboneTemp });\n                }}\n              />\n\n              {!setDefault &&\n              <TextInputField\n                marginTop={20}\n                onChange={e => {\n                  let valid = e.target.value !== \"\";\n                  setState({nameValid:valid})\n                }}\n                isInvalid={!state.nameValid}\n                name=\"name\"\n                description={(state.nameValid) ? \"\" : \"please enter something\"}\n                label=\"Name for this Path\"\n                placeholder={name}/>}\n\n        </Dialog>\n        <Link onClick={() => setState({isShown:!disabled})}>{setDefault ? \"Advanced Default Options\" : \"edit\"}</Link>\n      </div>\n    );\n}\n\nexport {AdvancedOptions};\n"]},"metadata":{},"sourceType":"module"}