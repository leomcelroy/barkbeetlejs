{"ast":null,"code":"import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport { splitBoxProps } from 'ui-box';\nimport { FormField } from '../../form-field';\nimport Select from './Select';\nvar idCounter = 0;\n\nvar TextInputField =\n/*#__PURE__*/\nfunction (_PureComponent) {\n  _inherits(TextInputField, _PureComponent);\n\n  function TextInputField() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, TextInputField);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(TextInputField)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"state\", {\n      id: (_this.props.id || idCounter++).toString()\n    });\n\n    return _this;\n  }\n\n  _createClass(TextInputField, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          unusedId = _this$props.id,\n          hint = _this$props.hint,\n          label = _this$props.label,\n          description = _this$props.description,\n          validationMessage = _this$props.validationMessage,\n          inputHeight = _this$props.inputHeight,\n          inputWidth = _this$props.inputWidth,\n          disabled = _this$props.disabled,\n          required = _this$props.required,\n          isInvalid = _this$props.isInvalid,\n          appearance = _this$props.appearance,\n          props = _objectWithoutProperties(_this$props, [\"id\", \"hint\", \"label\", \"description\", \"validationMessage\", \"inputHeight\", \"inputWidth\", \"disabled\", \"required\", \"isInvalid\", \"appearance\"]);\n\n      var id = \"SelectField-\".concat(this.state.id);\n      /**\n       * Split the wrapper props from the input props.\n       */\n\n      var _splitBoxProps = splitBoxProps(props),\n          matchedProps = _splitBoxProps.matchedProps,\n          remainingProps = _splitBoxProps.remainingProps;\n\n      return React.createElement(FormField, _extends({\n        marginBottom: 24,\n        label: label,\n        isRequired: required,\n        hint: hint,\n        description: description,\n        validationMessage: validationMessage,\n        labelFor: id\n      }, matchedProps), React.createElement(Select, _extends({\n        id: id,\n        width: inputWidth,\n        height: inputHeight,\n        disabled: disabled,\n        required: required,\n        isInvalid: isInvalid,\n        appearance: appearance\n      }, remainingProps)));\n    }\n  }]);\n\n  return TextInputField;\n}(PureComponent);\n\nTextInputField.displayName = \"TextInputField\";\n\n_defineProperty(TextInputField, \"propTypes\", _objectSpread({}, Select.propTypes, FormField.propTypes, {\n  /**\n   * The label used above the input element.\n   */\n  label: PropTypes.node.isRequired,\n\n  /**\n   * Passed on the label as a htmlFor prop.\n   */\n  labelFor: PropTypes.string,\n\n  /**\n   * Wether or not show a asterix after the label.\n   */\n  isRequired: PropTypes.bool,\n\n  /**\n   * A optional description of the field under the label, above the input element.\n   */\n  description: PropTypes.node,\n\n  /**\n   * A optional hint under the input element.\n   */\n  hint: PropTypes.node,\n\n  /**\n   * If a validation message is passed it is shown under the input element\n   * and above the hint.\n   */\n  validationMessage: PropTypes.node,\n\n  /**\n   * The height of the input element.\n   */\n  inputHeight: PropTypes.number,\n\n  /**\n   * The width of the input width.\n   */\n  inputWidth: PropTypes.oneOfType([PropTypes.number, PropTypes.string])\n}));\n\n_defineProperty(TextInputField, \"defaultProps\", {\n  /**\n   * The input width should be as wide as the form field.\n   */\n  inputWidth: '100%',\n  inputHeight: 32\n});\n\nexport { TextInputField as default };","map":null,"metadata":{},"sourceType":"module"}