{"ast":null,"code":"/*\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the terms of the LICENSE file distributed with this project.\n */\nexport var KeyCodes = {\n  8: \"backspace\",\n  9: \"tab\",\n  13: \"enter\",\n  20: \"capslock\",\n  27: \"esc\",\n  32: \"space\",\n  33: \"pageup\",\n  34: \"pagedown\",\n  35: \"end\",\n  36: \"home\",\n  37: \"left\",\n  38: \"up\",\n  39: \"right\",\n  40: \"down\",\n  45: \"ins\",\n  46: \"del\",\n  // number keys\n  48: \"0\",\n  49: \"1\",\n  50: \"2\",\n  51: \"3\",\n  52: \"4\",\n  53: \"5\",\n  54: \"6\",\n  55: \"7\",\n  56: \"8\",\n  57: \"9\",\n  // alphabet\n  65: \"a\",\n  66: \"b\",\n  67: \"c\",\n  68: \"d\",\n  69: \"e\",\n  70: \"f\",\n  71: \"g\",\n  72: \"h\",\n  73: \"i\",\n  74: \"j\",\n  75: \"k\",\n  76: \"l\",\n  77: \"m\",\n  78: \"n\",\n  79: \"o\",\n  80: \"p\",\n  81: \"q\",\n  82: \"r\",\n  83: \"s\",\n  84: \"t\",\n  85: \"u\",\n  86: \"v\",\n  87: \"w\",\n  88: \"x\",\n  89: \"y\",\n  90: \"z\",\n  // punctuation\n  106: \"*\",\n  107: \"+\",\n  109: \"-\",\n  110: \".\",\n  111: \"/\",\n  186: \";\",\n  187: \"=\",\n  188: \",\",\n  189: \"-\",\n  190: \".\",\n  191: \"/\",\n  192: \"`\",\n  219: \"[\",\n  220: \"\\\\\",\n  221: \"]\",\n  222: \"'\"\n};\nexport var Modifiers = {\n  16: \"shift\",\n  17: \"ctrl\",\n  18: \"alt\",\n  91: \"meta\",\n  93: \"meta\",\n  224: \"meta\"\n};\nexport var ModifierBitMasks = {\n  alt: 1,\n  ctrl: 2,\n  meta: 4,\n  shift: 8\n};\nexport var Aliases = {\n  cmd: \"meta\",\n  command: \"meta\",\n  escape: \"esc\",\n  minus: \"-\",\n  mod: isMac() ? \"meta\" : \"ctrl\",\n  option: \"alt\",\n  plus: \"+\",\n  return: \"enter\",\n  win: \"meta\"\n}; // alph sorting is unintuitive here\n// tslint:disable object-literal-sort-keys\n\nexport var ShiftKeys = {\n  \"~\": \"`\",\n  \"!\": \"1\",\n  \"@\": \"2\",\n  \"#\": \"3\",\n  $: \"4\",\n  \"%\": \"5\",\n  \"^\": \"6\",\n  \"&\": \"7\",\n  \"*\": \"8\",\n  \"(\": \"9\",\n  \")\": \"0\",\n  _: \"-\",\n  \"+\": \"=\",\n  \"{\": \"[\",\n  \"}\": \"]\",\n  \"|\": \"\\\\\",\n  \":\": \";\",\n  '\"': \"'\",\n  \"<\": \",\",\n  \">\": \".\",\n  \"?\": \"/\"\n}; // tslint:enable object-literal-sort-keys\n// Function keys\n\nfor (var i = 1; i <= 12; ++i) {\n  KeyCodes[111 + i] = \"f\" + i;\n} // Numpad\n\n\nfor (var i = 0; i <= 9; ++i) {\n  KeyCodes[96 + i] = \"num\" + i.toString();\n}\n\nexport function comboMatches(a, b) {\n  return a.modifiers === b.modifiers && a.key === b.key;\n}\n/**\n * Converts a key combo string into a key combo object. Key combos include\n * zero or more modifier keys, such as `shift` or `alt`, and exactly one\n * action key, such as `A`, `enter`, or `left`.\n *\n * For action keys that require a shift, e.g. `@` or `|`, we inlude the\n * necessary `shift` modifier and automatically convert the action key to the\n * unshifted version. For example, `@` is equivalent to `shift+2`.\n */\n\nexport var parseKeyCombo = function parseKeyCombo(combo) {\n  var pieces = combo.replace(/\\s/g, \"\").toLowerCase().split(\"+\");\n  var modifiers = 0;\n  var key = null;\n\n  for (var _i = 0, pieces_1 = pieces; _i < pieces_1.length; _i++) {\n    var piece = pieces_1[_i];\n\n    if (piece === \"\") {\n      throw new Error(\"Failed to parse key combo \\\"\" + combo + \"\\\".\\n                Valid key combos look like \\\"cmd + plus\\\", \\\"shift+p\\\", or \\\"!\\\"\");\n    }\n\n    if (Aliases[piece] != null) {\n      piece = Aliases[piece];\n    }\n\n    if (ModifierBitMasks[piece] != null) {\n      modifiers += ModifierBitMasks[piece];\n    } else if (ShiftKeys[piece] != null) {\n      // tslint:disable-next-line no-string-literal\n      modifiers += ModifierBitMasks[\"shift\"];\n      key = ShiftKeys[piece];\n    } else {\n      key = piece.toLowerCase();\n    }\n  }\n\n  return {\n    modifiers: modifiers,\n    key: key\n  };\n};\n/**\n * Converts a keyboard event into a valid combo prop string\n */\n\nexport var getKeyComboString = function getKeyComboString(e) {\n  var keys = []; // modifiers first\n\n  if (e.ctrlKey) {\n    keys.push(\"ctrl\");\n  }\n\n  if (e.altKey) {\n    keys.push(\"alt\");\n  }\n\n  if (e.shiftKey) {\n    keys.push(\"shift\");\n  }\n\n  if (e.metaKey) {\n    keys.push(\"meta\");\n  }\n\n  var which = e.which;\n\n  if (Modifiers[which] != null) {// no action key\n  } else if (KeyCodes[which] != null) {\n    keys.push(KeyCodes[which]);\n  } else {\n    keys.push(String.fromCharCode(which).toLowerCase());\n  } // join keys with plusses\n\n\n  return keys.join(\" + \");\n};\n/**\n * Determines the key combo object from the given keyboard event. Again, a key\n * combo includes zero or more modifiers (represented by a bitmask) and one\n * action key, which we determine from the `e.which` property of the keyboard\n * event.\n */\n\nexport var getKeyCombo = function getKeyCombo(e) {\n  var key = null;\n  var which = e.which;\n\n  if (Modifiers[which] != null) {// keep key null\n  } else if (KeyCodes[which] != null) {\n    key = KeyCodes[which];\n  } else {\n    key = String.fromCharCode(which).toLowerCase();\n  }\n\n  var modifiers = 0; // tslint:disable no-string-literal\n\n  if (e.altKey) {\n    modifiers += ModifierBitMasks[\"alt\"];\n  }\n\n  if (e.ctrlKey) {\n    modifiers += ModifierBitMasks[\"ctrl\"];\n  }\n\n  if (e.metaKey) {\n    modifiers += ModifierBitMasks[\"meta\"];\n  }\n\n  if (e.shiftKey) {\n    modifiers += ModifierBitMasks[\"shift\"];\n  } // tslint:enable\n\n\n  return {\n    modifiers: modifiers,\n    key: key\n  };\n};\n/**\n * Splits a key combo string into its constituent key values and looks up\n * aliases, such as `return` -> `enter`.\n *\n * Unlike the parseKeyCombo method, this method does NOT convert shifted\n * action keys. So `\"@\"` will NOT be converted to `[\"shift\", \"2\"]`).\n */\n\nexport var normalizeKeyCombo = function normalizeKeyCombo(combo, platformOverride) {\n  var keys = combo.replace(/\\s/g, \"\").split(\"+\");\n  return keys.map(function (key) {\n    var keyName = Aliases[key] != null ? Aliases[key] : key;\n    return keyName === \"meta\" ? isMac(platformOverride) ? \"cmd\" : \"ctrl\" : keyName;\n  });\n};\n/* tslint:enable:no-string-literal */\n\nfunction isMac(platformOverride) {\n  var platform = platformOverride != null ? platformOverride : typeof navigator !== \"undefined\" ? navigator.platform : undefined;\n  return platform == null ? false : /Mac|iPod|iPhone|iPad/.test(platform);\n}","map":null,"metadata":{},"sourceType":"module"}