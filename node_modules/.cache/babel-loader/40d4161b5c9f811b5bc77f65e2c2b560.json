{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport Box from 'ui-box';\nimport { Image } from '../../image';\nimport { Text } from '../../typography';\nimport { withTheme } from '../../theme';\nimport globalGetInitials from './utils/getInitials';\nimport globalHash from './utils/hash';\nvar initialsProps = {\n  top: 0,\n  position: 'absolute',\n  display: 'flex',\n  alignItems: 'center',\n  justifyContent: 'center',\n  lineHeight: 1\n};\n\nvar Avatar =\n/*#__PURE__*/\nfunction (_PureComponent) {\n  _inherits(Avatar, _PureComponent);\n\n  function Avatar(props, context) {\n    var _this;\n\n    _classCallCheck(this, Avatar);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Avatar).call(this, props, context));\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"handleError\", function () {\n      _this.setState({\n        imageHasFailedLoading: true\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"getColorProps\", function () {\n      var _this$props = _this.props,\n          isSolid = _this$props.isSolid,\n          theme = _this$props.theme,\n          color = _this$props.color,\n          propsHashValue = _this$props.hashValue,\n          name = _this$props.name;\n\n      if (color === 'automatic') {\n        var hashValue = globalHash(propsHashValue || name);\n        return theme.getAvatarProps({\n          isSolid: isSolid,\n          color: color,\n          hashValue: hashValue\n        });\n      }\n\n      return theme.getAvatarProps({\n        isSolid: isSolid,\n        color: color\n      });\n    });\n\n    _this.state = {\n      imageHasFailedLoading: false\n    };\n    return _this;\n  }\n\n  _createClass(Avatar, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n          theme = _this$props2.theme,\n          src = _this$props2.src,\n          size = _this$props2.size,\n          name = _this$props2.name,\n          isSolid = _this$props2.isSolid,\n          propsHashValue = _this$props2.hashValue,\n          getInitials = _this$props2.getInitials,\n          propsColor = _this$props2.color,\n          forceShowInitials = _this$props2.forceShowInitials,\n          sizeLimitOneCharacter = _this$props2.sizeLimitOneCharacter,\n          props = _objectWithoutProperties(_this$props2, [\"theme\", \"src\", \"size\", \"name\", \"isSolid\", \"hashValue\", \"getInitials\", \"color\", \"forceShowInitials\", \"sizeLimitOneCharacter\"]);\n\n      var imageHasFailedLoading = this.state.imageHasFailedLoading;\n      var imageUnavailable = !src || imageHasFailedLoading;\n      var initialsFontSize = \"\".concat(theme.getAvatarInitialsFontSize(size, sizeLimitOneCharacter), \"px\");\n      var initials = getInitials(name);\n\n      if (size <= sizeLimitOneCharacter) {\n        initials = initials.substring(0, 1);\n      }\n\n      var colorProps = this.getColorProps();\n      return React.createElement(Box, _extends({\n        width: size,\n        height: size,\n        overflow: \"hidden\",\n        borderRadius: 9999,\n        position: \"relative\",\n        display: \"inline-flex\",\n        flexShrink: 0,\n        justifyContent: \"center\",\n        backgroundColor: colorProps.backgroundColor,\n        title: name\n      }, props), (imageUnavailable || forceShowInitials) && React.createElement(Text, {\n        css: initialsProps,\n        fontSize: initialsFontSize,\n        lineHeight: initialsFontSize,\n        width: size,\n        height: size,\n        color: colorProps.color\n      }, initials), !imageUnavailable && React.createElement(Image, {\n        width: \"auto\",\n        height: \"100%\",\n        src: src,\n        onError: this.handleError\n      }));\n    }\n  }]);\n\n  return Avatar;\n}(PureComponent);\n\nAvatar.displayName = \"Avatar\";\n\n_defineProperty(Avatar, \"propTypes\", {\n  /**\n   * The src attribute of the image.\n   * When it's not available, render initials instead.\n   */\n  src: PropTypes.string,\n\n  /**\n   * The size of the avatar.\n   */\n  size: PropTypes.number,\n\n  /**\n   * The name used for the initials and title attribute.\n   */\n  name: PropTypes.string,\n\n  /**\n   * The value used for the hash function.\n   * The name is used as the hashValue by default.\n   * When dealing with anonymous users you should use the id instead.\n   */\n  hashValue: PropTypes.string,\n\n  /**\n   * When true, render a solid avatar.\n   */\n  isSolid: PropTypes.bool,\n\n  /**\n   * The color used for the avatar.\n   * When the value is `automatic`, use the hash function to determine the color.\n   */\n  color: PropTypes.string.isRequired,\n\n  /**\n   * Function to get the initials based on the name.\n   */\n  getInitials: PropTypes.func,\n\n  /**\n   * When true, force show the initials.\n   * This is useful in some cases when using Gravatar and transparent pngs.\n   */\n  forceShowInitials: PropTypes.bool,\n\n  /**\n   * When the size is smaller than this number, use a single initial for the avatar.\n   */\n  sizeLimitOneCharacter: PropTypes.number,\n\n  /**\n   * Theme provided by ThemeProvider.\n   */\n  theme: PropTypes.object.isRequired\n});\n\n_defineProperty(Avatar, \"defaultProps\", {\n  color: 'automatic',\n  size: 24,\n  isSolid: false,\n  getInitials: globalGetInitials,\n  forceShowInitials: false,\n  sizeLimitOneCharacter: 20\n});\n\nexport default withTheme(Avatar);","map":null,"metadata":{},"sourceType":"module"}