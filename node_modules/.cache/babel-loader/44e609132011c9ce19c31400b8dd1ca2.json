{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _libs = require('../../libs');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar Dialog = function (_Component) {\n  (0, _inherits3.default)(Dialog, _Component);\n\n  function Dialog(props) {\n    (0, _classCallCheck3.default)(this, Dialog);\n\n    var _this = (0, _possibleConstructorReturn3.default)(this, (Dialog.__proto__ || Object.getPrototypeOf(Dialog)).call(this, props));\n\n    _this.state = {\n      bodyOverflow: ''\n    };\n    return _this;\n  }\n\n  (0, _createClass3.default)(Dialog, [{\n    key: 'componentWillReceiveProps',\n    value: function componentWillReceiveProps(nextProps) {\n      if (this.willOpen(this.props, nextProps)) {\n        if (this.props.lockScroll && document.body && document.body.style) {\n          if (!this.state.bodyOverflow) {\n            this.setState({\n              bodyOverflow: document.body.style.overflow\n            });\n          }\n\n          document.body.style.overflow = 'hidden';\n        }\n      }\n\n      if (this.willClose(this.props, nextProps) && this.props.lockScroll) {\n        if (this.props.modal && this.state.bodyOverflow !== 'hidden' && document.body && document.body.style) {\n          document.body.style.overflow = this.state.bodyOverflow;\n        }\n      }\n    }\n  }, {\n    key: 'componentDidUpdate',\n    value: function componentDidUpdate(prevProps) {\n      if (this.willOpen(prevProps, this.props)) {\n        this.refs.wrap.focus();\n      }\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      if (this.props.lockScroll && document.body && document.body.style) {\n        document.body.style.removeProperty('overflow');\n      }\n    }\n  }, {\n    key: 'onKeyDown',\n    value: function onKeyDown(e) {\n      if (this.props.closeOnPressEscape && e.keyCode === 27) {\n        this.close(e);\n      }\n    }\n  }, {\n    key: 'handleWrapperClick',\n    value: function handleWrapperClick(e) {\n      if (e.target instanceof HTMLDivElement) {\n        if (this.props.closeOnClickModal && e.target === e.currentTarget) {\n          this.close(e);\n        }\n      }\n    }\n  }, {\n    key: 'close',\n    value: function close(e) {\n      this.props.onCancel(e);\n    }\n  }, {\n    key: 'willOpen',\n    value: function willOpen(prevProps, nextProps) {\n      return !prevProps.visible && nextProps.visible;\n    }\n  }, {\n    key: 'willClose',\n    value: function willClose(prevProps, nextProps) {\n      return prevProps.visible && !nextProps.visible;\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this2 = this;\n\n      var _props = this.props,\n          visible = _props.visible,\n          title = _props.title,\n          size = _props.size,\n          top = _props.top,\n          modal = _props.modal,\n          customClass = _props.customClass,\n          showClose = _props.showClose;\n      return _react2.default.createElement('div', null, _react2.default.createElement(_libs.Transition, {\n        name: 'dialog-fade'\n      }, _react2.default.createElement(_libs.View, {\n        show: visible\n      }, _react2.default.createElement('div', {\n        ref: 'wrap',\n        style: {\n          zIndex: 1013\n        },\n        className: this.classNames('el-dialog__wrapper'),\n        onClick: function onClick(e) {\n          return _this2.handleWrapperClick(e);\n        },\n        onKeyDown: function onKeyDown(e) {\n          return _this2.onKeyDown(e);\n        }\n      }, _react2.default.createElement('div', {\n        ref: 'dialog',\n        style: this.style(size === 'full' ? {} : {\n          'top': top\n        }),\n        className: this.className(\"el-dialog\", 'el-dialog--' + size, customClass)\n      }, _react2.default.createElement('div', {\n        className: 'el-dialog__header'\n      }, _react2.default.createElement('span', {\n        className: 'el-dialog__title'\n      }, title), showClose && _react2.default.createElement('button', {\n        type: 'button',\n        className: 'el-dialog__headerbtn',\n        onClick: function onClick(e) {\n          return _this2.close(e);\n        }\n      }, _react2.default.createElement('i', {\n        className: 'el-dialog__close el-icon el-icon-close'\n      }))), this.props.children)))), modal && _react2.default.createElement(_libs.View, {\n        show: visible\n      }, _react2.default.createElement('div', {\n        className: 'v-modal',\n        style: {\n          zIndex: 1012\n        }\n      })));\n    }\n  }]);\n  return Dialog;\n}(_libs.Component);\n\nDialog.defaultProps = {\n  visible: false,\n  title: '',\n  size: 'small',\n  top: '15%',\n  modal: true,\n  lockScroll: true,\n  closeOnClickModal: true,\n  closeOnPressEscape: true,\n  showClose: true\n};\nvar _default = Dialog;\nexports.default = _default;\nDialog.propTypes = {\n  // 控制对话框是否可见\n  visible: _libs.PropTypes.bool.isRequired,\n  // 标题\n  title: _libs.PropTypes.string,\n  // 大小 (tiny/small/large/full)\n  size: _libs.PropTypes.string,\n  // top 值（仅在 size 不为 full 时有效）\n  top: _libs.PropTypes.string,\n  // 控制遮罩层展示\n  modal: _libs.PropTypes.bool,\n  // Dialog 的自定义类名\n  customClass: _libs.PropTypes.string,\n  // 是否在 Dialog 出现时将 body 滚动锁定\n  lockScroll: _libs.PropTypes.bool,\n  // 是否可以通过点击 modal 关闭 Dialog\n  closeOnClickModal: _libs.PropTypes.bool,\n  // 是否可以通过按下 ESC 关闭 Dialog\n  closeOnPressEscape: _libs.PropTypes.bool,\n  // 点击遮罩层或右上角叉或取消按钮的回调\n  onCancel: _libs.PropTypes.func.isRequired,\n  showClose: _libs.PropTypes.bool\n};\n;\n\nvar _temp = function () {\n  if (typeof __REACT_HOT_LOADER__ === 'undefined') {\n    return;\n  }\n\n  __REACT_HOT_LOADER__.register(Dialog, 'Dialog', 'src/dialog/Dialog.jsx');\n\n  __REACT_HOT_LOADER__.register(_default, 'default', 'src/dialog/Dialog.jsx');\n}();\n\n;","map":null,"metadata":{},"sourceType":"script"}