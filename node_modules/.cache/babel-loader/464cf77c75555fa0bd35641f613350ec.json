{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Textarea } from '../../textarea';\n\nvar EditableCellField =\n/*#__PURE__*/\nfunction (_React$PureComponent) {\n  _inherits(EditableCellField, _React$PureComponent);\n\n  function EditableCellField() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, EditableCellField);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(EditableCellField)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"state\", {\n      top: 0,\n      left: 0,\n      height: 0,\n      width: 0\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"getTableBodyRef\", function (targetRef) {\n      if (_this.tableBodyRef) return _this.tableBodyRef;\n      var ref = targetRef;\n\n      while (ref) {\n        var isTableBody = ref.hasAttribute('data-evergreen-table-body');\n\n        if (isTableBody) {\n          return ref;\n        }\n\n        if (ref.parentElement) {\n          ref = ref.parentElement;\n        } else {\n          return null;\n        }\n      }\n\n      _this.tableBodyRef = ref;\n      return _this.tableBodyRef;\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"update\", function () {\n      var getTargetRef = _this.props.getTargetRef;\n      var targetRef = getTargetRef();\n      if (!targetRef) return;\n\n      var tableBodyRef = _this.getTableBodyRef(targetRef);\n\n      var _targetRef$getBoundin = targetRef.getBoundingClientRect(),\n          left = _targetRef$getBoundin.left,\n          targetTop = _targetRef$getBoundin.top,\n          height = _targetRef$getBoundin.height,\n          width = _targetRef$getBoundin.width;\n\n      var top;\n\n      if (tableBodyRef) {\n        var bounds = tableBodyRef.getBoundingClientRect();\n        top = Math.min(Math.max(targetTop, bounds.top), bounds.bottom - height);\n      } else {\n        top = targetTop;\n      }\n\n      _this.setState(function () {\n        return {\n          left: left,\n          top: top,\n          height: height,\n          width: width\n        };\n      }, function () {\n        _this.latestAnimationFrame = requestAnimationFrame(function () {\n          _this.update();\n        });\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"onRef\", function (ref) {\n      _this.textareaRef = ref;\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"handleBlur\", function () {\n      if (_this.textareaRef) _this.props.onChangeComplete(_this.textareaRef.value);\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"handleKeyDown\", function (e) {\n      var key = e.key;\n\n      if (key === 'Escape') {\n        _this.props.onCancel();\n      } else if (key === 'Enter') {\n        _this.textareaRef.blur();\n\n        e.preventDefault();\n      }\n    });\n\n    return _this;\n  }\n\n  _createClass(EditableCellField, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      this.update();\n      requestAnimationFrame(function () {\n        _this2.textareaRef.focus();\n      });\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      cancelAnimationFrame(this.latestAnimationFrame);\n      this.props.onCancel();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          size = _this$props.size,\n          value = _this$props.value,\n          minWidth = _this$props.minWidth,\n          minHeight = _this$props.minHeight,\n          zIndex = _this$props.zIndex;\n      var _this$state = this.state,\n          left = _this$state.left,\n          top = _this$state.top,\n          height = _this$state.height,\n          width = _this$state.width;\n      return React.createElement(Textarea, {\n        innerRef: this.onRef,\n        onKeyDown: this.handleKeyDown,\n        onBlur: this.handleBlur,\n        appearance: \"editable-cell\",\n        size: size,\n        style: {\n          left: left,\n          top: top,\n          height: height,\n          minHeight: Math.max(height, minHeight),\n          width: width,\n          minWidth: Math.max(width, minWidth),\n          zIndex: zIndex\n        },\n        height: null,\n        width: null,\n        minHeight: null,\n        position: \"fixed\",\n        defaultValue: value\n      });\n    }\n  }]);\n\n  return EditableCellField;\n}(React.PureComponent);\n\nEditableCellField.displayName = \"EditableCellField\";\n\n_defineProperty(EditableCellField, \"propTypes\", {\n  /**\n   * Used as the defaultValue of the textarea.\n   */\n  value: PropTypes.string.isRequired,\n\n  /**\n   * The z-index placed on the element.\n   */\n  zIndex: PropTypes.number.isRequired,\n\n  /**\n   * Function to get the target ref of the parent.\n   * Used to mirror the position.\n   */\n  getTargetRef: PropTypes.func.isRequired,\n\n  /**\n   * Min width of the textarea.\n   * The textarea can never be smaller than the cell.\n   */\n  minWidth: PropTypes.number.isRequired,\n\n  /**\n   * Min height of the textarea.\n   * The textarea can never be smaller than the cell.\n   */\n  minHeight: PropTypes.number.isRequired,\n\n  /**\n   * Called when the textarea is blurred, pass the value back to the cell.\n   */\n  onChangeComplete: PropTypes.func.isRequired,\n\n  /**\n   * Called when Escape is hit or componentWillUnmount.\n   */\n  onCancel: PropTypes.func.isRequired,\n\n  /**\n   * Text size of the textarea.\n   */\n  size: PropTypes.number\n});\n\n_defineProperty(EditableCellField, \"defaultProps\", {\n  minWidth: 80,\n  minHeight: 40\n});\n\nexport { EditableCellField as default };","map":null,"metadata":{},"sourceType":"module"}