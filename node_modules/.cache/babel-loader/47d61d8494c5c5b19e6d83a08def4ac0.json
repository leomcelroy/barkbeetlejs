{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Positioner } from '../../positioner';\nimport { Tooltip } from '../../tooltip';\nimport { Position } from '../../constants';\nimport PopoverStateless from './PopoverStateless';\n\nvar Popover =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Popover, _Component);\n\n  function Popover(props) {\n    var _this;\n\n    _classCallCheck(this, Popover);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Popover).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"bringFocusInside\", function () {\n      // Always delay focus manipulation to just before repaint to prevent scroll jumping\n      return requestAnimationFrame(function () {\n        // Container ref may be undefined between component mounting and Portal rendering\n        // activeElement may be undefined in some rare cases in IE\n        if (_this.popoverNode == null || // eslint-disable-line eqeqeq, no-eq-null\n        document.activeElement == null || // eslint-disable-line eqeqeq, no-eq-null\n        !_this.state.isShown) {\n          return;\n        }\n\n        var isFocusOutsideModal = !_this.popoverNode.contains(document.activeElement);\n\n        if (isFocusOutsideModal) {\n          // Element marked autofocus has higher priority than the other clowns\n          var autofocusElement = _this.popoverNode.querySelector('[autofocus]');\n\n          var wrapperElement = _this.popoverNode.querySelector('[tabindex]');\n\n          var buttonElements = _this.popoverNode.querySelectorAll('button, a, [role=\"menuitem\"], [role=\"menuitemradio\"]');\n\n          if (autofocusElement) {\n            autofocusElement.focus();\n          } else if (wrapperElement) {\n            wrapperElement.focus();\n          } else if (buttonElements.length > 0) {\n            buttonElements[0].focus();\n          }\n        }\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"bringFocusBackToTarget\", function () {\n      return requestAnimationFrame(function () {\n        if (_this.popoverNode == null || // eslint-disable-line eqeqeq, no-eq-null\n        document.activeElement == null // eslint-disable-line eqeqeq, no-eq-null\n        ) {\n            return;\n          }\n\n        var isFocusInsideModal = _this.popoverNode.contains(document.activeElement); // Bring back focus on the target.\n\n\n        if (_this.targetRef && (document.activeElement === document.body || isFocusInsideModal)) {\n          _this.targetRef.focus();\n        }\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"onBodyClick\", function (e) {\n      // Ignore clicks on the popover or button\n      if (_this.targetRef && _this.targetRef.contains(e.target)) {\n        return;\n      }\n\n      if (_this.popoverNode && _this.popoverNode.contains(e.target)) {\n        return;\n      }\n\n      _this.close();\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"onEsc\", function (e) {\n      // Esc key\n      if (e.keyCode === 27) {\n        _this.close();\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"toggle\", function () {\n      if (_this.state.isShown) {\n        _this.close();\n      } else {\n        _this.open();\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"open\", function () {\n      if (_this.state.isShown) {\n        return;\n      }\n\n      _this.setState({\n        isShown: true\n      });\n\n      document.body.addEventListener('click', _this.onBodyClick, false);\n      document.body.addEventListener('keydown', _this.onEsc, false);\n\n      _this.props.onOpen();\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"close\", function () {\n      if (!_this.state.isShown) {\n        return;\n      }\n\n      _this.setState({\n        isShown: false\n      });\n\n      document.body.removeEventListener('click', _this.onBodyClick, false);\n      document.body.removeEventListener('keydown', _this.onEsc, false);\n\n      _this.bringFocusBackToTarget();\n\n      _this.props.onClose();\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"handleOpenComplete\", function () {\n      if (_this.props.bringFocusInside) _this.bringFocusInside();\n\n      _this.props.onOpenComplete();\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"handleCloseComplete\", function () {\n      _this.props.onCloseComplete();\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"handleKeyDown\", function (e) {\n      if (e.key === 'ArrowDown') {\n        _this.bringFocusInside();\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"renderTarget\", function (_ref) {\n      var getRef = _ref.getRef,\n          isShown = _ref.isShown;\n      var children = _this.props.children;\n      var isTooltipInside = children && children.type === Tooltip;\n\n      var getTargetRef = function getTargetRef(ref) {\n        _this.targetRef = ref;\n        getRef(ref);\n      };\n      /**\n       * When a function is passed, you can control the Popover manually.\n       */\n\n\n      if (typeof children === 'function') {\n        return children({\n          toggle: _this.toggle,\n          getRef: getTargetRef,\n          isShown: isShown\n        });\n      }\n\n      var popoverTargetProps = {\n        onClick: _this.toggle,\n        onKeyDown: _this.handleKeyDown,\n        role: 'button',\n        'aria-expanded': isShown,\n        'aria-haspopup': true\n        /**\n         * Tooltips can be used within a Popover (not the other way around)\n         * In this case the children is the Tooltip instead of a button.\n         * Pass the properties to the Tooltip and let the Tooltip\n         * add the properties to the target.\n         */\n\n      };\n\n      if (isTooltipInside) {\n        return React.cloneElement(children, {\n          popoverProps: _objectSpread({\n            getTargetRef: getTargetRef,\n            isShown: isShown\n          }, popoverTargetProps)\n        });\n      }\n      /**\n       * With normal usage only popover props end up on the target.\n       */\n\n\n      return React.cloneElement(children, _objectSpread({\n        innerRef: getTargetRef\n      }, popoverTargetProps));\n    });\n\n    _this.state = {\n      isShown: props.isShown\n    };\n    return _this;\n  }\n\n  _createClass(Popover, [{\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      document.body.removeEventListener('click', this.onBodyClick, false);\n      document.body.removeEventListener('keydown', this.onEsc, false);\n    }\n    /**\n     * Methods borrowed from BlueprintJS\n     * https://github.com/palantir/blueprint/blob/release/2.0.0/packages/core/src/components/overlay/overlay.tsx\n     */\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          isShown = _this$props.isShown,\n          content = _this$props.content,\n          display = _this$props.display,\n          minWidth = _this$props.minWidth,\n          position = _this$props.position,\n          minHeight = _this$props.minHeight,\n          statelessProps = _this$props.statelessProps,\n          animationDuration = _this$props.animationDuration,\n          onCloseComplete = _this$props.onCloseComplete;\n      var stateIsShown = this.state.isShown; // If `isShown` is a boolean, popover is controlled manually, not via mouse events\n\n      var shown = typeof isShown === 'boolean' ? isShown : stateIsShown;\n      return React.createElement(Positioner, {\n        target: function target(_ref2) {\n          var getRef = _ref2.getRef,\n              isShown = _ref2.isShown,\n              targetWidth = _ref2.targetWidth;\n          return _this2.renderTarget({\n            getRef: getRef,\n            isShown: isShown,\n            targetWidth: targetWidth\n          });\n        },\n        isShown: shown,\n        position: position,\n        animationDuration: animationDuration,\n        onOpenComplete: this.handleOpenComplete,\n        onCloseComplete: onCloseComplete\n      }, function (_ref3) {\n        var css = _ref3.css,\n            style = _ref3.style,\n            state = _ref3.state,\n            getRef = _ref3.getRef;\n        return React.createElement(PopoverStateless, _extends({\n          innerRef: function innerRef(ref) {\n            _this2.popoverNode = ref;\n            getRef(ref);\n          },\n          \"data-state\": state,\n          css: css,\n          style: style,\n          display: display,\n          minWidth: minWidth,\n          minHeight: minHeight\n        }, statelessProps), typeof content === 'function' ? content({\n          close: _this2.close\n        }) : content);\n      });\n    }\n  }]);\n\n  return Popover;\n}(Component);\n\nPopover.displayName = \"Popover\";\n\n_defineProperty(Popover, \"propTypes\", {\n  /**\n   * The position the Popover is on. Smart positioning might override this.\n   */\n  position: PropTypes.oneOf([Position.TOP, Position.TOP_LEFT, Position.TOP_RIGHT, Position.BOTTOM, Position.BOTTOM_LEFT, Position.BOTTOM_RIGHT, Position.LEFT, Position.RIGHT]),\n\n  /**\n   * When true, the Popover is manually shown.\n   */\n  isShown: PropTypes.bool,\n\n  /**\n   * The content of the Popover.\n   */\n  content: PropTypes.oneOfType([PropTypes.node, PropTypes.func]).isRequired,\n\n  /**\n   * The target button of the Popover.\n   * When a function the following arguments are passed:\n   * ({ toggle: Function -> Void, getRef: Function -> Ref, isShown: Bool })\n   */\n  children: PropTypes.oneOfType([PropTypes.element, PropTypes.func]).isRequired,\n\n  /**\n   * The display property passed to the Popover card.\n   */\n  display: PropTypes.string,\n\n  /**\n   * The min width of the Popover card.\n   */\n  minWidth: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n\n  /**\n   * The min height of the Popover card.\n   */\n  minHeight: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n\n  /**\n   * Properties passed through to the Popover card.\n   */\n  statelessProps: PropTypes.objectOf(PopoverStateless.propTypes),\n\n  /**\n   * Duration of the animation.\n   */\n  animationDuration: PropTypes.number,\n\n  /**\n   * Function called when the Popover opens.\n   */\n  onOpen: PropTypes.func.isRequired,\n\n  /**\n   * Function fired when Popover closes.\n   */\n  onClose: PropTypes.func.isRequired,\n\n  /**\n   * Function that will be called when the enter transition is complete.\n   */\n  onOpenComplete: PropTypes.func.isRequired,\n\n  /**\n   * Function that will be called when the exit transition is complete.\n   */\n  onCloseComplete: PropTypes.func.isRequired,\n\n  /**\n   * When true, bring focus inside of the Popover on open.\n   */\n  bringFocusInside: PropTypes.bool\n});\n\n_defineProperty(Popover, \"defaultProps\", {\n  position: Position.BOTTOM,\n  minWidth: 200,\n  minHeight: 40,\n  animationDuration: 300,\n  onOpen: function onOpen() {},\n  onClose: function onClose() {},\n  onOpenComplete: function onOpenComplete() {},\n  onCloseComplete: function onCloseComplete() {},\n  bringFocusInside: false\n});\n\nexport { Popover as default };","map":null,"metadata":{},"sourceType":"module"}