{"ast":null,"code":"var _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nimport React, { PureComponent, Children, cloneElement } from 'react';\nimport PropTypes from 'prop-types';\nimport CSSTransitionGroup from 'react-transition-group/CSSTransitionGroup';\nimport cn from 'classnames';\nimport TICK from '../constants/CSSTransitionGroupTick';\nimport oneRequired from '../utils/PropTypes/oneRequired';\nimport invalidIf from '../utils/PropTypes/invalidIf';\nimport CardTitleBlock from '../Cards/CardTitleBlock';\n/**\n * The `TableCardHeader` is used when contextual actions should appear when\n * a user selects a row.\n */\n\nvar TableCardHeader = function (_PureComponent) {\n  _inherits(TableCardHeader, _PureComponent);\n\n  function TableCardHeader(props) {\n    _classCallCheck(this, TableCardHeader);\n\n    var _this = _possibleConstructorReturn(this, _PureComponent.call(this, props));\n\n    _this.state = {\n      animating: false\n    };\n    return _this;\n  }\n\n  TableCardHeader.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {\n    var _this2 = this;\n\n    var visible = this.props.visible;\n    var nVisible = nextProps.visible,\n        transitionEnterTimeout = nextProps.transitionEnterTimeout,\n        transitionLeaveTimeout = nextProps.transitionLeaveTimeout;\n    var timeout = !nVisible ? transitionLeaveTimeout : transitionEnterTimeout;\n\n    if (visible !== nVisible) {\n      if (this._timeout) {\n        clearTimeout(this._timeout);\n      }\n\n      this._timeout = setTimeout(function () {\n        _this2._timeout = setTimeout(function () {\n          _this2._timeout = null;\n\n          _this2.setState({\n            animating: false\n          });\n        }, timeout);\n      }, TICK);\n\n      if (!this.state.animating) {\n        this.setState({\n          animating: true\n        });\n      }\n    }\n  };\n\n  TableCardHeader.prototype._cloneCellRight = function _cloneCellRight(noAdjust, children) {\n    if (noAdjust || !children) {\n      return children;\n    }\n\n    return Children.map(Children.toArray(children), function (child, i) {\n      if (i === 0) {\n        return cloneElement(child, {\n          className: cn('md-cell--right', child.props.className)\n        });\n      }\n\n      return child;\n    });\n  };\n\n  TableCardHeader.prototype._cloneLeftChildren = function _cloneLeftChildren(noClone, children) {\n    if (noClone || !children) {\n      return children;\n    }\n\n    return Children.map(Children.toArray(children), function (child) {\n      return cloneElement(child, {\n        className: cn('md-btn--dialog', child.props.className)\n      });\n    });\n  };\n\n  TableCardHeader.prototype.render = function render() {\n    var animating = this.state.animating;\n\n    var _props = this.props,\n        style = _props.style,\n        className = _props.className,\n        title = _props.title,\n        titleId = _props.titleId,\n        actions = _props.actions,\n        contextualTitleId = _props.contextualTitleId,\n        contextualChildren = _props.contextualChildren,\n        noActionsAdjust = _props.noActionsAdjust,\n        noChildrenAdjust = _props.noChildrenAdjust,\n        noLeftChildrenClone = _props.noLeftChildrenClone,\n        visible = _props.visible,\n        propChildren = _props.children,\n        propLeftChildren = _props.leftChildren,\n        propContextualTitle = _props.contextualTitle,\n        props = _objectWithoutProperties(_props, ['style', 'className', 'title', 'titleId', 'actions', 'contextualTitleId', 'contextualChildren', 'noActionsAdjust', 'noChildrenAdjust', 'noLeftChildrenClone', 'visible', 'children', 'leftChildren', 'contextualTitle']);\n\n    var _props2 = this.props,\n        children = _props2.children,\n        leftChildren = _props2.leftChildren,\n        contextualTitle = _props2.contextualTitle;\n    children = this._cloneCellRight(noChildrenAdjust, children);\n    leftChildren = this._cloneLeftChildren(noLeftChildrenClone, leftChildren);\n\n    if (title) {\n      children = React.createElement('div', {\n        className: 'md-card-title',\n        key: 'main-title'\n      }, React.createElement(CardTitleBlock, {\n        id: titleId,\n        title: title\n      }), children);\n    } else if (leftChildren) {\n      leftChildren = Children.toArray(leftChildren);\n\n      if (children) {\n        children = leftChildren.concat(Children.toArray(children));\n      } else {\n        children = leftChildren;\n      }\n    }\n\n    if (contextualTitle) {\n      contextualTitle = React.createElement('h2', {\n        id: contextualTitleId,\n        className: 'md-card-title--title md-card-title--title-contextual',\n        tabIndex: contextualTitleId ? -1 : null\n      }, contextualTitle);\n    }\n\n    var contextualHeader = React.createElement('div', {\n      key: 'contextual-header',\n      className: 'md-card-title md-card-title--contextual'\n    }, contextualTitle, contextualChildren, this._cloneCellRight(noActionsAdjust, actions));\n    var mergedStyles = style;\n\n    if (animating) {\n      mergedStyles = Object.assign({}, style, {\n        overflow: 'hidden'\n      });\n    }\n\n    return React.createElement(CSSTransitionGroup, _extends({}, props, {\n      style: mergedStyles,\n      className: cn('md-table-card-header', {\n        'md-table-card-header--no-title': !title\n      }, className)\n    }), children, visible ? contextualHeader : null);\n  };\n\n  return TableCardHeader;\n}(PureComponent);\n\nTableCardHeader.propTypes = {\n  /**\n   * An optional style to apply.\n   */\n  style: PropTypes.object,\n\n  /**\n   * An optional className to apply.\n   */\n  className: PropTypes.string,\n\n  /**\n   * The component to render as.\n   */\n  component: PropTypes.oneOfType([PropTypes.func, PropTypes.string, PropTypes.object]).isRequired,\n\n  /**\n   * The transition name to use when the contextual header appears.\n   */\n  transitionName: PropTypes.string.isRequired,\n\n  /**\n   * The transition time to use when the contextual header appears.\n   */\n  transitionEnterTimeout: PropTypes.number.isRequired,\n\n  /**\n   * The transition time to use when the contextual header disappears.\n   */\n  transitionLeaveTimeout: PropTypes.number.isRequired,\n\n  /**\n   * An optional title to display. It is invalid to have both `title` and `leftChildren`\n   * defined as only one will be used.\n   */\n  title: oneRequired(PropTypes.node, 'leftChildren', 'children'),\n\n  /**\n   * An optional id to provide to the title.\n   */\n  titleId: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n\n  /**\n   * An optional title to display in the contextual header. This will get wrapped in an `h2`\n   * tag and additional styles applied.\n   */\n  contextualTitle: PropTypes.node,\n\n  /**\n   * An optional id to provide to the contextual title.\n   */\n  contextualTitleId: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n\n  /**\n   * Any additional children to display in the contextual header. This will be displayed after\n   * the optional `contextualTile` and before the `actions`.\n   */\n  contextualChildren: PropTypes.node,\n\n  /**\n   * An optional button or list of buttons to display instead of a title.\n   */\n  leftChildren: invalidIf(PropTypes.oneOfType([PropTypes.element, PropTypes.arrayOf(PropTypes.element)]), 'title'),\n\n  /**\n   * An additional children to display after the `title` or `leftChildren` prop.\n   * This is _normally_ a list of icon button or menu button.\n   */\n  children: PropTypes.oneOfType([PropTypes.element, PropTypes.arrayOf(PropTypes.element)]),\n\n  /**\n   * An optional button/menu button or a list of button/menu button to display in the\n   * contextual header once the user has selected a row or multiple rows.\n   */\n  actions: PropTypes.oneOfType([PropTypes.element, PropTypes.arrayOf(PropTypes.element)]),\n\n  /**\n   * Boolean if the `actions` prop should not have each element cloned with additional\n   * class names.\n   */\n  noActionsAdjust: PropTypes.bool,\n\n  /**\n   * Boolean if the `children` prop should not have each element cloned with additional\n   * class names.\n   */\n  noChildrenAdjust: PropTypes.bool,\n\n  /**\n   * Boolean if the `leftChildren` prop should not have each element cloned with additional\n   * class names.\n   */\n  noLeftChildrenClone: PropTypes.bool,\n\n  /**\n   * Boolean if the contextual header is currently visible.\n   */\n  visible: PropTypes.bool.isRequired\n};\nTableCardHeader.defaultProps = {\n  component: 'header',\n  transitionName: 'md-drop-down',\n  transitionEnterTimeout: 150,\n  transitionLeaveTimeout: 150\n};\nexport default TableCardHeader;","map":null,"metadata":{},"sourceType":"module"}