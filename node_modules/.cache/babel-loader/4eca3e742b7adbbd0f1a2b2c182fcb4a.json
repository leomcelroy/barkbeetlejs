{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _defineProperty2 = require('babel-runtime/helpers/defineProperty');\n\nvar _defineProperty3 = _interopRequireDefault(_defineProperty2);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _extends2 = require('babel-runtime/helpers/extends');\n\nvar _extends3 = _interopRequireDefault(_extends2);\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _reactDom = require('react-dom');\n\nvar _reactDom2 = _interopRequireDefault(_reactDom);\n\nvar _libs = require('../../../libs');\n\nvar _locale = require('../../locale');\n\nvar _locale2 = _interopRequireDefault(_locale);\n\nvar _input = require('../../input');\n\nvar _input2 = _interopRequireDefault(_input);\n\nvar _TimePanel = require('./TimePanel');\n\nvar _TimePanel2 = _interopRequireDefault(_TimePanel);\n\nvar _MountBody = require('../MountBody');\n\nvar _utils = require('../utils');\n\nvar _basic = require('../basic');\n\nvar _PopperBase2 = require('./PopperBase');\n\nvar _constants = require('../constants');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar _prevYear = function _prevYear(date) {\n  var d = (0, _utils.toDate)(date);\n  d.setFullYear(date.getFullYear() - 1);\n  return d;\n};\n\nvar _nextYear = function _nextYear(date) {\n  var d = (0, _utils.toDate)(date);\n  d.setFullYear(date.getFullYear() + 1);\n  return d;\n};\n\nvar mapPropsToState = function mapPropsToState(props) {\n  var value = props.value;\n  var state = {\n    rangeState: {\n      endDate: null,\n      selecting: false\n    }\n  };\n\n  if (!value) {\n    state = (0, _extends3.default)({}, state, {\n      minDate: null,\n      maxDate: null,\n      date: new Date()\n    });\n  } else {\n    if (value[0] && value[1]) {\n      state.minDate = (0, _utils.toDate)(value[0]);\n      state.maxDate = (0, _utils.toDate)(value[1]);\n    }\n\n    if (value[0]) {\n      state.date = (0, _utils.toDate)(value[0]);\n    } else {\n      state.date = new Date();\n    }\n  }\n\n  return state;\n};\n\nvar DateRangePanel = function (_PopperBase) {\n  (0, _inherits3.default)(DateRangePanel, _PopperBase);\n  (0, _createClass3.default)(DateRangePanel, null, [{\n    key: 'propTypes',\n    get: function get() {\n      return Object.assign({\n        // user picked date value\n\n        /*\n        value: null | [Date, null | false]\n        */\n        value: _libs.PropTypes.any,\n        // ([value1, value2]|null, isKeepPanel)=>()\n        onPick: _libs.PropTypes.func.isRequired,\n        isShowTime: _libs.PropTypes.bool,\n        // Array[{text: String, onClick: (picker)=>()}]\n        shortcuts: _libs.PropTypes.arrayOf(_libs.PropTypes.shape({\n          text: _libs.PropTypes.string.isRequired,\n          // ()=>()\n          onClick: _libs.PropTypes.func.isRequired\n        })),\n        // (Date)=>bool, if true, disabled\n        disabledDate: _libs.PropTypes.func,\n        firstDayOfWeek: _libs.PropTypes.range(0, 6),\n        //()=>HtmlElement\n        getPopperRefElement: _libs.PropTypes.func,\n        popperMixinOption: _libs.PropTypes.object\n      }, _PopperBase2.PopperBase.propTypes);\n    }\n  }]);\n\n  function DateRangePanel(props) {\n    (0, _classCallCheck3.default)(this, DateRangePanel);\n\n    var _this = (0, _possibleConstructorReturn3.default)(this, (DateRangePanel.__proto__ || Object.getPrototypeOf(DateRangePanel)).call(this, props));\n\n    _this.state = (0, _extends3.default)({\n      minTimePickerVisible: false,\n      maxTimePickerVisible: false,\n      minPickerWidth: 0,\n      // not used in code right now, due to some reason, for more details see comments in DatePannel that marked with todo.\n      maxPickerWidth: 0\n    }, mapPropsToState(props));\n    return _this;\n  }\n\n  (0, _createClass3.default)(DateRangePanel, [{\n    key: 'componentWillReceiveProps',\n    value: function componentWillReceiveProps(nextProps) {\n      this.setState(mapPropsToState(nextProps));\n    }\n  }, {\n    key: 'handleRangePick',\n    value: function handleRangePick(_ref, isClose) {\n      var minDate = _ref.minDate,\n          maxDate = _ref.maxDate;\n      var _props = this.props,\n          isShowTime = _props.isShowTime,\n          onPick = _props.onPick;\n      this.setState({\n        minDate: minDate,\n        maxDate: maxDate\n      });\n      if (!isClose) return;\n\n      if (!isShowTime) {\n        onPick([minDate, maxDate], false);\n      }\n    }\n  }, {\n    key: 'prevYear',\n    value: function prevYear() {\n      var date = this.state.date;\n      this.setState({\n        date: _prevYear(date)\n      });\n    }\n  }, {\n    key: 'nextYear',\n    value: function nextYear() {\n      var date = this.state.date;\n      this.setState({\n        date: _nextYear(date)\n      });\n    }\n  }, {\n    key: 'prevMonth',\n    value: function prevMonth() {\n      this.setState({\n        date: (0, _utils.prevMonth)(this.state.date)\n      });\n    }\n  }, {\n    key: 'nextMonth',\n    value: function nextMonth() {\n      this.setState({\n        date: (0, _utils.nextMonth)(this.state.date)\n      });\n    }\n  }, {\n    key: 'handleChangeRange',\n    //todo: wired way to do sth like this? try to come up with a better option\n    value: function handleChangeRange(_ref2) {\n      var endDate = _ref2.endDate;\n      var _state = this.state,\n          rangeState = _state.rangeState,\n          minDate = _state.minDate;\n      if (endDate <= minDate) endDate = null;\n      rangeState.endDate = endDate;\n      this.setState({\n        maxDate: endDate\n      });\n    }\n  }, {\n    key: 'handleShortcutClick',\n    value: function handleShortcutClick(shortcut) {\n      shortcut.onClick();\n    }\n  }, {\n    key: 'setTime',\n    value: function setTime(date, value) {\n      var oldDate = new Date(date.getTime());\n      var hour = value.getHours();\n      var minute = value.getMinutes();\n      var second = value.getSeconds();\n      oldDate.setHours(hour);\n      oldDate.setMinutes(minute);\n      oldDate.setSeconds(second);\n      return new Date(oldDate.getTime());\n    }\n  }, {\n    key: 'handleMinTimePick',\n    value: function handleMinTimePick(pickedDate, isKeepPanel) {\n      var minDate = this.state.minDate || new Date();\n\n      if (pickedDate) {\n        minDate = this.setTime(minDate, pickedDate);\n      }\n\n      this.setState({\n        minDate: minDate,\n        minTimePickerVisible: isKeepPanel\n      });\n    }\n  }, {\n    key: 'handleMaxTimePick',\n    value: function handleMaxTimePick(pickedDate, isKeepPanel) {\n      var _state2 = this.state,\n          minDate = _state2.minDate,\n          maxDate = _state2.maxDate;\n\n      if (!maxDate) {\n        var now = new Date();\n\n        if (now >= minDate) {\n          maxDate = new Date();\n        }\n      }\n\n      if (maxDate && pickedDate) {\n        maxDate = this.setTime(maxDate, pickedDate);\n      }\n\n      this.setState({\n        maxDate: maxDate,\n        maxTimePickerVisible: isKeepPanel\n      });\n    }\n  }, {\n    key: 'handleDateChange',\n    value: function handleDateChange(value, type) {\n      var parsedValue = (0, _utils.parseDate)(value, 'yyyy-MM-dd');\n      var _state3 = this.state,\n          minDate = _state3.minDate,\n          maxDate = _state3.maxDate;\n\n      if (parsedValue) {\n        var target = new Date(type === 'min' ? minDate : maxDate);\n\n        if (target) {\n          target.setFullYear(parsedValue.getFullYear());\n          target.setMonth(parsedValue.getMonth(), parsedValue.getDate());\n        }\n\n        if (type === 'min') {\n          if (target < maxDate) {\n            this.setState({\n              minDate: new Date(target.getTime())\n            });\n          }\n        } else {\n          if (target > minDate) {\n            maxDate = new Date(target.getTime());\n\n            if (minDate && minDate > maxDate) {\n              minDate = null;\n            }\n\n            this.setState({\n              minDate: minDate,\n              maxDate: maxDate\n            });\n          }\n        }\n      }\n    }\n  }, {\n    key: 'handleTimeChange',\n    value: function handleTimeChange(value, type) {\n      var parsedValue = (0, _utils.parseDate)(value, 'HH:mm:ss');\n\n      if (parsedValue) {\n        var target = new Date(type === 'min' ? this.minDate : this.maxDate);\n\n        if (target) {\n          target.setHours(parsedValue.getHours());\n          target.setMinutes(parsedValue.getMinutes());\n          target.setSeconds(parsedValue.getSeconds());\n        }\n\n        var _state4 = this.state,\n            minDate = _state4.minDate,\n            maxDate = _state4.maxDate;\n\n        if (type === 'min') {\n          if (target < maxDate) {\n            minDate = new Date(target.getTime());\n          }\n        } else {\n          if (target > minDate) {\n            maxDate = new Date(target.getTime());\n          }\n        }\n\n        this.setState((0, _defineProperty3.default)({\n          minDate: minDate,\n          maxDate: maxDate\n        }, type + 'TimpickerVisisble', false));\n      }\n    }\n  }, {\n    key: 'handleClear',\n    value: function handleClear() {\n      var onPick = this.props.onPick;\n      var minDate = null,\n          maxDate = null,\n          date = new Date();\n      this.setState({\n        minDate: minDate,\n        maxDate: maxDate,\n        date: date\n      });\n      onPick([], false);\n    }\n  }, {\n    key: 'handleConfirm',\n    value: function handleConfirm() {\n      var _state5 = this.state,\n          minDate = _state5.minDate,\n          maxDate = _state5.maxDate;\n      this.props.onPick([minDate, maxDate], false);\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this2 = this;\n\n      var _props2 = this.props,\n          shortcuts = _props2.shortcuts,\n          disabledDate = _props2.disabledDate,\n          firstDayOfWeek = _props2.firstDayOfWeek,\n          isShowTime = _props2.isShowTime;\n      var _state6 = this.state,\n          date = _state6.date,\n          rangeState = _state6.rangeState,\n          minDate = _state6.minDate,\n          maxDate = _state6.maxDate,\n          minTimePickerVisible = _state6.minTimePickerVisible,\n          maxTimePickerVisible = _state6.maxTimePickerVisible,\n          minPickerWidth = _state6.minPickerWidth,\n          maxPickerWidth = _state6.maxPickerWidth;\n      var rightDate = this.rightDate;\n      var t = _locale2.default.t;\n      var leftLabel = date.getFullYear() + ' ' + t('el.datepicker.year') + ' ' + t('el.datepicker.month' + (date.getMonth() + 1));\n      var rightLabel = rightDate.getFullYear() + ' ' + t('el.datepicker.year') + ' ' + t('el.datepicker.month' + (rightDate.getMonth() + 1));\n      return _react2.default.createElement('div', {\n        ref: 'root',\n        className: this.classNames('el-picker-panel el-date-range-picker', {\n          'has-sidebar': shortcuts,\n          'has-time': isShowTime\n        })\n      }, _react2.default.createElement('div', {\n        className: 'el-picker-panel__body-wrapper'\n      }, Array.isArray(shortcuts) && _react2.default.createElement('div', {\n        className: 'el-picker-panel__sidebar'\n      }, shortcuts.map(function (e, idx) {\n        return _react2.default.createElement('button', {\n          key: idx,\n          type: 'button',\n          className: 'el-picker-panel__shortcut',\n          onClick: function onClick() {\n            return _this2.handleShortcutClick(e);\n          }\n        }, e.text);\n      })), _react2.default.createElement('div', {\n        className: 'el-picker-panel__body'\n      }, isShowTime && _react2.default.createElement('div', {\n        className: 'el-date-range-picker__time-header'\n      }, _react2.default.createElement('span', {\n        className: 'el-date-range-picker__editors-wrap'\n      }, _react2.default.createElement('span', {\n        className: 'el-date-range-picker__time-picker-wrap'\n      }, _react2.default.createElement(_input2.default, {\n        size: 'small',\n        ref: 'minInput',\n        placeholder: _locale2.default.t('el.datepicker.startDate'),\n        className: 'el-date-range-picker__editor',\n        value: this.minVisibleDate,\n        onChange: function onChange(value) {\n          return _this2.handleDateChange(value, 'min');\n        }\n      })), _react2.default.createElement('span', {\n        className: 'el-date-range-picker__time-picker-wrap'\n      }, _react2.default.createElement(_input2.default, {\n        size: 'small',\n        ref: 'timeIptStart',\n        placeholder: _locale2.default.t('el.datepicker.startTime'),\n        className: 'el-date-range-picker__editor',\n        value: this.minVisibleTime,\n        onFocus: function onFocus() {\n          _this2.setState({\n            minTimePickerVisible: !minTimePickerVisible\n          });\n        },\n        onChange: function onChange(value) {\n          return _this2.handleTimeChange(value, 'min');\n        }\n      }), minTimePickerVisible && _react2.default.createElement(_MountBody.MountBody, null, _react2.default.createElement(_TimePanel2.default, {\n        pickerWidth: minPickerWidth,\n        ref: 'minTimePicker',\n        currentDate: minDate,\n        onPicked: this.handleMinTimePick.bind(this),\n        getPopperRefElement: function getPopperRefElement() {\n          return _reactDom2.default.findDOMNode(_this2.refs.timeIptStart);\n        },\n        popperMixinOption: {\n          placement: _constants.PLACEMENT_MAP[this.props.align] || _constants.PLACEMENT_MAP.left\n        },\n        onCancel: function onCancel() {\n          return _this2.setState({\n            minTimePickerVisible: false\n          });\n        }\n      })))), _react2.default.createElement('span', {\n        className: 'el-icon-arrow-right'\n      }), _react2.default.createElement('span', {\n        className: 'el-date-range-picker__editors-wrap is-right'\n      }, _react2.default.createElement('span', {\n        className: 'el-date-range-picker__time-picker-wrap'\n      }, _react2.default.createElement(_input2.default, {\n        size: 'small',\n        placeholder: _locale2.default.t('el.datepicker.endDate'),\n        className: 'el-date-range-picker__editor',\n        value: this.maxVisibleDate,\n        readOnly: !minDate,\n        onChange: function onChange(value) {\n          return _this2.handleDateInput(value, 'max');\n        }\n      })), _react2.default.createElement('span', {\n        className: 'el-date-range-picker__time-picker-wrap'\n      }, _react2.default.createElement(_input2.default, {\n        size: 'small',\n        ref: 'maxInput',\n        placeholder: _locale2.default.t('el.datepicker.endTime'),\n        className: 'el-date-range-picker__editor',\n        value: this.maxVisibleTime,\n        onFocus: function onFocus() {\n          if (minDate) {\n            _this2.setState({\n              maxTimePickerVisible: !maxTimePickerVisible\n            });\n          }\n        },\n        readOnly: !minDate,\n        onChange: function onChange(value) {\n          return _this2.handleTimeChange(value, 'max');\n        }\n      }), maxTimePickerVisible && _react2.default.createElement(_MountBody.MountBody, null, _react2.default.createElement(_TimePanel2.default, {\n        pickerWidth: maxPickerWidth,\n        ref: 'maxTimePicker',\n        currentDate: maxDate,\n        onPicked: this.handleMaxTimePick.bind(this),\n        getPopperRefElement: function getPopperRefElement() {\n          return _reactDom2.default.findDOMNode(_this2.refs.maxInput);\n        },\n        popperMixinOption: {\n          placement: _constants.PLACEMENT_MAP[this.props.align] || _constants.PLACEMENT_MAP.left\n        },\n        onCancel: function onCancel() {\n          return _this2.setState({\n            maxTimePickerVisible: false\n          });\n        }\n      }))))), _react2.default.createElement('div', {\n        className: 'el-picker-panel__content el-date-range-picker__content is-left'\n      }, _react2.default.createElement('div', {\n        className: 'el-date-range-picker__header'\n      }, _react2.default.createElement('button', {\n        type: 'button',\n        onClick: this.prevYear.bind(this),\n        className: 'el-picker-panel__icon-btn el-icon-d-arrow-left'\n      }), _react2.default.createElement('button', {\n        type: 'button',\n        onClick: this.prevMonth.bind(this),\n        className: 'el-picker-panel__icon-btn el-icon-arrow-left'\n      }), _react2.default.createElement('div', null, leftLabel)), _react2.default.createElement(_basic.DateTable, {\n        selectionMode: _utils.SELECTION_MODES.RANGE,\n        date: date,\n        value: minDate,\n        minDate: minDate,\n        maxDate: maxDate,\n        rangeState: rangeState,\n        disabledDate: disabledDate,\n        onChangeRange: this.handleChangeRange.bind(this),\n        onPick: this.handleRangePick.bind(this),\n        firstDayOfWeek: firstDayOfWeek\n      })), _react2.default.createElement('div', {\n        className: 'el-picker-panel__content el-date-range-picker__content is-right'\n      }, _react2.default.createElement('div', {\n        className: 'el-date-range-picker__header'\n      }, _react2.default.createElement('button', {\n        type: 'button',\n        onClick: this.nextYear.bind(this),\n        className: 'el-picker-panel__icon-btn el-icon-d-arrow-right'\n      }), _react2.default.createElement('button', {\n        type: 'button',\n        onClick: this.nextMonth.bind(this),\n        className: 'el-picker-panel__icon-btn el-icon-arrow-right'\n      }), _react2.default.createElement('div', null, rightLabel)), _react2.default.createElement(_basic.DateTable, {\n        selectionMode: _utils.SELECTION_MODES.RANGE,\n        date: rightDate,\n        value: maxDate,\n        minDate: minDate,\n        maxDate: maxDate,\n        rangeState: rangeState,\n        disabledDate: disabledDate,\n        onChangeRange: this.handleChangeRange.bind(this),\n        onPick: this.handleRangePick.bind(this),\n        firstDayOfWeek: firstDayOfWeek\n      })))), isShowTime && _react2.default.createElement('div', {\n        className: 'el-picker-panel__footer'\n      }, _react2.default.createElement('a', {\n        className: 'el-picker-panel__link-btn',\n        onClick: function onClick() {\n          return _this2.handleClear();\n        }\n      }, _locale2.default.t('el.datepicker.clear')), _react2.default.createElement('button', {\n        type: 'button',\n        className: 'el-picker-panel__btn',\n        onClick: function onClick() {\n          return _this2.handleConfirm();\n        },\n        disabled: this.btnDisabled\n      }, _locale2.default.t('el.datepicker.confirm'))));\n    }\n  }, {\n    key: 'rightDate',\n    get: function get() {\n      return (0, _utils.nextMonth)(this.state.date);\n    }\n  }, {\n    key: 'minVisibleDate',\n    get: function get() {\n      var minDate = this.state.minDate;\n      return minDate ? (0, _utils.formatDate)(minDate) : '';\n    }\n  }, {\n    key: 'maxVisibleDate',\n    get: function get() {\n      var _state7 = this.state,\n          maxDate = _state7.maxDate,\n          minDate = _state7.minDate;\n      var d = maxDate || minDate;\n      return d ? (0, _utils.formatDate)(d) : '';\n    }\n  }, {\n    key: 'minVisibleTime',\n    get: function get() {\n      var minDate = this.state.minDate;\n      return minDate ? (0, _utils.formatDate)(minDate, 'HH:mm:ss') : '';\n    }\n  }, {\n    key: 'maxVisibleTime',\n    get: function get() {\n      var _state8 = this.state,\n          maxDate = _state8.maxDate,\n          minDate = _state8.minDate;\n      var d = maxDate || minDate;\n      return d ? (0, _utils.formatDate)(d, 'HH:mm:ss') : '';\n    }\n  }, {\n    key: 'btnDisabled',\n    get: function get() {\n      var _state9 = this.state,\n          minDate = _state9.minDate,\n          maxDate = _state9.maxDate,\n          selecting = _state9.rangeState.selecting;\n      return !(minDate && maxDate && !selecting);\n    }\n  }]);\n  return DateRangePanel;\n}(_PopperBase2.PopperBase);\n\nvar _default = DateRangePanel;\nexports.default = _default;\nDateRangePanel.defaultProps = {};\n;\n\nvar _temp = function () {\n  if (typeof __REACT_HOT_LOADER__ === 'undefined') {\n    return;\n  }\n\n  __REACT_HOT_LOADER__.register(_prevYear, 'prevYear', 'src/date-picker/panel/DateRangePanel.jsx');\n\n  __REACT_HOT_LOADER__.register(_nextYear, 'nextYear', 'src/date-picker/panel/DateRangePanel.jsx');\n\n  __REACT_HOT_LOADER__.register(mapPropsToState, 'mapPropsToState', 'src/date-picker/panel/DateRangePanel.jsx');\n\n  __REACT_HOT_LOADER__.register(DateRangePanel, 'DateRangePanel', 'src/date-picker/panel/DateRangePanel.jsx');\n\n  __REACT_HOT_LOADER__.register(_default, 'default', 'src/date-picker/panel/DateRangePanel.jsx');\n}();\n\n;","map":null,"metadata":{},"sourceType":"script"}