{"ast":null,"code":"function _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nimport { ACTION_PAN, MODE_IDLE, MODE_PANNING } from '../constants';\nimport { set, getSVGPoint } from './common';\nimport { fromObject, translate, transform, applyToPoints, inverse } from 'transformation-matrix';\n/**\n *\n * @param value\n * @param SVGDeltaX\n * @param SVGDeltaY\n * @param panLimit\n * @returns {Object}\n */\n\nexport function pan(value, SVGDeltaX, SVGDeltaY) {\n  var panLimit = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : undefined;\n  var matrix = transform(fromObject(value), //2\n  translate(SVGDeltaX, SVGDeltaY) //1\n  ); // apply pan limits\n\n  if (panLimit) {\n    var _applyToPoints = applyToPoints(matrix, [{\n      x: panLimit,\n      y: panLimit\n    }, {\n      x: value.SVGWidth - panLimit,\n      y: value.SVGHeight - panLimit\n    }]),\n        _applyToPoints2 = _slicedToArray(_applyToPoints, 2),\n        _applyToPoints2$ = _applyToPoints2[0],\n        x1 = _applyToPoints2$.x,\n        y1 = _applyToPoints2$.y,\n        _applyToPoints2$2 = _applyToPoints2[1],\n        x2 = _applyToPoints2$2.x,\n        y2 = _applyToPoints2$2.y; //x limit\n\n\n    var moveX = 0;\n    if (value.viewerWidth - x1 < 0) moveX = value.viewerWidth - x1;else if (x2 < 0) moveX = -x2; //y limit\n\n    var moveY = 0;\n    if (value.viewerHeight - y1 < 0) moveY = value.viewerHeight - y1;else if (y2 < 0) moveY = -y2; //apply limits\n\n    matrix = transform(translate(moveX, moveY), matrix);\n  }\n\n  return set(value, _objectSpread({\n    mode: MODE_IDLE\n  }, matrix), ACTION_PAN);\n}\nexport function startPanning(value, viewerX, viewerY) {\n  return set(value, {\n    mode: MODE_PANNING,\n    startX: viewerX,\n    startY: viewerY,\n    endX: viewerX,\n    endY: viewerY\n  }, ACTION_PAN);\n}\nexport function updatePanning(value, viewerX, viewerY, panLimit) {\n  if (value.mode !== MODE_PANNING) throw new Error('update pan not allowed in this mode ' + value.mode);\n  var endX = value.endX,\n      endY = value.endY;\n  var start = getSVGPoint(value, endX, endY);\n  var end = getSVGPoint(value, viewerX, viewerY);\n  var deltaX = end.x - start.x;\n  var deltaY = end.y - start.y;\n  var nextValue = pan(value, deltaX, deltaY, panLimit);\n  return set(nextValue, {\n    mode: MODE_PANNING,\n    endX: viewerX,\n    endY: viewerY\n  }, ACTION_PAN);\n}\nexport function stopPanning(value) {\n  return set(value, {\n    mode: MODE_IDLE,\n    startX: null,\n    startY: null,\n    endX: null,\n    endY: null\n  }, ACTION_PAN);\n}\nexport function autoPanIfNeeded(value, viewerX, viewerY) {\n  var deltaX = 0;\n  var deltaY = 0;\n  if (viewerY <= 20) deltaY = 2;\n  if (value.viewerWidth - viewerX <= 20) deltaX = -2;\n  if (value.viewerHeight - viewerY <= 20) deltaY = -2;\n  if (viewerX <= 20) deltaX = 2;\n  deltaX = deltaX / value.d;\n  deltaY = deltaY / value.d;\n  return deltaX === 0 && deltaY === 0 ? value : pan(value, deltaX, deltaY);\n}","map":null,"metadata":{},"sourceType":"module"}