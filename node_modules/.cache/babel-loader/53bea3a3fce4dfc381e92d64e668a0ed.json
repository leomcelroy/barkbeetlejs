{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport Box, { dimensions, spacing, position, layout } from 'ui-box';\nimport { Autocomplete } from '../../autocomplete';\nimport { TextInput } from '../../text-input';\nimport { IconButton } from '../../buttons';\n\nvar Combobox =\n/*#__PURE__*/\nfunction (_PureComponent) {\n  _inherits(Combobox, _PureComponent);\n\n  function Combobox(props, context) {\n    var _this;\n\n    _classCallCheck(this, Combobox);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Combobox).call(this, props, context));\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"handleStateChange\", function (changes) {\n      if (Object.prototype.hasOwnProperty.call(changes, 'isOpen')) {\n        if (!changes.isOpen) {\n          _this.setState({\n            isOpenedByButton: false\n          });\n        }\n      }\n    });\n\n    _this.state = {\n      isOpenedByButton: false\n    };\n    return _this;\n  }\n\n  _createClass(Combobox, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          items = _this$props.items,\n          selectedItem = _this$props.selectedItem,\n          defaultSelectedItem = _this$props.defaultSelectedItem,\n          itemToString = _this$props.itemToString,\n          width = _this$props.width,\n          height = _this$props.height,\n          onChange = _this$props.onChange,\n          placeholder = _this$props.placeholder,\n          inputProps = _this$props.inputProps,\n          buttonProps = _this$props.buttonProps,\n          openOnFocus = _this$props.openOnFocus,\n          autocompleteProps = _this$props.autocompleteProps,\n          props = _objectWithoutProperties(_this$props, [\"items\", \"selectedItem\", \"defaultSelectedItem\", \"itemToString\", \"width\", \"height\", \"onChange\", \"placeholder\", \"inputProps\", \"buttonProps\", \"openOnFocus\", \"autocompleteProps\"]);\n\n      return React.createElement(Autocomplete, _extends({\n        items: items,\n        selectedItem: selectedItem,\n        defaultSelectedItem: defaultSelectedItem,\n        itemToString: itemToString,\n        onChange: onChange,\n        onStateChange: this.handleStateChange,\n        isFilterDisabled: this.state.isOpenedByButton\n      }, autocompleteProps), function (_ref) {\n        var getRef = _ref.getRef,\n            isShown = _ref.isShown,\n            openMenu = _ref.openMenu,\n            inputValue = _ref.inputValue,\n            getInputProps = _ref.getInputProps,\n            getButtonProps = _ref.getButtonProps,\n            clearSelection = _ref.clearSelection;\n        return React.createElement(Box, _extends({\n          innerRef: function innerRef(ref) {\n            return getRef(ref);\n          },\n          display: \"inline-flex\",\n          width: width\n        }, props), React.createElement(TextInput, _extends({\n          width: 0,\n          flex: 1,\n          height: height,\n          value: inputValue,\n          borderTopRightRadius: 0,\n          borderBottomRightRadius: 0\n        }, getInputProps(_objectSpread({}, inputProps, {\n          placeholder: placeholder,\n          onFocus: function onFocus() {\n            if (openOnFocus) openMenu();\n          },\n          onChange: function onChange(e) {\n            if (_this2.state.isOpenedByButton) {\n              _this2.setState({\n                isOpenedByButton: false\n              });\n            }\n\n            if (e.target.value.trim() === '') {\n              // Prevent the selected item from sticking around\n              clearSelection();\n            }\n          }\n        })))), React.createElement(IconButton, _extends({\n          iconAim: \"down\",\n          color: \"muted\",\n          icon: \"caret-down\",\n          appearance: \"default\",\n          height: height,\n          marginLeft: -1,\n          paddingLeft: 0,\n          paddingRight: 0,\n          borderTopLeftRadius: 0,\n          borderBottomLeftRadius: 0\n        }, getButtonProps(_objectSpread({}, buttonProps, {\n          onClick: function onClick() {\n            if (!isShown) {\n              _this2.setState({\n                isOpenedByButton: true\n              });\n            }\n          }\n        })))));\n      });\n    }\n  }]);\n\n  return Combobox;\n}(PureComponent);\n\nCombobox.displayName = \"Combobox\";\n\n_defineProperty(Combobox, \"propTypes\", _objectSpread({}, dimensions.propTypes, spacing.propTypes, position.propTypes, layout.propTypes, {\n  /**\n   * The options to show in the menu.\n   */\n  items: PropTypes.array.isRequired,\n\n  /**\n   * The selected item when controlled.\n   */\n  selectedItem: PropTypes.any,\n\n  /**\n   * Function called when value changes.\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * When true, open the autocomplete on focus.\n   */\n  openOnFocus: PropTypes.bool,\n\n  /**\n   * Default selected item when uncontrolled.\n   */\n  defaultSelectedItem: PropTypes.any,\n\n  /**\n   * The placeholder text when there is no value present.\n   */\n  placeholder: PropTypes.string,\n\n  /**\n   * In case the array of items is not an array of strings,\n   * this function is used on each item to return the string that will be shown on the filter\n   */\n  itemToString: PropTypes.func,\n\n  /**\n   * Properties forwarded to the input. Use with caution.\n   */\n  inputProps: PropTypes.object,\n\n  /**\n   * Properties forwarded to the button. Use with caution.\n   */\n  buttonProps: PropTypes.object,\n\n  /**\n   * Properties forwarded to the autocomplete component. Use with caution.\n   */\n  autocompleteProps: PropTypes.object\n}));\n\n_defineProperty(Combobox, \"defaultProps\", {\n  width: 240,\n  openOnFocus: false\n});\n\nexport { Combobox as default };","map":null,"metadata":{},"sourceType":"module"}