{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _libs = require('../../libs');\n\nvar _utils = require('../../libs/utils');\n\nvar _Node = require('./Node');\n\nvar _Node2 = _interopRequireDefault(_Node);\n\nvar _locale = require('../locale');\n\nvar _locale2 = _interopRequireDefault(_locale);\n\nvar _treeStore = require('./model/tree-store');\n\nvar _treeStore2 = _interopRequireDefault(_treeStore);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar Tree = function (_Component) {\n  (0, _inherits3.default)(Tree, _Component);\n\n  function Tree(props) {\n    (0, _classCallCheck3.default)(this, Tree);\n\n    var _this = (0, _possibleConstructorReturn3.default)(this, (Tree.__proto__ || Object.getPrototypeOf(Tree)).call(this, props));\n\n    var _this$props = _this.props,\n        data = _this$props.data,\n        lazy = _this$props.lazy,\n        options = _this$props.options,\n        load = _this$props.load,\n        defaultCheckedKeys = _this$props.defaultCheckedKeys,\n        defaultExpandedKeys = _this$props.defaultExpandedKeys,\n        currentNodeKey = _this$props.currentNodeKey,\n        nodeKey = _this$props.nodeKey,\n        checkStrictly = _this$props.checkStrictly,\n        autoExpandParent = _this$props.autoExpandParent,\n        defaultExpandAll = _this$props.defaultExpandAll,\n        filterNodeMethod = _this$props.filterNodeMethod;\n    _this.state = {\n      store: new _treeStore2.default({\n        key: nodeKey,\n        data: data,\n        lazy: lazy,\n        props: options,\n        load: load,\n        currentNodeKey: currentNodeKey,\n        checkStrictly: checkStrictly,\n        defaultCheckedKeys: defaultCheckedKeys,\n        defaultExpandedKeys: defaultExpandedKeys,\n        autoExpandParent: autoExpandParent,\n        defaultExpandAll: defaultExpandAll,\n        filterNodeMethod: filterNodeMethod\n      }),\n      currentNode: null\n    };\n    return _this;\n  }\n\n  (0, _createClass3.default)(Tree, [{\n    key: 'componentWillReceiveProps',\n    value: function componentWillReceiveProps(nextProps) {\n      if (nextProps.data instanceof Array && this.props.data !== nextProps.data) {\n        this.root.setData(nextProps.data);\n        this.setState({}); //force update\n      }\n    }\n  }, {\n    key: 'filter',\n    value: function filter(value) {\n      if (!this.props.filterNodeMethod) throw new Error('[Tree] filterNodeMethod is required when filter');\n      this.store.filter(value);\n      this.refresh();\n    }\n  }, {\n    key: 'refresh',\n    value: function refresh() {\n      this.setState({});\n    }\n  }, {\n    key: 'getNodeKey',\n    value: function getNodeKey(node, otherwise) {\n      var nodeKey = this.props.nodeKey;\n\n      if (nodeKey && node) {\n        return node.data[nodeKey];\n      }\n\n      return otherwise;\n    }\n  }, {\n    key: 'getCheckedNodes',\n    value: function getCheckedNodes(leafOnly) {\n      return this.store.getCheckedNodes(leafOnly);\n    }\n  }, {\n    key: 'getCheckedKeys',\n    value: function getCheckedKeys(leafOnly) {\n      return this.store.getCheckedKeys(leafOnly);\n    }\n  }, {\n    key: 'setCheckedNodes',\n    value: function setCheckedNodes(nodes, leafOnly) {\n      if (!this.props.nodeKey) throw new Error('[Tree] nodeKey is required in setCheckedNodes');\n      this.store.setCheckedNodes(nodes, leafOnly);\n    }\n  }, {\n    key: 'setCheckedKeys',\n    value: function setCheckedKeys(keys, leafOnly) {\n      if (!this.props.nodeKey) throw new Error('[Tree] nodeKey is required in setCheckedNodes');\n      this.store.setCheckedKeys(keys, leafOnly);\n    }\n  }, {\n    key: 'setChecked',\n    value: function setChecked(data, checked, deep) {\n      this.store.setChecked(data, checked, deep);\n    } // used by child nodes, use tree store to store this info?\n\n  }, {\n    key: 'getCurrentNode',\n    value: function getCurrentNode() {\n      return this.state.currentNode;\n    }\n  }, {\n    key: 'setCurrentNode',\n    value: function setCurrentNode(node) {\n      (0, _utils.require_condition)(node != null);\n      var _props = this.props,\n          onCurrentChange = _props.onCurrentChange,\n          onNodeClicked = _props.onNodeClicked;\n      this.store.setCurrentNode(node);\n      this.setState({\n        currentNode: node\n      }, function () {\n        var nodeModel = node.props.nodeModel;\n        onCurrentChange(nodeModel.data, node);\n        onNodeClicked(nodeModel.data, node);\n      });\n    }\n  }, {\n    key: 'closeSiblings',\n    value: function closeSiblings(exclude) {\n      var accordion = this.props.accordion;\n      if (!accordion) return;\n      if (!this.root.childNodes || !this.root.childNodes.length) return;\n      this.root.childNodes.filter(function (e) {\n        return e !== exclude;\n      }).forEach(function (e) {\n        return e.collapse();\n      });\n      this.refresh();\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this2 = this;\n\n      var _props2 = this.props,\n          options = _props2.options,\n          renderContent = _props2.renderContent,\n          highlightCurrent = _props2.highlightCurrent,\n          isShowCheckbox = _props2.isShowCheckbox,\n          onCheckChange = _props2.onCheckChange,\n          onNodeClicked = _props2.onNodeClicked,\n          emptyText = _props2.emptyText;\n\n      var renderEmptyText = function renderEmptyText() {\n        if (!_this2.root.childNodes || _this2.root.childNodes.length === 0) {\n          return _react2.default.createElement('div', {\n            className: 'el-tree__empty-block'\n          }, _react2.default.createElement('span', {\n            className: 'el-tree__empty-text'\n          }, emptyText));\n        } else return null;\n      };\n\n      return _react2.default.createElement('div', {\n        style: this.style(),\n        className: this.className('el-tree', {\n          'el-tree--highlight-current': highlightCurrent\n        })\n      }, this.root.childNodes.map(function (e, idx) {\n        return _react2.default.createElement(_Node2.default, {\n          ref: 'cnode',\n          key: _this2.getNodeKey(e, idx),\n          nodeModel: e,\n          options: options,\n          renderContent: renderContent,\n          treeNode: _this2,\n          parent: _this2,\n          isShowCheckbox: isShowCheckbox,\n          onCheckChange: onCheckChange\n        });\n      }), renderEmptyText());\n    }\n  }, {\n    key: 'root',\n    get: function get() {\n      return this.state.store.root;\n    }\n  }, {\n    key: 'store',\n    get: function get() {\n      return this.state.store;\n    }\n  }]);\n  return Tree;\n}(_libs.Component);\n\nvar _default = Tree;\nexports.default = _default;\nTree.propTypes = {\n  autoExpandParent: _libs.PropTypes.bool,\n  checkStrictly: _libs.PropTypes.bool,\n  currentNodeKey: _libs.PropTypes.any,\n  defaultCheckedKeys: _libs.PropTypes.array,\n  defaultExpandedKeys: _libs.PropTypes.array,\n  defaultExpandAll: _libs.PropTypes.bool,\n  data: _libs.PropTypes.array,\n  emptyText: _libs.PropTypes.string,\n  expandOnClickNode: _libs.PropTypes.bool,\n  filterNodeMethod: _libs.PropTypes.func,\n  renderContent: _libs.PropTypes.func,\n  isShowCheckbox: _libs.PropTypes.bool,\n  accordion: _libs.PropTypes.bool,\n  indent: _libs.PropTypes.number,\n  nodeKey: _libs.PropTypes.string,\n  options: _libs.PropTypes.shape({\n    children: _libs.PropTypes.string,\n    label: _libs.PropTypes.string,\n    icon: _libs.PropTypes.string\n  }),\n  //equal to props in vue element\n  lazy: _libs.PropTypes.bool,\n  //todo: check this\n  highlightCurrent: _libs.PropTypes.bool,\n  // (f:(resolve, reject)=>Unit)=>Unit\n  load: _libs.PropTypes.func,\n  //\n  onCheckChange: _libs.PropTypes.func,\n  // todo: 这个地方需要改下， 现在是current和nodeclick一起被设置上了\n  // (nodeModel.data, node)=>Unit\n  onNodeClicked: _libs.PropTypes.func,\n  // (nodeModel.data, node)=>Unit\n  onCurrentChange: _libs.PropTypes.func,\n  // (nodeModel.data, nodeModel, Node)=>Unit\n  onNodeExpand: _libs.PropTypes.func,\n  onNodeCollapse: _libs.PropTypes.func\n};\nTree.defaultProps = {\n  autoExpandParent: true,\n  defaultCheckedKeys: [],\n  defaultExpandedKeys: [],\n  data: [],\n  expandOnClickNode: true,\n  emptyText: _locale2.default.t('el.tree.emptyText'),\n  indent: 16,\n  options: {\n    children: 'children',\n    label: 'label',\n    icon: 'icon'\n  },\n  onCheckChange: function onCheckChange() {},\n  onNodeClicked: function onNodeClicked() {},\n  onCurrentChange: function onCurrentChange() {},\n  onNodeExpand: function onNodeExpand() {},\n  onNodeCollapse: function onNodeCollapse() {}\n};\n;\n\nvar _temp = function () {\n  if (typeof __REACT_HOT_LOADER__ === 'undefined') {\n    return;\n  }\n\n  __REACT_HOT_LOADER__.register(Tree, 'Tree', 'src/tree/Tree.jsx');\n\n  __REACT_HOT_LOADER__.register(_default, 'default', 'src/tree/Tree.jsx');\n}();\n\n;","map":null,"metadata":{},"sourceType":"script"}