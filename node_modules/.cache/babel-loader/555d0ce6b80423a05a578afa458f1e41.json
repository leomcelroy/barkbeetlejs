{"ast":null,"code":"var _jsxFileName = \"/Users/leomcelroy/Desktop/barkBeetleEverything/barkbeetle_js_real/src/components/ToolpathList.js\";\nimport React, { Component } from 'react';\nimport { Table, Checkbox, Button } from 'evergreen-ui';\nimport { AdvancedOptions } from './AdvancedOptions.js';\nimport store from '../store.js';\n\nvar ToolpathList = function ToolpathList(_ref) {\n  var state = _ref.state;\n  return React.createElement(Table, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10\n    },\n    __self: this\n  }, React.createElement(Table.Head, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11\n    },\n    __self: this\n  }, React.createElement(Table.TextHeaderCell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12\n    },\n    __self: this\n  }, \"name\"), React.createElement(Table.TextHeaderCell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13\n    },\n    __self: this\n  }, \"type\"), React.createElement(Table.TextHeaderCell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14\n    },\n    __self: this\n  }, \"modify\"), React.createElement(Table.TextHeaderCell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15\n    },\n    __self: this\n  }, \"reorder\"), React.createElement(Table.TextHeaderCell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16\n    },\n    __self: this\n  }, \"select/view\")), React.createElement(Table.Body, {\n    height: 240,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18\n    },\n    __self: this\n  }, state.toolpaths.map(function (path, i) {\n    return React.createElement(Table.Row, {\n      key: path.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20\n      },\n      __self: this\n    }, React.createElement(Table.TextCell, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21\n      },\n      __self: this\n    }, path.name), React.createElement(Table.TextCell, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22\n      },\n      __self: this\n    }, path.type), React.createElement(Table.TextCell, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23\n      },\n      __self: this\n    }, React.createElement(AdvancedOptions, {\n      params: path.parameters,\n      default: false,\n      index: i,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23\n      },\n      __self: this\n    })), React.createElement(Table.TextCell, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24\n      },\n      __self: this\n    }, \"^ v\"), React.createElement(Table.TextCell, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25\n      },\n      __self: this\n    }, React.createElement(Checkbox, {\n      checked: path.selected,\n      onChange: function onChange(e) {\n        var toolpaths = state.toolpaths;\n        var toolpath = toolpaths[i];\n        toolpath.selected = e.target.checked;\n        store.update({\n          toolpaths: toolpaths\n        });\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26\n      },\n      __self: this\n    })));\n  }), React.createElement(Table.Row, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }, React.createElement(Table.TextCell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }, React.createElement(Button, {\n    onClick: function onClick() {\n      state.toolpaths.forEach(function (path) {\n        utils.download(path.geometry.filename, path.geometry.gcode);\n      });\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }, \"Export\")), React.createElement(Table.TextCell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, React.createElement(Button, {\n    onClick: function onClick() {\n      return console.log(\"download\");\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, \"Delete\")), React.createElement(Table.TextCell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, React.createElement(Button, {\n    onClick: function onClick() {\n      var allSelected = state.toolpaths.every(function (path) {\n        return path.selected;\n      });\n      var toolpaths = state.toolpaths.map(function (path, i) {\n        path.selected = !allSelected;\n        return path;\n      }); //console.log(store.getState())\n\n      store.update({\n        toolpaths: toolpaths\n      });\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, \"(De)Select All\"), \"&nbsp\"))));\n};\n\nexport { ToolpathList };","map":{"version":3,"sources":["/Users/leomcelroy/Desktop/barkBeetleEverything/barkbeetle_js_real/src/components/ToolpathList.js"],"names":["React","Component","Table","Checkbox","Button","AdvancedOptions","store","ToolpathList","state","toolpaths","map","path","i","id","name","type","parameters","selected","e","toolpath","target","checked","update","forEach","utils","download","geometry","filename","gcode","console","log","allSelected","every"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport {Table, Checkbox, Button} from 'evergreen-ui';\nimport {AdvancedOptions} from './AdvancedOptions.js';\n\nimport store from '../store.js';\n\nconst ToolpathList = ({state}) => {\n\n  return (\n    <Table>\n      <Table.Head>\n        <Table.TextHeaderCell>name</Table.TextHeaderCell>\n        <Table.TextHeaderCell>type</Table.TextHeaderCell>\n        <Table.TextHeaderCell>modify</Table.TextHeaderCell>\n        <Table.TextHeaderCell>reorder</Table.TextHeaderCell>\n        <Table.TextHeaderCell>select/view</Table.TextHeaderCell>\n      </Table.Head>\n      <Table.Body height={240}>\n        {state.toolpaths.map((path, i) => (\n          <Table.Row key={path.id}>\n            <Table.TextCell>{path.name}</Table.TextCell>\n            <Table.TextCell>{path.type}</Table.TextCell>\n            <Table.TextCell><AdvancedOptions params={path.parameters} default={false} index={i}/></Table.TextCell>\n            <Table.TextCell>^ v</Table.TextCell>\n            <Table.TextCell>\n              <Checkbox\n                checked={path.selected}\n                onChange={e => {\n                  let toolpaths = state.toolpaths;\n                  let toolpath = toolpaths[i];\n\n                  toolpath.selected = e.target.checked;\n\n                  store.update({ toolpaths })\n                }}\n              />\n            </Table.TextCell>\n          </Table.Row>\n        ))}\n        <Table.Row>\n          <Table.TextCell><Button onClick={() => {\n            state.toolpaths.forEach(path => {\n              utils.download(path.geometry.filename, path.geometry.gcode);\n            })\n          }}>\n            Export\n          </Button></Table.TextCell>\n          <Table.TextCell><Button onClick={() => console.log(\"download\")}>Delete</Button></Table.TextCell>\n          <Table.TextCell>\n            <Button onClick={() => {\n              let allSelected = state.toolpaths.every(path => path.selected);\n\n              let toolpaths = state.toolpaths.map((path, i) => {\n                path.selected = !allSelected;\n\n                return path;\n              })\n\n              //console.log(store.getState())\n\n              store.update({ toolpaths })\n            }}>\n              (De)Select All\n            </Button>\n            &nbsp\n          </Table.TextCell>\n        </Table.Row>\n      </Table.Body>\n    </Table>\n  )\n}\n\nexport {ToolpathList}\n"]},"metadata":{},"sourceType":"module"}