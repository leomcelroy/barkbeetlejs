{"ast":null,"code":"/*\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the terms of the LICENSE file distributed with this project.\n */\nimport * as tslib_1 from \"tslib\";\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport { AbstractPureComponent } from \"../../common/abstractPureComponent\";\nimport * as Classes from \"../../common/classes\";\nimport { TOASTER_CREATE_NULL, TOASTER_WARN_INLINE } from \"../../common/errors\";\nimport { ESCAPE } from \"../../common/keys\";\nimport { Position } from \"../../common/position\";\nimport { DISPLAYNAME_PREFIX } from \"../../common/props\";\nimport { isNodeEnv, safeInvoke } from \"../../common/utils\";\nimport { Overlay } from \"../overlay/overlay\";\nimport { Toast } from \"./toast\";\n\nvar Toaster =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(Toaster, _super);\n\n  function Toaster() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.state = {\n      toasts: []\n    }; // auto-incrementing identifier for un-keyed toasts\n\n    _this.toastId = 0;\n\n    _this.getDismissHandler = function (toast) {\n      return function (timeoutExpired) {\n        _this.dismiss(toast.key, timeoutExpired);\n      };\n    };\n\n    _this.handleClose = function (e) {\n      // NOTE that `e` isn't always a KeyboardEvent but that's the only type we care about\n      if (e.which === ESCAPE) {\n        _this.clear();\n      }\n    };\n\n    return _this;\n  }\n  /**\n   * Create a new `Toaster` instance that can be shared around your application.\n   * The `Toaster` will be rendered into a new element appended to the given container.\n   */\n\n\n  Toaster.create = function (props, container) {\n    if (container === void 0) {\n      container = document.body;\n    }\n\n    if (props != null && props.usePortal != null && !isNodeEnv(\"production\")) {\n      console.warn(TOASTER_WARN_INLINE);\n    }\n\n    var containerElement = document.createElement(\"div\");\n    container.appendChild(containerElement);\n    var toaster = ReactDOM.render(React.createElement(Toaster, tslib_1.__assign({}, props, {\n      usePortal: false\n    })), containerElement);\n\n    if (toaster == null) {\n      throw new Error(TOASTER_CREATE_NULL);\n    }\n\n    return toaster;\n  };\n\n  Toaster.prototype.show = function (props, key) {\n    var options = this.createToastOptions(props, key);\n\n    if (key === undefined || this.isNewToastKey(key)) {\n      this.setState(function (prevState) {\n        return {\n          toasts: [options].concat(prevState.toasts)\n        };\n      });\n    } else {\n      this.setState(function (prevState) {\n        return {\n          toasts: prevState.toasts.map(function (t) {\n            return t.key === key ? options : t;\n          })\n        };\n      });\n    }\n\n    return options.key;\n  };\n\n  Toaster.prototype.dismiss = function (key, timeoutExpired) {\n    if (timeoutExpired === void 0) {\n      timeoutExpired = false;\n    }\n\n    this.setState(function (_a) {\n      var toasts = _a.toasts;\n      return {\n        toasts: toasts.filter(function (t) {\n          var matchesKey = t.key === key;\n\n          if (matchesKey) {\n            safeInvoke(t.onDismiss, timeoutExpired);\n          }\n\n          return !matchesKey;\n        })\n      };\n    });\n  };\n\n  Toaster.prototype.clear = function () {\n    this.state.toasts.map(function (t) {\n      return safeInvoke(t.onDismiss, false);\n    });\n    this.setState({\n      toasts: []\n    });\n  };\n\n  Toaster.prototype.getToasts = function () {\n    return this.state.toasts;\n  };\n\n  Toaster.prototype.render = function () {\n    // $pt-transition-duration * 3 + $pt-transition-duration / 2\n    var classes = classNames(Classes.TOAST_CONTAINER, this.getPositionClasses(), this.props.className);\n    return React.createElement(Overlay, {\n      autoFocus: this.props.autoFocus,\n      canEscapeKeyClose: this.props.canEscapeKeyClear,\n      canOutsideClickClose: false,\n      className: classes,\n      enforceFocus: false,\n      hasBackdrop: false,\n      isOpen: this.state.toasts.length > 0 || this.props.children != null,\n      onClose: this.handleClose,\n      transitionDuration: 350,\n      transitionName: Classes.TOAST,\n      usePortal: this.props.usePortal\n    }, this.state.toasts.map(this.renderToast, this), this.props.children);\n  };\n\n  Toaster.prototype.isNewToastKey = function (key) {\n    return this.state.toasts.every(function (toast) {\n      return toast.key !== key;\n    });\n  };\n\n  Toaster.prototype.renderToast = function (toast) {\n    return React.createElement(Toast, tslib_1.__assign({}, toast, {\n      onDismiss: this.getDismissHandler(toast)\n    }));\n  };\n\n  Toaster.prototype.createToastOptions = function (props, key) {\n    if (key === void 0) {\n      key = \"toast-\" + this.toastId++;\n    } // clone the object before adding the key prop to avoid leaking the mutation\n\n\n    return tslib_1.__assign({}, props, {\n      key: key\n    });\n  };\n\n  Toaster.prototype.getPositionClasses = function () {\n    var positions = this.props.position.split(\"-\"); // NOTE that there is no -center class because that's the default style\n\n    return positions.map(function (p) {\n      return Classes.TOAST_CONTAINER + \"-\" + p.toLowerCase();\n    });\n  };\n\n  Toaster.displayName = DISPLAYNAME_PREFIX + \".Toaster\";\n  Toaster.defaultProps = {\n    autoFocus: false,\n    canEscapeKeyClear: true,\n    position: Position.TOP,\n    usePortal: true\n  };\n  return Toaster;\n}(AbstractPureComponent);\n\nexport { Toaster };","map":null,"metadata":{},"sourceType":"module"}