{"ast":null,"code":"'use strict';\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar React = require('react');\n\nvar Transition = require('react-addons-css-transition-group');\n\nvar blacklist = require('blacklist');\n\nvar classNames = require('classnames');\n\nvar Button = require('./Button');\n\nvar ESC_KEYCODE = 27;\n\nvar NO_OP = function NO_OP() {\n  return undefined;\n};\n\nmodule.exports = React.createClass({\n  displayName: 'Dropdown',\n  propTypes: {\n    alignRight: React.PropTypes.bool,\n    buttonHasDisclosureArrow: React.PropTypes.bool,\n    buttonLabel: React.PropTypes.string,\n    buttonType: React.PropTypes.string,\n    children: React.PropTypes.element,\n    className: React.PropTypes.string,\n    isOpen: React.PropTypes.bool,\n    items: React.PropTypes.array.isRequired,\n    onSelect: React.PropTypes.func\n  },\n  getDefaultProps: function getDefaultProps() {\n    return {\n      buttonHasDisclosureArrow: true,\n      onSelect: NO_OP\n    };\n  },\n  getInitialState: function getInitialState() {\n    return {\n      isOpen: this.props.isOpen || false\n    };\n  },\n  componentWillUpdate: function componentWillUpdate(nextProps, nextState) {\n    if (typeof window === 'undefined') return;\n\n    if (nextState.isOpen) {\n      window.addEventListener('keydown', this.handleKeyDown);\n    } else {\n      window.removeEventListener('keydown', this.handleKeyDown);\n    }\n  },\n  openDropdown: function openDropdown() {\n    this.setState({\n      isOpen: true\n    });\n  },\n  closeDropdown: function closeDropdown() {\n    this.setState({\n      isOpen: false\n    });\n  },\n  handleKeyDown: function handleKeyDown(e) {\n    if (e.keyCode === ESC_KEYCODE) {\n      this.closeDropdown();\n    }\n  },\n  renderChildren: function renderChildren() {\n    var _this = this;\n\n    return React.Children.map(this.props.children, function (child) {\n      return React.cloneElement(child, {\n        onClick: _this.state.isOpen ? _this.closeDropdown : _this.openDropdown,\n        className: classNames(child.props.className, 'Dropdown-toggle')\n      });\n    });\n  },\n  renderButton: function renderButton() {\n    var disclosureArrow = this.props.buttonHasDisclosureArrow ? React.createElement('span', {\n      className: 'disclosure-arrow'\n    }) : null;\n    return React.createElement(Button, {\n      type: this.props.buttonType,\n      onClick: this.state.isOpen ? this.closeDropdown : this.openDropdown,\n      className: 'Dropdown-toggle'\n    }, this.props.buttonLabel, disclosureArrow);\n  },\n  onClick: function onClick(selectedItem) {\n    this.setState({\n      isOpen: !this.state.isOpen\n    });\n    this.props.onSelect(selectedItem);\n  },\n  renderDropdownMenu: function renderDropdownMenu() {\n    var self = this;\n    if (!this.state.isOpen) return null;\n    var dropdownMenuItems = this.props.items.map(function (item, i) {\n      var menuItem;\n\n      if (item.type === 'header') {\n        menuItem = React.createElement('li', {\n          key: 'item-' + i,\n          className: 'Dropdown-menu__header'\n        }, item.label);\n      } else if (item.type === 'divider') {\n        menuItem = React.createElement('li', {\n          key: 'item-' + i,\n          className: 'Dropdown-menu__divider'\n        });\n      } else {\n        menuItem = React.createElement('li', {\n          key: 'item-' + i,\n          className: 'Dropdown-menu__item'\n        }, React.createElement('span', {\n          className: 'Dropdown-menu__action',\n          onClick: self.onClick.bind(self, item.value)\n        }, item.label));\n      }\n\n      return menuItem;\n    });\n    return React.createElement('ul', {\n      key: 'Dropdown-menu',\n      className: 'Dropdown-menu',\n      role: 'menu'\n    }, dropdownMenuItems);\n  },\n  renderDropdownMenuBackground: function renderDropdownMenuBackground() {\n    if (!this.state.isOpen) return null;\n    return React.createElement('div', {\n      className: 'Dropdown-menu-backdrop',\n      onClick: this.closeDropdown\n    });\n  },\n  render: function render() {\n    // classes\n    var dropdownClass = classNames('Dropdown', {\n      'is-open': this.state.isOpen,\n      'align-right': this.props.alignRight\n    }, this.props.className); // props\n\n    var props = blacklist(this.props, 'alignRight', 'buttonHasDisclosureArrow', 'buttonLabel', 'buttonType', 'className', 'isOpen', 'items');\n    return React.createElement('span', _extends({\n      className: dropdownClass\n    }, props), React.Children.count(this.props.children) ? this.renderChildren() : this.renderButton(), React.createElement(Transition, {\n      transitionName: 'Dropdown-menu',\n      transitionEnterTimeout: 100,\n      transitionLeaveTimeout: 100\n    }, this.renderDropdownMenu()), this.renderDropdownMenuBackground());\n  }\n});","map":null,"metadata":{},"sourceType":"script"}