{"ast":null,"code":"import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport { dimensions, spacing, position, layout } from 'ui-box';\nimport { Icon } from '../../icon';\nimport { withTheme } from '../../theme';\nimport Button from './Button';\n\nvar IconButton =\n/*#__PURE__*/\nfunction (_PureComponent) {\n  _inherits(IconButton, _PureComponent);\n\n  function IconButton() {\n    _classCallCheck(this, IconButton);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(IconButton).apply(this, arguments));\n  }\n\n  _createClass(IconButton, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          theme = _this$props.theme,\n          iconAim = _this$props.iconAim,\n          icon = _this$props.icon,\n          iconSize = _this$props.iconSize,\n          height = _this$props.height,\n          intent = _this$props.intent,\n          props = _objectWithoutProperties(_this$props, [\"theme\", \"iconAim\", \"icon\", \"iconSize\", \"height\", \"intent\"]);\n\n      var size = iconSize || theme.getIconSizeForIconButton(height);\n      return React.createElement(Button, _extends({\n        intent: intent,\n        height: height,\n        width: height,\n        paddingLeft: 0,\n        paddingRight: 0,\n        display: \"flex\",\n        justifyContent: \"center\"\n      }, props), React.createElement(Icon, {\n        icon: icon,\n        size: size,\n        color: intent === 'none' ? 'default' : 'currentColor'\n      }));\n    }\n  }]);\n\n  return IconButton;\n}(PureComponent);\n\nIconButton.displayName = \"IconButton\";\n\n_defineProperty(IconButton, \"propTypes\", _objectSpread({}, dimensions.propTypes, spacing.propTypes, position.propTypes, layout.propTypes, {\n  /**\n   * Name of a Blueprint UI icon, or an icon element, to render.\n   * This prop is required because it determines the content of the component, but it can\n   * be explicitly set to falsy values to render nothing.\n   *\n   * - If `null` or `undefined` or `false`, this component will render nothing.\n   * - If given an `IconName` (a string literal union of all icon names),\n   *   that icon will be rendered as an `<svg>` with `<path>` tags.\n   * - If given a `JSX.Element`, that element will be rendered and _all other props on this component are ignored._\n   *   This type is supported to simplify usage of this component in other Blueprint components.\n   *   As a consumer, you should never use `<Icon icon={<element />}` directly; simply render `<element />` instead.\n   */\n  icon: PropTypes.string,\n\n  /**\n   * Specifies an explicit icon size instead of the default value\n   */\n  iconSize: PropTypes.number,\n\n  /**\n   * The intent of the button.\n   */\n  intent: PropTypes.oneOf(['none', 'success', 'warning', 'danger']).isRequired,\n\n  /**\n   * The appearance of the button.\n   */\n  appearance: PropTypes.oneOf(['default', 'minimal', 'primary']).isRequired,\n\n  /**\n   * Forcefully set the active state of a button.\n   * Useful in conjuction with a Popover.\n   */\n  isActive: PropTypes.bool,\n\n  /**\n   * When true, the button is disabled.\n   * isLoading also sets the button to disabled.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * Theme provided by ThemeProvider.\n   */\n  theme: PropTypes.object.isRequired,\n\n  /**\n   * Class name passed to the button.\n   * Only use if you know what you are doing.\n   */\n  className: PropTypes.string\n}));\n\n_defineProperty(IconButton, \"defaultProps\", {\n  intent: 'none',\n  appearance: 'default',\n  height: 32\n});\n\nexport default withTheme(IconButton);","map":null,"metadata":{},"sourceType":"module"}