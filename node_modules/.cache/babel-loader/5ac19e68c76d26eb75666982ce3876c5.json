{"ast":null,"code":"import _toConsumableArray from \"/Users/leomcelroy/Desktop/barkBeetleEverything/barkbeetle_js_real/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\n// makerjs model, depth, params -> pocket toolpath\nimport * as mjs from 'makerjs';\nvar STRANGE_CORRECTION = 0.0000001;\n\nvar intToolPath = function intToolPath(geo, radius) {\n  try {\n    return mjs.model.outline(geo, radius, 1, true);\n  } catch (_unused) {\n    return false;\n  }\n};\n\nvar pocket = function pocket(model, params) {\n  //let p = model.models.profile;\n  var p = model; // let outline = mjs.model.outline(p, params.compensatedRadius, 1, true); //third parameter is what type of corners, 0 (rounded) by default\n\n  console.log(params.compensatedRadius);\n  var outline = intToolPath(p, 4 + STRANGE_CORRECTION);\n  console.log(outline);\n\n  if (outline !== true) {\n    return {\n      drawing: {\n        models: {}\n      },\n      gcode: '',\n      filename: \"null\"\n    };\n  } //let chains = mjs.model.findChains(expansion);\n\n\n  var chain = mjs.model.findSingleChain(outline);\n  var divisions = Math.floor(chain.pathLength / params.minimumSpacing);\n  var spacing = chain.pathLength / divisions;\n  var keyPoints = mjs.chain.toPoints(chain, spacing); // let scaleFactor = 10;\n  // let scaleXY = keyPoints.map(p => [p[0] * scaleFactor, p[1] * scaleFactor]);\n\n  var gcodePoints = keyPoints.map(function (p) {\n    return \"G1 X\".concat(p[0], \" Y\").concat(p[1], \" F\").concat(params.feedRate);\n  });\n  var gcode = JSON.parse(JSON.stringify(gcodePoints));\n  var firstPoint = keyPoints[0];\n  var paths = params.depthOfPasses.map(function (p, i) {\n    return [\"G1 Z\".concat(params.depthOfPasses[i], \" F12.0\")].concat(_toConsumableArray(gcode), [\"G1 X\".concat(firstPoint[0], \" Y\").concat(firstPoint[1], \" F\").concat(params.feedRate)]);\n  });\n  paths = paths.flat(1);\n  gcode = [params.units, \"G90\", \"G1 Z\".concat(params.jogHeight, \" F9.0\"), \"G0 X\".concat(firstPoint[0], \" Y\").concat(firstPoint[1])].concat(_toConsumableArray(paths)); // write to a new file named\n\n  var filename = 'testGcodePocket.nc';\n  var text = gcode.join('\\n'); //testing\n  // console.log(\"pocket\", outline);\n\n  var o2 = intToolPath(outline);\n  var oModel = {\n    models: {\n      outline: outline,\n      o2: o2\n    }\n  };\n  return {\n    drawing: oModel,\n    gcode: text,\n    filename: filename\n  };\n};\n\nexport { pocket };","map":{"version":3,"sources":["/Users/leomcelroy/Desktop/barkBeetleEverything/barkbeetle_js_real/src/toolpaths/pocket.js"],"names":["mjs","STRANGE_CORRECTION","intToolPath","geo","radius","model","outline","pocket","params","p","console","log","compensatedRadius","drawing","models","gcode","filename","chain","findSingleChain","divisions","Math","floor","pathLength","minimumSpacing","spacing","keyPoints","toPoints","gcodePoints","map","feedRate","JSON","parse","stringify","firstPoint","paths","depthOfPasses","i","flat","units","jogHeight","text","join","o2","oModel"],"mappings":"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","sourcesContent":["// makerjs model, depth, params -> pocket toolpath\nimport * as mjs from 'makerjs';\n\nconst STRANGE_CORRECTION = 0.0000001;\n\nconst intToolPath = (geo, radius) => {\n  try {\n    return mjs.model.outline(geo, radius, 1, true);\n  }\n  catch {\n    return false\n  }\n}\n\nconst pocket = (model, params) => {\n  //let p = model.models.profile;\n  let p = model;\n\n  // let outline = mjs.model.outline(p, params.compensatedRadius, 1, true); //third parameter is what type of corners, 0 (rounded) by default\n  console.log(params.compensatedRadius)\n  let outline = intToolPath(p, 4 + STRANGE_CORRECTION);\n\n  console.log(outline)\n  if (outline !== true) {\n    return {drawing: {models:{}}, gcode: '', filename: \"null\"}\n  }\n\n  //let chains = mjs.model.findChains(expansion);\n  let chain = mjs.model.findSingleChain(outline);\n\n  var divisions = Math.floor(chain.pathLength / params.minimumSpacing);\n  var spacing = chain.pathLength / divisions;\n\n  let keyPoints = mjs.chain.toPoints(chain, spacing);\n\n  // let scaleFactor = 10;\n  // let scaleXY = keyPoints.map(p => [p[0] * scaleFactor, p[1] * scaleFactor]);\n\n  let gcodePoints = keyPoints.map(p => `G1 X${p[0]} Y${p[1]} F${params.feedRate}`)\n  let gcode = JSON.parse(JSON.stringify(gcodePoints));\n\n  let firstPoint = keyPoints[0];\n\n  let paths = params.depthOfPasses.map((p,i) => [`G1 Z${params.depthOfPasses[i]} F12.0`, ...gcode, `G1 X${firstPoint[0]} Y${firstPoint[1]} F${params.feedRate}`])\n  paths = paths.flat(1);\n\n  gcode = [\n    params.units,\n    \"G90\",\n    `G1 Z${params.jogHeight} F9.0`,\n    `G0 X${firstPoint[0]} Y${firstPoint[1]}`,\n    ...paths\n  ]\n\n  // write to a new file named\n  let filename = 'testGcodePocket.nc';\n\n  let text = gcode.join('\\n');\n\n  //testing\n  // console.log(\"pocket\", outline);\n\n  let o2 = intToolPath(outline);\n  let oModel = {\n    models:{\n      outline,\n      o2\n    }\n  }\n\n  return {drawing: oModel, gcode: text, filename};\n};\n\n\nexport {pocket};\n"]},"metadata":{},"sourceType":"module"}