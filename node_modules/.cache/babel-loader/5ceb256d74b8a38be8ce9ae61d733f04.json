{"ast":null,"code":"function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { POSITION_LEFT, POSITION_RIGHT } from '../constants';\nimport { applyToPoints, inverse } from 'transformation-matrix';\nimport MiniatureToggleButton from './miniature-toggle-button';\nimport MiniatureMask from './miniature-mask';\nvar min = Math.min,\n    max = Math.max;\nexport default function Miniature(props) {\n  var _style;\n\n  var value = props.value,\n      onChangeValue = props.onChangeValue,\n      children = props.children,\n      position = props.position,\n      background = props.background,\n      SVGBackground = props.SVGBackground,\n      miniatureWidth = props.width,\n      miniatureHeight = props.height;\n  var SVGWidth = value.SVGWidth,\n      SVGHeight = value.SVGHeight,\n      viewerWidth = value.viewerWidth,\n      viewerHeight = value.viewerHeight;\n  var ratio = SVGHeight / SVGWidth;\n  var zoomToFit = ratio >= 1 ? miniatureHeight / SVGHeight : miniatureWidth / SVGWidth;\n\n  var _applyToPoints = applyToPoints(inverse(value), [{\n    x: 0,\n    y: 0\n  }, {\n    x: viewerWidth,\n    y: viewerHeight\n  }]),\n      _applyToPoints2 = _slicedToArray(_applyToPoints, 2),\n      _applyToPoints2$ = _applyToPoints2[0],\n      x1 = _applyToPoints2$.x,\n      y1 = _applyToPoints2$.y,\n      _applyToPoints2$2 = _applyToPoints2[1],\n      x2 = _applyToPoints2$2.x,\n      y2 = _applyToPoints2$2.y;\n\n  var width, height;\n\n  if (value.miniatureOpen) {\n    width = miniatureWidth;\n    height = miniatureHeight;\n  } else {\n    width = 24;\n    height = 24;\n  }\n\n  var style = (_style = {\n    position: \"absolute\",\n    overflow: \"hidden\",\n    outline: \"1px solid rgba(19, 20, 22, 0.90)\",\n    transition: \"width 200ms ease, height 200ms ease, bottom 200ms ease\",\n    width: width + \"px\",\n    height: height + \"px\",\n    bottom: \"6px\"\n  }, _defineProperty(_style, position === POSITION_LEFT ? 'left' : 'right', \"6px\"), _defineProperty(_style, \"background\", background), _style);\n  var centerTranslation = ratio >= 1 ? \"translate(\".concat((miniatureWidth - SVGWidth * zoomToFit) / 2, \", 0)\") : \"translate(0, \".concat((miniatureHeight - SVGHeight * zoomToFit) / 2, \")\");\n  return React.createElement(\"div\", {\n    role: \"navigation\",\n    style: style\n  }, React.createElement(\"svg\", {\n    width: miniatureWidth,\n    height: miniatureHeight,\n    style: {\n      pointerEvents: \"none\"\n    }\n  }, React.createElement(\"g\", {\n    transform: centerTranslation\n  }, React.createElement(\"g\", {\n    transform: \"scale(\".concat(zoomToFit, \", \").concat(zoomToFit, \")\")\n  }, React.createElement(\"rect\", {\n    fill: SVGBackground,\n    x: 0,\n    y: 0,\n    width: value.SVGWidth,\n    height: value.SVGHeight\n  }), children, React.createElement(MiniatureMask, {\n    SVGWidth: SVGWidth,\n    SVGHeight: SVGHeight,\n    x1: x1,\n    y1: y1,\n    x2: x2,\n    y2: y2,\n    zoomToFit: zoomToFit\n  })))), React.createElement(MiniatureToggleButton, {\n    value: value,\n    onChangeValue: onChangeValue,\n    position: position\n  }));\n}\nMiniature.propTypes = {\n  value: PropTypes.object.isRequired,\n  onChangeValue: PropTypes.func.isRequired,\n  SVGBackground: PropTypes.string.isRequired,\n  //customizations\n  position: PropTypes.oneOf([POSITION_RIGHT, POSITION_LEFT]),\n  background: PropTypes.string.isRequired,\n  width: PropTypes.number.isRequired,\n  height: PropTypes.number.isRequired\n};\nMiniature.defaultProps = {\n  position: POSITION_LEFT,\n  background: \"#616264\",\n  width: 100,\n  height: 80\n};","map":null,"metadata":{},"sourceType":"module"}