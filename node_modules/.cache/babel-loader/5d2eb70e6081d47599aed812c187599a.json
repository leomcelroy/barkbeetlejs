{"ast":null,"code":"/*\n * Copyright 2015 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the terms of the LICENSE file distributed with this project.\n */\nimport * as tslib_1 from \"tslib\";\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport { AbstractPureComponent } from \"../../common/abstractPureComponent\";\nimport * as Classes from \"../../common/classes\";\nimport { DISPLAYNAME_PREFIX } from \"../../common/props\";\n/**\n * `Collapse` can be in one of six states, enumerated here.\n * When changing the `isOpen` prop, the following happens to the states:\n * isOpen={true}  : CLOSED -> OPEN_START -> OPENING -> OPEN\n * isOpen={false} : OPEN -> CLOSING_START -> CLOSING -> CLOSED\n */\n\nexport var AnimationStates;\n\n(function (AnimationStates) {\n  /**\n   * The body is re-rendered, height is set to the measured body height and\n   * the body Y is set to 0.\n   */\n  AnimationStates[AnimationStates[\"OPEN_START\"] = 0] = \"OPEN_START\";\n  /**\n   * Animation begins, height is set to auto. This is all animated, and on\n   * complete, the state changes to OPEN.\n   */\n\n  AnimationStates[AnimationStates[\"OPENING\"] = 1] = \"OPENING\";\n  /**\n   * The collapse height is set to auto, and the body Y is set to 0 (so the\n   * element can be seen as normal).\n   */\n\n  AnimationStates[AnimationStates[\"OPEN\"] = 2] = \"OPEN\";\n  /**\n   * Height has been changed from auto to the measured height of the body to\n   * prepare for the closing animation in CLOSING.\n   */\n\n  AnimationStates[AnimationStates[\"CLOSING_START\"] = 3] = \"CLOSING_START\";\n  /**\n   * Height is set to 0 and the body Y is at -height. Both of these properties\n   * are transformed, and then after the animation is complete, the state\n   * changes to CLOSED.\n   */\n\n  AnimationStates[AnimationStates[\"CLOSING\"] = 4] = \"CLOSING\";\n  /**\n   * The contents of the collapse is not rendered, the collapse height is 0,\n   * and the body Y is at -height (so that the bottom of the body is at Y=0).\n   */\n\n  AnimationStates[AnimationStates[\"CLOSED\"] = 5] = \"CLOSED\";\n})(AnimationStates || (AnimationStates = {}));\n\nvar Collapse =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(Collapse, _super);\n\n  function Collapse() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.state = {\n      animationState: _this.props.isOpen ? AnimationStates.OPEN : AnimationStates.CLOSED,\n      height: \"0px\"\n    }; // The most recent non-0 height (once a height has been measured - is 0 until then)\n\n    _this.height = 0;\n\n    _this.contentsRefHandler = function (el) {\n      _this.contents = el;\n\n      if (el != null) {\n        _this.height = _this.contents.clientHeight;\n\n        _this.setState({\n          animationState: _this.props.isOpen ? AnimationStates.OPEN : AnimationStates.CLOSED,\n          height: _this.height + \"px\"\n        });\n      }\n    };\n\n    return _this;\n  }\n\n  Collapse.prototype.componentWillReceiveProps = function (nextProps) {\n    if (this.props.isOpen !== nextProps.isOpen) {\n      this.clearTimeouts();\n\n      if (this.state.animationState !== AnimationStates.CLOSED && !nextProps.isOpen) {\n        this.setState({\n          animationState: AnimationStates.CLOSING_START,\n          height: this.height + \"px\"\n        });\n      } else if (this.state.animationState !== AnimationStates.OPEN && nextProps.isOpen) {\n        this.setState({\n          animationState: AnimationStates.OPEN_START\n        });\n      }\n    }\n  };\n\n  Collapse.prototype.render = function () {\n    var isContentVisible = this.state.animationState !== AnimationStates.CLOSED;\n    var shouldRenderChildren = isContentVisible || this.props.keepChildrenMounted;\n    var displayWithTransform = isContentVisible && this.state.animationState !== AnimationStates.CLOSING;\n    var isAutoHeight = this.state.height === \"auto\";\n    var containerStyle = {\n      height: isContentVisible ? this.state.height : undefined,\n      overflowY: isAutoHeight ? \"visible\" : undefined,\n      transition: isAutoHeight ? \"none\" : undefined\n    };\n    var contentsStyle = {\n      transform: displayWithTransform ? \"translateY(0)\" : \"translateY(-\" + this.height + \"px)\",\n      transition: isAutoHeight ? \"none\" : undefined\n    };\n    return React.createElement(this.props.component, {\n      className: classNames(Classes.COLLAPSE, this.props.className),\n      style: containerStyle\n    }, React.createElement(\"div\", {\n      className: Classes.COLLAPSE_BODY,\n      ref: this.contentsRefHandler,\n      style: contentsStyle,\n      \"aria-hidden\": !isContentVisible && this.props.keepChildrenMounted\n    }, shouldRenderChildren ? this.props.children : null));\n  };\n\n  Collapse.prototype.componentDidMount = function () {\n    this.forceUpdate();\n\n    if (this.props.isOpen) {\n      this.setState({\n        animationState: AnimationStates.OPEN,\n        height: \"auto\"\n      });\n    } else {\n      this.setState({\n        animationState: AnimationStates.CLOSED\n      });\n    }\n  };\n\n  Collapse.prototype.componentDidUpdate = function () {\n    var _this = this;\n\n    if (this.contents != null && this.contents.clientHeight !== 0) {\n      this.height = this.contents.clientHeight;\n    }\n\n    if (this.state.animationState === AnimationStates.CLOSING_START) {\n      this.setTimeout(function () {\n        return _this.setState({\n          animationState: AnimationStates.CLOSING,\n          height: \"0px\"\n        });\n      });\n      this.setTimeout(function () {\n        return _this.onDelayedStateChange();\n      }, this.props.transitionDuration);\n    }\n\n    if (this.state.animationState === AnimationStates.OPEN_START) {\n      this.setState({\n        animationState: AnimationStates.OPENING,\n        height: this.height + \"px\"\n      });\n      this.setTimeout(function () {\n        return _this.onDelayedStateChange();\n      }, this.props.transitionDuration);\n    }\n  };\n\n  Collapse.prototype.onDelayedStateChange = function () {\n    switch (this.state.animationState) {\n      case AnimationStates.OPENING:\n        this.setState({\n          animationState: AnimationStates.OPEN,\n          height: \"auto\"\n        });\n        break;\n\n      case AnimationStates.CLOSING:\n        this.setState({\n          animationState: AnimationStates.CLOSED\n        });\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  Collapse.displayName = DISPLAYNAME_PREFIX + \".Collapse\";\n  Collapse.defaultProps = {\n    component: \"div\",\n    isOpen: false,\n    keepChildrenMounted: false,\n    transitionDuration: 200\n  };\n  return Collapse;\n}(AbstractPureComponent);\n\nexport { Collapse };","map":null,"metadata":{},"sourceType":"module"}