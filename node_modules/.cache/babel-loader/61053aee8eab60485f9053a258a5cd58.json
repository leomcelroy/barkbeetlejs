{"ast":null,"code":"/**\r\n * Graham's Scan Convex Hull Algorithm\r\n * @desc An implementation of the Graham's Scan Convex Hull algorithm in JavaScript.\r\n * @author Brian Barnett, brian@3kb.co.uk, http://brianbar.net/ || http://3kb.co.uk/\r\n * @version 1.0.4\r\n */\nfunction ConvexHullGrahamScan() {\n  this.anchorPoint = void 0, this.reverse = !1, this.points = [];\n}\n\nConvexHullGrahamScan.prototype = {\n  constructor: ConvexHullGrahamScan,\n  Point: function Point(n, t) {\n    this.x = n, this.y = t;\n  },\n  _findPolarAngle: function _findPolarAngle(n, t) {\n    var i,\n        o,\n        h = 57.295779513082;\n    if (!n || !t) return 0;\n    if (i = t.x - n.x, o = t.y - n.y, 0 == i && 0 == o) return 0;\n    var r = Math.atan2(o, i) * h;\n    return this.reverse ? 0 >= r && (r += 360) : r >= 0 && (r += 360), r;\n  },\n  addPoint: function addPoint(n, t) {\n    return void 0 === this.anchorPoint ? void (this.anchorPoint = new this.Point(n, t)) : this.anchorPoint.y > t && this.anchorPoint.x > n || this.anchorPoint.y === t && this.anchorPoint.x > n || this.anchorPoint.y > t && this.anchorPoint.x === n ? (this.points.push(new this.Point(this.anchorPoint.x, this.anchorPoint.y)), void (this.anchorPoint = new this.Point(n, t))) : void this.points.push(new this.Point(n, t));\n  },\n  _sortPoints: function _sortPoints() {\n    var n = this;\n    return this.points.sort(function (t, i) {\n      var o = n._findPolarAngle(n.anchorPoint, t),\n          h = n._findPolarAngle(n.anchorPoint, i);\n\n      return h > o ? -1 : o > h ? 1 : 0;\n    });\n  },\n  _checkPoints: function _checkPoints(n, t, i) {\n    var o,\n        h = this._findPolarAngle(n, t),\n        r = this._findPolarAngle(n, i);\n\n    return h > r ? (o = h - r, !(o > 180)) : r > h ? (o = r - h, o > 180) : !0;\n  },\n  getHull: function getHull() {\n    var n,\n        t,\n        i = [];\n    if (this.reverse = this.points.every(function (n) {\n      return n.x < 0 && n.y < 0;\n    }), n = this._sortPoints(), t = n.length, 3 > t) return n.unshift(this.anchorPoint), n;\n\n    for (i.push(n.shift(), n.shift());;) {\n      var o, h, r;\n\n      if (i.push(n.shift()), o = i[i.length - 3], h = i[i.length - 2], r = i[i.length - 1], this._checkPoints(o, h, r) && i.splice(i.length - 2, 1), 0 == n.length) {\n        if (t == i.length) {\n          var e = this.anchorPoint;\n          return i = i.filter(function (n) {\n            return !!n;\n          }), i.some(function (n) {\n            return n.x == e.x && n.y == e.y;\n          }) || i.unshift(this.anchorPoint), i;\n        }\n\n        n = i, t = n.length, i = [], i.push(n.shift(), n.shift());\n      }\n    }\n  }\n}, \"function\" == typeof define && define.amd && define(function () {\n  return ConvexHullGrahamScan;\n}), \"undefined\" != typeof module && (module.exports = ConvexHullGrahamScan);","map":null,"metadata":{},"sourceType":"script"}