{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport { css } from 'ui-box';\nimport Transition from 'react-transition-group/Transition';\nimport { Pane, Card } from '../../layers';\nimport { Portal } from '../../portal';\nimport { Paragraph, Heading } from '../../typography';\nimport { Button, IconButton } from '../../buttons';\nvar animationEasing = {\n  deceleration: \"cubic-bezier(0.0, 0.0, 0.2, 1)\",\n  acceleration: \"cubic-bezier(0.4, 0.0, 1, 1)\",\n  spring: \"cubic-bezier(0.175, 0.885, 0.320, 1.175)\"\n};\nvar ANIMATION_DURATION = 240;\nvar openAnimation = css.keyframes('openAnimation', {\n  from: {\n    transform: 'translateY(100%)'\n  },\n  to: {\n    transform: 'translateY(0)'\n  }\n});\nvar closeAnimation = css.keyframes('closeAnimation', {\n  from: {\n    transform: 'scale(1)',\n    opacity: 1\n  },\n  to: {\n    transform: 'scale(0.9)',\n    opacity: 0\n  }\n});\nvar animationStyles = {\n  '&[data-state=\"entering\"], &[data-state=\"entered\"]': {\n    animation: \"\".concat(openAnimation, \" \").concat(ANIMATION_DURATION, \"ms \").concat(animationEasing.spring, \" both\")\n  },\n  '&[data-state=\"exiting\"]': {\n    animation: \"\".concat(closeAnimation, \" 120ms \").concat(animationEasing.acceleration, \" both\")\n  }\n};\n\nvar CornerDialog =\n/*#__PURE__*/\nfunction (_PureComponent) {\n  _inherits(CornerDialog, _PureComponent);\n\n  function CornerDialog(props) {\n    var _this;\n\n    _classCallCheck(this, CornerDialog);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(CornerDialog).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"handleExited\", function () {\n      _this.setState({\n        exiting: false,\n        exited: true\n      });\n\n      _this.props.onCloseComplete();\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"handleCancel\", function () {\n      _this.props.onCancel(_this.handleClose);\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"handleClose\", function () {\n      _this.setState({\n        exiting: true\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"handleConfirm\", function () {\n      _this.props.onConfirm(_this.handleClose);\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"renderChildren\", function () {\n      var children = _this.props.children;\n\n      if (typeof children === 'function') {\n        return children({\n          close: _this.handleClose\n        });\n      }\n\n      if (typeof children === 'string') {\n        return React.createElement(Paragraph, {\n          size: 400,\n          color: \"muted\"\n        }, children);\n      }\n\n      return children;\n    });\n\n    _this.state = {\n      exiting: false,\n      exited: !props.isShown\n    };\n    return _this;\n  }\n\n  _createClass(CornerDialog, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (!prevProps.isShown && this.props.isShown) {\n        // eslint-disable-next-line react/no-did-update-set-state\n        this.setState({\n          exited: false\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          title = _this$props.title,\n          width = _this$props.width,\n          intent = _this$props.intent,\n          isShown = _this$props.isShown,\n          hasFooter = _this$props.hasFooter,\n          hasCancel = _this$props.hasCancel,\n          cancelLabel = _this$props.cancelLabel,\n          confirmLabel = _this$props.confirmLabel,\n          onOpenComplete = _this$props.onOpenComplete,\n          containerProps = _this$props.containerProps;\n      var _this$state = this.state,\n          exiting = _this$state.exiting,\n          exited = _this$state.exited;\n      if (exited) return null;\n      return React.createElement(Portal, null, React.createElement(Transition, {\n        appear: true,\n        unmountOnExit: true,\n        timeout: ANIMATION_DURATION,\n        in: isShown && !exiting,\n        onExited: this.handleExited,\n        onEntered: onOpenComplete\n      }, function (state) {\n        return React.createElement(Card, _extends({\n          role: \"dialog\",\n          backgroundColor: \"white\",\n          elevation: 4,\n          width: width,\n          css: animationStyles,\n          \"data-state\": state,\n          position: \"fixed\",\n          bottom: 16,\n          right: 16,\n          padding: 32\n        }, containerProps), React.createElement(Pane, {\n          display: \"flex\",\n          alignItems: \"center\",\n          marginBottom: 12\n        }, React.createElement(Heading, {\n          is: \"h4\",\n          size: 600,\n          flex: \"1\"\n        }, title), React.createElement(IconButton, {\n          height: 32,\n          icon: \"cross\",\n          appearance: \"minimal\",\n          onClick: _this2.handleClose\n        })), React.createElement(Pane, {\n          overflowY: \"auto\",\n          \"data-state\": state\n        }, _this2.renderChildren()), hasFooter && React.createElement(Pane, {\n          marginTop: 24,\n          flexShrink: 0,\n          display: \"flex\",\n          flexDirection: \"row-reverse\"\n        }, React.createElement(Button, {\n          appearance: \"primary\",\n          intent: intent,\n          marginLeft: 8,\n          onClick: _this2.handleConfirm\n        }, confirmLabel), hasCancel && React.createElement(Button, {\n          onClick: _this2.handleCancel\n        }, cancelLabel)));\n      }));\n    }\n  }]);\n\n  return CornerDialog;\n}(PureComponent);\n\nCornerDialog.displayName = \"CornerDialog\";\n\n_defineProperty(CornerDialog, \"propTypes\", {\n  /**\n   * Children can be a string, node or a function accepting `({ close })`.\n   * When passing a string, <Paragraph size={400} color=\"muted\" /> is used to wrap the string.\n   */\n  children: PropTypes.oneOfType([PropTypes.node, PropTypes.func]).isRequired,\n\n  /**\n   * The intent of the CornerDialog. Used for the button.\n   */\n  intent: PropTypes.oneOf(['none', 'success', 'warning', 'danger']).isRequired,\n\n  /**\n   * When true, the dialog is shown.\n   */\n  isShown: PropTypes.bool,\n\n  /**\n   * Title of the Dialog. Titles should use Title Case.\n   */\n  title: PropTypes.node,\n\n  /**\n   * Function that will be called when the exit transition is complete.\n   */\n  onCloseComplete: PropTypes.func,\n\n  /**\n   * Function that will be called when the enter transition is complete.\n   */\n  onOpenComplete: PropTypes.func,\n\n  /**\n   * When true, the footer with the cancel and confirm button is shown.\n   */\n  hasFooter: PropTypes.bool,\n\n  /**\n   * Function that will be called when the confirm button is clicked.\n   * This does not close the Dialog. A close function will be passed\n   * as a paramater you can use to close the dialog.\n   *\n   * `onConfirm={(close) => close()}`\n   */\n  onConfirm: PropTypes.func,\n\n  /**\n   * Label of the confirm button.\n   */\n  confirmLabel: PropTypes.string,\n\n  /**\n   * When true, the cancel button is shown.\n   */\n  hasCancel: PropTypes.bool,\n\n  /**\n   * Function that will be called when the cancel button is clicked.\n   * This closes the Dialog by default.\n   *\n   * `onCancel={(close) => close()}`\n   */\n  onCancel: PropTypes.func,\n\n  /**\n   * Label of the cancel button.\n   */\n  cancelLabel: PropTypes.string,\n\n  /**\n   * Width of the Dialog.\n   */\n  width: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n\n  /**\n   * Props that are passed to the dialog container.\n   */\n  containerProps: PropTypes.object\n});\n\n_defineProperty(CornerDialog, \"defaultProps\", {\n  width: 392,\n  intent: 'none',\n  hasFooter: true,\n  confirmLabel: 'Learn More',\n  hasCancel: true,\n  cancelLabel: 'Close',\n  onCancel: function onCancel(close) {\n    return close();\n  },\n  onConfirm: function onConfirm(close) {\n    return close();\n  }\n});\n\nexport { CornerDialog as default };","map":null,"metadata":{},"sourceType":"module"}