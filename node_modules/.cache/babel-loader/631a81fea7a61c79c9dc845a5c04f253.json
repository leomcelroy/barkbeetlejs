{"ast":null,"code":"var linesToPolylinePoints = function linesToPolylinePoints(lines, lastIndex) {\n  return lines.map(function (line, i) {\n    //should import this instead\n    if (i === lastIndex - 1) return [{\n      x: line.origin[0],\n      y: line.origin[1]\n    }, {\n      x: line.end[0],\n      y: line.end[1]\n    }];\n    return {\n      x: line.origin[0],\n      y: line.origin[1]\n    };\n  }).flat();\n};\n\nvar sum = function sum(a, b) {\n  return a + b;\n};\n\nvar getCenter = function getCenter(contour) {\n  var polyline = linesToPolylinePoints(contour);\n  var xS = polyline.map(function (point) {\n    return point.x;\n  });\n  var averageX = xS.reduce(sum, 0) / xS.length;\n  var yS = polyline.map(function (point) {\n    return point.y;\n  });\n  var averageY = yS.reduce(sum, 0) / yS.length;\n  return [averageX, averageY];\n};\n\nexport var drill = function drill(contour, params) {\n  var center = getCenter(contour);\n  console.log(\"center\", center);\n  var gcode = []; // let preamble = [params.units, \"G90\"];\n  //\n  // let gcode = [\n  //   ...preamble,\n  //   \"(end of preamble)\",\n  //   `G1 Z${params.jogHeight} F${params.jogRate}`,\n  //   `G0 X${firstPoint[0]} Y${firstPoint[1]}`,\n  //   ...paths,\n  //   `G1 Z${params.jogHeight} F${params.jogRate}`,\n  // ]\n  // write to a new file named\n  //let filename = 'testGcodeProfile.gcode';\n\n  var text = gcode.join('\\n');\n  return {\n    drawing: [],\n    gcode: text\n  };\n};","map":{"version":3,"sources":["/Users/leomcelroy/Desktop/barkbeetle_js/src/toolpaths/drill.js"],"names":["linesToPolylinePoints","lines","lastIndex","map","line","i","x","origin","y","end","flat","sum","a","b","getCenter","contour","polyline","xS","point","averageX","reduce","length","yS","averageY","drill","params","center","console","log","gcode","text","join","drawing"],"mappings":"AAAA,IAAMA,qBAAqB,GAAG,SAAxBA,qBAAwB,CAACC,KAAD,EAAQC,SAAR;AAAA,SAAsBD,KAAK,CAACE,GAAN,CAAU,UAACC,IAAD,EAAOC,CAAP,EAAa;AAAE;AAC3E,QAAIA,CAAC,KAAKH,SAAS,GAAC,CAApB,EAAuB,OAAO,CAAC;AAACI,MAAAA,CAAC,EAACF,IAAI,CAACG,MAAL,CAAY,CAAZ,CAAH;AAAmBC,MAAAA,CAAC,EAACJ,IAAI,CAACG,MAAL,CAAY,CAAZ;AAArB,KAAD,EAAuC;AAACD,MAAAA,CAAC,EAACF,IAAI,CAACK,GAAL,CAAS,CAAT,CAAH;AAAgBD,MAAAA,CAAC,EAACJ,IAAI,CAACK,GAAL,CAAS,CAAT;AAAlB,KAAvC,CAAP;AAEvB,WAAO;AAACH,MAAAA,CAAC,EAACF,IAAI,CAACG,MAAL,CAAY,CAAZ,CAAH;AAAmBC,MAAAA,CAAC,EAACJ,IAAI,CAACG,MAAL,CAAY,CAAZ;AAArB,KAAP;AACD,GAJmD,EAIjDG,IAJiD,EAAtB;AAAA,CAA9B;;AAMA,IAAIC,GAAG,GAAG,SAANA,GAAM,CAACC,CAAD,EAAIC,CAAJ;AAAA,SAAUD,CAAC,GAAGC,CAAd;AAAA,CAAV;;AAEA,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAACC,OAAD,EAAa;AAC7B,MAAIC,QAAQ,GAAGhB,qBAAqB,CAACe,OAAD,CAApC;AAEA,MAAIE,EAAE,GAAGD,QAAQ,CAACb,GAAT,CAAa,UAAAe,KAAK;AAAA,WAAIA,KAAK,CAACZ,CAAV;AAAA,GAAlB,CAAT;AACA,MAAIa,QAAQ,GAAGF,EAAE,CAACG,MAAH,CAAUT,GAAV,EAAe,CAAf,IAAkBM,EAAE,CAACI,MAApC;AACA,MAAIC,EAAE,GAAGN,QAAQ,CAACb,GAAT,CAAa,UAAAe,KAAK;AAAA,WAAIA,KAAK,CAACV,CAAV;AAAA,GAAlB,CAAT;AACA,MAAIe,QAAQ,GAAGD,EAAE,CAACF,MAAH,CAAUT,GAAV,EAAe,CAAf,IAAkBW,EAAE,CAACD,MAApC;AAEA,SAAO,CAACF,QAAD,EAAWI,QAAX,CAAP;AAED,CAVD;;AAYA,OAAO,IAAMC,KAAK,GAAG,SAARA,KAAQ,CAACT,OAAD,EAAUU,MAAV,EAAqB;AACxC,MAAIC,MAAM,GAAGZ,SAAS,CAACC,OAAD,CAAtB;AACAY,EAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBF,MAAtB;AAGA,MAAIG,KAAK,GAAG,EAAZ,CALwC,CAMxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;AAEA,MAAIC,IAAI,GAAGD,KAAK,CAACE,IAAN,CAAW,IAAX,CAAX;AAEA,SAAO;AAACC,IAAAA,OAAO,EAAE,EAAV;AAAcH,IAAAA,KAAK,EAAEC;AAArB,GAAP;AACD,CAvBM","sourcesContent":["const linesToPolylinePoints = (lines, lastIndex) => lines.map((line, i) => { //should import this instead\n  if (i === lastIndex-1) return [{x:line.origin[0], y:line.origin[1]}, {x:line.end[0], y:line.end[1]}];\n\n  return {x:line.origin[0], y:line.origin[1]}\n}).flat()\n\nlet sum = (a, b) => a + b;\n\nconst getCenter = (contour) => {\n  let polyline = linesToPolylinePoints(contour);\n\n  let xS = polyline.map(point => point.x);\n  let averageX = xS.reduce(sum, 0)/xS.length;\n  let yS = polyline.map(point => point.y);\n  let averageY = yS.reduce(sum, 0)/yS.length;\n\n  return [averageX, averageY];\n\n}\n\nexport const drill = (contour, params) => {\n  let center = getCenter(contour);\n  console.log(\"center\", center);\n\n\n  let gcode = [];\n  // let preamble = [params.units, \"G90\"];\n  //\n  // let gcode = [\n  //   ...preamble,\n  //   \"(end of preamble)\",\n  //   `G1 Z${params.jogHeight} F${params.jogRate}`,\n  //   `G0 X${firstPoint[0]} Y${firstPoint[1]}`,\n  //   ...paths,\n  //   `G1 Z${params.jogHeight} F${params.jogRate}`,\n  // ]\n\n  // write to a new file named\n  //let filename = 'testGcodeProfile.gcode';\n\n  let text = gcode.join('\\n');\n\n  return {drawing: [], gcode: text};\n};\n"]},"metadata":{},"sourceType":"module"}