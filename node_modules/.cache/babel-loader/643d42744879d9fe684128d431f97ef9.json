{"ast":null,"code":"'use strict';\n\nexport default function compare(x, y) {\n  var p; // remember that NaN === NaN returns false\n  // and isNaN(undefined) returns true\n\n  if (typeof x === 'number' && typeof y === 'number' && isNaN(x) && isNaN(y)) {\n    return true;\n  } // Compare primitives and functions.\n  // Check if both arguments link to the same object.\n  // Especially useful on step when comparing prototypes\n\n\n  if (x === y) {\n    return true;\n  } // Works in case when functions are created in constructor.\n  // Comparing dates is a common scenario. Another built-ins?\n  // We can even handle functions passed across iframes\n\n\n  if (typeof x === 'function' && typeof y === 'function') {\n    if (x instanceof RegExp && y instanceof RegExp || x instanceof String || y instanceof String || x instanceof Number || y instanceof Number) {\n      return x.toString() === y.toString();\n    } else {\n      return false;\n    }\n  }\n\n  if (x instanceof Date && y instanceof Date) {\n    return x.getTime() === y.getTime();\n  } // At last checking prototypes as good a we can\n\n\n  if (!(x instanceof Object && y instanceof Object)) {\n    return false;\n  }\n\n  if (x.prototype !== y.prototype) {\n    return false;\n  }\n\n  if (x.constructor !== y.constructor) {\n    return false;\n  }\n\n  for (p in y) {\n    if (!x.hasOwnProperty(p)) {\n      return false;\n    }\n  }\n\n  for (p in x) {\n    if (!y.hasOwnProperty(p)) {\n      return false;\n    }\n\n    if (typeof y[p] !== typeof x[p]) {\n      return false;\n    }\n\n    if (!compare(x[p], y[p])) {\n      return false;\n    }\n  }\n\n  return true;\n}","map":null,"metadata":{},"sourceType":"module"}