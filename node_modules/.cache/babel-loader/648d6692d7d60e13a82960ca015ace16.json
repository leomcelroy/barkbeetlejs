{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _defineProperty2 = require('babel-runtime/helpers/defineProperty');\n\nvar _defineProperty3 = _interopRequireDefault(_defineProperty2);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _libs = require('../../../libs');\n\nvar _utils = require('../utils');\n\nvar _TimeSpinner = require('../basic/TimeSpinner');\n\nvar _TimeSpinner2 = _interopRequireDefault(_TimeSpinner);\n\nvar _locale = require('../../locale');\n\nvar _locale2 = _interopRequireDefault(_locale);\n\nvar _PopperBase2 = require('./PopperBase');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar MIN_TIME = (0, _utils.parseDate)('00:00:00', 'HH:mm:ss');\nvar MAX_TIME = (0, _utils.parseDate)('23:59:59', 'HH:mm:ss');\n\nvar isDisabled = function isDisabled(minTime, maxTime) {\n  var minValue = minTime.getHours() * 3600 + minTime.getMinutes() * 60 + minTime.getSeconds();\n  var maxValue = maxTime.getHours() * 3600 + maxTime.getMinutes() * 60 + maxTime.getSeconds();\n  return minValue > maxValue;\n};\n\nvar calcTime = function calcTime(time) {\n  time = Array.isArray(time) ? time : [time];\n  var minTime = time[0] || new Date();\n  var date = new Date();\n  date.setHours(date.getHours() + 1);\n  var maxTime = time[1] || date;\n  if (minTime > maxTime) return calcTime();\n  return {\n    minTime: minTime,\n    maxTime: maxTime\n  };\n};\n\nvar mapPropsToState = function mapPropsToState(props) {\n  var currentDates = props.currentDates,\n      format = props.format;\n\n  var _calcTime = calcTime(currentDates),\n      minTime = _calcTime.minTime,\n      maxTime = _calcTime.maxTime;\n\n  var state = {\n    format: format || 'HH:mm:ss',\n    minTime: minTime,\n    maxTime: maxTime,\n    minSelectableRange: [[MIN_TIME, maxTime]],\n    maxSelectableRange: [[minTime, MAX_TIME]],\n    btnDisabled: isDisabled(minTime, maxTime)\n  };\n  state.isShowSeconds = (state.format || '').indexOf('ss') !== -1;\n  return state;\n};\n\nvar TimeRangePanel = function (_PopperBase) {\n  (0, _inherits3.default)(TimeRangePanel, _PopperBase);\n  (0, _createClass3.default)(TimeRangePanel, null, [{\n    key: 'propTypes',\n    get: function get() {\n      return Object.assign({\n        pickerWidth: _libs.PropTypes.number,\n        currentDates: _libs.PropTypes.arrayOf(_libs.PropTypes.instanceOf(Date)),\n\n        /*\n        onPicked: (value, isKeepPannelOpen)=>()\n         @param value: Date| Date[] |null\n        @param isKeepPannelOpen:boolean, should parent close the pannel\n        */\n        onPicked: _libs.PropTypes.func.isRequired,\n        // cancel btn is clicked\n        //()=>()\n        onCancel: _libs.PropTypes.func.isRequired,\n        // (start, end)=>(), index range indicate which field [hours, minutes, seconds] changes\n        onSelectRangeChange: _TimeSpinner2.default.propTypes.onSelectRangeChange\n      }, _PopperBase2.PopperBase.propTypes);\n    }\n  }, {\n    key: 'defaultProps',\n    get: function get() {\n      return {\n        popperMixinOption: {}\n      };\n    }\n  }]);\n\n  function TimeRangePanel(props) {\n    (0, _classCallCheck3.default)(this, TimeRangePanel);\n\n    var _this = (0, _possibleConstructorReturn3.default)(this, (TimeRangePanel.__proto__ || Object.getPrototypeOf(TimeRangePanel)).call(this, props));\n\n    _this.state = Object.assign({\n      visible: false,\n      width: 0\n    }, mapPropsToState(props));\n    return _this;\n  }\n\n  (0, _createClass3.default)(TimeRangePanel, [{\n    key: 'componentWillReceiveProps',\n    value: function componentWillReceiveProps(nextProps) {\n      this.setState(mapPropsToState(nextProps));\n    } // type = hours | minutes | seconds\n    // date: {type: number}\n\n  }, {\n    key: 'handleChange',\n    value: function handleChange(date, field) {\n      var ndate = this.state[field];\n\n      if (date.hours !== undefined) {\n        ndate.setHours(date.hours);\n      }\n\n      if (date.minutes !== undefined) {\n        ndate.setMinutes(date.minutes);\n      }\n\n      if (date.seconds !== undefined) {\n        ndate.setSeconds(date.seconds);\n      }\n\n      var state = (0, _defineProperty3.default)({}, field, ndate);\n      var _state2 = this.state,\n          minTime = _state2.minTime,\n          maxTime = _state2.maxTime;\n      state.minSelectableRange = [[MIN_TIME, maxTime]];\n      state.maxSelectableRange = [[minTime, MAX_TIME]];\n      state.minTime = (0, _utils.limitRange)(minTime, state.minSelectableRange);\n      state.maxTime = (0, _utils.limitRange)(maxTime, state.maxSelectableRange);\n      this.setState(state);\n      this.handleConfirm(true);\n    }\n  }, {\n    key: 'handleConfirm',\n    value: function handleConfirm() {\n      var isKeepPannelOpen = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      var _state3 = this.state,\n          minTime = _state3.minTime,\n          maxTime = _state3.maxTime;\n      var onPicked = this.props.onPicked;\n      onPicked([minTime, maxTime], isKeepPannelOpen);\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this2 = this;\n\n      var _state4 = this.state,\n          isShowSeconds = _state4.isShowSeconds,\n          minTime = _state4.minTime,\n          maxTime = _state4.maxTime,\n          btnDisabled = _state4.btnDisabled,\n          minSelectableRange = _state4.minSelectableRange,\n          maxSelectableRange = _state4.maxSelectableRange;\n      var _onSelectRangeChange = this.props.onSelectRangeChange;\n      var $t = _locale2.default.t;\n      var maxHours = maxTime.getHours();\n      var maxMinutes = maxTime.getMinutes();\n      var maxSeconds = maxTime.getSeconds();\n      var minHours = minTime.getHours();\n      var minMinutes = minTime.getMinutes();\n      var minSeconds = minTime.getSeconds();\n      return _react2.default.createElement('div', {\n        ref: 'root',\n        className: 'el-time-range-picker el-picker-panel',\n        style: {\n          minWidth: '330px'\n        }\n      }, _react2.default.createElement('div', {\n        className: 'el-time-range-picker__content'\n      }, _react2.default.createElement('div', {\n        className: 'el-time-range-picker__cell'\n      }, _react2.default.createElement('div', {\n        className: 'el-time-range-picker__header'\n      }, $t('el.datepicker.startTime')), _react2.default.createElement('div', {\n        className: this.classNames('el-time-range-picker__body el-time-panel__content', {\n          'has-seconds': isShowSeconds\n        })\n      }, _react2.default.createElement(_TimeSpinner2.default, {\n        ref: 'minSpinner',\n        onChange: function onChange(date) {\n          return _this2.handleChange(date, 'minTime');\n        },\n        isShowSeconds: isShowSeconds,\n        hours: minHours,\n        minutes: minMinutes,\n        seconds: minSeconds,\n        selectableRange: minSelectableRange,\n        onSelectRangeChange: _onSelectRangeChange\n      }))), _react2.default.createElement('div', {\n        className: 'el-time-range-picker__cell'\n      }, _react2.default.createElement('div', {\n        className: 'el-time-range-picker__header'\n      }, $t('el.datepicker.endTime')), _react2.default.createElement('div', {\n        className: this.classNames('el-time-range-picker__body el-time-panel__content', {\n          'has-seconds': isShowSeconds\n        })\n      }, _react2.default.createElement(_TimeSpinner2.default, {\n        ref: 'maxSpinner',\n        onChange: function onChange(date) {\n          return _this2.handleChange(date, 'maxTime');\n        },\n        isShowSeconds: isShowSeconds,\n        hours: maxHours,\n        minutes: maxMinutes,\n        seconds: maxSeconds,\n        selectableRange: maxSelectableRange,\n        onSelectRangeChange: function onSelectRangeChange(start, end) {\n          return _onSelectRangeChange(start + 11, end + 11);\n        }\n      })))), _react2.default.createElement('div', {\n        className: 'el-time-panel__footer'\n      }, _react2.default.createElement('button', {\n        type: 'button',\n        className: 'el-time-panel__btn cancel',\n        onClick: function onClick() {\n          return _this2.props.onCancel();\n        }\n      }, $t('el.datepicker.cancel')), _react2.default.createElement('button', {\n        type: 'button',\n        className: 'el-time-panel__btn confirm',\n        onClick: function onClick() {\n          return _this2.handleConfirm();\n        },\n        disabled: btnDisabled\n      }, $t('el.datepicker.confirm'))));\n    }\n  }]);\n  return TimeRangePanel;\n}(_PopperBase2.PopperBase);\n\nvar _default = TimeRangePanel;\nexports.default = _default;\n;\n\nvar _temp = function () {\n  if (typeof __REACT_HOT_LOADER__ === 'undefined') {\n    return;\n  }\n\n  __REACT_HOT_LOADER__.register(MIN_TIME, 'MIN_TIME', 'src/date-picker/panel/TimeRangePanel.jsx');\n\n  __REACT_HOT_LOADER__.register(MAX_TIME, 'MAX_TIME', 'src/date-picker/panel/TimeRangePanel.jsx');\n\n  __REACT_HOT_LOADER__.register(isDisabled, 'isDisabled', 'src/date-picker/panel/TimeRangePanel.jsx');\n\n  __REACT_HOT_LOADER__.register(calcTime, 'calcTime', 'src/date-picker/panel/TimeRangePanel.jsx');\n\n  __REACT_HOT_LOADER__.register(mapPropsToState, 'mapPropsToState', 'src/date-picker/panel/TimeRangePanel.jsx');\n\n  __REACT_HOT_LOADER__.register(TimeRangePanel, 'TimeRangePanel', 'src/date-picker/panel/TimeRangePanel.jsx');\n\n  __REACT_HOT_LOADER__.register(_default, 'default', 'src/date-picker/panel/TimeRangePanel.jsx');\n}();\n\n;","map":null,"metadata":{},"sourceType":"script"}