{"ast":null,"code":"//This code is adapted from https://github.com/makercam/makercam/blob/master/src/clipperOffset.ts\nimport ClipperLib from 'js-clipper';\nimport * as maker from 'makerjs';\nvar EndTypes = {\n  etOpenSquare: 0,\n  etOpenRound: 1,\n  etOpenButt: 2,\n  etClosedPolygon: 3,\n  etClosedLine: 4\n};\nvar JoinTypes = [ClipperLib.JoinType.jtSquare, ClipperLib.JoinType.jtRound, ClipperLib.JoinType.jtMiter];\nexport default function clipperOffset(modelToOutline, offset) {\n  var joints = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  var tolerance = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0.1;\n  var scale = 1000;\n  var chains = maker.model.findChains(modelToOutline);\n  var models = chains.reduce(function (memo, chain, i) {\n    var divisions = Math.floor(chain.pathLength / tolerance);\n    var spacing = chain.pathLength / divisions;\n    var keyPoints = maker.chain.toKeyPoints(chain, spacing);\n\n    if (chain.endless) {\n      keyPoints.push(keyPoints[0]);\n    }\n\n    var paths = [keyPoints.map(function (point) {\n      return {\n        X: Math.round(point[0] * scale),\n        Y: Math.round(point[1] * scale)\n      };\n    })];\n    var co = new ClipperLib.ClipperOffset();\n    var offsetted = new ClipperLib.Paths();\n    co.Clear();\n    co.AddPaths(paths, JoinTypes[joints], chain.endless ? EndTypes.etClosedLine : EndTypes.etOpenButt);\n    co.MiterLimit = 2;\n    co.ArcTolerance = 0.25;\n    co.Execute(offsetted, offset * scale);\n    offsetted.forEach(function (points, j) {\n      if (points.length === 0) return;\n      var result = [];\n      points.forEach(function (point) {\n        result.push([point.X / scale, point.Y / scale]);\n      });\n      var newModel = new maker.models.ConnectTheDots(chain.endless, result);\n      memo[i + '_' + j] = newModel;\n    });\n    return memo;\n  }, {});\n  return {\n    models: models\n  };\n}","map":{"version":3,"sources":["/Users/leomcelroy/Desktop/barkbeetle_js/src/toolpaths/clipperOffset.js"],"names":["ClipperLib","maker","EndTypes","etOpenSquare","etOpenRound","etOpenButt","etClosedPolygon","etClosedLine","JoinTypes","JoinType","jtSquare","jtRound","jtMiter","clipperOffset","modelToOutline","offset","joints","tolerance","scale","chains","model","findChains","models","reduce","memo","chain","i","divisions","Math","floor","pathLength","spacing","keyPoints","toKeyPoints","endless","push","paths","map","point","X","round","Y","co","ClipperOffset","offsetted","Paths","Clear","AddPaths","MiterLimit","ArcTolerance","Execute","forEach","points","j","length","result","newModel","ConnectTheDots"],"mappings":"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","sourcesContent":["//This code is adapted from https://github.com/makercam/makercam/blob/master/src/clipperOffset.ts\n\nimport ClipperLib from 'js-clipper';\nimport * as maker from 'makerjs';\n\nconst EndTypes = {\n    etOpenSquare: 0,\n    etOpenRound: 1,\n    etOpenButt: 2,\n    etClosedPolygon: 3,\n    etClosedLine: 4\n};\n\nconst JoinTypes = [\n    ClipperLib.JoinType.jtSquare,\n    ClipperLib.JoinType.jtRound,\n    ClipperLib.JoinType.jtMiter\n]\n\nexport default function clipperOffset(modelToOutline, offset, joints = 0, tolerance = 0.1) {\n    const scale = 1000\n    const chains = maker.model.findChains(modelToOutline);\n    const models = chains.reduce((memo, chain, i) => {\n        const divisions = Math.floor(chain.pathLength / tolerance);\n        const spacing = chain.pathLength / divisions;\n        const keyPoints = maker.chain.toKeyPoints(chain, spacing);\n        if (chain.endless) {\n            keyPoints.push(keyPoints[0])\n        }\n        let paths = [\n            keyPoints.map((point: any) =>\n                ({\n                    X: Math.round(point[0] * scale),\n                    Y: Math.round(point[1] * scale)\n                })\n            )\n        ]\n        const co = new ClipperLib.ClipperOffset()\n        const offsetted = new ClipperLib.Paths()\n        co.Clear()\n        co.AddPaths(paths, JoinTypes[joints], chain.endless ? EndTypes.etClosedLine : EndTypes.etOpenButt)\n        co.MiterLimit = 2\n        co.ArcTolerance = 0.25\n        co.Execute(offsetted, offset * scale);\n        offsetted.forEach((points: any, j: number) => {\n            if (points.length === 0) return\n            let result = []\n            points.forEach((point: any) => {\n                result.push([point.X / scale, point.Y / scale])\n            })\n            const newModel = new maker.models.ConnectTheDots(chain.endless, result)\n\n            memo[i+'_'+j] = newModel\n        })\n        return memo\n    }, {})\n    return {\n        models\n    }\n}\n"]},"metadata":{},"sourceType":"module"}