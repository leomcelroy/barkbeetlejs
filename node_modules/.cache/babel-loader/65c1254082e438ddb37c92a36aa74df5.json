{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport VirtualList from 'react-tiny-virtual-list';\nimport debounce from 'lodash.debounce';\nimport { Pane } from '../../layers';\n\nvar TableVirtualBody =\n/*#__PURE__*/\nfunction (_PureComponent) {\n  _inherits(TableVirtualBody, _PureComponent);\n\n  _createClass(TableVirtualBody, null, [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(props, state) {\n      if (props.height !== state.calculatedHeight) {\n        return {\n          isIntegerHeight: Number.isInteger(props.height)\n        };\n      } // Return null to indicate no change to state.\n\n\n      return null;\n    }\n  }]);\n\n  function TableVirtualBody(props) {\n    var _this;\n\n    _classCallCheck(this, TableVirtualBody);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(TableVirtualBody).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"state\", {\n      isIntegerHeight: false,\n      calculatedHeight: 0\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"initializeHelpers\", function () {\n      _this.autoHeights = [];\n      _this.autoHeightRefs = [];\n      _this.averageAutoHeight = _this.props.defaultHeight;\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"processAutoHeights\", function () {\n      var isUpdated = false; // This will determine the averageAutoHeight.\n\n      var total = 0;\n      var totalAmount = 0; // Loop through all of the refs that have height=\"auto\".\n\n      _this.autoHeightRefs.forEach(function (ref, index) {\n        // If the height is already calculated, skip it,\n        // but calculate the height for the total.\n        if (_this.autoHeights[index]) {\n          total += _this.autoHeights[index];\n          totalAmount += 1;\n          return;\n        } // Make sure the ref has a child\n\n\n        if (ref && ref.childNodes && ref.childNodes[0] && Number.isInteger(ref.childNodes[0].offsetHeight)) {\n          var height = ref.childNodes[0].offsetHeight; // Add to the total to calculate the averageAutoHeight.\n\n          total += height;\n          totalAmount += 1; // Cache the height.\n\n          _this.autoHeights[index] = height; // Set the update flag to true.\n\n          isUpdated = true;\n        }\n      }); // Save the average height.\n\n\n      _this.averageAutoHeight = total / totalAmount; // There are some new heights detected that had previously not been calculated.\n      // Call forceUpdate to make sure the virtual list renders again.\n\n      if (isUpdated) _this.forceUpdate();\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"onRef\", function (ref) {\n      _this.paneRef = ref;\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"onVirtualHelperRef\", function (index, ref) {\n      _this.autoHeightRefs[index] = ref;\n      requestAnimationFrame(function () {\n        _this.processAutoHeights();\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"onResize\", function () {\n      _this.updateOnResize();\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"updateOnResize\", function () {\n      _this.initializeHelpers(); // Simply return when we now the height of the pane is fixed.\n\n\n      if (_this.state.isIntegerHeight) return; // Return if we are in a weird edge case in which the ref is no longer valid.\n\n      if (_this.paneRef) {\n        var calculatedHeight = _this.paneRef.offsetHeight;\n\n        if (calculatedHeight > 0) {\n          // Save the calculated height which is needed for the VirtualList.\n          _this.setState({\n            calculatedHeight: calculatedHeight\n          }); // Prevent updateOnResize being called recursively when there is a valid height.\n\n\n          return;\n        }\n      } // When height is still 0 (or paneRef is not valid) try recursively until success.\n\n\n      requestAnimationFrame(function () {\n        _this.updateOnResize();\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"getItemSize\", function (children) {\n      var _this$props = _this.props,\n          allowAutoHeight = _this$props.allowAutoHeight,\n          useAverageAutoHeightEstimation = _this$props.useAverageAutoHeightEstimation,\n          defaultHeight = _this$props.defaultHeight; // Prefer to return a array of all heights.\n\n      if (!allowAutoHeight) {\n        return children.map(function (child) {\n          if (!React.isValidElement(child)) return defaultHeight;\n          var height = child.props.height;\n\n          if (Number.isInteger(height)) {\n            return height;\n          }\n\n          return defaultHeight;\n        });\n      } // If allowAutoHeight is true, return a function instead.\n\n\n      var itemSizeFn = function itemSizeFn(index) {\n        if (!React.isValidElement(children[index])) return defaultHeight;\n        var height = children[index].props.height; // When the height is number simply, simply return it.\n\n        if (Number.isInteger(height)) {\n          return height;\n        } // When allowAutoHeight is set and  the height is set to \"auto\"...\n\n\n        if (allowAutoHeight && children[index].props.height === 'auto') {\n          // ... and the height is calculated, return the calculated height.\n          if (_this.autoHeights[index]) return _this.autoHeights[index]; // ... if the height is not yet calculated, return the averge\n\n          if (useAverageAutoHeightEstimation) return _this.averageAutoHeight;\n        } // Return the default height.\n\n\n        return defaultHeight;\n      };\n\n      return itemSizeFn;\n    });\n\n    _this.initializeHelpers(); // Add a onResize.\n\n\n    _this.onResize = debounce(_this.onResize, 200);\n    return _this;\n  }\n\n  _createClass(TableVirtualBody, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      // Call this to initialize and set\n      this.updateOnResize();\n      window.addEventListener('resize', this.onResize, false);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      window.removeEventListener('resize', this.onResize);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props2 = this.props,\n          inputChildren = _this$props2.children,\n          paneHeight = _this$props2.height,\n          defaultHeight = _this$props2.defaultHeight,\n          allowAutoHeight = _this$props2.allowAutoHeight,\n          overscanCount = _this$props2.overscanCount,\n          estimatedItemSize = _this$props2.estimatedItemSize,\n          useAverageAutoHeightEstimation = _this$props2.useAverageAutoHeightEstimation,\n          scrollToIndex = _this$props2.scrollToIndex,\n          scrollOffset = _this$props2.scrollOffset,\n          scrollToAlignment = _this$props2.scrollToAlignment,\n          props = _objectWithoutProperties(_this$props2, [\"children\", \"height\", \"defaultHeight\", \"allowAutoHeight\", \"overscanCount\", \"estimatedItemSize\", \"useAverageAutoHeightEstimation\", \"scrollToIndex\", \"scrollOffset\", \"scrollToAlignment\"]); // Children always needs to be an array.\n\n\n      var children = Array.isArray(inputChildren) ? inputChildren : React.Children.toArray(inputChildren);\n      var itemSize = this.getItemSize(children); // VirtualList needs a fixed height.\n\n      var _this$state = this.state,\n          calculatedHeight = _this$state.calculatedHeight,\n          isIntegerHeight = _this$state.isIntegerHeight;\n      return React.createElement(Pane, _extends({\n        \"data-evergreen-table-body\": true,\n        innerRef: this.onRef,\n        height: paneHeight,\n        flex: \"1\",\n        overflow: \"hidden\"\n      }, props), React.createElement(VirtualList, {\n        height: isIntegerHeight ? paneHeight : calculatedHeight,\n        width: \"100%\",\n        estimatedItemSize: allowAutoHeight && useAverageAutoHeightEstimation ? this.averageAutoHeight : estimatedItemSize || null,\n        itemSize: itemSize,\n        overscanCount: overscanCount,\n        itemCount: React.Children.count(children),\n        scrollToIndex: scrollToIndex,\n        scrollOffset: scrollOffset,\n        scrollToAlignment: scrollToAlignment,\n        renderItem: function renderItem(_ref) {\n          var index = _ref.index,\n              style = _ref.style; // If some children are strings by accident, support this gracefully.\n\n          if (!React.isValidElement(children[index])) {\n            if (typeof children[index] === 'string') {\n              return React.createElement(\"div\", {\n                style: style\n              }, children[index]);\n            }\n\n            return React.createElement(\"div\", {\n              style: style\n            }, \"\\xA0\");\n          } // When allowing height=\"auto\" for rows, and a auto height item is\n          // rendered for the first time...\n\n\n          if (allowAutoHeight && React.isValidElement(children[index]) && children[index].props.height === 'auto' && // ... and only when the height is not already been calculated.\n          !_this2.autoHeights[index]) {\n            // ... render the item in a helper div, the ref is used to calculate\n            // the height of its children.\n            return React.createElement(\"div\", {\n              ref: function ref(_ref2) {\n                return _this2.onVirtualHelperRef(index, _ref2);\n              },\n              \"data-virtual-index\": index,\n              style: _objectSpread({\n                opacity: 0\n              }, style)\n            }, children[index]);\n          } // When allowAutoHeight is false, or when the height is known.\n          // Simply render the item.\n\n\n          return React.cloneElement(children[index], {\n            style: style\n          });\n        }\n      }));\n    }\n  }]);\n\n  return TableVirtualBody;\n}(PureComponent);\n\nTableVirtualBody.displayName = \"TableVirtualBody\";\n\n_defineProperty(TableVirtualBody, \"propTypes\", _objectSpread({}, Pane.propTypes, {\n  /**\n   * Children needs to be an array of a single node.\n   */\n  children: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.node), PropTypes.node]),\n\n  /**\n   * Default height of each row.\n   * 48 is the default height of a TableRow.\n   */\n  defaultHeight: PropTypes.number,\n\n  /**\n   * When true, support `height=\"auto\"` on children being rendered.\n   * This is somewhat of an expirmental feature.\n   */\n  allowAutoHeight: PropTypes.bool,\n\n  /**\n   * The overscanCount property passed to react-tiny-virtual-list.\n   */\n  overscanCount: PropTypes.number.isRequired,\n\n  /**\n   * When passed, this is used as the `estimatedItemSize` in react-tiny-virtual-list.\n   * Only when `allowAutoHeight` and`useAverageAutoHeightEstimation` are false.\n   */\n  estimatedItemSize: PropTypes.number,\n\n  /**\n   * When allowAutoHeight is true and this prop is true, the estimated height\n   * will be computed based on the average height of auto height rows.\n   */\n  useAverageAutoHeightEstimation: PropTypes.bool,\n\n  /**\n   * The scrollToIndex property passed to react-tiny-virtual-list\n   */\n  scrollToIndex: PropTypes.number,\n\n  /**\n   * The scrollOffset property passed to react-tiny-virtual-list\n   */\n  scrollOffset: PropTypes.number,\n\n  /**\n   * The scrollToAlignment property passed to react-tiny-virtual-list\n   */\n  scrollToAlignment: PropTypes.oneOf(['start', 'center', 'end', 'auto'])\n}));\n\n_defineProperty(TableVirtualBody, \"defaultProps\", {\n  defaultHeight: 48,\n  allowAutoHeight: false,\n  overscanCount: 5,\n  useAverageAutoHeightEstimation: true\n});\n\nexport { TableVirtualBody as default };","map":null,"metadata":{},"sourceType":"module"}