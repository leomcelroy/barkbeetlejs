{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _inheritsLoose from \"@babel/runtime/helpers/inheritsLoose\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { constants } from 'focus-lock';\nimport FocusTrap, { onBlur, onFocus } from './Trap';\n\nvar RenderChildren = function RenderChildren(_ref) {\n  var children = _ref.children;\n  return React.createElement(\"div\", null, children);\n};\n\nRenderChildren.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  children: PropTypes.node.isRequired\n} : {};\nvar Fragment = React.Fragment ? React.Fragment : RenderChildren;\nvar hidden = {\n  width: '1px',\n  height: '0px',\n  padding: 0,\n  overflow: 'hidden',\n  position: 'fixed',\n  top: '1px',\n  left: '1px'\n};\n\nvar FocusLock =\n/*#__PURE__*/\nfunction (_Component) {\n  _inheritsLoose(FocusLock, _Component);\n\n  function FocusLock() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _Component.call.apply(_Component, [this].concat(args)) || this;\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"state\", {\n      observed: undefined\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"onActivation\", function () {\n      _this.originalFocusedElement = _this.originalFocusedElement || document && document.activeElement;\n\n      if (_this.state.observed && _this.props.onActivation) {\n        _this.props.onActivation(_this.state.observed);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"onDeactivation\", function () {\n      if (_this.props.returnFocus && _this.originalFocusedElement && _this.originalFocusedElement.focus) {\n        _this.originalFocusedElement.focus();\n\n        _this.originalFocusedElement = null;\n      }\n\n      if (_this.props.onDeactivation) {\n        _this.props.onDeactivation(_this.state.observed);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"setObserveNode\", function (observed) {\n      return _this.setState({\n        observed: observed\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"update\", function () {\n      return _this.setState(function (prevState) {\n        return {\n          escapeAttempts: prevState.escapeAttempts + 1\n        };\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"originalFocusedElement\", null);\n\n    return _this;\n  }\n\n  var _proto = FocusLock.prototype;\n\n  _proto.render = function render() {\n    var _extends2;\n\n    var _this$props = this.props,\n        children = _this$props.children,\n        disabled = _this$props.disabled,\n        noFocusGuards = _this$props.noFocusGuards,\n        persistentFocus = _this$props.persistentFocus,\n        autoFocus = _this$props.autoFocus,\n        allowTextSelection = _this$props.allowTextSelection,\n        group = _this$props.group,\n        className = _this$props.className,\n        whiteList = _this$props.whiteList,\n        _this$props$as = _this$props.as,\n        Container = _this$props$as === void 0 ? 'div' : _this$props$as,\n        _this$props$lockProps = _this$props.lockProps,\n        containerProps = _this$props$lockProps === void 0 ? {} : _this$props$lockProps;\n    var observed = this.state.observed;\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (typeof allowTextSelection !== 'undefined') {\n        // eslint-disable-next-line no-console\n        console.warn('React-Focus-Lock: allowTextSelection is deprecated and enabled by default');\n      }\n    }\n\n    var lockProps = _extends((_extends2 = {}, _extends2[constants.FOCUS_DISABLED] = disabled && 'disabled', _extends2[constants.FOCUS_GROUP] = group, _extends2), containerProps);\n\n    return React.createElement(Fragment, null, !noFocusGuards && [React.createElement(\"div\", {\n      key: \"guard-first\",\n      \"data-focus-guard\": true,\n      tabIndex: disabled ? -1 : 0,\n      style: hidden\n    }), // nearest focus guard\n    React.createElement(\"div\", {\n      key: \"guard-nearest\",\n      \"data-focus-guard\": true,\n      tabIndex: disabled ? -1 : 1,\n      style: hidden\n    })], React.createElement(Container, _extends({\n      ref: this.setObserveNode\n    }, lockProps, {\n      className: className,\n      onBlur: onBlur,\n      onFocus: onFocus\n    }), React.createElement(FocusTrap, {\n      observed: observed,\n      disabled: disabled,\n      persistentFocus: persistentFocus,\n      autoFocus: autoFocus,\n      whiteList: whiteList,\n      onActivation: this.onActivation,\n      onDeactivation: this.onDeactivation\n    }), children), !noFocusGuards && React.createElement(\"div\", {\n      \"data-focus-guard\": true,\n      tabIndex: disabled ? -1 : 0,\n      style: hidden\n    }));\n  };\n\n  return FocusLock;\n}(Component);\n\nFocusLock.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  children: PropTypes.node.isRequired,\n  disabled: PropTypes.bool,\n  returnFocus: PropTypes.bool,\n  noFocusGuards: PropTypes.bool,\n  allowTextSelection: PropTypes.bool,\n  autoFocus: PropTypes.bool,\n  persistentFocus: PropTypes.bool,\n  group: PropTypes.string,\n  className: PropTypes.string,\n  whiteList: PropTypes.func,\n  as: PropTypes.oneOfType([PropTypes.string, PropTypes.func, PropTypes.object]),\n  lockProps: PropTypes.object,\n  onActivation: PropTypes.func,\n  onDeactivation: PropTypes.func\n} : {};\nFocusLock.defaultProps = {\n  disabled: false,\n  returnFocus: false,\n  noFocusGuards: false,\n  autoFocus: true,\n  persistentFocus: false,\n  allowTextSelection: undefined,\n  group: undefined,\n  className: undefined,\n  whiteList: undefined,\n  as: 'div',\n  lockProps: {},\n  onActivation: undefined,\n  onDeactivation: undefined\n};\nexport default FocusLock;","map":null,"metadata":{},"sourceType":"module"}