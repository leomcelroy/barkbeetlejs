{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _reactDom = require('react-dom');\n\nvar _reactDom2 = _interopRequireDefault(_reactDom);\n\nvar _reactClickOutside = require('react-click-outside');\n\nvar _reactClickOutside2 = _interopRequireDefault(_reactClickOutside);\n\nvar _libs = require('../../libs');\n\nvar _input = require('../input');\n\nvar _input2 = _interopRequireDefault(_input);\n\nvar _Suggestions = require('./Suggestions');\n\nvar _Suggestions2 = _interopRequireDefault(_Suggestions);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar AutoComplete = function (_Component) {\n  (0, _inherits3.default)(AutoComplete, _Component);\n\n  function AutoComplete(props) {\n    (0, _classCallCheck3.default)(this, AutoComplete);\n\n    var _this = (0, _possibleConstructorReturn3.default)(this, (AutoComplete.__proto__ || Object.getPrototypeOf(AutoComplete)).call(this, props));\n\n    _this.state = {\n      inputValue: props.value,\n      isFocus: false,\n      suggestions: [],\n      loading: false,\n      highlightedIndex: -1\n    };\n    return _this;\n  }\n\n  (0, _createClass3.default)(AutoComplete, [{\n    key: 'getChildContext',\n    value: function getChildContext() {\n      return {\n        component: this\n      };\n    }\n  }, {\n    key: 'componentWillReceiveProps',\n    value: function componentWillReceiveProps(props) {\n      this.setState({\n        inputValue: props.value\n      });\n    }\n  }, {\n    key: 'componentDidUpdate',\n    value: function componentDidUpdate() {\n      var _this2 = this;\n\n      var visible = this.suggestionVisible();\n\n      var reference = _reactDom2.default.findDOMNode(this.inputNode);\n\n      if (reference instanceof HTMLElement) {\n        setTimeout(function () {\n          _this2.suggestionsNode.onVisibleChange(visible, reference.offsetWidth);\n        });\n      }\n    }\n  }, {\n    key: 'getData',\n    value: function getData(queryString) {\n      var _this3 = this;\n\n      this.setState({\n        loading: true\n      });\n      this.props.fetchSuggestions(queryString, function (suggestions) {\n        _this3.setState({\n          loading: false\n        });\n\n        if (Array.isArray(suggestions)) {\n          _this3.setState({\n            suggestions: suggestions\n          });\n        }\n      });\n    }\n  }, {\n    key: 'handleChange',\n    value: function handleChange(value) {\n      this.setState({\n        inputValue: value\n      });\n\n      if (!this.props.triggerOnFocus && !value) {\n        this.setState({\n          suggestions: []\n        });\n        return;\n      }\n\n      if (this.props.onChange) {\n        this.props.onChange(value);\n      }\n\n      this.getData(value);\n    }\n  }, {\n    key: 'handleFocus',\n    value: function handleFocus(e) {\n      this.setState({\n        isFocus: true\n      });\n      if (this.props.onFocus) this.props.onFocus(e);\n\n      if (this.props.triggerOnFocus) {\n        this.getData(this.state.inputValue);\n      }\n    }\n  }, {\n    key: 'handleKeyEnter',\n    value: function handleKeyEnter(highlightedIndex) {\n      if (this.suggestionVisible() && highlightedIndex >= 0 && highlightedIndex < this.state.suggestions.length) {\n        this.select(this.state.suggestions[highlightedIndex]);\n      }\n    }\n  }, {\n    key: 'handleClickOutside',\n    value: function handleClickOutside() {\n      if (this.state.isFocus) {\n        this.setState({\n          isFocus: false\n        });\n      }\n    }\n  }, {\n    key: 'select',\n    value: function select(item) {\n      var _this4 = this;\n\n      this.setState({\n        inputValue: item.value\n      }, function () {\n        _this4.setState({\n          suggestions: []\n        });\n      });\n\n      if (this.props.onSelect) {\n        this.props.onSelect(item);\n      }\n    }\n  }, {\n    key: 'highlight',\n    value: function highlight(index) {\n      if (!this.suggestionVisible() || this.state.loading) return;\n      if (index < 0) index = 0;\n\n      if (index >= this.state.suggestions.length) {\n        index = this.state.suggestions.length - 1;\n      }\n\n      var reference = _reactDom2.default.findDOMNode(this.suggestionsNode);\n\n      if (reference instanceof HTMLElement) {\n        var suggestion = document.querySelector('.el-autocomplete-suggestion__wrap');\n        var suggestionList = document.querySelectorAll('.el-autocomplete-suggestion__list li');\n\n        if (suggestion instanceof HTMLElement && suggestionList instanceof NodeList) {\n          var highlightItem = suggestionList[index];\n          var scrollTop = suggestion.scrollTop;\n          var offsetTop = highlightItem.offsetTop;\n\n          if (offsetTop + highlightItem.scrollHeight > scrollTop + suggestion.clientHeight) {\n            suggestion.scrollTop += highlightItem.scrollHeight;\n          }\n\n          if (offsetTop < scrollTop) {\n            suggestion.scrollTop -= highlightItem.scrollHeight;\n          }\n\n          this.setState({\n            highlightedIndex: index\n          });\n        }\n      }\n    }\n    /* Computed Methods */\n\n  }, {\n    key: 'suggestionVisible',\n    value: function suggestionVisible() {\n      var suggestions = this.state.suggestions;\n      var isValidData = Array.isArray(suggestions) && suggestions.length > 0;\n      return (isValidData || this.state.loading) && this.state.isFocus;\n    }\n  }, {\n    key: 'onKeyDown',\n    value: function onKeyDown(e) {\n      var highlightedIndex = this.state.highlightedIndex;\n\n      switch (e.keyCode) {\n        case 13:\n          this.handleKeyEnter(highlightedIndex);\n          break;\n\n        case 38:\n          this.highlight(highlightedIndex - 1);\n          break;\n\n        case 40:\n          this.highlight(highlightedIndex + 1);\n          break;\n\n        default:\n          break;\n      }\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this5 = this;\n\n      var _props = this.props,\n          disabled = _props.disabled,\n          placeholder = _props.placeholder,\n          name = _props.name,\n          size = _props.size,\n          icon = _props.icon,\n          append = _props.append,\n          prepend = _props.prepend,\n          onIconClick = _props.onIconClick,\n          popperClass = _props.popperClass;\n      var _state = this.state,\n          inputValue = _state.inputValue,\n          suggestions = _state.suggestions;\n      return _react2.default.createElement('div', {\n        style: this.style(),\n        className: this.className('el-autocomplete')\n      }, _react2.default.createElement(_input2.default, {\n        ref: function ref(node) {\n          return _this5.inputNode = node;\n        },\n        value: inputValue,\n        disabled: disabled,\n        placeholder: placeholder,\n        name: name,\n        size: size,\n        icon: icon,\n        prepend: prepend,\n        append: append,\n        onIconClick: onIconClick,\n        onChange: this.handleChange.bind(this),\n        onFocus: this.handleFocus.bind(this),\n        onBlur: this.props.onBlur,\n        onKeyDown: this.onKeyDown.bind(this)\n      }), _react2.default.createElement(_Suggestions2.default, {\n        ref: function ref(node) {\n          return _this5.suggestionsNode = node;\n        },\n        className: this.classNames(popperClass),\n        suggestions: suggestions\n      }));\n    }\n  }]);\n  return AutoComplete;\n}(_libs.Component);\n\nAutoComplete.defaultProps = {\n  triggerOnFocus: true\n};\nAutoComplete.childContextTypes = {\n  component: _libs.PropTypes.any\n};\n\nvar _default = (0, _reactClickOutside2.default)(AutoComplete);\n\nexports.default = _default;\n;\n\nvar _temp = function () {\n  if (typeof __REACT_HOT_LOADER__ === 'undefined') {\n    return;\n  }\n\n  __REACT_HOT_LOADER__.register(AutoComplete, 'AutoComplete', 'src/auto-complete/AutoComplete.jsx');\n\n  __REACT_HOT_LOADER__.register(_default, 'default', 'src/auto-complete/AutoComplete.jsx');\n}();\n\n;","map":null,"metadata":{},"sourceType":"script"}