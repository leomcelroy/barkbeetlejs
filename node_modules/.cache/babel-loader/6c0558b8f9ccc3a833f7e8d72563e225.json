{"ast":null,"code":"import _toConsumableArray from \"/Users/leomcelroy/Desktop/barkBeetleEverything/barkbeetle_js_real/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\n// makerjs model, params -> profile toolpath\nimport * as params from '../parameters.js';\nimport * as mjs from 'makerjs';\nconsole.log(params.depthOfPasses);\n\nvar profile = function profile(model) {\n  //let p = model.models.profile;\n  var p = model;\n  var outline = mjs.model.outline(p, params.compensatedRadius, 1, false); //third parameter is what type of corners, 0 (rounded) by default\n  //let chains = mjs.model.findChains(expansion);\n\n  var chain = mjs.model.findSingleChain(outline); // console.log(\"outline\", outline, \"chain\", chain);\n\n  var divisions = Math.floor(chain.pathLength / params.minimumSpacing);\n  var spacing = chain.pathLength / divisions;\n  var keyPoints = mjs.chain.toPoints(chain, spacing); // let scaleFactor = 10;\n  // let scaleXY = keyPoints.map(p => [p[0] * scaleFactor, p[1] * scaleFactor]);\n\n  var gcodePoints = keyPoints.map(function (p) {\n    return \"G1 X\".concat(p[0], \" Y\").concat(p[1], \" F\").concat(params.feedRate);\n  });\n  var gcode = JSON.parse(JSON.stringify(gcodePoints));\n  var firstPoint = keyPoints[0];\n  var paths = params.depthOfPasses.map(function (p, i) {\n    return [\"G1 Z\".concat(params.depthOfPasses[i], \" F12.0\")].concat(_toConsumableArray(gcode), [\"G1 X\".concat(firstPoint[0], \" Y\").concat(firstPoint[1], \" F\").concat(params.feedRate)]);\n  });\n  paths = paths.flat(1);\n  gcode = [params.units, //units\n  \"G90\", \"G1 Z\".concat(params.jogHeight, \" F9.0\"), \"G0 X\".concat(firstPoint[0], \" Y\").concat(firstPoint[1])].concat(_toConsumableArray(paths)); // write to a new file named\n\n  var filename = 'testGcodeProfile.nc';\n  var text = gcode.join('\\n'); // console.log(\"profile\", outline)\n\n  return {\n    drawing: outline,\n    gcode: text,\n    filename: filename\n  };\n};\n\nexport { profile };","map":{"version":3,"sources":["/Users/leomcelroy/Desktop/barkBeetleEverything/barkbeetle_js_real/src/toolpaths/profile.js"],"names":["params","mjs","console","log","depthOfPasses","profile","model","p","outline","compensatedRadius","chain","findSingleChain","divisions","Math","floor","pathLength","minimumSpacing","spacing","keyPoints","toPoints","gcodePoints","map","feedRate","gcode","JSON","parse","stringify","firstPoint","paths","i","flat","units","jogHeight","filename","text","join","drawing"],"mappings":";AAAA;AAEA,OAAO,KAAKA,MAAZ,MAAwB,kBAAxB;AACA,OAAO,KAAKC,GAAZ,MAAqB,SAArB;AAEAC,OAAO,CAACC,GAAR,CAAYH,MAAM,CAACI,aAAnB;;AAEA,IAAMC,OAAO,GAAG,SAAVA,OAAU,CAACC,KAAD,EAAW;AACzB;AACA,MAAIC,CAAC,GAAGD,KAAR;AAEA,MAAIE,OAAO,GAAGP,GAAG,CAACK,KAAJ,CAAUE,OAAV,CAAkBD,CAAlB,EAAqBP,MAAM,CAACS,iBAA5B,EAA+C,CAA/C,EAAkD,KAAlD,CAAd,CAJyB,CAI+C;AACxE;;AACA,MAAIC,KAAK,GAAGT,GAAG,CAACK,KAAJ,CAAUK,eAAV,CAA0BH,OAA1B,CAAZ,CANyB,CAQzB;;AAEA,MAAII,SAAS,GAAGC,IAAI,CAACC,KAAL,CAAWJ,KAAK,CAACK,UAAN,GAAmBf,MAAM,CAACgB,cAArC,CAAhB;AACA,MAAIC,OAAO,GAAGP,KAAK,CAACK,UAAN,GAAmBH,SAAjC;AAEA,MAAIM,SAAS,GAAGjB,GAAG,CAACS,KAAJ,CAAUS,QAAV,CAAmBT,KAAnB,EAA0BO,OAA1B,CAAhB,CAbyB,CAezB;AACA;;AAEA,MAAIG,WAAW,GAAGF,SAAS,CAACG,GAAV,CAAc,UAAAd,CAAC;AAAA,yBAAWA,CAAC,CAAC,CAAD,CAAZ,eAAoBA,CAAC,CAAC,CAAD,CAArB,eAA6BP,MAAM,CAACsB,QAApC;AAAA,GAAf,CAAlB;AACA,MAAIC,KAAK,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAeN,WAAf,CAAX,CAAZ;AAEA,MAAIO,UAAU,GAAGT,SAAS,CAAC,CAAD,CAA1B;AAEA,MAAIU,KAAK,GAAG5B,MAAM,CAACI,aAAP,CAAqBiB,GAArB,CAAyB,UAACd,CAAD,EAAGsB,CAAH;AAAA,0BAAiB7B,MAAM,CAACI,aAAP,CAAqByB,CAArB,CAAjB,uCAAqDN,KAArD,kBAAmEI,UAAU,CAAC,CAAD,CAA7E,eAAqFA,UAAU,CAAC,CAAD,CAA/F,eAAuG3B,MAAM,CAACsB,QAA9G;AAAA,GAAzB,CAAZ;AACAM,EAAAA,KAAK,GAAGA,KAAK,CAACE,IAAN,CAAW,CAAX,CAAR;AAEAP,EAAAA,KAAK,IACHvB,MAAM,CAAC+B,KADJ,EACW;AACd,OAFG,gBAGI/B,MAAM,CAACgC,SAHX,0BAIIL,UAAU,CAAC,CAAD,CAJd,eAIsBA,UAAU,CAAC,CAAD,CAJhC,6BAKAC,KALA,EAAL,CA1ByB,CAkCzB;;AACA,MAAIK,QAAQ,GAAG,qBAAf;AAEA,MAAIC,IAAI,GAAGX,KAAK,CAACY,IAAN,CAAW,IAAX,CAAX,CArCyB,CAuCzB;;AAEA,SAAO;AAACC,IAAAA,OAAO,EAAE5B,OAAV;AAAmBe,IAAAA,KAAK,EAAEW,IAA1B;AAAgCD,IAAAA,QAAQ,EAARA;AAAhC,GAAP;AACD,CA1CD;;AA6CA,SAAQ5B,OAAR","sourcesContent":["// makerjs model, params -> profile toolpath\n\nimport * as params from '../parameters.js'\nimport * as mjs from 'makerjs';\n\nconsole.log(params.depthOfPasses)\n\nconst profile = (model) => {\n  //let p = model.models.profile;\n  let p = model;\n\n  let outline = mjs.model.outline(p, params.compensatedRadius, 1, false); //third parameter is what type of corners, 0 (rounded) by default\n  //let chains = mjs.model.findChains(expansion);\n  let chain = mjs.model.findSingleChain(outline);\n\n  // console.log(\"outline\", outline, \"chain\", chain);\n\n  var divisions = Math.floor(chain.pathLength / params.minimumSpacing);\n  var spacing = chain.pathLength / divisions;\n\n  let keyPoints = mjs.chain.toPoints(chain, spacing);\n\n  // let scaleFactor = 10;\n  // let scaleXY = keyPoints.map(p => [p[0] * scaleFactor, p[1] * scaleFactor]);\n\n  let gcodePoints = keyPoints.map(p => `G1 X${p[0]} Y${p[1]} F${params.feedRate}`)\n  let gcode = JSON.parse(JSON.stringify(gcodePoints));\n\n  let firstPoint = keyPoints[0];\n\n  let paths = params.depthOfPasses.map((p,i) => [`G1 Z${params.depthOfPasses[i]} F12.0`, ...gcode, `G1 X${firstPoint[0]} Y${firstPoint[1]} F${params.feedRate}`])\n  paths = paths.flat(1);\n\n  gcode = [\n    params.units, //units\n    \"G90\",\n    `G1 Z${params.jogHeight} F9.0`,\n    `G0 X${firstPoint[0]} Y${firstPoint[1]}`,\n    ...paths\n  ]\n\n  // write to a new file named\n  let filename = 'testGcodeProfile.nc';\n\n  let text = gcode.join('\\n');\n\n  // console.log(\"profile\", outline)\n\n  return {drawing: outline, gcode: text, filename};\n};\n\n\nexport {profile};\n"]},"metadata":{},"sourceType":"module"}