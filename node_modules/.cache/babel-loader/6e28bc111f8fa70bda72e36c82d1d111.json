{"ast":null,"code":"/*\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the terms of the LICENSE file distributed with this project.\n */\nimport { Children } from \"react\";\nimport { isElementOfType, safeInvoke } from \"../../common/utils\";\nimport { Hotkey } from \"./hotkey\";\nimport { comboMatches, getKeyCombo, parseKeyCombo } from \"./hotkeyParser\";\nimport { hideHotkeysDialogAfterDelay, isHotkeysDialogShowing, showHotkeysDialog } from \"./hotkeysDialog\";\nvar SHOW_DIALOG_KEY = \"?\";\nexport var HotkeyScope;\n\n(function (HotkeyScope) {\n  HotkeyScope[\"LOCAL\"] = \"local\";\n  HotkeyScope[\"GLOBAL\"] = \"global\";\n})(HotkeyScope || (HotkeyScope = {}));\n\nvar HotkeysEvents =\n/** @class */\nfunction () {\n  function HotkeysEvents(scope) {\n    var _this = this;\n\n    this.scope = scope;\n    this.actions = [];\n\n    this.handleKeyDown = function (e) {\n      var combo = getKeyCombo(e);\n\n      var isTextInput = _this.isTextInput(e);\n\n      if (!isTextInput && comboMatches(parseKeyCombo(SHOW_DIALOG_KEY), combo)) {\n        if (isHotkeysDialogShowing()) {\n          hideHotkeysDialogAfterDelay();\n        } else {\n          showHotkeysDialog(_this.actions.map(function (action) {\n            return action.props;\n          }));\n        }\n\n        return;\n      } else if (isHotkeysDialogShowing()) {\n        return;\n      }\n\n      _this.invokeNamedCallbackIfComboRecognized(combo, \"onKeyDown\", e);\n    };\n\n    this.handleKeyUp = function (e) {\n      if (isHotkeysDialogShowing()) {\n        return;\n      }\n\n      _this.invokeNamedCallbackIfComboRecognized(getKeyCombo(e), \"onKeyUp\", e);\n    };\n  }\n\n  HotkeysEvents.prototype.count = function () {\n    return this.actions.length;\n  };\n\n  HotkeysEvents.prototype.clear = function () {\n    this.actions = [];\n  };\n\n  HotkeysEvents.prototype.setHotkeys = function (props) {\n    var _this = this;\n\n    var actions = [];\n    Children.forEach(props.children, function (child) {\n      if (isElementOfType(child, Hotkey) && _this.isScope(child.props)) {\n        actions.push({\n          combo: parseKeyCombo(child.props.combo),\n          props: child.props\n        });\n      }\n    });\n    this.actions = actions;\n  };\n\n  HotkeysEvents.prototype.invokeNamedCallbackIfComboRecognized = function (combo, callbackName, e) {\n    var isTextInput = this.isTextInput(e);\n\n    for (var _i = 0, _a = this.actions; _i < _a.length; _i++) {\n      var action = _a[_i];\n      var shouldIgnore = isTextInput && !action.props.allowInInput || action.props.disabled;\n\n      if (!shouldIgnore && comboMatches(action.combo, combo)) {\n        if (action.props.preventDefault) {\n          e.preventDefault();\n        }\n\n        if (action.props.stopPropagation) {\n          // set a flag just for unit testing. not meant to be referenced in feature work.\n          e.isPropagationStopped = true;\n          e.stopPropagation();\n        }\n\n        safeInvoke(action.props[callbackName], e);\n      }\n    }\n  };\n\n  HotkeysEvents.prototype.isScope = function (props) {\n    return (props.global ? HotkeyScope.GLOBAL : HotkeyScope.LOCAL) === this.scope;\n  };\n\n  HotkeysEvents.prototype.isTextInput = function (e) {\n    var elem = e.target; // we check these cases for unit testing, but this should not happen\n    // during normal operation\n\n    if (elem == null || elem.closest == null) {\n      return false;\n    }\n\n    var editable = elem.closest(\"input, textarea, [contenteditable=true]\");\n\n    if (editable == null) {\n      return false;\n    } // don't let checkboxes, switches, and radio buttons prevent hotkey behavior\n\n\n    if (editable.tagName.toLowerCase() === \"input\") {\n      var inputType = editable.type;\n\n      if (inputType === \"checkbox\" || inputType === \"radio\") {\n        return false;\n      }\n    } // don't let read-only fields prevent hotkey behavior\n\n\n    if (editable.readOnly) {\n      return false;\n    }\n\n    return true;\n  };\n\n  return HotkeysEvents;\n}();\n\nexport { HotkeysEvents };","map":null,"metadata":{},"sourceType":"module"}