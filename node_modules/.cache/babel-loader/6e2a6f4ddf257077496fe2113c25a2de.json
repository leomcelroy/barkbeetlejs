{"ast":null,"code":"// makerjs model, depth, params -> pocket toolpath\nimport * as mjs from 'makerjs';\nimport clipperOffset from './clipperOffset.js';\nimport { clipOffset } from '../unmakerjs/clipper.js';\n\nvar len = function len(toolpath) {\n  return Object.keys(toolpath).length;\n};\n\nvar isToolpath = function isToolpath(toolpath) {\n  // console.log(\"toolpath\", toolpath);\n  if (len(toolpath) >= 1) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nvar intToolpaths = function intToolpaths(geo, params) {\n  var contours = {};\n  var count = 0;\n  var pass = clipOffset(geo, -params.compensatedRadius);\n\n  if (isToolpath(pass) !== true) {\n    return contours;\n  }\n\n  while (isToolpath(pass)) {\n    contours[count] = pass;\n    count++;\n    pass = clipOffset(contours[count - 1], -params.compensatedRadius * params.stepoverPercentage / 100);\n  }\n\n  return contours;\n};\n\nvar pocket = function pocket(contour, params) {\n  var outlines = intToolpaths(contour, params);\n  var keyPoints = outlines.map(function (outline) {\n    return outline.map(function (line) {\n      return [line.origin[0], line.origin[1]];\n    });\n  }); // console.log(keyPoints);\n  //\n  // let gcodePoints = keyPoints.map(c => {\n  //   let raise = c.length > 1;\n  //\n  //   return c.map(c2 => {\n  //     let firstPoint = c2[0];\n  //     firstPoint = `G1 X${firstPoint[0]} Y${firstPoint[1]} F${params.feedRate}`;\n  //\n  //     if (raise) {\n  //       return [\n  //         `G1 Z${params.jogHeight} F${params.jogRate}`,\n  //         firstPoint, //want to jog to this one\n  //         \"plunge\",\n  //         ...c2.map(c3 => `G1 X${c3[0]} Y${c3[1]} F${params.feedRate}`),\n  //         firstPoint,\n  //         `G1 Z${params.jogHeight} F${params.jogRate}`,\n  //       ]\n  //     } else {\n  //       return [\n  //         firstPoint,\n  //         \"plunge\",\n  //         ...c2.map(c3 => `G1 X${c3[0]} Y${c3[1]} F${params.feedRate}`),\n  //         firstPoint\n  //       ]\n  //     }\n  //   });\n  // });\n  //\n  // let paths = gcodePoints.flat(1);\n  //\n  // // let firstPoint = keyPoints[0][0][0];\n  //\n  // let paths2 = params.depthOfPasses.map((p,i) => [\n  //   ...paths.flat(1).map(x => (x === \"plunge\") ? `G1 Z${params.depthOfPasses[i]} F12.0` : x),\n  // ])\n  //\n  // // console.log(paths2)\n  //\n  // paths2 = paths2.flat(1);\n  //\n  // let preamble = [params.units, \"G90\"];\n  //\n  // let gcode = [\n  //   ...preamble,\n  //   \"(end of preamble)\",\n  //   `G1 Z${params.jogHeight} F${params.jogRate}`,\n  //   // `G0 X${firstPoint[0]} Y${firstPoint[1]}`,\n  //   ...paths2,\n  //   `G1 Z${params.jogHeight} F${params.jogRate}`,\n  // ]\n  //\n  // // write to a new file named\n  // let filename = 'testGcodePocket.gcode';\n  //\n  // let text = gcode.join('\\n');\n  //\n  // return {drawing: outlines, gcode: text, filename};\n};\n\nexport { pocket };","map":{"version":3,"sources":["/Users/leomcelroy/Desktop/barkbeetle_js/src/toolpaths/pocket.js"],"names":["mjs","clipperOffset","clipOffset","len","toolpath","Object","keys","length","isToolpath","intToolpaths","geo","params","contours","count","pass","compensatedRadius","stepoverPercentage","pocket","contour","outlines","keyPoints","map","outline","line","origin"],"mappings":"AAAA;AACA,OAAO,KAAKA,GAAZ,MAAqB,SAArB;AACA,OAAOC,aAAP,MAA0B,oBAA1B;AACA,SAAQC,UAAR,QAAyB,yBAAzB;;AAGA,IAAMC,GAAG,GAAG,SAANA,GAAM,CAACC,QAAD;AAAA,SAAcC,MAAM,CAACC,IAAP,CAAYF,QAAZ,EAAsBG,MAApC;AAAA,CAAZ;;AAEA,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAACJ,QAAD,EAAc;AAC/B;AAEA,MAAID,GAAG,CAACC,QAAD,CAAH,IAAiB,CAArB,EAAwB;AACtB,WAAO,IAAP;AACD,GAFD,MAEO;AACL,WAAO,KAAP;AACD;AACF,CARD;;AAUA,IAAMK,YAAY,GAAG,SAAfA,YAAe,CAACC,GAAD,EAAMC,MAAN,EAAiB;AACpC,MAAIC,QAAQ,GAAG,EAAf;AACA,MAAIC,KAAK,GAAG,CAAZ;AAEA,MAAIC,IAAI,GAAGZ,UAAU,CAACQ,GAAD,EAAM,CAACC,MAAM,CAACI,iBAAd,CAArB;;AAEA,MAAIP,UAAU,CAACM,IAAD,CAAV,KAAqB,IAAzB,EAA+B;AAC7B,WAAOF,QAAP;AACD;;AAED,SAAQJ,UAAU,CAACM,IAAD,CAAlB,EAA0B;AACxBF,IAAAA,QAAQ,CAACC,KAAD,CAAR,GAAkBC,IAAlB;AACAD,IAAAA,KAAK;AACLC,IAAAA,IAAI,GAAGZ,UAAU,CAACU,QAAQ,CAACC,KAAK,GAAG,CAAT,CAAT,EAAsB,CAACF,MAAM,CAACI,iBAAR,GAA4BJ,MAAM,CAACK,kBAAnC,GAAsD,GAA5E,CAAjB;AACD;;AAED,SAAOJ,QAAP;AACD,CAjBD;;AAmBA,IAAMK,MAAM,GAAG,SAATA,MAAS,CAACC,OAAD,EAAUP,MAAV,EAAqB;AAElC,MAAIQ,QAAQ,GAAGV,YAAY,CAACS,OAAD,EAAUP,MAAV,CAA3B;AAEA,MAAIS,SAAS,GAAGD,QAAQ,CAACE,GAAT,CAAa,UAAAC,OAAO;AAAA,WAAIA,OAAO,CAACD,GAAR,CAAY,UAAAE,IAAI;AAAA,aAAI,CAACA,IAAI,CAACC,MAAL,CAAY,CAAZ,CAAD,EAAiBD,IAAI,CAACC,MAAL,CAAY,CAAZ,CAAjB,CAAJ;AAAA,KAAhB,CAAJ;AAAA,GAApB,CAAhB,CAJkC,CAMlC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD,CAhED;;AAmEA,SAAQP,MAAR","sourcesContent":["// makerjs model, depth, params -> pocket toolpath\nimport * as mjs from 'makerjs';\nimport clipperOffset from './clipperOffset.js';\nimport {clipOffset} from '../unmakerjs/clipper.js'\n\n\nconst len = (toolpath) => Object.keys(toolpath).length;\n\nconst isToolpath = (toolpath) => {\n  // console.log(\"toolpath\", toolpath);\n\n  if (len(toolpath) >= 1) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\nconst intToolpaths = (geo, params) => {\n  let contours = {};\n  let count = 0;\n\n  let pass = clipOffset(geo, -params.compensatedRadius);\n\n  if (isToolpath(pass) !== true) {\n    return contours;\n  }\n\n  while ( isToolpath(pass)) {\n    contours[count] = pass;\n    count++;\n    pass = clipOffset(contours[count - 1], -params.compensatedRadius * params.stepoverPercentage/100);\n  }\n\n  return contours;\n}\n\nconst pocket = (contour, params) => {\n\n  let outlines = intToolpaths(contour, params);\n\n  let keyPoints = outlines.map(outline => outline.map(line => [line.origin[0], line.origin[1]]));\n\n  // console.log(keyPoints);\n  //\n  // let gcodePoints = keyPoints.map(c => {\n  //   let raise = c.length > 1;\n  //\n  //   return c.map(c2 => {\n  //     let firstPoint = c2[0];\n  //     firstPoint = `G1 X${firstPoint[0]} Y${firstPoint[1]} F${params.feedRate}`;\n  //\n  //     if (raise) {\n  //       return [\n  //         `G1 Z${params.jogHeight} F${params.jogRate}`,\n  //         firstPoint, //want to jog to this one\n  //         \"plunge\",\n  //         ...c2.map(c3 => `G1 X${c3[0]} Y${c3[1]} F${params.feedRate}`),\n  //         firstPoint,\n  //         `G1 Z${params.jogHeight} F${params.jogRate}`,\n  //       ]\n  //     } else {\n  //       return [\n  //         firstPoint,\n  //         \"plunge\",\n  //         ...c2.map(c3 => `G1 X${c3[0]} Y${c3[1]} F${params.feedRate}`),\n  //         firstPoint\n  //       ]\n  //     }\n  //   });\n  // });\n  //\n  // let paths = gcodePoints.flat(1);\n  //\n  // // let firstPoint = keyPoints[0][0][0];\n  //\n  // let paths2 = params.depthOfPasses.map((p,i) => [\n  //   ...paths.flat(1).map(x => (x === \"plunge\") ? `G1 Z${params.depthOfPasses[i]} F12.0` : x),\n  // ])\n  //\n  // // console.log(paths2)\n  //\n  // paths2 = paths2.flat(1);\n  //\n  // let preamble = [params.units, \"G90\"];\n  //\n  // let gcode = [\n  //   ...preamble,\n  //   \"(end of preamble)\",\n  //   `G1 Z${params.jogHeight} F${params.jogRate}`,\n  //   // `G0 X${firstPoint[0]} Y${firstPoint[1]}`,\n  //   ...paths2,\n  //   `G1 Z${params.jogHeight} F${params.jogRate}`,\n  // ]\n  //\n  // // write to a new file named\n  // let filename = 'testGcodePocket.gcode';\n  //\n  // let text = gcode.join('\\n');\n  //\n  // return {drawing: outlines, gcode: text, filename};\n};\n\n\nexport {pocket};\n"]},"metadata":{},"sourceType":"module"}