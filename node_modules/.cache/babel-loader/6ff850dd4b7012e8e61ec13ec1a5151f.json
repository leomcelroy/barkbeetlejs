{"ast":null,"code":"'use strict';\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    'default': obj\n  };\n}\n\nvar _blacklist = require('blacklist');\n\nvar _blacklist2 = _interopRequireDefault(_blacklist);\n\nvar _classnames = require('classnames');\n\nvar _classnames2 = _interopRequireDefault(_classnames);\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _icons = require('../icons');\n\nvar _icons2 = _interopRequireDefault(_icons);\n\nmodule.exports = _react2['default'].createClass({\n  displayName: 'FormSelect',\n  propTypes: {\n    alwaysValidate: _react2['default'].PropTypes.bool,\n    className: _react2['default'].PropTypes.string,\n    disabled: _react2['default'].PropTypes.bool,\n    firstOption: _react2['default'].PropTypes.string,\n    htmlFor: _react2['default'].PropTypes.string,\n    id: _react2['default'].PropTypes.string,\n    label: _react2['default'].PropTypes.string,\n    onChange: _react2['default'].PropTypes.func.isRequired,\n    options: _react2['default'].PropTypes.arrayOf(_react2['default'].PropTypes.shape({\n      label: _react2['default'].PropTypes.string,\n      value: _react2['default'].PropTypes.string\n    })).isRequired,\n    prependEmptyOption: _react2['default'].PropTypes.bool,\n    required: _react2['default'].PropTypes.bool,\n    requiredMessage: _react2['default'].PropTypes.string,\n    value: _react2['default'].PropTypes.string\n  },\n  getDefaultProps: function getDefaultProps() {\n    return {\n      requiredMessage: 'This field is required'\n    };\n  },\n  getInitialState: function getInitialState() {\n    return {\n      isValid: true,\n      validationIsActive: this.props.alwaysValidate\n    };\n  },\n  componentDidMount: function componentDidMount() {\n    if (this.state.validationIsActive) {\n      this.validateInput(this.props.value);\n    }\n  },\n  componentWillReceiveProps: function componentWillReceiveProps(newProps) {\n    if (this.state.validationIsActive) {\n      if (newProps.value !== this.props.value && newProps.value !== this._lastChangeValue && !newProps.alwaysValidate) {\n        // reset validation state if the value was changed outside the component\n        return this.setState({\n          isValid: true,\n          validationIsActive: false\n        });\n      }\n\n      this.validateInput(newProps.value);\n    }\n  },\n  handleChange: function handleChange(e) {\n    this._lastChangeValue = e.target.value;\n    if (this.props.onChange) this.props.onChange(e.target.value);\n  },\n  handleBlur: function handleBlur() {\n    if (!this.props.alwaysValidate) {\n      this.setState({\n        validationIsActive: false\n      });\n    }\n\n    this.validateInput(this.props.value);\n  },\n  validateInput: function validateInput(value) {\n    var newState = {\n      isValid: true\n    };\n\n    if (this.props.required && (!value || value && !value.length)) {\n      newState.isValid = false;\n    }\n\n    if (!newState.isValid) {\n      newState.validationIsActive = true;\n    }\n\n    this.setState(newState);\n  },\n  renderIcon: function renderIcon(icon) {\n    var iconClassname = (0, _classnames2['default'])('FormSelect__arrows', {\n      'FormSelect__arrows--disabled': this.props.disabled\n    });\n    return _react2['default'].createElement('span', {\n      dangerouslySetInnerHTML: {\n        __html: icon\n      },\n      className: iconClassname\n    });\n  },\n  render: function render() {\n    // props\n    var props = (0, _blacklist2['default'])(this.props, 'prependEmptyOption', 'firstOption', 'alwaysValidate', 'htmlFor', 'id', 'label', 'onChange', 'options', 'required', 'requiredMessage', 'className'); // classes\n\n    var componentClass = (0, _classnames2['default'])('FormField', {\n      'is-invalid': !this.state.isValid\n    }, this.props.className); // validation message\n\n    var validationMessage = undefined;\n\n    if (!this.state.isValid) {\n      validationMessage = _react2['default'].createElement('div', {\n        className: 'form-validation is-invalid'\n      }, this.props.requiredMessage);\n    } // dynamic elements\n\n\n    var forAndID = this.props.htmlFor || this.props.id;\n    var componentLabel = this.props.label ? _react2['default'].createElement('label', {\n      className: 'FormLabel',\n      htmlFor: forAndID\n    }, this.props.label) : null; // options\n\n    var options = this.props.options.map(function (opt, i) {\n      return _react2['default'].createElement('option', {\n        key: 'option-' + i,\n        value: opt.value\n      }, opt.label);\n    });\n\n    if (this.props.prependEmptyOption || this.props.firstOption) {\n      options.unshift(_react2['default'].createElement('option', {\n        key: 'option-blank',\n        value: ''\n      }, this.props.firstOption ? this.props.firstOption : 'Select...'));\n    }\n\n    return _react2['default'].createElement('div', {\n      className: componentClass\n    }, componentLabel, _react2['default'].createElement('div', {\n      className: 'u-pos-relative'\n    }, _react2['default'].createElement('select', _extends({\n      className: 'FormInput FormSelect',\n      id: forAndID,\n      onChange: this.handleChange,\n      onBlur: this.handleBlur\n    }, props), options), this.renderIcon(_icons2['default'].selectArrows)), validationMessage);\n  }\n});","map":null,"metadata":{},"sourceType":"script"}