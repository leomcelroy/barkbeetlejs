{"ast":null,"code":"import _toConsumableArray from \"/Users/leomcelroy/Desktop/barkbeetle_js/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"/Users/leomcelroy/Desktop/barkbeetle_js/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _defineProperty from \"/Users/leomcelroy/Desktop/barkbeetle_js/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"/Users/leomcelroy/Desktop/barkbeetle_js/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/leomcelroy/Desktop/barkbeetle_js/src/components/ProfileButton.js\";\nimport React, { Component, useState } from 'react';\nimport { Button, Dialog, TextInputField, SegmentedControl, Heading, Link, Strong, Text } from 'evergreen-ui';\nimport * as utils from '../utils.js';\nimport { profile } from '../toolpaths/profile.js';\nimport store from '../store.js';\n\nvar ProfileButton = function ProfileButton(_ref) {\n  var disabled = _ref.disabled;\n\n  var _useState = useState(_defineProperty({\n    isShown: false,\n    nameValid: true,\n    cutDepthValid: true,\n    toolDiameterValid: true,\n    toleranceValid: true,\n    jogHeightValid: true,\n    jogRateValid: true,\n    feedRateValid: true,\n    tabThicknessValid: true,\n    offsetOptions: [{\n      label: 'outside',\n      value: \"outside\"\n    }, {\n      label: 'inside',\n      value: \"inside\"\n    }, {\n      label: 'none',\n      value: \"none\"\n    }],\n    tabOptions: [{\n      label: 'true',\n      value: true\n    }, {\n      label: 'false',\n      value: false\n    }],\n    dogboneOptions: [{\n      label: 'true',\n      value: true\n    }, {\n      label: 'false',\n      value: false\n    }],\n    offsetTemp: store.state.defaultParameters.offset,\n    tabsTemp: store.state.defaultParameters.tabs\n  }, \"tabsTemp\", store.state.defaultParameters.dogbone)),\n      _useState2 = _slicedToArray(_useState, 2),\n      state = _useState2[0],\n      setState = _useState2[1];\n\n  if (state.dogboneTemp !== store.getState().defaultParameters.dogbone && state.tabsTemp !== store.getState().defaultParameters.tabs && state.tabsTemp !== store.getState().defaultParameters.dogbone && !state.isShown) {\n    console.log(\"bug fixin time\");\n    setState(_objectSpread({}, state, {\n      dogboneTemp: store.getState().defaultParameters.dogbone\n    }));\n  }\n\n  var validateSubmit = function validateSubmit() {\n    var valid = state.nameValid && state.cutDepthValid && state.toolDiameterValid && state.toleranceValid && state.jogHeightValid && state.jogRateValid && state.feedRateValid;\n\n    if (valid) {\n      var name = utils.helpExtract(\"name\");\n      var cutDepth = Number(utils.helpExtract(\"cutDepth\"));\n      var toolDiameter = Number(utils.helpExtract(\"toolDiameter\"));\n      var tolerance = Number(utils.helpExtract(\"tolerance\"));\n      var jogHeight = Number(utils.helpExtract(\"jogHeight\"));\n      var jogRate = Number(utils.helpExtract(\"jogRate\"));\n      var feedRate = Number(utils.helpExtract(\"feedRate\"));\n      var tabThickness = Number(utils.helpExtract(\"tabThickness\"));\n      if (utils.helpExtract(\"name\") === \"\") name = store.getState().defaultParameters.name;\n      if (utils.helpExtract(\"cutDepth\") === \"\") cutDepth = store.getState().defaultParameters.cutDepth;\n      if (utils.helpExtract(\"toolDiameter\") === \"\") toolDiameter = store.getState().defaultParameters.toolDiameter;\n      if (utils.helpExtract(\"tolerance\") === \"\") tolerance = store.getState().defaultParameters.tolerance;\n      if (utils.helpExtract(\"jogHeight\") === \"\") jogHeight = store.getState().defaultParameters.jogHeight;\n      if (utils.helpExtract(\"jogRate\") === \"\") jogRate = store.getState().defaultParameters.jogRate;\n      if (utils.helpExtract(\"feedRate\") === \"\") feedRate = store.getState().defaultParameters.feedRate;\n      if (utils.helpExtract(\"tabThickness\") === \"\") tabThickness = store.getState().defaultParameters.tabThickness;\n      if (isNaN(cutDepth)) cutDepth = store.getState().defaultParameters.cutDepth;\n      if (isNaN(toolDiameter)) toolDiameter = store.getState().defaultParameters.toolDiameter;\n      if (isNaN(tolerance)) tolerance = store.getState().defaultParameters.tolerance;\n      if (isNaN(jogHeight)) jogHeight = store.getState().defaultParameters.jogHeight;\n      if (isNaN(jogRate)) jogRate = store.getState().defaultParameters.jogRate;\n      if (isNaN(feedRate)) feedRate = store.getState().defaultParameters.feedRate;\n      if (isNaN(tabThickness)) tabThickness = store.getState().defaultParameters.tabThickness;\n      var dogbone = state.dogboneTemp;\n      var tabs = state.tabsTemp;\n      var offset = state.offsetTemp; //derived parameters\n\n      var passDepth = cutDepth / 2;\n      var toolRadius = toolDiameter / 2;\n      var compensatedRadius = toolRadius + tolerance;\n      var tempFloor = Math.ceil(cutDepth / passDepth); //should this be ceiling or floor, I think ceil\n\n      var actualPassDepth = cutDepth / tempFloor;\n      var depthOfPasses = utils.makeSeries(actualPassDepth, actualPassDepth, tempFloor).map(function (n) {\n        return -n;\n      }); //settings will be compiled to a single object here\n\n      var parameters = utils.deepcopy(store.state.defaultParameters);\n      parameters[\"dogbone\"] = dogbone;\n      parameters[\"tabs\"] = tabs;\n      parameters[\"offset\"] = offset;\n      parameters[\"tolerance\"] = tolerance;\n      parameters[\"tabThickness\"] = tabThickness;\n      parameters[\"toolDiameter\"] = toolDiameter;\n      parameters[\"compensatedRadius\"] = compensatedRadius;\n      parameters[\"cutDepth\"] = cutDepth;\n      parameters[\"depthOfPasses\"] = depthOfPasses;\n      parameters[\"feedRate\"] = feedRate;\n      parameters[\"jogHeight\"] = jogHeight;\n      parameters[\"jogRate\"] = jogRate; // parameters[\"insideCutting\"] = insideCutting;\n      //console.log(\"parameters\", parameters);\n\n      setState({\n        isShown: false\n      }); //update app state here\n\n      var oldToolpaths = store.state.toolpaths;\n      var newProfiles = store.state.selected.map(function (path) {\n        return {\n          type: \"profile\",\n          name: name,\n          parameters: parameters,\n          sourceGeometryID: path,\n          geometry: profile(store.state.contours[path], parameters),\n          id: utils.makeID(),\n          cutSelected: false,\n          visible: true\n        };\n      });\n      var newToolpaths = [].concat(_toConsumableArray(oldToolpaths), _toConsumableArray(newProfiles)); // console.log(\"newToolpaths\", newToolpaths);\n\n      store.update({\n        toolpaths: newToolpaths\n      });\n    }\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147\n    },\n    __self: this\n  }, React.createElement(Dialog, {\n    isShown: state.isShown,\n    title: \"Settings for this Profile Cut\",\n    onCloseComplete: function onCloseComplete() {\n      setState(_objectSpread({}, state, {\n        isShown: false,\n        dogboneTemp: store.getState().defaultParameters.dogbone,\n        tabsTemp: store.getState().defaultParameters.tabs,\n        offsetTemp: store.getState().defaultParameters.offset\n      }));\n    },\n    onConfirm: validateSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148\n    },\n    __self: this\n  }, React.createElement(TextInputField, {\n    onChange: function onChange(e) {\n      var valid = utils.isNum(e.target.value);\n      setState(_objectSpread({}, state, {\n        cutDepthValid: valid\n      }));\n    },\n    isInvalid: !state.cutDepthValid,\n    name: \"cutDepth\",\n    description: state.cutDepthValid ? \"\" : \"please enter a valid number\",\n    label: \"Depth of Cut\",\n    placeholder: String(store.getState().defaultParameters.cutDepth),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162\n    },\n    __self: this\n  }), React.createElement(TextInputField, {\n    onChange: function onChange(e) {\n      var valid = utils.isNum(e.target.value);\n      setState(_objectSpread({}, state, {\n        toolDiameterValid: valid\n      }));\n    },\n    isInvalid: !state.toolDiameterValid,\n    name: \"toolDiameter\",\n    description: state.toolDiameterValid ? \"\" : \"please enter a valid number\",\n    label: \"Tool Diameter\",\n    placeholder: String(store.getState().defaultParameters.toolDiameter),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173\n    },\n    __self: this\n  }), React.createElement(TextInputField, {\n    onChange: function onChange(e) {\n      var valid = utils.isNum(e.target.value);\n      setState(_objectSpread({}, state, {\n        feedRateValid: valid\n      }));\n    },\n    isInvalid: !state.feedRateValid,\n    name: \"feedRate\",\n    description: state.feedRateValid ? \"\" : \"please enter a valid number\",\n    label: \"Feed Rate\",\n    placeholder: String(store.getState().defaultParameters.feedRate),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184\n    },\n    __self: this\n  }), React.createElement(TextInputField, {\n    onChange: function onChange(e) {\n      var valid = utils.isNum(e.target.value);\n      setState(_objectSpread({}, state, {\n        toleranceValid: valid\n      }));\n    },\n    isInvalid: !state.toleranceValid,\n    name: \"tolerance\",\n    description: state.toleranceValid ? \"\" : \"please enter a valid number\",\n    label: \"Tolerance\",\n    placeholder: String(store.getState().defaultParameters.tolerance),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195\n    },\n    __self: this\n  }), React.createElement(TextInputField, {\n    onChange: function onChange(e) {\n      var valid = utils.isNum(e.target.value);\n      setState(_objectSpread({}, state, {\n        jogRateValid: valid\n      }));\n    },\n    isInvalid: !state.jogRateValid,\n    name: \"jogRate\",\n    description: state.jogRateValid ? \"\" : \"please enter a valid number\",\n    label: \"Jog Rate\",\n    placeholder: String(store.getState().defaultParameters.jogRate),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206\n    },\n    __self: this\n  }), React.createElement(TextInputField, {\n    onChange: function onChange(e) {\n      var valid = utils.isNum(e.target.value);\n      setState(_objectSpread({}, state, {\n        jogHeightValid: valid\n      }));\n    },\n    isInvalid: !state.jogHeightValid,\n    name: \"jogHeight\",\n    description: state.jogHeightValid ? \"\" : \"please enter a valid number\",\n    label: \"Jog Height\",\n    placeholder: String(store.getState().defaultParameters.jogHeight),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 217\n    },\n    __self: this\n  }), React.createElement(Heading, {\n    marginTop: 8,\n    size: 400,\n    color: \"rgba(67, 90, 111, .91)\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 228\n    },\n    __self: this\n  }, \"Offset Direction\"), React.createElement(SegmentedControl, {\n    marginTop: 4,\n    options: state.offsetOptions,\n    value: state.offsetTemp,\n    onChange: function onChange(value) {\n      var offsetTemp = value;\n      setState(_objectSpread({}, state, {\n        offsetTemp: offsetTemp\n      }));\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 229\n    },\n    __self: this\n  }), React.createElement(Heading, {\n    marginTop: 20,\n    size: 400,\n    color: \"rgba(67, 90, 111, .91)\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 239\n    },\n    __self: this\n  }, \"Auto Tabs\"), React.createElement(SegmentedControl, {\n    marginTop: 4,\n    options: state.tabOptions,\n    value: state.tabsTemp,\n    onChange: function onChange(value) {\n      var tabsTemp = value;\n      setState(_objectSpread({}, state, {\n        tabsTemp: tabsTemp\n      }));\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 240\n    },\n    __self: this\n  }), React.createElement(TextInputField, {\n    marginTop: 20,\n    onChange: function onChange(e) {\n      var valid = utils.isNum(e.target.value);\n      setState(_objectSpread({}, state, {\n        tabThicknessValid: valid\n      }));\n    },\n    isInvalid: !state.tabThicknessValid,\n    name: \"tabThickness\",\n    description: state.tabThicknessValid ? \"\" : \"please enter a valid number\",\n    label: \"Tab Thickness\",\n    placeholder: String(store.getState().defaultParameters.tabThickness),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 250\n    },\n    __self: this\n  }), React.createElement(Heading, {\n    marginTop: 20,\n    size: 400,\n    color: \"rgba(67, 90, 111, .91)\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 262\n    },\n    __self: this\n  }, \"Auto Dogbone\"), React.createElement(SegmentedControl, {\n    marginTop: 4,\n    options: state.dogboneOptions,\n    value: state.dogboneTemp,\n    onChange: function onChange(value) {\n      var dogboneTemp = value;\n      setState(_objectSpread({}, state, {\n        dogboneTemp: dogboneTemp\n      }));\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 263\n    },\n    __self: this\n  }), React.createElement(TextInputField, {\n    marginTop: 20,\n    onChange: function onChange(e) {\n      var valid = e.target.value !== \"\";\n      setState(_objectSpread({}, state, {\n        nameValid: valid\n      }));\n    },\n    isInvalid: !state.nameValid,\n    name: \"name\",\n    description: state.nameValid ? \"\" : \"please enter something\",\n    label: \"Name for this Profile\",\n    placeholder: String(store.getState().defaultParameters.name),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 273\n    },\n    __self: this\n  })), React.createElement(Button, {\n    disabled: disabled,\n    onClick: function onClick() {\n      return setState(_objectSpread({}, state, {\n        isShown: true\n      }));\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 286\n    },\n    __self: this\n  }, \"Profile\"));\n};\n\nexport { ProfileButton };","map":{"version":3,"sources":["/Users/leomcelroy/Desktop/barkbeetle_js/src/components/ProfileButton.js"],"names":["React","Component","useState","Button","Dialog","TextInputField","SegmentedControl","Heading","Link","Strong","Text","utils","profile","store","ProfileButton","disabled","isShown","nameValid","cutDepthValid","toolDiameterValid","toleranceValid","jogHeightValid","jogRateValid","feedRateValid","tabThicknessValid","offsetOptions","label","value","tabOptions","dogboneOptions","offsetTemp","state","defaultParameters","offset","tabsTemp","tabs","dogbone","setState","dogboneTemp","getState","console","log","validateSubmit","valid","name","helpExtract","cutDepth","Number","toolDiameter","tolerance","jogHeight","jogRate","feedRate","tabThickness","isNaN","passDepth","toolRadius","compensatedRadius","tempFloor","Math","ceil","actualPassDepth","depthOfPasses","makeSeries","map","n","parameters","deepcopy","oldToolpaths","toolpaths","newProfiles","selected","path","type","sourceGeometryID","geometry","contours","id","makeID","cutSelected","visible","newToolpaths","update","e","isNum","target","String"],"mappings":"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","sourcesContent":["import React, { Component, useState } from 'react';\nimport {Button, Dialog, TextInputField, SegmentedControl, Heading, Link, Strong, Text} from 'evergreen-ui';\nimport * as utils from '../utils.js';\nimport {profile} from '../toolpaths/profile.js';\n\nimport store from '../store.js';\n\nconst ProfileButton = ({disabled}) => {\n\n  const [state, setState] = useState({\n    isShown: false,\n    nameValid: true,\n    cutDepthValid: true,\n    toolDiameterValid: true,\n    toleranceValid: true,\n    jogHeightValid: true,\n    jogRateValid: true,\n    feedRateValid: true,\n    tabThicknessValid: true,\n    offsetOptions: [\n      { label: 'outside', value: \"outside\" },\n      { label: 'inside', value: \"inside\" },\n      { label: 'none', value: \"none\"}\n    ],\n    tabOptions: [\n      { label: 'true', value: true },\n      { label: 'false', value: false },\n    ],\n    dogboneOptions: [\n      { label: 'true', value: true },\n      { label: 'false', value: false },\n    ],\n    offsetTemp: store.state.defaultParameters.offset,\n    tabsTemp: store.state.defaultParameters.tabs,\n    tabsTemp: store.state.defaultParameters.dogbone,\n  });\n\n  if ((state.dogboneTemp !== store.getState().defaultParameters.dogbone) &&\n      (state.tabsTemp !== store.getState().defaultParameters.tabs) &&\n      (state.tabsTemp !== store.getState().defaultParameters.dogbone) &&\n      !state.isShown) {\n    console.log(\"bug fixin time\")\n    setState({\n      ...state,\n      dogboneTemp: store.getState().defaultParameters.dogbone,\n    })\n  }\n\n  const validateSubmit = () => {\n\n    let valid = state.nameValid &&\n                state.cutDepthValid &&\n                state.toolDiameterValid &&\n                state.toleranceValid &&\n                state.jogHeightValid &&\n                state.jogRateValid &&\n                state.feedRateValid;\n    if (valid) {\n\n      let name = utils.helpExtract(\"name\");\n      let cutDepth = Number(utils.helpExtract(\"cutDepth\"));\n      let toolDiameter = Number(utils.helpExtract(\"toolDiameter\"));\n      let tolerance = Number(utils.helpExtract(\"tolerance\"));\n      let jogHeight = Number(utils.helpExtract(\"jogHeight\"));\n      let jogRate = Number(utils.helpExtract(\"jogRate\"));\n      let feedRate = Number(utils.helpExtract(\"feedRate\"));\n      let tabThickness = Number(utils.helpExtract(\"tabThickness\"));\n\n      if (utils.helpExtract(\"name\") === \"\") name = store.getState().defaultParameters.name;\n      if (utils.helpExtract(\"cutDepth\") === \"\") cutDepth = store.getState().defaultParameters.cutDepth;\n      if (utils.helpExtract(\"toolDiameter\") === \"\") toolDiameter = store.getState().defaultParameters.toolDiameter;\n      if (utils.helpExtract(\"tolerance\") === \"\") tolerance = store.getState().defaultParameters.tolerance;\n      if (utils.helpExtract(\"jogHeight\") === \"\") jogHeight = store.getState().defaultParameters.jogHeight;\n      if (utils.helpExtract(\"jogRate\") === \"\") jogRate = store.getState().defaultParameters.jogRate;\n      if (utils.helpExtract(\"feedRate\") === \"\") feedRate = store.getState().defaultParameters.feedRate;\n      if (utils.helpExtract(\"tabThickness\") === \"\") tabThickness = store.getState().defaultParameters.tabThickness;\n\n      if (isNaN(cutDepth)) cutDepth = store.getState().defaultParameters.cutDepth;\n      if (isNaN(toolDiameter)) toolDiameter = store.getState().defaultParameters.toolDiameter;\n      if (isNaN(tolerance)) tolerance = store.getState().defaultParameters.tolerance;\n      if (isNaN(jogHeight)) jogHeight = store.getState().defaultParameters.jogHeight;\n      if (isNaN(jogRate)) jogRate = store.getState().defaultParameters.jogRate;\n      if (isNaN(feedRate)) feedRate = store.getState().defaultParameters.feedRate;\n      if (isNaN(tabThickness)) tabThickness = store.getState().defaultParameters.tabThickness;\n\n      let dogbone = state.dogboneTemp;\n      let tabs = state.tabsTemp;\n      let offset = state.offsetTemp;\n\n      //derived parameters\n      let passDepth = cutDepth/2;\n      let toolRadius = toolDiameter/2;\n      let compensatedRadius = toolRadius + tolerance;\n      let tempFloor = Math.ceil(cutDepth/passDepth); //should this be ceiling or floor, I think ceil\n      let actualPassDepth = cutDepth/tempFloor;\n      let depthOfPasses = utils.makeSeries(actualPassDepth, actualPassDepth, tempFloor).map(n => -n);\n\n      //settings will be compiled to a single object here\n      let parameters = utils.deepcopy(store.state.defaultParameters);\n\n      parameters[\"dogbone\"] = dogbone;\n      parameters[\"tabs\"] = tabs;\n      parameters[\"offset\"] = offset;\n      parameters[\"tolerance\"] = tolerance;\n      parameters[\"tabThickness\"] = tabThickness;\n      parameters[\"toolDiameter\"] = toolDiameter;\n      parameters[\"compensatedRadius\"] = compensatedRadius;\n      parameters[\"cutDepth\"] = cutDepth;\n      parameters[\"depthOfPasses\"] = depthOfPasses;\n      parameters[\"feedRate\"] = feedRate;\n      parameters[\"jogHeight\"] = jogHeight;\n      parameters[\"jogRate\"] = jogRate;\n      // parameters[\"insideCutting\"] = insideCutting;\n\n      //console.log(\"parameters\", parameters);\n\n      setState({\n        isShown:false,\n      });\n\n      //update app state here\n      let oldToolpaths = store.state.toolpaths;\n      let newProfiles = store.state.selected.map(path => {\n\n        return {\n          type: \"profile\",\n          name: name,\n          parameters: parameters,\n          sourceGeometryID: path,\n          geometry: profile(store.state.contours[path], parameters),\n          id: utils.makeID(),\n          cutSelected: false,\n          visible: true,\n        }\n      })\n\n      let newToolpaths = [...oldToolpaths, ...newProfiles];\n\n      // console.log(\"newToolpaths\", newToolpaths);\n\n      store.update({toolpaths:newToolpaths});\n\n    }\n  }\n\n  return (\n    <div>\n      <Dialog\n        isShown={state.isShown}\n        title={\"Settings for this Profile Cut\"}\n        onCloseComplete={() => {\n          setState({\n            ...state,\n            isShown:false,\n            dogboneTemp: store.getState().defaultParameters.dogbone,\n            tabsTemp: store.getState().defaultParameters.tabs,\n            offsetTemp: store.getState().defaultParameters.offset,\n          })\n        }}\n        onConfirm={validateSubmit}>\n\n        <TextInputField\n          onChange={e => {\n            let valid = utils.isNum(e.target.value);\n            setState({...state, cutDepthValid:valid})\n          }}\n          isInvalid={!state.cutDepthValid}\n          name=\"cutDepth\"\n          description={(state.cutDepthValid) ? \"\" : \"please enter a valid number\"}\n          label=\"Depth of Cut\"\n          placeholder={String(store.getState().defaultParameters.cutDepth)}/>\n\n        <TextInputField\n          onChange={e => {\n            let valid = utils.isNum(e.target.value);\n            setState({...state, toolDiameterValid:valid})\n          }}\n          isInvalid={!state.toolDiameterValid}\n          name=\"toolDiameter\"\n          description={(state.toolDiameterValid) ? \"\" : \"please enter a valid number\"}\n          label=\"Tool Diameter\"\n          placeholder={String(store.getState().defaultParameters.toolDiameter)}/>\n\n          <TextInputField\n            onChange={e => {\n              let valid = utils.isNum(e.target.value);\n              setState({...state, feedRateValid:valid})\n            }}\n            isInvalid={!state.feedRateValid}\n            name=\"feedRate\"\n            description={(state.feedRateValid) ? \"\" : \"please enter a valid number\"}\n            label=\"Feed Rate\"\n            placeholder={String(store.getState().defaultParameters.feedRate)}/>\n\n            <TextInputField\n              onChange={e => {\n                let valid = utils.isNum(e.target.value);\n                setState({...state, toleranceValid:valid})\n              }}\n              isInvalid={!state.toleranceValid}\n              name=\"tolerance\"\n              description={(state.toleranceValid) ? \"\" : \"please enter a valid number\"}\n              label=\"Tolerance\"\n              placeholder={String(store.getState().defaultParameters.tolerance)}/>\n\n          <TextInputField\n            onChange={e => {\n              let valid = utils.isNum(e.target.value);\n              setState({...state, jogRateValid:valid})\n            }}\n            isInvalid={!state.jogRateValid}\n            name=\"jogRate\"\n            description={(state.jogRateValid) ? \"\" : \"please enter a valid number\"}\n            label=\"Jog Rate\"\n            placeholder={String(store.getState().defaultParameters.jogRate)}/>\n\n            <TextInputField\n              onChange={e => {\n                let valid = utils.isNum(e.target.value);\n                setState({...state, jogHeightValid:valid})\n              }}\n              isInvalid={!state.jogHeightValid}\n              name=\"jogHeight\"\n              description={(state.jogHeightValid) ? \"\" : \"please enter a valid number\"}\n              label=\"Jog Height\"\n              placeholder={String(store.getState().defaultParameters.jogHeight)}/>\n\n            <Heading marginTop={8} size={400} color={\"rgba(67, 90, 111, .91)\"}>Offset Direction</Heading>\n            <SegmentedControl\n              marginTop={4}\n              options={state.offsetOptions}\n              value={state.offsetTemp}\n              onChange={value => {\n                let offsetTemp = value;\n                setState({...state, offsetTemp });\n              }}\n            />\n\n            <Heading marginTop={20} size={400} color={\"rgba(67, 90, 111, .91)\"}>Auto Tabs</Heading>\n            <SegmentedControl\n              marginTop={4}\n              options={state.tabOptions}\n              value={state.tabsTemp}\n              onChange={value => {\n                let tabsTemp = value;\n                setState({...state, tabsTemp });\n              }}\n            />\n\n            <TextInputField\n              marginTop={20}\n              onChange={e => {\n                let valid = utils.isNum(e.target.value);\n                setState({...state, tabThicknessValid:valid})\n              }}\n              isInvalid={!state.tabThicknessValid}\n              name=\"tabThickness\"\n              description={(state.tabThicknessValid) ? \"\" : \"please enter a valid number\"}\n              label=\"Tab Thickness\"\n              placeholder={String(store.getState().defaultParameters.tabThickness)}/>\n\n            <Heading marginTop={20} size={400} color={\"rgba(67, 90, 111, .91)\"}>Auto Dogbone</Heading>\n            <SegmentedControl\n              marginTop={4}\n              options={state.dogboneOptions}\n              value={state.dogboneTemp}\n              onChange={value => {\n                let dogboneTemp = value;\n                setState({...state, dogboneTemp });\n              }}\n            />\n\n            <TextInputField\n              marginTop={20}\n              onChange={e => {\n                let valid = e.target.value !== \"\";\n                setState({...state, nameValid:valid})\n              }}\n              isInvalid={!state.nameValid}\n              name=\"name\"\n              description={(state.nameValid) ? \"\" : \"please enter something\"}\n              label=\"Name for this Profile\"\n              placeholder={String(store.getState().defaultParameters.name)}/>\n\n      </Dialog>\n      <Button disabled={disabled} onClick={() => setState({...state, isShown:true})}>Profile</Button>\n    </div>\n  );\n\n}\n\nexport {ProfileButton};\n"]},"metadata":{},"sourceType":"module"}