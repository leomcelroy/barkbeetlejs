{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends2 = require('babel-runtime/helpers/extends');\n\nvar _extends3 = _interopRequireDefault(_extends2);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _libs = require('../../libs');\n\nvar _UploadList = require('./UploadList');\n\nvar _UploadList2 = _interopRequireDefault(_UploadList);\n\nvar _iFrameUpload = require('./iFrameUpload');\n\nvar _iFrameUpload2 = _interopRequireDefault(_iFrameUpload);\n\nvar _AjaxUpload = require('./AjaxUpload');\n\nvar _AjaxUpload2 = _interopRequireDefault(_AjaxUpload);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar Upload = function (_Component) {\n  (0, _inherits3.default)(Upload, _Component);\n\n  function Upload(props) {\n    (0, _classCallCheck3.default)(this, Upload);\n\n    var _this = (0, _possibleConstructorReturn3.default)(this, (Upload.__proto__ || Object.getPrototypeOf(Upload)).call(this, props));\n\n    _this.state = {\n      fileList: [],\n      tempIndex: 1\n    };\n    return _this;\n  }\n\n  (0, _createClass3.default)(Upload, [{\n    key: 'componentWillMount',\n    value: function componentWillMount() {\n      this.init(this.props);\n    }\n  }, {\n    key: 'init',\n    value: function init(props) {\n      var tempIndex = this.state.tempIndex;\n      var fileList = props.fileList;\n      var uploadFiles = fileList.map(function (file) {\n        file.uid = file.uid || Date.now() + tempIndex++;\n        file.status = 'success';\n        return file;\n      });\n      this.setState({\n        fileList: uploadFiles\n      });\n    }\n  }, {\n    key: 'getChildContext',\n    value: function getChildContext() {\n      return {\n        onPreview: this.handlePreview.bind(this),\n        onRemove: this.handleRemove.bind(this)\n      };\n    }\n  }, {\n    key: 'getFile',\n    value: function getFile(file) {\n      if (file) {\n        return this.state.fileList.find(function (item) {\n          return item.uid === file.uid;\n        });\n      }\n\n      return null;\n    }\n  }, {\n    key: 'handleStart',\n    value: function handleStart(file) {\n      var _state = this.state,\n          tempIndex = _state.tempIndex,\n          fileList = _state.fileList;\n      file.uid = Date.now() + tempIndex++;\n      var _file = {\n        status: 'ready',\n        name: file.name,\n        size: file.size,\n        percentage: 0,\n        uid: file.uid,\n        raw: file\n      };\n\n      try {\n        _file.url = URL.createObjectURL(file);\n      } catch (err) {\n        return;\n      }\n\n      fileList.push(_file);\n      this.setState({\n        fileList: fileList,\n        tempIndex: tempIndex\n      });\n    }\n  }, {\n    key: 'handleProgress',\n    value: function handleProgress(e, file) {\n      var fileList = this.state.fileList;\n\n      var _file = this.getFile(file);\n\n      if (_file) {\n        _file.percentage = e.percent || 0;\n        _file.status = 'uploading';\n        this.props.onProgress(e, _file, fileList);\n        this.setState({\n          fileList: fileList\n        });\n      }\n    }\n  }, {\n    key: 'handleSuccess',\n    value: function handleSuccess(res, file) {\n      var _this2 = this;\n\n      var fileList = this.state.fileList;\n\n      var _file = this.getFile(file);\n\n      if (_file) {\n        _file.status = 'success';\n        _file.response = res;\n        setTimeout(function () {\n          _this2.setState({\n            fileList: fileList\n          }, function () {\n            _this2.props.onSuccess(res, _file, fileList);\n\n            _this2.props.onChange(_file, fileList);\n          });\n        }, 1000);\n      }\n    }\n  }, {\n    key: 'handleError',\n    value: function handleError(err, file) {\n      var _this3 = this;\n\n      var fileList = this.state.fileList;\n\n      var _file = this.getFile(file);\n\n      if (_file) {\n        _file.status = 'fail';\n        fileList.splice(fileList.indexOf(_file), 1);\n        this.setState({\n          fileList: fileList\n        }, function () {\n          _this3.props.onError(err, _file, fileList);\n\n          _this3.props.onChange(_file, fileList);\n        });\n      }\n    }\n  }, {\n    key: 'handleRemove',\n    value: function handleRemove(file) {\n      var _this4 = this;\n\n      var fileList = this.state.fileList;\n\n      var _file = this.getFile(file);\n\n      if (_file) {\n        fileList.splice(fileList.indexOf(_file), 1);\n        this.setState({\n          fileList: fileList\n        }, function () {\n          return _this4.props.onRemove(file, fileList);\n        });\n      }\n    }\n  }, {\n    key: 'handlePreview',\n    value: function handlePreview(file) {\n      if (file.status === 'success') {\n        this.props.onPreview(file);\n      }\n    }\n  }, {\n    key: 'clearFiles',\n    value: function clearFiles() {\n      this.setState({\n        fileList: []\n      });\n    }\n  }, {\n    key: 'submit',\n    value: function submit() {\n      var _this5 = this;\n\n      this.state.fileList.filter(function (file) {\n        return file.status === 'ready';\n      }).forEach(function (file) {\n        _this5.refs['upload-inner'].upload(file.raw, file);\n      });\n    }\n  }, {\n    key: 'showCover',\n    value: function showCover() {\n      var fileList = this.state.fileList;\n      var file = fileList[fileList.length - 1];\n      return file && file.status !== 'fail';\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var fileList = this.state.fileList;\n      var _props = this.props,\n          showFileList = _props.showFileList,\n          autoUpload = _props.autoUpload,\n          drag = _props.drag,\n          tip = _props.tip,\n          action = _props.action,\n          multiple = _props.multiple,\n          beforeUpload = _props.beforeUpload,\n          withCredentials = _props.withCredentials,\n          headers = _props.headers,\n          name = _props.name,\n          data = _props.data,\n          accept = _props.accept,\n          listType = _props.listType,\n          className = _props.className,\n          limit = _props.limit,\n          disabled = _props.disabled,\n          onExceed = _props.onExceed,\n          httpRequest = _props.httpRequest;\n      var uploadList = void 0;\n\n      if (showFileList && fileList.length) {\n        uploadList = _react2.default.createElement(_UploadList2.default, {\n          listType: listType,\n          fileList: fileList\n        });\n      }\n\n      var restProps = {\n        autoUpload: autoUpload,\n        drag: drag,\n        action: action,\n        multiple: multiple,\n        beforeUpload: beforeUpload,\n        withCredentials: withCredentials,\n        headers: headers,\n        name: name,\n        data: data,\n        accept: accept,\n        listType: listType,\n        fileList: fileList,\n        limit: limit,\n        disabled: disabled,\n        onExceed: onExceed,\n        httpRequest: httpRequest,\n        onStart: this.handleStart.bind(this),\n        onProgress: this.handleProgress.bind(this),\n        onSuccess: this.handleSuccess.bind(this),\n        onError: this.handleError.bind(this),\n        onPreview: this.handlePreview.bind(this),\n        onRemove: this.handleRemove.bind(this),\n        showCover: this.showCover(),\n        ref: 'upload-inner'\n      };\n      var trigger = this.props.trigger || this.props.children;\n      var uploadComponent = typeof FormData !== 'undefined' ? _react2.default.createElement(_AjaxUpload2.default, (0, _extends3.default)({\n        key: 'AjaxUpload'\n      }, restProps), trigger) : _react2.default.createElement('iFrameUpload', (0, _extends3.default)({\n        key: 'iFrameUpload'\n      }, restProps), trigger);\n      return _react2.default.createElement('div', {\n        className: className\n      }, listType === 'picture-card' ? uploadList : '', this.props.trigger ? [uploadComponent, this.props.children] : uploadComponent, tip, listType !== 'picture-card' ? uploadList : '');\n    }\n  }]);\n  return Upload;\n}(_libs.Component);\n\nUpload.defaultProps = {\n  headers: {},\n  name: 'file',\n  type: 'select',\n  listType: 'text',\n  fileList: [],\n  showFileList: true,\n  autoUpload: true,\n  disabled: false,\n  onRemove: function onRemove() {},\n  onPreview: function onPreview() {},\n  onProgress: function onProgress() {},\n  onSuccess: function onSuccess() {},\n  onError: function onError() {},\n  onChange: function onChange() {}\n};\nvar _default = Upload;\nexports.default = _default;\nUpload.childContextTypes = {\n  onPreview: _libs.PropTypes.func,\n  onRemove: _libs.PropTypes.func\n};\nUpload.propTypes = {\n  action: _libs.PropTypes.string.isRequired,\n  headers: _libs.PropTypes.object,\n  data: _libs.PropTypes.object,\n  multiple: _libs.PropTypes.bool,\n  name: _libs.PropTypes.string,\n  withCredentials: _libs.PropTypes.bool,\n  showFileList: _libs.PropTypes.bool,\n  fileList: _libs.PropTypes.array,\n  autoUpload: _libs.PropTypes.bool,\n  accept: _libs.PropTypes.string,\n  drag: _libs.PropTypes.bool,\n  listType: _libs.PropTypes.oneOf(['text', 'picture', 'picture-card']),\n  tip: _libs.PropTypes.node,\n  trigger: _libs.PropTypes.node,\n  beforeUpload: _libs.PropTypes.func,\n  onRemove: _libs.PropTypes.func,\n  onPreview: _libs.PropTypes.func,\n  onProgress: _libs.PropTypes.func,\n  onSuccess: _libs.PropTypes.func,\n  onError: _libs.PropTypes.func,\n  onChange: _libs.PropTypes.func,\n  className: _libs.PropTypes.string,\n  disabled: _libs.PropTypes.bool,\n  limit: _libs.PropTypes.number,\n  onExceed: _libs.PropTypes.func,\n  httpRequest: _libs.PropTypes.func\n};\n;\n\nvar _temp = function () {\n  if (typeof __REACT_HOT_LOADER__ === 'undefined') {\n    return;\n  }\n\n  __REACT_HOT_LOADER__.register(Upload, 'Upload', 'src/upload/Upload.jsx');\n\n  __REACT_HOT_LOADER__.register(_default, 'default', 'src/upload/Upload.jsx');\n}();\n\n;","map":null,"metadata":{},"sourceType":"script"}