{"ast":null,"code":"import _toConsumableArray from \"/Users/leomcelroy/Desktop/barkbeetle_js/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _toArray from \"/Users/leomcelroy/Desktop/barkbeetle_js/node_modules/@babel/runtime/helpers/esm/toArray\";\n\n/**\n * Merge multiple matrices into one\n * @param matrices {Matrix[]} Array of affine matrix\n * @returns {Matrix} Affine Matrix\n */\nexport function transform() {\n  for (var _len = arguments.length, matrices = new Array(_len), _key = 0; _key < _len; _key++) {\n    matrices[_key] = arguments[_key];\n  }\n\n  matrices = Array.isArray(matrices[0]) ? matrices[0] : matrices;\n\n  var multiply = function multiply(m1, m2) {\n    return {\n      a: m1.a * m2.a + m1.c * m2.b,\n      c: m1.a * m2.c + m1.c * m2.d,\n      e: m1.a * m2.e + m1.c * m2.f + m1.e,\n      b: m1.b * m2.a + m1.d * m2.b,\n      d: m1.b * m2.c + m1.d * m2.d,\n      f: m1.b * m2.e + m1.d * m2.f + m1.f\n    };\n  };\n\n  switch (matrices.length) {\n    case 0:\n      throw new Error('no matrices provided');\n\n    case 1:\n      return matrices[0];\n\n    case 2:\n      return multiply(matrices[0], matrices[1]);\n\n    default:\n      var _matrices = matrices,\n          _matrices2 = _toArray(_matrices),\n          m1 = _matrices2[0],\n          m2 = _matrices2[1],\n          rest = _matrices2.slice(2);\n\n      var m = multiply(m1, m2);\n      return transform.apply(void 0, [m].concat(_toConsumableArray(rest)));\n  }\n}\n/**\n * Merge multiple matrices into one\n * @param matrices {Matrix[]} Array of matrix\n * @returns {Matrix} Affine Matrix\n */\n\nexport function compose() {\n  return transform.apply(void 0, arguments);\n}","map":null,"metadata":{},"sourceType":"module"}