{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _reactDom = require('react-dom');\n\nvar _reactDom2 = _interopRequireDefault(_reactDom);\n\nvar _libs = require('../../../libs');\n\nvar _locale = require('../../locale');\n\nvar _locale2 = _interopRequireDefault(_locale);\n\nvar _input = require('../../input');\n\nvar _input2 = _interopRequireDefault(_input);\n\nvar _TimePanel = require('./TimePanel');\n\nvar _TimePanel2 = _interopRequireDefault(_TimePanel);\n\nvar _MountBody = require('../MountBody');\n\nvar _utils = require('../utils');\n\nvar _basic = require('../basic');\n\nvar _PopperBase2 = require('./PopperBase');\n\nvar _constants = require('../constants');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar PICKER_VIEWS = {\n  YEAR: 'year',\n  MONTH: 'month',\n  DATE: 'date'\n};\n\nvar DatePanel = function (_PopperBase) {\n  (0, _inherits3.default)(DatePanel, _PopperBase);\n  (0, _createClass3.default)(DatePanel, null, [{\n    key: 'propTypes',\n    get: function get() {\n      return Object.assign({\n        // user picked date value\n        // value: Date | null\n        value: _libs.PropTypes.instanceOf(Date),\n        // (Date)=>void\n        onPick: _libs.PropTypes.func.isRequired,\n        isShowTime: _libs.PropTypes.bool,\n        showWeekNumber: _libs.PropTypes.bool,\n        format: _libs.PropTypes.string,\n        // Array[{text: String, onClick: (picker)=>()}]\n        shortcuts: _libs.PropTypes.arrayOf(_libs.PropTypes.shape({\n          text: _libs.PropTypes.string.isRequired,\n          // ()=>()\n          onClick: _libs.PropTypes.func.isRequired\n        })),\n        selectionMode: _libs.PropTypes.oneOf(Object.keys(_utils.SELECTION_MODES).map(function (e) {\n          return _utils.SELECTION_MODES[e];\n        })),\n        // (Date)=>bool, if true, disabled\n        disabledDate: _libs.PropTypes.func,\n        firstDayOfWeek: _libs.PropTypes.range(0, 6)\n      }, _PopperBase2.PopperBase.propTypes);\n    }\n  }]);\n\n  function DatePanel(props) {\n    (0, _classCallCheck3.default)(this, DatePanel);\n\n    var _this = (0, _possibleConstructorReturn3.default)(this, (DatePanel.__proto__ || Object.getPrototypeOf(DatePanel)).call(this, props));\n\n    var currentView = PICKER_VIEWS.DATE;\n\n    switch (props.selectionMode) {\n      case _utils.SELECTION_MODES.MONTH:\n        currentView = PICKER_VIEWS.MONTH;\n        break;\n\n      case _utils.SELECTION_MODES.YEAR:\n        currentView = PICKER_VIEWS.YEAR;\n        break;\n    }\n\n    _this.state = {\n      currentView: currentView,\n      timePickerVisible: false,\n      pickerWidth: 0,\n      date: new Date() // current view's date\n\n    };\n\n    if (props.value) {\n      _this.state.date = new Date(props.value);\n    }\n\n    return _this;\n  }\n\n  (0, _createClass3.default)(DatePanel, [{\n    key: 'componentWillReceiveProps',\n    value: function componentWillReceiveProps(nextProps) {\n      var date = new Date();\n\n      if (nextProps.value) {\n        date = (0, _utils.toDate)(nextProps.value);\n      }\n\n      this.setState({\n        date: date\n      });\n    }\n  }, {\n    key: 'resetDate',\n    value: function resetDate() {\n      this.date = new Date(this.date);\n    }\n  }, {\n    key: 'showMonthPicker',\n    value: function showMonthPicker() {\n      this.setState({\n        currentView: PICKER_VIEWS.MONTH\n      });\n    }\n  }, {\n    key: 'showYearPicker',\n    value: function showYearPicker() {\n      this.setState({\n        currentView: PICKER_VIEWS.YEAR\n      });\n    }\n  }, {\n    key: 'prevMonth',\n    value: function prevMonth() {\n      var _this2 = this;\n\n      this.updateState(function () {\n        var date = _this2.state.date;\n\n        var _deconstructDate = (0, _utils.deconstructDate)(date),\n            month = _deconstructDate.month,\n            year = _deconstructDate.year;\n\n        date.setMonth(month, 1);\n\n        if (month == 0) {\n          date.setFullYear(year - 1);\n          date.setMonth(11);\n        } else {\n          date.setMonth(month - 1);\n        }\n      });\n    }\n  }, {\n    key: 'nextMonth',\n    value: function nextMonth() {\n      var _this3 = this;\n\n      this.updateState(function () {\n        var date = _this3.state.date;\n\n        var _deconstructDate2 = (0, _utils.deconstructDate)(date),\n            month = _deconstructDate2.month,\n            year = _deconstructDate2.year;\n\n        date.setMonth(month, 1);\n\n        if (month == 11) {\n          date.setFullYear(year + 1);\n          date.setMonth(0);\n        } else {\n          date.setMonth(month + 1);\n        }\n      });\n    }\n  }, {\n    key: 'nextYear',\n    value: function nextYear() {\n      var _this4 = this;\n\n      this.updateState(function () {\n        var _state = _this4.state,\n            date = _state.date,\n            currentView = _state.currentView;\n\n        var _deconstructDate3 = (0, _utils.deconstructDate)(date),\n            year = _deconstructDate3.year;\n\n        if (currentView === 'year') {\n          date.setFullYear(year + 10);\n        } else {\n          date.setFullYear(year + 1);\n        }\n      });\n    }\n  }, {\n    key: 'updateState',\n    value: function updateState(cb) {\n      cb(this.state);\n      this.setState({});\n    }\n  }, {\n    key: 'prevYear',\n    value: function prevYear() {\n      var _this5 = this;\n\n      this.updateState(function () {\n        var _state2 = _this5.state,\n            date = _state2.date,\n            currentView = _state2.currentView;\n\n        var _deconstructDate4 = (0, _utils.deconstructDate)(date),\n            year = _deconstructDate4.year;\n\n        if (currentView === 'year') {\n          date.setFullYear(year - 10);\n        } else {\n          date.setFullYear(year - 1);\n        }\n      });\n    }\n  }, {\n    key: 'handleShortcutClick',\n    value: function handleShortcutClick(shortcut) {\n      shortcut.onClick();\n    }\n  }, {\n    key: 'handleTimePick',\n    value: function handleTimePick(pickedDate, isKeepPanel) {\n      this.updateState(function (state) {\n        if (pickedDate) {\n          var oldDate = state.date;\n          oldDate.setHours(pickedDate.getHours());\n          oldDate.setMinutes(pickedDate.getMinutes());\n          oldDate.setSeconds(pickedDate.getSeconds());\n        }\n\n        state.timePickerVisible = isKeepPanel;\n      });\n    }\n  }, {\n    key: 'handleMonthPick',\n    value: function handleMonthPick(month) {\n      var _this6 = this;\n\n      this.updateState(function (state) {\n        var date = state.date;\n        var selectionMode = _this6.props.selectionMode;\n\n        var _deconstructDate5 = (0, _utils.deconstructDate)(date),\n            year = _deconstructDate5.year;\n\n        if (selectionMode !== _utils.SELECTION_MODES.MONTH) {\n          date.setMonth(month);\n          state.currentView = PICKER_VIEWS.DATE;\n        } else {\n          date.setMonth(month);\n          date.setFullYear(year);\n\n          _this6.props.onPick(new Date(year, month, 1));\n        }\n      });\n    }\n  }, {\n    key: 'handleDatePick',\n    value: function handleDatePick(value) {\n      var _this7 = this;\n\n      this.updateState(function (state) {\n        var date = state.date;\n        var _props = _this7.props,\n            selectionMode = _props.selectionMode,\n            isShowTime = _props.isShowTime,\n            onPick = _props.onPick;\n        var pdate = value.date;\n\n        if (selectionMode === _utils.SELECTION_MODES.DAY) {\n          if (!isShowTime) {\n            onPick(new Date(pdate.getTime()));\n          }\n\n          date.setTime(pdate.getTime());\n        } else if (selectionMode === _utils.SELECTION_MODES.WEEK) {\n          onPick(pdate);\n        }\n      });\n    }\n  }, {\n    key: 'handleYearPick',\n    value: function handleYearPick(year) {\n      var _this8 = this;\n\n      this.updateState(function (state) {\n        var _props2 = _this8.props,\n            onPick = _props2.onPick,\n            selectionMode = _props2.selectionMode;\n        var date = state.date;\n        date.setFullYear(year);\n\n        if (selectionMode === _utils.SELECTION_MODES.YEAR) {\n          onPick(new Date(year, 0));\n        } else {\n          state.currentView = PICKER_VIEWS.MONTH;\n        }\n      });\n    }\n  }, {\n    key: 'changeToNow',\n    value: function changeToNow() {\n      var now = new Date();\n      this.props.onPick(now);\n      this.setState({\n        date: now\n      });\n    }\n  }, {\n    key: 'confirm',\n    value: function confirm() {\n      this.props.onPick(new Date(this.state.date.getTime()));\n    }\n  }, {\n    key: 'resetView',\n    value: function resetView() {\n      var selectionMode = this.props.selectionMode;\n      this.updateState(function (state) {\n        if (selectionMode === _utils.SELECTION_MODES.MONTH) {\n          state.currentView = PICKER_VIEWS.MONTH;\n        } else if (selectionMode === _utils.SELECTION_MODES.YEAR) {\n          state.currentView = PICKER_VIEWS.YEAR;\n        } else {\n          state.currentView = PICKER_VIEWS.DATE;\n        }\n      });\n    }\n  }, {\n    key: 'yearLabel',\n    value: function yearLabel() {\n      var _state3 = this.state,\n          currentView = _state3.currentView,\n          date = _state3.date;\n\n      var _deconstructDate6 = (0, _utils.deconstructDate)(date),\n          year = _deconstructDate6.year;\n\n      var yearTranslation = _locale2.default.t('el.datepicker.year');\n\n      if (currentView === 'year') {\n        var startYear = Math.floor(year / 10) * 10;\n\n        if (yearTranslation) {\n          return startYear + ' ' + yearTranslation + '-' + (startYear + 9) + ' ' + yearTranslation;\n        }\n\n        return startYear + ' - ' + (startYear + 9);\n      }\n\n      return year + ' ' + yearTranslation;\n    }\n  }, {\n    key: '_pickerContent',\n    // end: ------ public methods\n    value: function _pickerContent() {\n      var _props3 = this.props,\n          value = _props3.value,\n          selectionMode = _props3.selectionMode,\n          disabledDate = _props3.disabledDate,\n          showWeekNumber = _props3.showWeekNumber,\n          firstDayOfWeek = _props3.firstDayOfWeek;\n      var date = this.state.date;\n      var currentView = this.state.currentView;\n      var result = null;\n\n      switch (currentView) {\n        case PICKER_VIEWS.DATE:\n          result = _react2.default.createElement(_basic.DateTable, {\n            onPick: this.handleDatePick.bind(this),\n            date: date,\n            value: value,\n            selectionMode: selectionMode,\n            disabledDate: disabledDate,\n            showWeekNumber: showWeekNumber,\n            firstDayOfWeek: firstDayOfWeek\n          });\n          break;\n\n        case PICKER_VIEWS.YEAR:\n          result = _react2.default.createElement(_basic.YearTable, {\n            ref: 'yearTable',\n            value: value,\n            date: date,\n            onPick: this.handleYearPick.bind(this),\n            disabledDate: disabledDate\n          });\n          break;\n\n        case PICKER_VIEWS.MONTH:\n          result = _react2.default.createElement(_basic.MonthTable, {\n            value: value,\n            date: date,\n            onPick: this.handleMonthPick.bind(this),\n            disabledDate: disabledDate\n          });\n          break;\n\n        default:\n          throw new Error('invalid currentView value');\n      }\n\n      return result;\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this9 = this;\n\n      var _props4 = this.props,\n          isShowTime = _props4.isShowTime,\n          shortcuts = _props4.shortcuts;\n      var _state4 = this.state,\n          currentView = _state4.currentView,\n          date = _state4.date,\n          pickerWidth = _state4.pickerWidth,\n          timePickerVisible = _state4.timePickerVisible;\n\n      var _deconstructDate7 = (0, _utils.deconstructDate)(date),\n          month = _deconstructDate7.month;\n\n      var t = _locale2.default.t;\n      return _react2.default.createElement('div', {\n        ref: 'root',\n        className: this.classNames('el-picker-panel el-date-picker', {\n          'has-sidebar': shortcuts,\n          'has-time': isShowTime\n        })\n      }, _react2.default.createElement('div', {\n        className: 'el-picker-panel__body-wrapper'\n      }, Array.isArray(shortcuts) && _react2.default.createElement('div', {\n        className: 'el-picker-panel__sidebar'\n      }, shortcuts.map(function (e, idx) {\n        return _react2.default.createElement('button', {\n          key: idx,\n          type: 'button',\n          className: 'el-picker-panel__shortcut',\n          onClick: function onClick() {\n            return _this9.handleShortcutClick(e);\n          }\n        }, e.text);\n      })), _react2.default.createElement('div', {\n        className: 'el-picker-panel__body'\n      }, isShowTime && _react2.default.createElement('div', {\n        className: 'el-date-picker__time-header'\n      }, _react2.default.createElement('span', {\n        className: 'el-date-picker__editor-wrap'\n      }, _react2.default.createElement(_input2.default, {\n        placeholder: t('el.datepicker.selectDate'),\n        value: this.visibleDate,\n        size: 'small',\n        onChange: function onChange(date) {\n          return _this9.visibleDate = date;\n        }\n      })), _react2.default.createElement('span', {\n        className: 'el-date-picker__editor-wrap'\n      }, _react2.default.createElement(_input2.default, {\n        ref: 'input',\n        onFocus: function onFocus() {\n          return _this9.setState({\n            timePickerVisible: !_this9.state.timePickerVisible\n          });\n        },\n        placeholder: t('el.datepicker.selectTime'),\n        value: this.visibleTime,\n        size: 'small',\n        onChange: function onChange(date) {\n          return _this9.visibleDate = date;\n        }\n      }), timePickerVisible && _react2.default.createElement(_MountBody.MountBody, null, _react2.default.createElement(_TimePanel2.default, {\n        ref: 'timepicker',\n        currentDate: new Date(date.getTime())\n        /* should i dont mutate date directly here ? */\n        ,\n        pickerWidth: pickerWidth\n        /*\n        todo: pickerWidth? in original elmenent repo, this width is set by getting input with using getClientRect() method\n        but it seems work even though I purposely leave this logic unimplemented. To be honest it would require some hack to get\n        this actually done, since I can't do any setState method on componentDidUpdate method.\n        DateRangePicker has same issue\n        */\n        ,\n        onPicked: this.handleTimePick.bind(this),\n        format: this.timeFormat,\n        getPopperRefElement: function getPopperRefElement() {\n          return _reactDom2.default.findDOMNode(_this9.refs.input);\n        },\n        popperMixinOption: {\n          placement: _constants.PLACEMENT_MAP[this.props.align] || _constants.PLACEMENT_MAP.left\n        },\n        onCancel: function onCancel() {\n          return _this9.setState({\n            timePickerVisible: false\n          });\n        }\n      })))), currentView !== 'time' && _react2.default.createElement('div', {\n        className: 'el-date-picker__header'\n      }, _react2.default.createElement('button', {\n        type: 'button',\n        onClick: this.prevYear.bind(this),\n        className: 'el-picker-panel__icon-btn el-date-picker__prev-btn el-icon-d-arrow-left'\n      }), currentView === PICKER_VIEWS.DATE && _react2.default.createElement('button', {\n        type: 'button',\n        onClick: this.prevMonth.bind(this),\n        className: 'el-picker-panel__icon-btn el-date-picker__prev-btn el-icon-arrow-left'\n      }), _react2.default.createElement('span', {\n        onClick: this.showYearPicker.bind(this),\n        className: 'el-date-picker__header-label'\n      }, this.yearLabel()), currentView === PICKER_VIEWS.DATE && _react2.default.createElement('span', {\n        onClick: this.showMonthPicker.bind(this),\n        className: this.classNames('el-date-picker__header-label', {\n          active: currentView === 'month'\n        })\n      }, t('el.datepicker.month' + (month + 1))), _react2.default.createElement('button', {\n        type: 'button',\n        onClick: this.nextYear.bind(this),\n        className: 'el-picker-panel__icon-btn el-date-picker__next-btn el-icon-d-arrow-right'\n      }), currentView === PICKER_VIEWS.DATE && _react2.default.createElement('button', {\n        type: 'button',\n        onClick: this.nextMonth.bind(this),\n        className: 'el-picker-panel__icon-btn el-date-picker__next-btn el-icon-arrow-right'\n      })), _react2.default.createElement('div', {\n        className: 'el-picker-panel__content'\n      }, this._pickerContent()))), isShowTime && currentView === PICKER_VIEWS.DATE && _react2.default.createElement('div', {\n        className: 'el-picker-panel__footer'\n      }, _react2.default.createElement('a', {\n        href: 'JavaScript:',\n        className: 'el-picker-panel__link-btn',\n        onClick: this.changeToNow.bind(this)\n      }, t('el.datepicker.now')), _react2.default.createElement('button', {\n        type: 'button',\n        className: 'el-picker-panel__btn',\n        onClick: function onClick() {\n          return _this9.confirm();\n        }\n      }, t('el.datepicker.confirm'))));\n    }\n  }, {\n    key: 'visibleTime',\n    get: function get() {\n      return (0, _utils.formatDate)(this.state.date, this.timeFormat);\n    },\n    set: function set(val) {\n      if (val) {\n        var ndate = (0, _utils.parseDate)(val, this.timeFormat);\n        var date = this.state.date;\n\n        if (ndate) {\n          ndate.setFullYear(date.getFullYear());\n          ndate.setMonth(date.getMonth());\n          ndate.setDate(date.getDate());\n          this.setState({\n            date: ndate,\n            timePickerVisible: false\n          });\n        }\n      }\n    }\n  }, {\n    key: 'visibleDate',\n    get: function get() {\n      return (0, _utils.formatDate)(this.state.date, this.dateFormat);\n    },\n    set: function set(val) {\n      var ndate = (0, _utils.parseDate)(val, this.dateFormat);\n\n      if (!ndate) {\n        return;\n      }\n\n      var disabledDate = this.props.disabledDate;\n      var date = this.state.date;\n\n      if (typeof disabledDate === 'function' && disabledDate(ndate)) {\n        return;\n      }\n\n      ndate.setHours(date.getHours());\n      ndate.setMinutes(date.getMinutes());\n      ndate.setSeconds(date.getSeconds());\n      this.setState({\n        date: ndate\n      });\n      this.resetView();\n    }\n  }, {\n    key: 'timeFormat',\n    get: function get() {\n      var format = this.props.format;\n\n      if (format && format.indexOf('ss') === -1) {\n        return 'HH:mm';\n      } else {\n        return 'HH:mm:ss';\n      }\n    }\n  }, {\n    key: 'dateFormat',\n    get: function get() {\n      if (this.props.format) return this.props.format.replace('HH:mm', '').replace(':ss', '').trim();else return 'yyyy-MM-dd';\n    }\n  }]);\n  return DatePanel;\n}(_PopperBase2.PopperBase);\n\nvar _default = DatePanel;\nexports.default = _default;\nDatePanel.defaultProps = {\n  isShowTime: false,\n  selectionMode: _utils.SELECTION_MODES.DAY\n};\n;\n\nvar _temp = function () {\n  if (typeof __REACT_HOT_LOADER__ === 'undefined') {\n    return;\n  }\n\n  __REACT_HOT_LOADER__.register(PICKER_VIEWS, 'PICKER_VIEWS', 'src/date-picker/panel/DatePanel.jsx');\n\n  __REACT_HOT_LOADER__.register(DatePanel, 'DatePanel', 'src/date-picker/panel/DatePanel.jsx');\n\n  __REACT_HOT_LOADER__.register(_default, 'default', 'src/date-picker/panel/DatePanel.jsx');\n}();\n\n;","map":null,"metadata":{},"sourceType":"script"}