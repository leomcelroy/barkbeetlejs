{"ast":null,"code":"import _toConsumableArray from \"/Users/leomcelroy/Desktop/barkBeetleEverything/barkbeetle_js_real/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\n// makerjs model, depth, params -> pocket toolpath\nimport * as mjs from 'makerjs';\nvar STRANGE_CORRECTION = 0.0000001;\n\nvar isToolpath = function isToolpath(toolpath) {\n  if (Object.keys(toolpath.models).length === 0) {\n    return false;\n  } else {\n    return true;\n  }\n};\n\nvar intToolpath = function intToolpath(geo, radius) {\n  return mjs.model.outline(geo, radius + STRANGE_CORRECTION, 1, true);\n};\n\nvar intToolpaths = function intToolpaths(geo, radius) {\n  var first = intToolpath(geo, radius);\n\n  if (isToolpath(first) !== true) {\n    return {\n      models: {}\n    };\n  }\n\n  var models = {};\n  var count = 0;\n  models[count] = intToolpath(geo, radius);\n  count++;\n\n  while (isToolpath(intToolpath(models[count - 1], radius))) {\n    models[count] = intToolpath(models[count - 1], radius);\n    count++;\n  }\n\n  var model = {\n    models: models\n  };\n  return model;\n};\n\nvar pocket = function pocket(model, params) {\n  //let p = model.models.profile;\n  var p = model; // let outline = mjs.model.outline(p, params.compensatedRadius, 1, true); //third parameter is what type of corners, 0 (rounded) by default\n\n  var outline = intToolpath(p, params.compensatedRadius);\n  var outlines = intToolpaths(p, params.compensatedRadius);\n  console.log(outline);\n  var t = Object.values(outlines.models).map(function (x) {\n    return mjs.model.findSingleChain(x);\n  }); //TODO: need to change this to find chains\n\n  console.log(t); //let chains = mjs.model.findChains(expansion);\n\n  var chain = mjs.model.findSingleChain(outline);\n  var divisions = Math.floor(chain.pathLength / params.minimumSpacing);\n  var spacing = chain.pathLength / divisions;\n  var keyPoints = mjs.chain.toPoints(chain, spacing); // let scaleFactor = 10;\n  // let scaleXY = keyPoints.map(p => [p[0] * scaleFactor, p[1] * scaleFactor]);\n\n  var gcodePoints = keyPoints.map(function (p) {\n    return \"G1 X\".concat(p[0], \" Y\").concat(p[1], \" F\").concat(params.feedRate);\n  });\n  var gcode = JSON.parse(JSON.stringify(gcodePoints));\n  var firstPoint = keyPoints[0];\n  var paths = params.depthOfPasses.map(function (p, i) {\n    return [\"G1 Z\".concat(params.depthOfPasses[i], \" F12.0\")].concat(_toConsumableArray(gcode), [\"G1 X\".concat(firstPoint[0], \" Y\").concat(firstPoint[1], \" F\").concat(params.feedRate)]);\n  });\n  paths = paths.flat(1);\n  gcode = [params.units, \"G90\", \"G1 Z\".concat(params.jogHeight, \" F9.0\"), \"G0 X\".concat(firstPoint[0], \" Y\").concat(firstPoint[1])].concat(_toConsumableArray(paths)); // write to a new file named\n\n  var filename = 'testGcodePocket.nc';\n  var text = gcode.join('\\n');\n  return {\n    drawing: outlines,\n    gcode: text,\n    filename: filename\n  };\n};\n\nexport { pocket };","map":{"version":3,"sources":["/Users/leomcelroy/Desktop/barkBeetleEverything/barkbeetle_js_real/src/toolpaths/pocket.js"],"names":["mjs","STRANGE_CORRECTION","isToolpath","toolpath","Object","keys","models","length","intToolpath","geo","radius","model","outline","intToolpaths","first","count","pocket","params","p","compensatedRadius","outlines","console","log","t","values","map","x","findSingleChain","chain","divisions","Math","floor","pathLength","minimumSpacing","spacing","keyPoints","toPoints","gcodePoints","feedRate","gcode","JSON","parse","stringify","firstPoint","paths","depthOfPasses","i","flat","units","jogHeight","filename","text","join","drawing"],"mappings":"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","sourcesContent":["// makerjs model, depth, params -> pocket toolpath\nimport * as mjs from 'makerjs';\n\nconst STRANGE_CORRECTION = 0.0000001;\n\nconst isToolpath = (toolpath) => {\n  if (Object.keys(toolpath.models).length === 0) {\n    return false;\n  } else {\n    return true;\n  }\n}\n\nconst intToolpath = (geo, radius) => {\n  return mjs.model.outline(geo, radius + STRANGE_CORRECTION, 1, true);\n}\n\nconst intToolpaths = (geo, radius) => {\n  let first = intToolpath(geo, radius);\n\n  if (isToolpath(first) !== true) {\n    return {models:{}};\n  }\n\n  let models = {}\n  let count = 0;\n\n  models[count] = intToolpath(geo, radius);\n\n  count++;\n\n  while ( isToolpath(intToolpath(models[count-1], radius)) ) {\n    models[count] = intToolpath(models[count-1], radius);\n    count++;\n  }\n\n  let model = {models}\n\n  return model;\n}\n\nconst pocket = (model, params) => {\n  //let p = model.models.profile;\n  let p = model;\n\n  // let outline = mjs.model.outline(p, params.compensatedRadius, 1, true); //third parameter is what type of corners, 0 (rounded) by default\n  let outline = intToolpath(p, params.compensatedRadius);\n  let outlines = intToolpaths(p, params.compensatedRadius);\n  console.log(outline);\n  let t = Object.values(outlines.models).map(x => mjs.model.findSingleChain(x)); //TODO: need to change this to find chains\n\n  console.log(t);\n\n  //let chains = mjs.model.findChains(expansion);\n  let chain = mjs.model.findSingleChain(outline);\n\n  var divisions = Math.floor(chain.pathLength / params.minimumSpacing);\n  var spacing = chain.pathLength / divisions;\n\n  let keyPoints = mjs.chain.toPoints(chain, spacing);\n\n  // let scaleFactor = 10;\n  // let scaleXY = keyPoints.map(p => [p[0] * scaleFactor, p[1] * scaleFactor]);\n\n  let gcodePoints = keyPoints.map(p => `G1 X${p[0]} Y${p[1]} F${params.feedRate}`)\n  let gcode = JSON.parse(JSON.stringify(gcodePoints));\n\n  let firstPoint = keyPoints[0];\n\n  let paths = params.depthOfPasses.map((p,i) => [`G1 Z${params.depthOfPasses[i]} F12.0`, ...gcode, `G1 X${firstPoint[0]} Y${firstPoint[1]} F${params.feedRate}`])\n  paths = paths.flat(1);\n\n  gcode = [\n    params.units,\n    \"G90\",\n    `G1 Z${params.jogHeight} F9.0`,\n    `G0 X${firstPoint[0]} Y${firstPoint[1]}`,\n    ...paths\n  ]\n\n  // write to a new file named\n  let filename = 'testGcodePocket.nc';\n\n  let text = gcode.join('\\n');\n\n  return {drawing: outlines, gcode: text, filename};\n};\n\n\nexport {pocket};\n"]},"metadata":{},"sourceType":"module"}