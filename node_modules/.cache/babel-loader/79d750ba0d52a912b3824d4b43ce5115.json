{"ast":null,"code":"import { fromObject } from './fromObject';\nimport { translate } from './translate';\nimport { scale } from './scale';\nimport { rotateDEG } from './rotate';\nimport { skewDEG } from './skew';\nimport { shear } from './shear';\n/**\n * Converts array of matrix descriptor to array of matrix\n * @param definitionOrArrayOfDefinition {Object[]} Array of object describing the matrix\n * @returns {Matrix[]} Array of matrix\n *\n * @example\n * > fromDefinition([\n *  { type: 'matrix', a:1, b:2, c:3, d:4, e:5, f:6 },\n *  { type: 'translate', tx: 10, ty: 20 },\n *  { type: 'scale', sx: 2, sy: 4 },\n *  { type: 'rotate', angle: 90, sx: 50, sy: 25 },\n *  { type: 'skewX', angle: 45 },\n *  { type: 'skewY',  angle: 45 },\n *  { type: 'shear', shx: 10, shy: 20}\n * ])\n *\n * [\n *  { a: 1, b: 2, c: 3, d: 4, e: 5, f: 6 },\n *  { a: 1, c: 0, e: 10, b: 0, d: 1, f: 20 },\n *  { a: 2, c: 0, e: 0, b: 0, d: 4, f: 0 },\n *  { a: 6.123, c: -1, e: 0, b: 1, d: 6.123, f: 0 },\n *  { a: 1, c: 0.99.., e: 0, b: 0, d: 1, f: 0 },\n *  { a: 1, c: 0, e: 0, b: 0.99, d: 1, f: 0 },\n *  { a: 1, c: 10, e: 0, b: 20, d: 1, f: 0 }\n * ]\n **/\n\nexport function fromDefinition(definitionOrArrayOfDefinition) {\n  return Array.isArray(definitionOrArrayOfDefinition) ? definitionOrArrayOfDefinition.map(mapper) : mapper(definitionOrArrayOfDefinition);\n\n  function mapper(descriptor) {\n    switch (descriptor.type) {\n      case 'matrix':\n        if ('a' in descriptor && 'b' in descriptor && 'c' in descriptor && 'd' in descriptor && 'e' in descriptor && 'f' in descriptor) {\n          return fromObject(descriptor);\n        } else {\n          throw new Error('MISSING_MANDATORY_PARAM');\n        }\n\n      case 'translate':\n        if (!('tx' in descriptor)) throw new Error('MISSING_MANDATORY_PARAM');\n        if ('ty' in descriptor) return translate(descriptor.tx, descriptor.ty);\n        return translate(descriptor.tx);\n\n      case 'scale':\n        if (!('sx' in descriptor)) throw new Error('MISSING_MANDATORY_PARAM');\n        if ('sy' in descriptor) return scale(descriptor.sx, descriptor.sy);\n        return scale(descriptor.sx);\n\n      case 'rotate':\n        if (!('angle' in descriptor)) throw new Error('MISSING_MANDATORY_PARAM');\n\n        if ('cx' in descriptor && 'cy' in descriptor) {\n          return rotateDEG(descriptor.angle, descriptor.cx, descriptor.cy);\n        }\n\n        return rotateDEG(descriptor.angle);\n\n      case 'skewX':\n        if (!('angle' in descriptor)) throw new Error('MISSING_MANDATORY_PARAM');\n        return skewDEG(descriptor.angle, 0);\n\n      case 'skewY':\n        if (!('angle' in descriptor)) throw new Error('MISSING_MANDATORY_PARAM');\n        return skewDEG(0, descriptor.angle);\n\n      case 'shear':\n        if (!('shx' in descriptor && 'shy' in descriptor)) throw new Error('MISSING_MANDATORY_PARAM');\n        return shear(descriptor.shx, descriptor.shy);\n\n      default:\n        throw new Error('UNSUPPORTED_DESCRIPTOR');\n    }\n  }\n}","map":null,"metadata":{},"sourceType":"module"}