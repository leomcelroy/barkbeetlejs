{"ast":null,"code":"import _toConsumableArray from \"/Users/leomcelroy/Desktop/barkbeetle_js/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\n// makerjs model, params -> profile toolpath\nimport * as mjs from 'makerjs';\nimport clipperOffset from './clipperOffset.js';\nimport { clipOffset } from '../unmakerjs/clipper.js';\n\nvar offsetFunc = function offsetFunc(offset) {\n  if (offset === \"outside\") {\n    return false;\n  } else if (offset === \"inside\") {\n    return true;\n  } else if (offset === \"none\") {\n    return \"none\";\n  }\n};\n\nvar profile = function profile(model, params) {\n  //let p = model.models.profile;\n  var p = model;\n  var outline;\n  var offset = offsetFunc(params.offset);\n\n  if (offset === \"none\") {\n    outline = p;\n  } else {\n    //outline = mjs.model.outline(p, params.compensatedRadius, 0, offset); //third parameter is what type of corners, 0 (rounded) by default\n    offset = offset === true ? -1 : 1;\n    outline = clipOffset(p, offset * params.compensatedRadius);\n  }\n\n  var contourLines = Object.values(outline).flat();\n  var keyPoints = contourLines.map(function (line) {\n    return [{\n      X: Math.round(line.origin[0] * scale),\n      Y: Math.round(line.origin[1] * scale)\n    }];\n  }).flat();\n  console.log(\"contourLines\", contourLines);\n  var gcodePoints = keyPoints.map(function (p) {\n    return \"G1 X\".concat(p[0], \" Y\").concat(p[1], \" F\").concat(params.feedRate);\n  }); //let gcode = JSON.parse(JSON.stringify(gcodePoints));\n\n  var firstPoint = keyPoints[0];\n  var paths = params.depthOfPasses.map(function (p, i) {\n    return [\"G1 Z\".concat(params.depthOfPasses[i], \" F12.0\")].concat(_toConsumableArray(gcodePoints), [\"G1 X\".concat(firstPoint[0], \" Y\").concat(firstPoint[1], \" F\").concat(params.feedRate)]);\n  });\n  paths = paths.flat(1);\n  var preamble = [params.units, \"G90\"];\n  var gcode = [].concat(preamble, [\"(end of preamble)\", \"G1 Z\".concat(params.jogHeight, \" F\").concat(params.jogRate), \"G0 X\".concat(firstPoint[0], \" Y\").concat(firstPoint[1])], _toConsumableArray(paths), [\"G1 Z\".concat(params.jogHeight, \" F\").concat(params.jogRate)]); // write to a new file named\n\n  var filename = 'testGcodeProfile.gcode';\n  var text = gcode.join('\\n');\n  return {\n    drawing: contourLines,\n    gcode: text,\n    filename: filename\n  };\n};\n\nexport { profile };","map":{"version":3,"sources":["/Users/leomcelroy/Desktop/barkbeetle_js/src/toolpaths/profile.js"],"names":["mjs","clipperOffset","clipOffset","offsetFunc","offset","profile","model","params","p","outline","compensatedRadius","contourLines","Object","values","flat","keyPoints","map","line","X","Math","round","origin","scale","Y","console","log","gcodePoints","feedRate","firstPoint","paths","depthOfPasses","i","preamble","units","gcode","jogHeight","jogRate","filename","text","join","drawing"],"mappings":"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","sourcesContent":["// makerjs model, params -> profile toolpath\n\nimport * as mjs from 'makerjs';\nimport clipperOffset from './clipperOffset.js';\nimport {clipOffset} from '../unmakerjs/clipper.js'\n\n\nconst offsetFunc = (offset) => {\n  if (offset === \"outside\") {\n    return false;\n  } else if (offset === \"inside\") {\n    return true;\n  } else if (offset === \"none\") {\n    return \"none\";\n  }\n}\n\nconst profile = (model, params) => {\n  //let p = model.models.profile;\n  let p = model;\n\n  let outline;\n  let offset = offsetFunc(params.offset);\n  if (offset === \"none\") {\n    outline = p;\n  } else {\n    //outline = mjs.model.outline(p, params.compensatedRadius, 0, offset); //third parameter is what type of corners, 0 (rounded) by default\n    offset = (offset === true) ? -1 : 1;\n    outline = clipOffset(p, offset * params.compensatedRadius);\n  }\n  let contourLines = Object.values(outline).flat();\n\n  let keyPoints = contourLines.map(line =>\n      ([\n          {X: Math.round(line.origin[0] * scale), Y: Math.round(line.origin[1] * scale)},\n          //{X: Math.round(line.end[0] * scale), Y: Math.round(line.end[1] * scale)}\n      ])).flat();\n\n  console.log(\"contourLines\", contourLines);\n\n  let gcodePoints = keyPoints.map(p => `G1 X${p[0]} Y${p[1]} F${params.feedRate}`)\n  //let gcode = JSON.parse(JSON.stringify(gcodePoints));\n\n  let firstPoint = keyPoints[0];\n\n  let paths = params.depthOfPasses.map((p,i) => [\n    `G1 Z${params.depthOfPasses[i]} F12.0`,\n    ...gcodePoints,\n    `G1 X${firstPoint[0]} Y${firstPoint[1]} F${params.feedRate}`\n  ])\n\n  paths = paths.flat(1);\n\n  let preamble = [params.units, \"G90\"];\n\n  let gcode = [\n    ...preamble,\n    \"(end of preamble)\",\n    `G1 Z${params.jogHeight} F${params.jogRate}`,\n    `G0 X${firstPoint[0]} Y${firstPoint[1]}`,\n    ...paths,\n    `G1 Z${params.jogHeight} F${params.jogRate}`,\n  ]\n\n  // write to a new file named\n  let filename = 'testGcodeProfile.gcode';\n\n  let text = gcode.join('\\n');\n\n  return {drawing: contourLines, gcode: text, filename};\n};\n\n\nexport {profile};\n"]},"metadata":{},"sourceType":"module"}