{"ast":null,"code":"import _slicedToArray from \"/Users/leomcelroy/Desktop/barkbeetle_js/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/leomcelroy/Desktop/barkbeetle_js/src/unmakerjs/primitives.js\";\nimport React from 'react';\n\nvar isPrimitive = function isPrimitive(stroke) {\n  if (stroke.hasOwnProperty(\"type\")) {\n    if (stroke.type === \"line\" || stroke.type === \"arc\" || stroke.type === \"circle\" || stroke.type === \"bezier\") {\n      return true;\n    } else {\n      return false;\n    }\n  } else {\n    return false;\n  }\n};\n\nexport var line = function line(origin, end) {\n  return {\n    type: \"line\",\n    origin: origin,\n    end: end\n  };\n};\nexport var renderLine = function renderLine(line, id) {\n  var points = [line.origin, line.end];\n  var pathData = \"M \" + points.map(function (_ref) {\n    var _ref2 = _slicedToArray(_ref, 2),\n        x = _ref2[0],\n        y = _ref2[1];\n\n    return \"\".concat(x, \"x \").concat(y, \"y\");\n  });\n  var style = {\n    fill: \"none\",\n    strokeWidth: \"8px\",\n    stroke: \"black\",\n    strokeLinejoin: \"round\",\n    strokeLinecap: \"round\",\n    opacity: \"1\"\n  };\n  var path = React.createElement(\"g\", {\n    key: id,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }, React.createElement(\"path\", {\n    d: pathData,\n    style: style,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }));\n  console.log(\"path\", path);\n  return path;\n};\n\nvar arc = function arc(origin, radius, startAngle, endAngle) {\n  return {\n    type: \"arc\",\n    origin: origin,\n    radius: radius,\n    startAngle: startAngle,\n    endAngle: endAngle\n  };\n};\n\nvar circle = function circle(origin, radius) {\n  return {\n    type: \"circle\",\n    origin: origin,\n    radius: radius\n  };\n};\n\nvar bezier = function bezier(origin, cOrigin, end, cEnd) {\n  return {\n    type: \"bezier\",\n    origin: origin,\n    cOrigin: cOrigin,\n    end: end,\n    cEnd: cEnd\n  };\n};","map":{"version":3,"sources":["/Users/leomcelroy/Desktop/barkbeetle_js/src/unmakerjs/primitives.js"],"names":["React","isPrimitive","stroke","hasOwnProperty","type","line","origin","end","renderLine","id","points","pathData","map","x","y","style","fill","strokeWidth","strokeLinejoin","strokeLinecap","opacity","path","console","log","arc","radius","startAngle","endAngle","circle","bezier","cOrigin","cEnd"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,MAAD,EAAY;AAC9B,MAAIA,MAAM,CAACC,cAAP,CAAsB,MAAtB,CAAJ,EAAmC;AAEjC,QAAID,MAAM,CAACE,IAAP,KAAgB,MAAhB,IACAF,MAAM,CAACE,IAAP,KAAgB,KADhB,IAEAF,MAAM,CAACE,IAAP,KAAgB,QAFhB,IAGAF,MAAM,CAACE,IAAP,KAAgB,QAHpB,EAG8B;AACxB,aAAO,IAAP;AACD,KALL,MAKW;AACL,aAAO,KAAP;AACD;AAEN,GAXD,MAWO;AACL,WAAO,KAAP;AACD;AACF,CAfD;;AAiBA,OAAO,IAAMC,IAAI,GAAG,SAAPA,IAAO,CAACC,MAAD,EAASC,GAAT,EAAiB;AACnC,SAAO;AACLH,IAAAA,IAAI,EAAE,MADD;AAELE,IAAAA,MAAM,EAANA,MAFK;AAGLC,IAAAA,GAAG,EAAHA;AAHK,GAAP;AAKD,CANM;AAQP,OAAO,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAACH,IAAD,EAAOI,EAAP,EAAc;AACtC,MAAIC,MAAM,GAAG,CAACL,IAAI,CAACC,MAAN,EAAcD,IAAI,CAACE,GAAnB,CAAb;AAEA,MAAII,QAAQ,GAAG,OAAOD,MAAM,CAACE,GAAP,CAAW;AAAA;AAAA,QAAEC,CAAF;AAAA,QAAKC,CAAL;;AAAA,qBAAeD,CAAf,eAAqBC,CAArB;AAAA,GAAX,CAAtB;AAEA,MAAIC,KAAK,GAAG;AACNC,IAAAA,IAAI,EAAE,MADA;AAENC,IAAAA,WAAW,EAAE,KAFP;AAGNf,IAAAA,MAAM,EAAE,OAHF;AAINgB,IAAAA,cAAc,EAAE,OAJV;AAKNC,IAAAA,aAAa,EAAE,OALT;AAMNC,IAAAA,OAAO,EAAE;AANH,GAAZ;AASA,MAAIC,IAAI,GAAG;AAAG,IAAA,GAAG,EAAEZ,EAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAY;AAAM,IAAA,CAAC,EAAEE,QAAT;AAAmB,IAAA,KAAK,EAAEI,KAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAZ,CAAX;AAEAO,EAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBF,IAApB;AAEA,SAAOA,IAAP;AAED,CApBM;;AAsBP,IAAMG,GAAG,GAAG,SAANA,GAAM,CAAClB,MAAD,EAASmB,MAAT,EAAiBC,UAAjB,EAA6BC,QAA7B,EAA0C;AACpD,SAAO;AACLvB,IAAAA,IAAI,EAAE,KADD;AAELE,IAAAA,MAAM,EAANA,MAFK;AAGLmB,IAAAA,MAAM,EAANA,MAHK;AAILC,IAAAA,UAAU,EAAVA,UAJK;AAKLC,IAAAA,QAAQ,EAARA;AALK,GAAP;AAOD,CARD;;AAUA,IAAMC,MAAM,GAAG,SAATA,MAAS,CAACtB,MAAD,EAASmB,MAAT,EAAoB;AACjC,SAAO;AACLrB,IAAAA,IAAI,EAAE,QADD;AAELE,IAAAA,MAAM,EAANA,MAFK;AAGLmB,IAAAA,MAAM,EAANA;AAHK,GAAP;AAKD,CAND;;AAQA,IAAMI,MAAM,GAAG,SAATA,MAAS,CAACvB,MAAD,EAASwB,OAAT,EAAkBvB,GAAlB,EAAuBwB,IAAvB,EAAgC;AAC7C,SAAO;AACL3B,IAAAA,IAAI,EAAE,QADD;AAELE,IAAAA,MAAM,EAANA,MAFK;AAGLwB,IAAAA,OAAO,EAAPA,OAHK;AAILvB,IAAAA,GAAG,EAAHA,GAJK;AAKLwB,IAAAA,IAAI,EAAJA;AALK,GAAP;AAOD,CARD","sourcesContent":["import React from 'react';\n\nconst isPrimitive = (stroke) => {\n  if (stroke.hasOwnProperty(\"type\")) {\n\n    if (stroke.type === \"line\" ||\n        stroke.type === \"arc\" ||\n        stroke.type === \"circle\" ||\n        stroke.type === \"bezier\") {\n          return true;\n        } else {\n          return false;\n        }\n\n  } else {\n    return false;\n  }\n}\n\nexport const line = (origin, end) => {\n  return {\n    type: \"line\",\n    origin,\n    end,\n  }\n}\n\nexport const renderLine = (line, id) => {\n  let points = [line.origin, line.end];\n\n  let pathData = \"M \" + points.map(([x, y]) => `${x}x ${y}y`);\n\n  let style = {\n        fill: \"none\",\n        strokeWidth: \"8px\",\n        stroke: \"black\",\n        strokeLinejoin: \"round\",\n        strokeLinecap: \"round\",\n        opacity: \"1\"\n      }\n\n  let path = <g key={id}><path d={pathData} style={style}/></g>;\n\n  console.log(\"path\", path)\n\n  return path;\n\n}\n\nconst arc = (origin, radius, startAngle, endAngle) => {\n  return {\n    type: \"arc\",\n    origin,\n    radius,\n    startAngle,\n    endAngle,\n  }\n}\n\nconst circle = (origin, radius) => {\n  return {\n    type: \"circle\",\n    origin,\n    radius,\n  }\n}\n\nconst bezier = (origin, cOrigin, end, cEnd) => {\n  return {\n    type: \"bezier\",\n    origin,\n    cOrigin,\n    end,\n    cEnd\n  }\n}\n"]},"metadata":{},"sourceType":"module"}