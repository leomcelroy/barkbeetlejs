{"ast":null,"code":"import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread\";\nimport { Themer } from '../../../../themer';\nimport memoizeClassName from '../utils/memoizeClassName';\nimport scales from '../foundational-styles/scales';\nimport { getTextColorForIntent, getPrimaryButtonStylesForIntent } from '../helpers';\nimport { defaultControlStyles } from '../shared';\n/**\n * Disabled styles are all the same for all buttons.\n */\n\nvar disabled = defaultControlStyles.disabled;\n/**\n * Get button appearance.\n * @param {string} appearance - default, primary, minimal.\n * @param {string} intent - none, success, warning, danger.\n * @return {Object} the appearance of the button.\n */\n\nvar getButtonAppearance = function getButtonAppearance(appearance, intent) {\n  switch (appearance) {\n    case 'primary':\n      {\n        var _getPrimaryButtonStyl = getPrimaryButtonStylesForIntent(intent),\n            linearGradient = _getPrimaryButtonStyl.linearGradient,\n            focusColor = _getPrimaryButtonStyl.focusColor;\n\n        return Themer.createButtonAppearance({\n          disabled: disabled,\n          base: {\n            color: 'white',\n            backgroundColor: 'white',\n            backgroundImage: linearGradient.base,\n            boxShadow: \"inset 0 0 0 1px \".concat(scales.neutral.N5A, \", inset 0 -1px 1px 0 \").concat(scales.neutral.N2A)\n          },\n          hover: {\n            backgroundImage: linearGradient.hover\n          },\n          focus: {\n            boxShadow: \"0 0 0 3px \".concat(focusColor, \", inset 0 0 0 1px \").concat(scales.neutral.N4A, \", inset 0 -1px 1px 0 \").concat(scales.neutral.N5A)\n          },\n          active: {\n            backgroundImage: linearGradient.active,\n            boxShadow: \"inset 0 0 0 1px \".concat(scales.neutral.N4A, \", inset 0 1px 1px 0 \").concat(scales.neutral.N2A)\n          },\n          focusAndActive: {\n            boxShadow: \"0 0 0 3px \".concat(focusColor, \", inset 0 0 0 1px \").concat(scales.neutral.N4A, \", inset 0 1px 1px 0 \").concat(scales.neutral.N2A)\n          }\n        });\n      }\n\n    case 'minimal':\n      {\n        var intentTextColor = getTextColorForIntent(intent, scales.blue.B9);\n        return Themer.createButtonAppearance({\n          disabled: disabled,\n          base: {\n            color: intentTextColor,\n            backgroundColor: 'transparent'\n          },\n          hover: {\n            backgroundColor: scales.neutral.N2A\n          },\n          focus: {\n            boxShadow: \"0 0 0 3px \".concat(scales.blue.B5A)\n          },\n          active: {\n            backgroundImage: 'none',\n            backgroundColor: scales.blue.B3A\n          },\n          focusAndActive: {}\n        });\n      }\n\n    case 'default':\n    default:\n      {\n        var _intentTextColor = getTextColorForIntent(intent);\n\n        return Themer.createButtonAppearance({\n          disabled: disabled,\n          base: _objectSpread({\n            color: _intentTextColor\n          }, defaultControlStyles.base),\n          hover: defaultControlStyles.hover,\n          focus: defaultControlStyles.focus,\n          active: defaultControlStyles.active,\n          focusAndActive: defaultControlStyles.focusAndActive\n        });\n      }\n  }\n};\n/**\n * Get the className of a `Button`|`IconButton`.\n * @param {string} appearance - default, primary, minimal.\n * @param {Intent} intent - none, success, warning, danger.\n * @return {string} the appearance class name.\n */\n\n\nexport default memoizeClassName(getButtonAppearance);","map":null,"metadata":{},"sourceType":"module"}