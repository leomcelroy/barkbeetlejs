{"ast":null,"code":"/*\n * Copyright 2015 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the terms of the LICENSE file distributed with this project.\n */\nimport * as tslib_1 from \"tslib\";\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\";\nimport { findDOMNode } from \"react-dom\";\nimport * as Classes from \"../../common/classes\";\nimport * as Keys from \"../../common/keys\";\nimport { DISPLAYNAME_PREFIX } from \"../../common/props\";\nimport { safeInvoke } from \"../../common/utils\";\nimport { Portal } from \"../portal/portal\";\n\nvar Overlay =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(Overlay, _super);\n\n  function Overlay(props, context) {\n    var _this = _super.call(this, props, context) || this;\n\n    _this.refHandlers = {\n      container: function container(ref) {\n        return _this.containerElement = findDOMNode(ref);\n      }\n    };\n\n    _this.maybeRenderChild = function (child) {\n      if (child == null) {\n        return null;\n      } // add a special class to each child element that will automatically set the appropriate\n      // CSS position mode under the hood. also, make the container focusable so we can\n      // trap focus inside it (via `enforceFocus`).\n\n\n      var decoratedChild = typeof child === \"object\" ? React.cloneElement(child, {\n        className: classNames(child.props.className, Classes.OVERLAY_CONTENT),\n        tabIndex: 0\n      }) : React.createElement(\"span\", {\n        className: Classes.OVERLAY_CONTENT\n      }, child);\n      var _a = _this.props,\n          onOpening = _a.onOpening,\n          onOpened = _a.onOpened,\n          onClosing = _a.onClosing,\n          onClosed = _a.onClosed,\n          transitionDuration = _a.transitionDuration,\n          transitionName = _a.transitionName;\n      return React.createElement(CSSTransition, {\n        classNames: transitionName,\n        onEntering: onOpening,\n        onEntered: onOpened,\n        onExiting: onClosing,\n        onExited: onClosed,\n        timeout: transitionDuration\n      }, decoratedChild);\n    };\n\n    _this.handleBackdropMouseDown = function (e) {\n      var _a = _this.props,\n          backdropProps = _a.backdropProps,\n          canOutsideClickClose = _a.canOutsideClickClose,\n          enforceFocus = _a.enforceFocus,\n          onClose = _a.onClose;\n\n      if (canOutsideClickClose) {\n        safeInvoke(onClose, e);\n      }\n\n      if (enforceFocus) {\n        // make sure document.activeElement is updated before bringing the focus back\n        _this.bringFocusInsideOverlay();\n      }\n\n      safeInvoke(backdropProps.onMouseDown, e);\n    };\n\n    _this.handleDocumentClick = function (e) {\n      var _a = _this.props,\n          canOutsideClickClose = _a.canOutsideClickClose,\n          isOpen = _a.isOpen,\n          onClose = _a.onClose;\n      var eventTarget = e.target;\n      var stackIndex = Overlay.openStack.indexOf(_this);\n      var isClickInThisOverlayOrDescendant = Overlay.openStack.slice(stackIndex).some(function (_a) {\n        var elem = _a.containerElement; // `elem` is the container of backdrop & content, so clicking on that container\n        // should not count as being \"inside\" the overlay.\n\n        return elem && elem.contains(eventTarget) && !elem.isSameNode(eventTarget);\n      });\n\n      if (isOpen && canOutsideClickClose && !isClickInThisOverlayOrDescendant) {\n        // casting to any because this is a native event\n        safeInvoke(onClose, e);\n      }\n    };\n\n    _this.handleDocumentFocus = function (e) {\n      if (_this.props.enforceFocus && _this.containerElement != null && !_this.containerElement.contains(e.target)) {\n        // prevent default focus behavior (sometimes auto-scrolls the page)\n        e.preventDefault();\n        e.stopImmediatePropagation();\n\n        _this.bringFocusInsideOverlay();\n      }\n    };\n\n    _this.handleKeyDown = function (e) {\n      var _a = _this.props,\n          canEscapeKeyClose = _a.canEscapeKeyClose,\n          onClose = _a.onClose;\n\n      if (e.which === Keys.ESCAPE && canEscapeKeyClose) {\n        safeInvoke(onClose, e); // prevent browser-specific escape key behavior (Safari exits fullscreen)\n\n        e.preventDefault();\n      }\n    };\n\n    _this.state = {\n      hasEverOpened: props.isOpen\n    };\n    return _this;\n  }\n\n  Overlay.prototype.render = function () {\n    // oh snap! no reason to render anything at all if we're being truly lazy\n    if (this.props.lazy && !this.state.hasEverOpened) {\n      return null;\n    }\n\n    var _a = this.props,\n        children = _a.children,\n        className = _a.className,\n        usePortal = _a.usePortal,\n        isOpen = _a.isOpen; // TransitionGroup types require single array of children; does not support nested arrays.\n    // So we must collapse backdrop and children into one array, and every item must be wrapped in a\n    // Transition element (no ReactText allowed).\n\n    var childrenWithTransitions = isOpen ? React.Children.map(children, this.maybeRenderChild) : [];\n    childrenWithTransitions.unshift(this.maybeRenderBackdrop());\n    var containerClasses = classNames(Classes.OVERLAY, (_b = {}, _b[Classes.OVERLAY_OPEN] = isOpen, _b[Classes.OVERLAY_INLINE] = !usePortal, _b), className);\n    var transitionGroup = React.createElement(TransitionGroup, {\n      appear: true,\n      className: containerClasses,\n      component: \"div\",\n      onKeyDown: this.handleKeyDown,\n      ref: this.refHandlers.container\n    }, childrenWithTransitions);\n\n    if (usePortal) {\n      return React.createElement(Portal, {\n        className: this.props.portalClassName,\n        container: this.props.portalContainer\n      }, transitionGroup);\n    } else {\n      return transitionGroup;\n    }\n\n    var _b;\n  };\n\n  Overlay.prototype.componentDidMount = function () {\n    if (this.props.isOpen) {\n      this.overlayWillOpen();\n    }\n  };\n\n  Overlay.prototype.componentWillReceiveProps = function (nextProps) {\n    this.setState({\n      hasEverOpened: this.state.hasEverOpened || nextProps.isOpen\n    });\n  };\n\n  Overlay.prototype.componentDidUpdate = function (prevProps) {\n    if (prevProps.isOpen && !this.props.isOpen) {\n      this.overlayWillClose();\n    } else if (!prevProps.isOpen && this.props.isOpen) {\n      this.overlayWillOpen();\n    }\n  };\n\n  Overlay.prototype.componentWillUnmount = function () {\n    this.overlayWillClose();\n  };\n  /**\n   * @public for testing\n   * @internal\n   */\n\n\n  Overlay.prototype.bringFocusInsideOverlay = function () {\n    var _this = this; // always delay focus manipulation to just before repaint to prevent scroll jumping\n\n\n    return requestAnimationFrame(function () {\n      // container ref may be undefined between component mounting and Portal rendering\n      // activeElement may be undefined in some rare cases in IE\n      if (_this.containerElement == null || document.activeElement == null || !_this.props.isOpen) {\n        return;\n      }\n\n      var isFocusOutsideModal = !_this.containerElement.contains(document.activeElement);\n\n      if (isFocusOutsideModal) {\n        // element marked autofocus has higher priority than the other clowns\n        var autofocusElement = _this.containerElement.querySelector(\"[autofocus]\");\n\n        var wrapperElement = _this.containerElement.querySelector(\"[tabindex]\");\n\n        if (autofocusElement != null) {\n          autofocusElement.focus();\n        } else if (wrapperElement != null) {\n          wrapperElement.focus();\n        }\n      }\n    });\n  };\n\n  Overlay.prototype.maybeRenderBackdrop = function () {\n    var _a = this.props,\n        backdropClassName = _a.backdropClassName,\n        backdropProps = _a.backdropProps,\n        hasBackdrop = _a.hasBackdrop,\n        isOpen = _a.isOpen,\n        transitionDuration = _a.transitionDuration,\n        transitionName = _a.transitionName;\n\n    if (hasBackdrop && isOpen) {\n      return React.createElement(CSSTransition, {\n        classNames: transitionName,\n        key: \"__backdrop\",\n        timeout: transitionDuration\n      }, React.createElement(\"div\", tslib_1.__assign({}, backdropProps, {\n        className: classNames(Classes.OVERLAY_BACKDROP, backdropClassName, backdropProps.className),\n        onMouseDown: this.handleBackdropMouseDown,\n        tabIndex: this.props.canOutsideClickClose ? 0 : null\n      })));\n    } else {\n      return null;\n    }\n  };\n\n  Overlay.prototype.overlayWillClose = function () {\n    document.removeEventListener(\"focus\", this.handleDocumentFocus,\n    /* useCapture */\n    true);\n    document.removeEventListener(\"mousedown\", this.handleDocumentClick);\n    var openStack = Overlay.openStack;\n    var stackIndex = openStack.indexOf(this);\n\n    if (stackIndex !== -1) {\n      openStack.splice(stackIndex, 1);\n\n      if (openStack.length > 0) {\n        var lastOpenedOverlay = Overlay.getLastOpened();\n\n        if (lastOpenedOverlay.props.enforceFocus) {\n          document.addEventListener(\"focus\", lastOpenedOverlay.handleDocumentFocus,\n          /* useCapture */\n          true);\n        }\n      }\n\n      if (openStack.filter(function (o) {\n        return o.props.usePortal && o.props.hasBackdrop;\n      }).length === 0) {\n        document.body.classList.remove(Classes.OVERLAY_OPEN);\n      }\n    }\n  };\n\n  Overlay.prototype.overlayWillOpen = function () {\n    var openStack = Overlay.openStack;\n\n    if (openStack.length > 0) {\n      document.removeEventListener(\"focus\", Overlay.getLastOpened().handleDocumentFocus,\n      /* useCapture */\n      true);\n    }\n\n    openStack.push(this);\n\n    if (this.props.autoFocus) {\n      this.bringFocusInsideOverlay();\n    }\n\n    if (this.props.enforceFocus) {\n      document.addEventListener(\"focus\", this.handleDocumentFocus,\n      /* useCapture */\n      true);\n    }\n\n    if (this.props.canOutsideClickClose && !this.props.hasBackdrop) {\n      document.addEventListener(\"mousedown\", this.handleDocumentClick);\n    }\n\n    if (this.props.hasBackdrop && this.props.usePortal) {\n      // add a class to the body to prevent scrolling of content below the overlay\n      document.body.classList.add(Classes.OVERLAY_OPEN);\n    }\n  };\n\n  Overlay.displayName = DISPLAYNAME_PREFIX + \".Overlay\";\n  Overlay.defaultProps = {\n    autoFocus: true,\n    backdropProps: {},\n    canEscapeKeyClose: true,\n    canOutsideClickClose: true,\n    enforceFocus: true,\n    hasBackdrop: true,\n    isOpen: false,\n    lazy: true,\n    transitionDuration: 300,\n    transitionName: Classes.OVERLAY,\n    usePortal: true\n  };\n  Overlay.openStack = [];\n\n  Overlay.getLastOpened = function () {\n    return Overlay.openStack[Overlay.openStack.length - 1];\n  };\n\n  return Overlay;\n}(React.PureComponent);\n\nexport { Overlay };","map":null,"metadata":{},"sourceType":"module"}