{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _libs = require('../../../libs');\n\nvar _draggable = require('../draggable');\n\nvar _draggable2 = _interopRequireDefault(_draggable);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar AlphaSlider = function (_Component) {\n  (0, _inherits3.default)(AlphaSlider, _Component);\n\n  function AlphaSlider(props) {\n    (0, _classCallCheck3.default)(this, AlphaSlider);\n\n    var _this = (0, _possibleConstructorReturn3.default)(this, (AlphaSlider.__proto__ || Object.getPrototypeOf(AlphaSlider)).call(this, props));\n\n    _this.state = {\n      thumbLeft: 0,\n      thumbTop: 0,\n      background: null\n    };\n    return _this;\n  }\n\n  (0, _createClass3.default)(AlphaSlider, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      var _refs = this.refs,\n          bar = _refs.bar,\n          thumb = _refs.thumb;\n      var dragConfig = {\n        drag: function drag(event) {\n          _this2.handleDrag(event);\n        },\n        end: function end(event) {\n          _this2.handleDrag(event);\n        }\n      };\n      (0, _draggable2.default)(bar, dragConfig);\n      (0, _draggable2.default)(thumb, dragConfig);\n      this.update();\n    }\n  }, {\n    key: 'handleClick',\n    value: function handleClick(event) {\n      var thumb = this.refs.thumb;\n      var target = event.target;\n\n      if (target !== thumb) {\n        this.handleDrag(event);\n      }\n    }\n  }, {\n    key: 'handleDrag',\n    value: function handleDrag(event) {\n      var _props = this.props,\n          vertical = _props.vertical,\n          color = _props.color;\n      var onChange = this.context.onChange;\n      var rect = this.$el.getBoundingClientRect();\n      var thumb = this.refs.thumb;\n\n      if (!vertical) {\n        var left = event.clientX - rect.left;\n        left = Math.max(thumb.offsetWidth / 2, left);\n        left = Math.min(left, rect.width - thumb.offsetWidth / 2);\n        color.set('alpha', Math.round((left - thumb.offsetWidth / 2) / (rect.width - thumb.offsetWidth) * 100));\n      } else {\n        var top = event.clientY - rect.top;\n        top = Math.max(thumb.offsetHeight / 2, top);\n        top = Math.min(top, rect.height - thumb.offsetHeight / 2);\n        color.set('alpha', Math.round((top - thumb.offsetHeight / 2) / (rect.height - thumb.offsetHeight) * 100));\n      }\n\n      this.update();\n      onChange(color);\n    }\n  }, {\n    key: 'getThumbLeft',\n    value: function getThumbLeft() {\n      var _props2 = this.props,\n          vertical = _props2.vertical,\n          color = _props2.color;\n      if (vertical) return 0;\n      var el = this.$el;\n      var alpha = color._alpha;\n      if (!el) return 0;\n      var thumb = this.refs.thumb;\n      return Math.round(alpha * (el.offsetWidth - thumb.offsetWidth / 2) / 100);\n    }\n  }, {\n    key: 'getThumbTop',\n    value: function getThumbTop() {\n      var _props3 = this.props,\n          vertical = _props3.vertical,\n          color = _props3.color;\n      if (!vertical) return 0;\n      var el = this.$el;\n      var alpha = color._alpha;\n      if (!el) return 0;\n      var thumb = this.refs.thumb;\n      return Math.round(alpha * (el.offsetHeight - thumb.offsetHeight / 2) / 100);\n    }\n  }, {\n    key: 'getBackground',\n    value: function getBackground() {\n      var color = this.props.color;\n\n      if (color && color.value) {\n        var _color$toRgb = color.toRgb(),\n            r = _color$toRgb.r,\n            g = _color$toRgb.g,\n            b = _color$toRgb.b;\n\n        return 'linear-gradient(to right, rgba(' + r + ', ' + g + ', ' + b + ', 0) 0%, rgba(' + r + ', ' + g + ', ' + b + ', 1) 100%)';\n      }\n\n      return null;\n    }\n  }, {\n    key: 'update',\n    value: function update() {\n      this.setState({\n        thumbLeft: this.getThumbLeft(),\n        thumbTop: this.getThumbTop(),\n        background: this.getBackground()\n      });\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this3 = this;\n\n      var vertical = this.props.vertical;\n      var _state = this.state,\n          thumbLeft = _state.thumbLeft,\n          thumbTop = _state.thumbTop,\n          background = _state.background;\n      return _react2.default.createElement('div', {\n        ref: function ref(el) {\n          return _this3.$el = el;\n        },\n        className: this.classNames({\n          'el-color-alpha-slider': true,\n          'is-vertical': vertical\n        })\n      }, _react2.default.createElement('div', {\n        className: 'el-color-alpha-slider__bar',\n        onClick: function onClick(e) {\n          return _this3.handleClick(e);\n        },\n        ref: 'bar',\n        style: {\n          background: background\n        }\n      }), _react2.default.createElement('div', {\n        className: 'el-color-alpha-slider__thumb',\n        ref: 'thumb',\n        style: {\n          left: thumbLeft + 'px',\n          top: thumbTop + 'px'\n        }\n      }));\n    }\n  }]);\n  return AlphaSlider;\n}(_libs.Component);\n\nvar _default = AlphaSlider;\nexports.default = _default;\nAlphaSlider.contextTypes = {\n  onChange: _libs.PropTypes.func\n};\nAlphaSlider.propTypes = {\n  color: _libs.PropTypes.object.isRequired,\n  vertical: _libs.PropTypes.bool\n};\n;\n\nvar _temp = function () {\n  if (typeof __REACT_HOT_LOADER__ === 'undefined') {\n    return;\n  }\n\n  __REACT_HOT_LOADER__.register(AlphaSlider, 'AlphaSlider', 'src/color-picker/components/AlphaSlider.jsx');\n\n  __REACT_HOT_LOADER__.register(_default, 'default', 'src/color-picker/components/AlphaSlider.jsx');\n}();\n\n;","map":null,"metadata":{},"sourceType":"script"}