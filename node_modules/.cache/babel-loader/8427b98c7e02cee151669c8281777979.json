{"ast":null,"code":"import _toConsumableArray from \"/Users/leomcelroy/Desktop/barkbeetle_js/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport { line } from '../unmakerjs/primitives.js';\n\nvar linesToPolylinePoints = function linesToPolylinePoints(lines, lastIndex) {\n  return lines.map(function (line, i) {\n    //should import this instead\n    if (i === lastIndex - 1) return [{\n      x: line.origin[0],\n      y: line.origin[1]\n    }, {\n      x: line.end[0],\n      y: line.end[1]\n    }];\n    return {\n      x: line.origin[0],\n      y: line.origin[1]\n    };\n  }).flat();\n}; // let sum = (a, b) => a + b;\n\n\nvar getCenter = function getCenter(contour) {\n  var polyline = linesToPolylinePoints(contour);\n  var xS = polyline.map(function (point) {\n    return point.x;\n  });\n  var medianX = (Math.max.apply(Math, _toConsumableArray(xS)) + Math.min.apply(Math, _toConsumableArray(xS))) / 2; // let averageX = xS.reduce(sum, 0)/xS.length;\n\n  var yS = polyline.map(function (point) {\n    return point.y;\n  });\n  var medianY = (Math.max.apply(Math, _toConsumableArray(yS)) + Math.min.apply(Math, _toConsumableArray(yS))) / 2; // let averageY = yS.reduce(sum, 0)/yS.length;\n  // return [averageX, averageY];\n\n  return [medianX, medianY];\n};\n\nexport var drillGcode = function drillGcode(center, params) {\n  var units;\n  if (params.units === \"in\") units = \"G20\";\n  if (params.units === \"mm\") units = \"G21\";\n  var preamble = [units, \"G90\"];\n  var gcode = [].concat(preamble, [\"(end of preamble)\", \"G1 Z\".concat(params.jogHeight, \" F\").concat(params.jogRate), \"G0 X\".concat(center[0], \" Y\").concat(center[1]), \"G1 Z-\".concat(params.cutDepth, \" F\").concat(params.plungeRate), //plunge rate\n  \"G1 Z\".concat(params.jogHeight, \" F\").concat(params.jogRate)]);\n  var text = gcode.join('\\n');\n  return text;\n};\nexport var drill = function drill(contour, params) {\n  var center = getCenter(contour);\n  var gcode = drillGcode(center, params);\n  var drawing = [[line([center[0] - params.compensatedRadius, center[1]], [center[0] + params.compensatedRadius, center[1]])], [line([center[0], center[1] - params.compensatedRadius], [center[0], center[1] + params.compensatedRadius])]];\n  return {\n    drawing: drawing,\n    gcode: gcode,\n    geometry: center\n  };\n};","map":{"version":3,"sources":["/Users/leomcelroy/Desktop/barkbeetle_js/src/toolpaths/drill.js"],"names":["line","linesToPolylinePoints","lines","lastIndex","map","i","x","origin","y","end","flat","getCenter","contour","polyline","xS","point","medianX","Math","max","min","yS","medianY","drillGcode","center","params","units","preamble","gcode","jogHeight","jogRate","cutDepth","plungeRate","text","join","drill","drawing","compensatedRadius","geometry"],"mappings":"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","sourcesContent":["import {line} from '../unmakerjs/primitives.js';\n\nconst linesToPolylinePoints = (lines, lastIndex) => lines.map((line, i) => { //should import this instead\n  if (i === lastIndex-1) return [{x:line.origin[0], y:line.origin[1]}, {x:line.end[0], y:line.end[1]}];\n\n  return {x:line.origin[0], y:line.origin[1]}\n}).flat()\n\n// let sum = (a, b) => a + b;\n\nconst getCenter = (contour) => {\n  let polyline = linesToPolylinePoints(contour);\n\n  let xS = polyline.map(point => point.x);\n  let medianX = (Math.max(...xS) + Math.min(...xS))/2\n  // let averageX = xS.reduce(sum, 0)/xS.length;\n\n  let yS = polyline.map(point => point.y);\n  let medianY = (Math.max(...yS) + Math.min(...yS))/2\n  // let averageY = yS.reduce(sum, 0)/yS.length;\n\n  // return [averageX, averageY];\n  return [medianX, medianY];\n\n}\n\nexport const drillGcode = (center, params) => {\n  let units;\n  if (params.units === \"in\") units = \"G20\";\n  if (params.units === \"mm\") units = \"G21\";\n\n  let preamble = [units, \"G90\"];\n\n  let gcode = [\n    ...preamble,\n    \"(end of preamble)\",\n    `G1 Z${params.jogHeight} F${params.jogRate}`,\n    `G0 X${center[0]} Y${center[1]}`,\n    `G1 Z-${params.cutDepth} F${params.plungeRate}`, //plunge rate\n    `G1 Z${params.jogHeight} F${params.jogRate}`,\n  ]\n\n  let text = gcode.join('\\n');\n\n  return text;\n}\n\nexport const drill = (contour, params) => {\n  let center = getCenter(contour);\n\n  let gcode = drillGcode(center, params);\n\n  let drawing = [\n    [line([center[0] - params.compensatedRadius, center[1]], [center[0] + params.compensatedRadius, center[1]])],\n    [line([center[0], center[1] - params.compensatedRadius], [center[0], center[1] + params.compensatedRadius])]\n  ]\n\n  return {drawing, gcode: gcode, geometry: center};\n};\n"]},"metadata":{},"sourceType":"module"}