{"ast":null,"code":"//This code is adapted from https://github.com/makercam/makercam/blob/master/src/clipperOffset.ts\nimport ClipperLib from 'js-clipper';\nimport { connectPoints } from './primitives.js';\nimport * as utils from '../utils.js';\nvar EndTypes = {\n  etOpenSquare: 0,\n  etOpenRound: 1,\n  etOpenButt: 2,\n  etClosedPolygon: 3,\n  etClosedLine: 4\n};\nvar JoinTypes = [ClipperLib.JoinType.jtSquare, ClipperLib.JoinType.jtRound, ClipperLib.JoinType.jtMiter]; // single contour -> list of offset contours\n\nexport var clipOffsetContour = function clipOffsetContour(contour, offset) {\n  var joints = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  var tolerance = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0.01;\n  var scale = 1000;\n  var start = contour[0].origin;\n  var end = contour[contour.length - 1].end;\n  var endless = end.every(function (entry, i) {\n    return entry === start[i];\n  }); // console.log(\"contour\", contour);\n\n  var keyPoints = contour.map(function (line) {\n    return {\n      X: Math.round(line.origin[0] * scale),\n      Y: Math.round(line.origin[1] * scale)\n    };\n  });\n\n  if (endless) {\n    keyPoints.push(keyPoints[0]);\n  } else {\n    end = {\n      X: Math.round(end[0] * scale),\n      Y: Math.round(end[1] * scale)\n    };\n    keyPoints.push(end);\n  }\n\n  var paths = [keyPoints];\n  console.log(\"paths\", paths);\n  var co = new ClipperLib.ClipperOffset();\n  var offsetted = new ClipperLib.Paths();\n  co.Clear();\n  co.AddPaths(paths, JoinTypes[joints], endless ? EndTypes.etClosedLine : EndTypes.etOpenButt); //chain.endless ? EndTypes.etClosedLine : EndTypes.etOpenButt\n\n  co.MiterLimit = 2;\n  co.ArcTolerance = 0.25;\n  co.Execute(offsetted, offset * scale);\n  console.log(\"offsetted\", offsetted);\n  console.log(\"endless\", endless);\n  var newContours = []; //what should I return a list or a js object\n  // console.log(\"offsetted\", offsetted)\n\n  offsetted.forEach(function (points) {\n    // console.log(\"points\", points)\n    if (points.length === 0) return;\n    var result = [];\n    points.forEach(function (point) {\n      result.push([point.X / scale, point.Y / scale]);\n    });\n    if (endless) result.push(result[0]); //to close it\n    // console.log(\"result\", result);\n    // console.log(\"connected\", connectPoints(result))\n\n    newContours.push(connectPoints(result));\n  });\n  console.log(\"newContours\", newContours);\n  return newContours;\n}; // list of contours -> list of offset contours\n\nexport var clipOffsetContours = function clipOffsetContours(contours, offset) {\n  var joints = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  var tolerance = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0.01;\n  var scale = 1000; // const chains = maker.model.findChains(modelToOutline);\n\n  var newContours = contours.reduce(function (memo, contour, i) {\n    var start = contour[0].origin;\n    var end = contour[contour.length - 1].end;\n    var endless = end.every(function (entry, i) {\n      return entry === start[i];\n    });\n    var keyPoints = contour.map(function (line) {\n      return {\n        X: Math.round(line.origin[0] * scale),\n        Y: Math.round(line.origin[1] * scale)\n      };\n    });\n\n    if (endless) {\n      keyPoints.push(keyPoints[0]);\n    }\n\n    var paths = [keyPoints];\n    var co = new ClipperLib.ClipperOffset();\n    var offsetted = new ClipperLib.Paths();\n    co.Clear();\n    co.AddPaths(paths, JoinTypes[joints], endless ? EndTypes.etClosedLine : EndTypes.etOpenButt);\n    co.MiterLimit = 2;\n    co.ArcTolerance = 0.25;\n    co.Execute(offsetted, offset * scale);\n    offsetted.forEach(function (points, j) {\n      if (points.length === 0) return;\n      var result = [];\n      points.forEach(function (point) {\n        result.push([point.X / scale, point.Y / scale]);\n      });\n      if (endless) result.push(result[0]); //to close it\n\n      var newModel = connectPoints(result);\n      memo.push(newModel);\n    });\n    return memo;\n  }, []);\n  return models;\n}; // let paths = contour.map(line => ([\n//                     {X: Math.round(line.origin[0] * scale), Y: Math.round(line.origin[1] * scale)},\n//                     {X: Math.round(line.end[0] * scale), Y: Math.round(line.end[1] * scale)}\n//             ])).reduce((result, value, index, array) => {\n//                 if (index % 2 === 0) {\n//                     result.push(array.slice(index, index + 2).flat());\n//                 }\n//                 return result;\n//\n//             }, []);","map":{"version":3,"sources":["/Users/leomcelroy/Desktop/barkbeetle_js/src/unmakerjs/clipper.js"],"names":["ClipperLib","connectPoints","utils","EndTypes","etOpenSquare","etOpenRound","etOpenButt","etClosedPolygon","etClosedLine","JoinTypes","JoinType","jtSquare","jtRound","jtMiter","clipOffsetContour","contour","offset","joints","tolerance","scale","start","origin","end","length","endless","every","entry","i","keyPoints","map","line","X","Math","round","Y","push","paths","console","log","co","ClipperOffset","offsetted","Paths","Clear","AddPaths","MiterLimit","ArcTolerance","Execute","newContours","forEach","points","result","point","clipOffsetContours","contours","reduce","memo","j","newModel","models"],"mappings":"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","sourcesContent":["//This code is adapted from https://github.com/makercam/makercam/blob/master/src/clipperOffset.ts\n\nimport ClipperLib from 'js-clipper';\n\nimport {connectPoints} from './primitives.js';\nimport * as utils from '../utils.js';\n\nconst EndTypes = {\n    etOpenSquare: 0,\n    etOpenRound: 1,\n    etOpenButt: 2,\n    etClosedPolygon: 3,\n    etClosedLine: 4\n};\n\nconst JoinTypes = [\n    ClipperLib.JoinType.jtSquare,\n    ClipperLib.JoinType.jtRound,\n    ClipperLib.JoinType.jtMiter\n]\n\n// single contour -> list of offset contours\nexport const clipOffsetContour = (contour, offset, joints = 1, tolerance = 0.01) => {\n    const scale = 1000\n    let start = contour[0].origin;\n    let end = contour[contour.length - 1].end;\n    let endless = end.every((entry, i) => entry === start[i]);\n\n    // console.log(\"contour\", contour);\n\n    let keyPoints = contour.map(line => { return {X: Math.round(line.origin[0] * scale), Y: Math.round(line.origin[1] * scale)} });\n\n    if (endless) {\n        keyPoints.push(keyPoints[0]);\n    } else {\n        end = {X: Math.round(end[0] * scale), Y: Math.round(end[1] * scale)};\n        keyPoints.push(end);\n    }\n\n    let paths = [keyPoints]\n\n    console.log(\"paths\", paths);\n\n    const co = new ClipperLib.ClipperOffset()\n    const offsetted = new ClipperLib.Paths()\n    co.Clear()\n    co.AddPaths(paths, JoinTypes[joints], endless ? EndTypes.etClosedLine : EndTypes.etOpenButt) //chain.endless ? EndTypes.etClosedLine : EndTypes.etOpenButt\n    co.MiterLimit = 2\n    co.ArcTolerance = 0.25\n    co.Execute(offsetted, offset * scale);\n\n    console.log(\"offsetted\", offsetted)\n\n    console.log(\"endless\",endless)\n\n    let newContours = []; //what should I return a list or a js object\n\n    // console.log(\"offsetted\", offsetted)\n\n    offsetted.forEach((points) => {\n        // console.log(\"points\", points)\n        if (points.length === 0) return\n        let result = []\n        points.forEach((point) => {\n            result.push([point.X / scale, point.Y / scale])\n        })\n\n        if (endless) result.push(result[0]); //to close it\n        // console.log(\"result\", result);\n        // console.log(\"connected\", connectPoints(result))\n\n        newContours.push(connectPoints(result));\n    })\n\n    console.log(\"newContours\", newContours)\n\n    return newContours;\n}\n\n// list of contours -> list of offset contours\nexport const clipOffsetContours = (contours, offset, joints = 1, tolerance = 0.01) => {\n    const scale = 1000\n    // const chains = maker.model.findChains(modelToOutline);\n    const newContours = contours.reduce((memo, contour, i) => {\n        let start = contour[0].origin;\n        let end = contour[contour.length - 1].end;\n        let endless = end.every((entry, i) => entry === start[i]);\n\n        let keyPoints = contour.map(line => { return {X: Math.round(line.origin[0] * scale), Y: Math.round(line.origin[1] * scale)} });\n\n        if (endless) {\n            keyPoints.push(keyPoints[0])\n        }\n\n        let paths = [keyPoints]\n\n        const co = new ClipperLib.ClipperOffset()\n        const offsetted = new ClipperLib.Paths()\n        co.Clear()\n        co.AddPaths(paths, JoinTypes[joints], endless ? EndTypes.etClosedLine : EndTypes.etOpenButt)\n        co.MiterLimit = 2\n        co.ArcTolerance = 0.25\n        co.Execute(offsetted, offset * scale);\n        offsetted.forEach((points, j) => {\n            if (points.length === 0) return\n            let result = []\n            points.forEach((point: any) => {\n                result.push([point.X / scale, point.Y / scale])\n            })\n\n            if (endless) result.push(result[0]); //to close it\n            const newModel = connectPoints(result)\n\n            memo.push(newModel);\n        })\n        return memo\n    }, [])\n    return models\n}\n\n// let paths = contour.map(line => ([\n//                     {X: Math.round(line.origin[0] * scale), Y: Math.round(line.origin[1] * scale)},\n//                     {X: Math.round(line.end[0] * scale), Y: Math.round(line.end[1] * scale)}\n//             ])).reduce((result, value, index, array) => {\n//                 if (index % 2 === 0) {\n//                     result.push(array.slice(index, index + 2).flat());\n//                 }\n//                 return result;\n//\n//             }, []);\n"]},"metadata":{},"sourceType":"module"}