{"ast":null,"code":"import _classCallCheck from \"/Users/leomcelroy/Desktop/barkBeetleEverything/barkbeetle_js_real/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/leomcelroy/Desktop/barkBeetleEverything/barkbeetle_js_real/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/leomcelroy/Desktop/barkBeetleEverything/barkbeetle_js_real/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/leomcelroy/Desktop/barkBeetleEverything/barkbeetle_js_real/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/leomcelroy/Desktop/barkBeetleEverything/barkbeetle_js_real/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _toConsumableArray from \"/Users/leomcelroy/Desktop/barkBeetleEverything/barkbeetle_js_real/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nvar _jsxFileName = \"/Users/leomcelroy/Desktop/barkBeetleEverything/barkbeetle_js_real/src/App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport * as utils from './utils.js';\nimport * as s2p from 'shape2path';\nimport * as mjs from 'makerjs';\nimport * as svgson from 'svgson';\nimport * as params from './parameters.js';\nimport { Workplane } from './Workplane.js';\nimport Button from '@material-ui/core/Button';\nimport { kk } from './joints/koshikake.js'; //import svg and turn into paths\n\nvar t = s2p.rect({\n  x: 0,\n  y: 120,\n  width: 200,\n  height: 200,\n  rx: 20,\n  ry: 20\n});\nvar m = mjs.importer.fromSVGPathData(t);\nvar c1 = mjs.model.expandPaths(m, params.compensatedRadius, 1);\nvar c2 = mjs.model.findChains(c1); // console.log(c2)\n\nvar chain = mjs.model.findSingleChain(c1); // console.log(chain)\n\nvar minimumSpacing = 5;\nvar divisions = Math.floor(chain.pathLength / minimumSpacing);\nvar spacing = chain.pathLength / divisions;\nvar keyPoints = mjs.chain.toPoints(chain, spacing);\nvar scaleFactor = 100;\nvar scaleXY = keyPoints.map(function (p) {\n  return [p[0] / scaleFactor, p[1] / scaleFactor];\n});\nvar gcodePoints = scaleXY.map(function (p) {\n  return \"G1 X\".concat(p[0], \" Y\").concat(p[1], \" F\").concat(params.feedRate);\n});\nvar gcode = JSON.parse(JSON.stringify(gcodePoints));\nvar firstPoint = scaleXY[0];\nvar paths = params.depthOfPasses.map(function (p, i) {\n  return [\"G1 Z\".concat(params.depthOfPasses[i], \" F12.0\")].concat(_toConsumableArray(gcode), [\"G1 X\".concat(firstPoint[0], \" Y\").concat(firstPoint[1], \" F\").concat(params.feedRate)]);\n});\npaths = paths.flat(1);\ngcode = [\"G20\", \"G90\", \"G1 Z\".concat(params.jogHeight, \" F9.0\"), \"G0 X\".concat(firstPoint[0], \" Y\").concat(firstPoint[1])].concat(_toConsumableArray(paths)); // write to a new file named\n\nvar filename = 'testGcode.nc';\nvar text = gcode.join('\\n'); // utils.download(filename, text);\n\nvar svg = mjs.exporter.toSVG(c1);\nsvg = utils.editSVG(svg); //<div dangerouslySetInnerHTML={{__html: svg}}/>\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this));\n    _this.state = {\n      shapes: []\n    };\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"uploadSVG\",\n    value: function uploadSVG(e) {\n      var replaceWithPath = function replaceWithPath(child) {\n        if (child.name === \"g\") {\n          return child.children.map(function (grandchild) {\n            return replaceWithPath(grandchild);\n          });\n        }\n\n        if (child.name === \"rectangle\") {\n          var temp = s2p.rect({\n            x: 0,\n            y: 120,\n            width: 200,\n            height: 200,\n            rx: 20,\n            ry: 20\n          });\n          return mjs.importer.fromSVGPathData(temp);\n        }\n\n        if (child.name === \"path\") {\n          var makerjsPath = mjs.importer.fromSVGPathData(child.attributes.d);\n          return makerjsPath;\n        }\n      };\n\n      var files = e.target.files;\n      var file = files[0];\n      var reader = new FileReader();\n\n      reader.onload = function (event) {\n        var text = event.target.result; // let regexPaths = /<path[\\s\\S]*\\/>/g;\n        // let foundPaths = file2.match(regexPaths);\n\n        svgson.parse(text).then(function (json) {\n          var svg = json.children.map(function (child) {\n            return replaceWithPath(child);\n          });\n          svg = svg.flat(1); //TODO: what does the argument do again?\n          //TODO: update state to have makerjs models\n\n          console.log(svg);\n        });\n      };\n\n      reader.readAsText(file);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(\"div\", {\n        style: {\n          margin: 0,\n          height: \"100%\",\n          overflow: \"hidden\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      }, React.createElement(Workplane, {\n        group: kk,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        id: \"myInput\",\n        type: \"file\",\n        ref: function ref(_ref) {\n          return _this2.upload = _ref;\n        },\n        style: {\n          display: 'none'\n        },\n        onChange: function onChange(e) {\n          return _this2.uploadSVG(e);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        },\n        __self: this\n      }), React.createElement(Button, {\n        variant: \"contained\",\n        color: \"primary\",\n        onClick: function onClick(e) {\n          return _this2.upload.click();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136\n        },\n        __self: this\n      }, \"Upload SVG\")));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/leomcelroy/Desktop/barkBeetleEverything/barkbeetle_js_real/src/App.js"],"names":["React","Component","utils","s2p","mjs","svgson","params","Workplane","Button","kk","t","rect","x","y","width","height","rx","ry","m","importer","fromSVGPathData","c1","model","expandPaths","compensatedRadius","c2","findChains","chain","findSingleChain","minimumSpacing","divisions","Math","floor","pathLength","spacing","keyPoints","toPoints","scaleFactor","scaleXY","map","p","gcodePoints","feedRate","gcode","JSON","parse","stringify","firstPoint","paths","depthOfPasses","i","flat","jogHeight","filename","text","join","svg","exporter","toSVG","editSVG","App","state","shapes","e","replaceWithPath","child","name","children","grandchild","temp","makerjsPath","attributes","d","files","target","file","reader","FileReader","onload","event","result","then","json","console","log","readAsText","margin","overflow","ref","upload","display","uploadSVG","click"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nimport * as utils from './utils.js';\n\nimport * as s2p from 'shape2path';\nimport * as mjs from 'makerjs';\nimport * as svgson from 'svgson';\nimport * as params from './parameters.js'\n\nimport {Workplane} from './Workplane.js'\n\nimport Button from '@material-ui/core/Button';\n\nimport {kk} from './joints/koshikake.js';\n\n\n//import svg and turn into paths\nlet t = s2p.rect({x: 0, y: 120, width: 200, height: 200, rx: 20, ry: 20});\nlet m = mjs.importer.fromSVGPathData(t);\n\nlet c1 = mjs.model.expandPaths(m, params.compensatedRadius, 1);\n\nlet c2 = mjs.model.findChains(c1);\n// console.log(c2)\n\nlet chain = mjs.model.findSingleChain(c1);\n// console.log(chain)\n\nvar minimumSpacing = 5;\nvar divisions = Math.floor(chain.pathLength / minimumSpacing);\nvar spacing = chain.pathLength / divisions;\n\nlet keyPoints = mjs.chain.toPoints(chain, spacing);\n\nlet scaleFactor = 100;\nlet scaleXY = keyPoints.map(p => [p[0]/scaleFactor, p[1]/scaleFactor]);\n\nlet gcodePoints = scaleXY.map(p => `G1 X${p[0]} Y${p[1]} F${params.feedRate}`)\nlet gcode = JSON.parse(JSON.stringify(gcodePoints));\n\nlet firstPoint = scaleXY[0];\n\nlet paths = params.depthOfPasses.map((p,i) => [`G1 Z${params.depthOfPasses[i]} F12.0`, ...gcode, `G1 X${firstPoint[0]} Y${firstPoint[1]} F${params.feedRate}`])\npaths = paths.flat(1);\n\ngcode = [\n  \"G20\",\n  \"G90\",\n  `G1 Z${params.jogHeight} F9.0`,\n  `G0 X${firstPoint[0]} Y${firstPoint[1]}`,\n  ...paths\n]\n\n// write to a new file named\nlet filename = 'testGcode.nc';\n\nlet text = gcode.join('\\n');\n\n// utils.download(filename, text);\n\nlet svg = mjs.exporter.toSVG(c1);\n\nsvg = utils.editSVG(svg);\n\n//<div dangerouslySetInnerHTML={{__html: svg}}/>\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      shapes: [],\n    }\n  };\n\n  uploadSVG(e) {\n    const replaceWithPath = (child) => {\n      if (child.name === \"g\") {\n        return child.children.map(grandchild => replaceWithPath(grandchild));\n      }\n\n      if (child.name === \"rectangle\") {\n        let temp = s2p.rect({x: 0, y: 120, width: 200, height: 200, rx: 20, ry: 20});\n        return mjs.importer.fromSVGPathData(temp);\n      }\n\n      if (child.name === \"path\") {\n        let makerjsPath = mjs.importer.fromSVGPathData(child.attributes.d);\n        return makerjsPath;\n      }\n    }\n\n    let files = e.target.files;\n    let file = files[0];\n\n    var reader = new FileReader();\n\n    reader.onload = (event) => {\n        let text = event.target.result;\n\n        // let regexPaths = /<path[\\s\\S]*\\/>/g;\n        // let foundPaths = file2.match(regexPaths);\n\n        svgson.parse(text).then((json) => {\n          let svg = json.children.map(child => {\n            return replaceWithPath(child);\n          });\n\n          svg = svg.flat(1); //TODO: what does the argument do again?\n\n          //TODO: update state to have makerjs models\n          console.log(svg);\n        });\n\n    }\n\n    reader.readAsText(file);\n  }\n\n  render() {\n    return (\n      <div style={{\n                    margin: 0,\n                    height: \"100%\",\n                    overflow: \"hidden\"\n                  }}>\n        <Workplane group={kk}/>\n        <div>\n          <input\n            id=\"myInput\"\n            type=\"file\"\n            ref={(ref) => this.upload = ref}\n            style={{ display: 'none' }}\n            onChange={(e) => this.uploadSVG(e)}/>\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            onClick={(e) => this.upload.click()}\n            >\n              Upload SVG\n          </Button>\n        </div>\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}