{"ast":null,"code":"/*\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the terms of the LICENSE file distributed with this project.\n */\nimport * as tslib_1 from \"tslib\"; // we need some empty interfaces to show up in docs\n// HACKHACK: these components should go in separate files\n// tslint:disable max-classes-per-file no-empty-interface\n\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport * as Classes from \"../../common/classes\";\nimport { DISPLAYNAME_PREFIX } from \"../../common/props\";\nimport { safeInvoke } from \"../../common/utils\";\n/**\n * Renders common control elements, with additional props to customize appearance.\n * This component is not exported and is only used in this file for `Checkbox`, `Radio`, and `Switch` below.\n */\n\nvar Control = function Control(_a) {\n  var alignIndicator = _a.alignIndicator,\n      children = _a.children,\n      className = _a.className,\n      inline = _a.inline,\n      inputRef = _a.inputRef,\n      label = _a.label,\n      labelElement = _a.labelElement,\n      large = _a.large,\n      style = _a.style,\n      type = _a.type,\n      typeClassName = _a.typeClassName,\n      _b = _a.tagName,\n      TagName = _b === void 0 ? \"label\" : _b,\n      htmlProps = tslib_1.__rest(_a, [\"alignIndicator\", \"children\", \"className\", \"inline\", \"inputRef\", \"label\", \"labelElement\", \"large\", \"style\", \"type\", \"typeClassName\", \"tagName\"]);\n\n  var classes = classNames(Classes.CONTROL, typeClassName, (_c = {}, _c[Classes.DISABLED] = htmlProps.disabled, _c[Classes.INLINE] = inline, _c[Classes.LARGE] = large, _c), Classes.alignmentClass(alignIndicator), className);\n  return React.createElement(TagName, {\n    className: classes,\n    style: style\n  }, React.createElement(\"input\", tslib_1.__assign({}, htmlProps, {\n    ref: inputRef,\n    type: type\n  })), React.createElement(\"span\", {\n    className: Classes.CONTROL_INDICATOR\n  }), label, labelElement, children);\n\n  var _c;\n};\n\nvar Switch =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(Switch, _super);\n\n  function Switch() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  Switch.prototype.render = function () {\n    return React.createElement(Control, tslib_1.__assign({}, this.props, {\n      type: \"checkbox\",\n      typeClassName: Classes.SWITCH\n    }));\n  };\n\n  Switch.displayName = DISPLAYNAME_PREFIX + \".Switch\";\n  return Switch;\n}(React.PureComponent);\n\nexport { Switch };\n\nvar Radio =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(Radio, _super);\n\n  function Radio() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  Radio.prototype.render = function () {\n    return React.createElement(Control, tslib_1.__assign({}, this.props, {\n      type: \"radio\",\n      typeClassName: Classes.RADIO\n    }));\n  };\n\n  Radio.displayName = DISPLAYNAME_PREFIX + \".Radio\";\n  return Radio;\n}(React.PureComponent);\n\nexport { Radio };\n\nvar Checkbox =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(Checkbox, _super);\n\n  function Checkbox() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.state = {\n      indeterminate: _this.props.indeterminate || _this.props.defaultIndeterminate || false\n    };\n\n    _this.handleChange = function (evt) {\n      var indeterminate = evt.target.indeterminate; // update state immediately only if uncontrolled\n\n      if (_this.props.indeterminate == null) {\n        _this.setState({\n          indeterminate: indeterminate\n        });\n      } // otherwise wait for props change. always invoke handler.\n\n\n      safeInvoke(_this.props.onChange, evt);\n    };\n\n    _this.handleInputRef = function (ref) {\n      _this.input = ref;\n      safeInvoke(_this.props.inputRef, ref);\n    };\n\n    return _this;\n  }\n\n  Checkbox.prototype.render = function () {\n    var _a = this.props,\n        defaultIndeterminate = _a.defaultIndeterminate,\n        indeterminate = _a.indeterminate,\n        controlProps = tslib_1.__rest(_a, [\"defaultIndeterminate\", \"indeterminate\"]);\n\n    return React.createElement(Control, tslib_1.__assign({}, controlProps, {\n      inputRef: this.handleInputRef,\n      onChange: this.handleChange,\n      type: \"checkbox\",\n      typeClassName: Classes.CHECKBOX\n    }));\n  };\n\n  Checkbox.prototype.componentWillReceiveProps = function (_a) {\n    var indeterminate = _a.indeterminate; // put props into state if controlled by props\n\n    if (indeterminate != null) {\n      this.setState({\n        indeterminate: indeterminate\n      });\n    }\n  };\n\n  Checkbox.prototype.componentDidMount = function () {\n    this.updateIndeterminate();\n  };\n\n  Checkbox.prototype.componentDidUpdate = function () {\n    this.updateIndeterminate();\n  };\n\n  Checkbox.prototype.updateIndeterminate = function () {\n    if (this.state.indeterminate != null) {\n      this.input.indeterminate = this.state.indeterminate;\n    }\n  };\n\n  Checkbox.displayName = DISPLAYNAME_PREFIX + \".Checkbox\";\n  return Checkbox;\n}(React.PureComponent);\n\nexport { Checkbox };","map":null,"metadata":{},"sourceType":"module"}