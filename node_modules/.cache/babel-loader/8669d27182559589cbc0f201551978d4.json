{"ast":null,"code":"/*\n * Copyright 2018 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the terms of the LICENSE file distributed with this project.\n */\nimport * as tslib_1 from \"tslib\";\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport { Boundary } from \"../../common/boundary\";\nimport * as Classes from \"../../common/classes\";\nimport { Position } from \"../../common/position\";\nimport { Menu } from \"../menu/menu\";\nimport { MenuItem } from \"../menu/menuItem\";\nimport { OverflowList } from \"../overflow-list/overflowList\";\nimport { Popover } from \"../popover/popover\";\nimport { Breadcrumb } from \"./breadcrumb\";\n\nvar Breadcrumbs =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(Breadcrumbs, _super);\n\n  function Breadcrumbs() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.renderOverflow = function (items) {\n      var collapseFrom = _this.props.collapseFrom;\n      var position = collapseFrom === Boundary.END ? Position.BOTTOM_RIGHT : Position.BOTTOM_LEFT;\n      var orderedItems = items;\n\n      if (collapseFrom === Boundary.START) {\n        // If we're collapsing from the start, the menu should be read from the bottom to the\n        // top, continuing with the breadcrumbs to the right. Since this means the first\n        // breadcrumb in the props must be the last in the menu, we need to reverse the overlow\n        // order.\n        orderedItems = items.slice().reverse();\n      }\n\n      return React.createElement(\"li\", null, React.createElement(Popover, tslib_1.__assign({\n        position: position\n      }, _this.props.popoverProps), React.createElement(\"span\", {\n        className: Classes.BREADCRUMBS_COLLAPSED\n      }), React.createElement(Menu, null, orderedItems.map(_this.renderOverflowBreadcrumb))));\n    };\n\n    _this.renderOverflowBreadcrumb = function (props, index) {\n      var isClickable = props.href != null || props.onClick != null;\n      return React.createElement(MenuItem, tslib_1.__assign({\n        disabled: !isClickable\n      }, props, {\n        text: props.text,\n        key: index\n      }));\n    };\n\n    _this.renderBreadcrumbWrapper = function (props, index) {\n      var isCurrent = _this.props.items[_this.props.items.length - 1] === props;\n      return React.createElement(\"li\", {\n        key: index\n      }, _this.renderBreadcrumb(props, isCurrent));\n    };\n\n    return _this;\n  }\n\n  Breadcrumbs.prototype.render = function () {\n    var _a = this.props,\n        className = _a.className,\n        collapseFrom = _a.collapseFrom,\n        items = _a.items,\n        minVisibleItems = _a.minVisibleItems,\n        _b = _a.overflowListProps,\n        overflowListProps = _b === void 0 ? {} : _b;\n    return React.createElement(OverflowList, tslib_1.__assign({\n      collapseFrom: collapseFrom,\n      minVisibleItems: minVisibleItems,\n      tagName: \"ul\"\n    }, overflowListProps, {\n      className: classNames(Classes.BREADCRUMBS, overflowListProps.className, className),\n      items: items,\n      overflowRenderer: this.renderOverflow,\n      visibleItemRenderer: this.renderBreadcrumbWrapper\n    }));\n  };\n\n  Breadcrumbs.prototype.renderBreadcrumb = function (props, isCurrent) {\n    if (isCurrent && this.props.currentBreadcrumbRenderer != null) {\n      return this.props.currentBreadcrumbRenderer(props);\n    } else if (this.props.breadcrumbRenderer != null) {\n      return this.props.breadcrumbRenderer(props);\n    } else {\n      return React.createElement(Breadcrumb, tslib_1.__assign({}, props, {\n        current: isCurrent\n      }));\n    }\n  };\n\n  Breadcrumbs.defaultProps = {\n    collapseFrom: Boundary.START\n  };\n  return Breadcrumbs;\n}(React.PureComponent);\n\nexport { Breadcrumbs };","map":null,"metadata":{},"sourceType":"module"}