{"ast":null,"code":"import _classCallCheck from \"/Users/leomcelroy/Desktop/barkBeetleEverything/barkbeetle_js_real/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/leomcelroy/Desktop/barkBeetleEverything/barkbeetle_js_real/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/leomcelroy/Desktop/barkBeetleEverything/barkbeetle_js_real/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/leomcelroy/Desktop/barkBeetleEverything/barkbeetle_js_real/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/leomcelroy/Desktop/barkBeetleEverything/barkbeetle_js_real/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/leomcelroy/Desktop/barkBeetleEverything/barkbeetle_js_real/src/components/AdvancedOptionsPockets.js\";\nimport React, { Component } from 'react';\nimport { Button, Dialog, TextInputField, SegmentedControl, Heading, Link, Strong, Text } from 'evergreen-ui';\nimport * as utils from '../utils.js';\nimport store from '../store.js';\nimport * as params from '../parameters.js';\n\nvar AdvancedOptionsPockets =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(AdvancedOptionsPockets, _Component);\n\n  function AdvancedOptionsPockets() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, AdvancedOptionsPockets);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(AdvancedOptionsPockets)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      isShown: false,\n      toolDiameterValid: true,\n      stepoverPercentageValid: true,\n      toleranceValid: true,\n      jogHeightValid: true,\n      jogRateValid: true,\n      feedRateValid: true,\n      dogboneOptions: [{\n        label: 'true',\n        value: true\n      }, {\n        label: 'false',\n        value: false\n      }],\n      dogboneTemp: params.dogbone,\n      parameters: params\n    };\n    return _this;\n  }\n\n  _createClass(AdvancedOptionsPockets, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      // console.log(this.state.parameters);\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30\n        },\n        __self: this\n      }, React.createElement(Dialog, {\n        isShown: this.state.isShown,\n        title: \"Advanced Settings for this Pocket Cut\",\n        onCloseComplete: function onCloseComplete() {\n          _this2.setState({\n            isShown: false,\n            dogboneTemp: _this2.state.parameters.dogbone\n          });\n        },\n        onConfirm: function onConfirm() {\n          var valid = _this2.state.cutDepthValid && _this2.state.toolDiameterValid && _this2.state.stepoverPercentageValid && _this2.state.toleranceValid && _this2.state.jogHeightValid && _this2.state.jogRateValid && _this2.state.feedRateValid;\n\n          if (valid) {\n            var toolDiameter = parseFloat(document.getElementsByName(\"toolDiameter\")[0].value);\n            var stepoverPercentage = parseFloat(document.getElementsByName(\"stepoverPercentage\")[0].value); //must be between 1 and 100%\n\n            var tolerance = parseFloat(document.getElementsByName(\"tolerance\")[0].value);\n            var jogHeight = parseFloat(document.getElementsByName(\"jogHeight\")[0].value);\n            var jogRate = parseFloat(document.getElementsByName(\"jogRate\")[0].value);\n            var feedRate = parseFloat(document.getElementsByName(\"feedRate\")[0].value);\n            var dogbone = _this2.state.dogboneTemp; //derived parameters\n\n            var passDepth = cutDepth / 2;\n            var toolRadius = toolDiameter / 2;\n            var compensatedRadius = toolRadius + tolerance;\n            var tempFloor = Math.ceil(cutDepth / passDepth); //should this be ceiling or floor, I think ceil\n\n            var actualPassDepth = cutDepth / tempFloor;\n            var depthOfPasses = utils.makeSeries(actualPassDepth, actualPassDepth, tempFloor).map(function (n) {\n              return -n;\n            }); //settings will be compiled to a single object here\n\n            var parameters = utils.deepcopy(_this2.state.parameters);\n            parameters[\"dogbone\"] = dogbone;\n\n            if (!isNaN(tolerance)) {\n              parameters[\"tolerance\"] = tolerance;\n            }\n\n            if (!isNaN(toolDiameter)) {\n              parameters[\"toolDiameter\"] = toolDiameter;\n              parameters[\"compensatedRadius\"] = compensatedRadius;\n            }\n\n            if (!isNaN(cutDepth)) {\n              parameters[\"cutDepth\"] = cutDepth;\n              parameters[\"depthOfPasses\"] = depthOfPasses;\n            }\n\n            if (!isNaN(feedRate)) {\n              parameters[\"feedRate\"] = feedRate;\n            }\n\n            if (!isNaN(jogHeight)) {\n              parameters[\"jogHeight\"] = jogHeight;\n            }\n\n            if (!isNaN(jogRate)) {\n              parameters[\"jogRate\"] = jogRate;\n            }\n\n            if (!isNaN(stepoverPercentage)) {\n              stepoverPercentage = stepoverPercentage / 100;\n              parameters[\"stepoverPercentage\"] = stepoverPercentage;\n            }\n\n            console.log(\"parameters\", parameters);\n\n            _this2.setState({\n              isShown: false,\n              parameters: parameters\n            }); //update app state here\n\n          }\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 31\n        },\n        __self: this\n      }, React.createElement(TextInputField, {\n        onChange: function onChange(e) {\n          var valid = utils.isNum(e.target.value);\n\n          _this2.setState({\n            toolDiameterValid: valid\n          });\n        },\n        isInvalid: !this.state.toolDiameterValid,\n        name: \"toolDiameter\",\n        description: this.state.toolDiameterValid ? \"\" : \"please enter a valid number\",\n        label: \"Tool Diameter\",\n        placeholder: String(this.state.parameters.toolDiameter),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }), React.createElement(TextInputField, {\n        onChange: function onChange(e) {\n          var valid = utils.isNum(e.target.value);\n          valid = 0 < parseFloat(e.target.value) && parseFloat(e.target.value) <= 100; //process value here\n\n          _this2.setState({\n            stepoverPercentageValid: valid\n          });\n        },\n        isInvalid: !this.state.stepoverPercentageValid,\n        name: \"stepoverPercentage\",\n        description: this.state.stepoverPercentageValid ? \"\" : \"please enter a valid number\",\n        label: \"Stepover Percentage (this is only relevant for pocket cuts)\",\n        placeholder: String(this.state.parameters.stepoverPercentage * 100),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }), React.createElement(TextInputField, {\n        onChange: function onChange(e) {\n          var valid = utils.isNum(e.target.value);\n\n          _this2.setState({\n            feedRateValid: valid\n          });\n        },\n        isInvalid: !this.state.feedRateValid,\n        name: \"feedRate\",\n        description: this.state.feedRateValid ? \"\" : \"please enter a valid number\",\n        label: \"Feed Rate\",\n        placeholder: String(this.state.parameters.feedRate),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      }), React.createElement(TextInputField, {\n        onChange: function onChange(e) {\n          var valid = utils.isNum(e.target.value);\n\n          _this2.setState({\n            toleranceValid: valid\n          });\n        },\n        isInvalid: !this.state.toleranceValid,\n        name: \"tolerance\",\n        description: this.state.toleranceValid ? \"\" : \"please enter a valid number\",\n        label: \"Tolerance\",\n        placeholder: String(this.state.parameters.tolerance),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134\n        },\n        __self: this\n      }), React.createElement(TextInputField, {\n        onChange: function onChange(e) {\n          var valid = utils.isNum(e.target.value);\n\n          _this2.setState({\n            jogRateValid: valid\n          });\n        },\n        isInvalid: !this.state.jogRateValid,\n        name: \"jogRate\",\n        description: this.state.jogRateValid ? \"\" : \"please enter a valid number\",\n        label: \"Jog Rate\",\n        placeholder: String(this.state.parameters.jogRate),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145\n        },\n        __self: this\n      }), React.createElement(TextInputField, {\n        onChange: function onChange(e) {\n          var valid = utils.isNum(e.target.value);\n\n          _this2.setState({\n            jogHeightValid: valid\n          });\n        },\n        isInvalid: !this.state.jogHeightValid,\n        name: \"jogHeight\",\n        description: this.state.jogHeightValid ? \"\" : \"please enter a valid number\",\n        label: \"Jog Height\",\n        placeholder: String(this.state.parameters.jogHeight),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156\n        },\n        __self: this\n      }), React.createElement(Heading, {\n        marginTop: 20,\n        size: 400,\n        color: \"rgba(67, 90, 111, .91)\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 167\n        },\n        __self: this\n      }, \"Auto Dogbone\"), React.createElement(SegmentedControl, {\n        marginTop: 4,\n        options: this.state.dogboneOptions,\n        value: this.state.dogboneTemp,\n        onChange: function onChange(value) {\n          var dogboneTemp = value;\n\n          _this2.setState({\n            dogboneTemp: dogboneTemp\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 168\n        },\n        __self: this\n      })), React.createElement(Link, {\n        onClick: function onClick() {\n          return _this2.setState({\n            isShown: true\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 179\n        },\n        __self: this\n      }, \"Advanced Options\"));\n    }\n  }]);\n\n  return AdvancedOptionsPockets;\n}(Component);\n\nexport { AdvancedOptionsPockets };","map":{"version":3,"sources":["/Users/leomcelroy/Desktop/barkBeetleEverything/barkbeetle_js_real/src/components/AdvancedOptionsPockets.js"],"names":["React","Component","Button","Dialog","TextInputField","SegmentedControl","Heading","Link","Strong","Text","utils","store","params","AdvancedOptionsPockets","state","isShown","toolDiameterValid","stepoverPercentageValid","toleranceValid","jogHeightValid","jogRateValid","feedRateValid","dogboneOptions","label","value","dogboneTemp","dogbone","parameters","setState","valid","cutDepthValid","toolDiameter","parseFloat","document","getElementsByName","stepoverPercentage","tolerance","jogHeight","jogRate","feedRate","passDepth","cutDepth","toolRadius","compensatedRadius","tempFloor","Math","ceil","actualPassDepth","depthOfPasses","makeSeries","map","n","deepcopy","isNaN","console","log","e","isNum","target","String"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport {Button, Dialog, TextInputField, SegmentedControl, Heading, Link, Strong, Text} from 'evergreen-ui';\nimport * as utils from '../utils.js';\nimport store from '../store.js';\nimport * as params from '../parameters.js';\n\nclass AdvancedOptionsPockets extends Component {\n\n  state = {\n    isShown: false,\n    toolDiameterValid: true,\n    stepoverPercentageValid: true,\n    toleranceValid: true,\n    jogHeightValid: true,\n    jogRateValid: true,\n    feedRateValid: true,\n    dogboneOptions: [\n      { label: 'true', value: true },\n      { label: 'false', value: false },\n    ],\n    dogboneTemp: params.dogbone,\n    parameters: params,\n  }\n\n  render() {\n\n    // console.log(this.state.parameters);\n\n    return (\n      <div>\n        <Dialog\n          isShown={this.state.isShown}\n          title=\"Advanced Settings for this Pocket Cut\"\n          onCloseComplete={() => {\n            this.setState({\n              isShown:false,\n              dogboneTemp: this.state.parameters.dogbone,\n            })\n          }}\n          onConfirm={() => {\n            let valid = this.state.cutDepthValid && this.state.toolDiameterValid &&\n                        this.state.stepoverPercentageValid && this.state.toleranceValid &&\n                        this.state.jogHeightValid && this.state.jogRateValid && this.state.feedRateValid;\n            if (valid) {\n              let toolDiameter = parseFloat(document.getElementsByName(\"toolDiameter\")[0].value);\n              let stepoverPercentage = parseFloat(document.getElementsByName(\"stepoverPercentage\")[0].value); //must be between 1 and 100%\n              let tolerance = parseFloat(document.getElementsByName(\"tolerance\")[0].value);\n              let jogHeight = parseFloat(document.getElementsByName(\"jogHeight\")[0].value);\n              let jogRate = parseFloat(document.getElementsByName(\"jogRate\")[0].value);\n              let feedRate = parseFloat(document.getElementsByName(\"feedRate\")[0].value);\n\n              let dogbone = this.state.dogboneTemp;\n\n              //derived parameters\n              let passDepth = cutDepth/2;\n              let toolRadius = toolDiameter/2;\n              let compensatedRadius = toolRadius + tolerance;\n              let tempFloor = Math.ceil(cutDepth/passDepth); //should this be ceiling or floor, I think ceil\n              let actualPassDepth = cutDepth/tempFloor;\n              let depthOfPasses = utils.makeSeries(actualPassDepth, actualPassDepth, tempFloor).map(n => -n);\n\n              //settings will be compiled to a single object here\n              let parameters = utils.deepcopy(this.state.parameters);\n\n              parameters[\"dogbone\"] = dogbone;\n\n              if (!isNaN(tolerance)) { parameters[\"tolerance\"] = tolerance; }\n\n              if (!isNaN(toolDiameter)) {\n                parameters[\"toolDiameter\"] = toolDiameter;\n                parameters[\"compensatedRadius\"] = compensatedRadius;\n\n              }\n              if (!isNaN(cutDepth)) {\n                parameters[\"cutDepth\"] = cutDepth;\n                parameters[\"depthOfPasses\"] = depthOfPasses;\n              }\n              if (!isNaN(feedRate)) { parameters[\"feedRate\"] = feedRate; }\n              if (!isNaN(jogHeight)) { parameters[\"jogHeight\"] = jogHeight; }\n              if (!isNaN(jogRate)) { parameters[\"jogRate\"] = jogRate; }\n\n              if (!isNaN(stepoverPercentage)) {\n                stepoverPercentage = stepoverPercentage/100;\n                parameters[\"stepoverPercentage\"] = stepoverPercentage;\n              }\n\n              console.log(\"parameters\", parameters);\n\n              this.setState({\n                isShown:false,\n                parameters\n              });\n\n              //update app state here\n\n            }\n          }}>\n\n          <TextInputField\n            onChange={e => {\n              let valid = utils.isNum(e.target.value);\n              this.setState({toolDiameterValid:valid})\n            }}\n            isInvalid={!this.state.toolDiameterValid}\n            name=\"toolDiameter\"\n            description={(this.state.toolDiameterValid) ? \"\" : \"please enter a valid number\"}\n            label=\"Tool Diameter\"\n            placeholder={String(this.state.parameters.toolDiameter)}/>\n\n          <TextInputField\n            onChange={e => {\n              let valid = utils.isNum(e.target.value);\n              valid = 0 < parseFloat(e.target.value) && parseFloat(e.target.value) <= 100;\n              //process value here\n              this.setState({stepoverPercentageValid:valid})\n            }}\n            isInvalid={!this.state.stepoverPercentageValid}\n            name=\"stepoverPercentage\"\n            description={(this.state.stepoverPercentageValid) ? \"\" : \"please enter a valid number\"}\n            label=\"Stepover Percentage (this is only relevant for pocket cuts)\"\n            placeholder={String(this.state.parameters.stepoverPercentage * 100)}/>\n\n            <TextInputField\n              onChange={e => {\n                let valid = utils.isNum(e.target.value);\n                this.setState({feedRateValid:valid})\n              }}\n              isInvalid={!this.state.feedRateValid}\n              name=\"feedRate\"\n              description={(this.state.feedRateValid) ? \"\" : \"please enter a valid number\"}\n              label=\"Feed Rate\"\n              placeholder={String(this.state.parameters.feedRate)}/>\n\n              <TextInputField\n                onChange={e => {\n                  let valid = utils.isNum(e.target.value);\n                  this.setState({toleranceValid:valid})\n                }}\n                isInvalid={!this.state.toleranceValid}\n                name=\"tolerance\"\n                description={(this.state.toleranceValid) ? \"\" : \"please enter a valid number\"}\n                label=\"Tolerance\"\n                placeholder={String(this.state.parameters.tolerance)}/>\n\n            <TextInputField\n              onChange={e => {\n                let valid = utils.isNum(e.target.value);\n                this.setState({jogRateValid:valid})\n              }}\n              isInvalid={!this.state.jogRateValid}\n              name=\"jogRate\"\n              description={(this.state.jogRateValid) ? \"\" : \"please enter a valid number\"}\n              label=\"Jog Rate\"\n              placeholder={String(this.state.parameters.jogRate)}/>\n\n              <TextInputField\n                onChange={e => {\n                  let valid = utils.isNum(e.target.value);\n                  this.setState({jogHeightValid:valid})\n                }}\n                isInvalid={!this.state.jogHeightValid}\n                name=\"jogHeight\"\n                description={(this.state.jogHeightValid) ? \"\" : \"please enter a valid number\"}\n                label=\"Jog Height\"\n                placeholder={String(this.state.parameters.jogHeight)}/>\n\n              <Heading marginTop={20} size={400} color={\"rgba(67, 90, 111, .91)\"}>Auto Dogbone</Heading>\n              <SegmentedControl\n                marginTop={4}\n                options={this.state.dogboneOptions}\n                value={this.state.dogboneTemp}\n                onChange={value => {\n                  let dogboneTemp = value;\n                  this.setState({ dogboneTemp });\n                }}\n              />\n\n        </Dialog>\n        <Link onClick={() => this.setState({isShown:true})}>Advanced Options</Link>\n      </div>\n    );\n  }\n}\n\nexport {AdvancedOptionsPockets};\n"]},"metadata":{},"sourceType":"module"}