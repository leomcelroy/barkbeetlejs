{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n/* eslint-disable react/no-unused-state */\n\nimport React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\n\nvar ScrollbarSize =\n/*#__PURE__*/\nfunction (_PureComponent) {\n  _inherits(ScrollbarSize, _PureComponent);\n\n  function ScrollbarSize() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, ScrollbarSize);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ScrollbarSize)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"state\", {\n      innerWidth: null,\n      outerWidth: null\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"handleOuterRef\", function (ref) {\n      _this.outerRef = ref;\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"handleInnerRef\", function (ref) {\n      _this.innerRef = ref;\n    });\n\n    return _this;\n  }\n\n  _createClass(ScrollbarSize, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var innerWidth = this.innerRef.getBoundingClientRect().width;\n      var outerWidth = this.outerRef.getBoundingClientRect().width;\n      this.setState({\n        innerWidth: innerWidth,\n        outerWidth: outerWidth\n      });\n    }\n  }, {\n    key: \"componentWillUpdate\",\n    value: function componentWillUpdate(nextProps, nextState) {\n      if (nextState.innerWidth && nextState.outerWidth) {\n        this.props.handleScrollbarSize(nextState.outerWidth - nextState.innerWidth);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        ref: this.handleOuterRef,\n        \"aria-hidden\": true,\n        style: {\n          position: 'fixed',\n          top: -500,\n          left: -500,\n          width: 100,\n          overflowY: 'scroll'\n        }\n      }, React.createElement(\"div\", {\n        ref: this.handleInnerRef\n      }));\n    }\n  }]);\n\n  return ScrollbarSize;\n}(PureComponent);\n\nScrollbarSize.displayName = \"ScrollbarSize\";\n\n_defineProperty(ScrollbarSize, \"propTypes\", {\n  /**\n   * Returns the size of the scrollbar by creating a hidden fixed div.\n   */\n  handleScrollbarSize: PropTypes.func\n});\n\n_defineProperty(ScrollbarSize, \"defaultProps\", {\n  handleScrollbarSize: function handleScrollbarSize() {}\n});\n\nexport { ScrollbarSize as default };","map":null,"metadata":{},"sourceType":"module"}