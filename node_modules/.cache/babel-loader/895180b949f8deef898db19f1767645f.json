{"ast":null,"code":"import _classCallCheck from \"/Users/leomcelroy/Desktop/barkbeetle_js/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/leomcelroy/Desktop/barkbeetle_js/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/leomcelroy/Desktop/barkbeetle_js/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/leomcelroy/Desktop/barkbeetle_js/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/leomcelroy/Desktop/barkbeetle_js/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/leomcelroy/Desktop/barkbeetle_js/src/components/AdvancedOptions.js\";\nimport React, { Component, PureComponent } from 'react';\nimport { Button, Dialog, TextInputField, SegmentedControl, Heading, Link, Strong, Text } from 'evergreen-ui';\nimport * as utils from '../utils.js';\nimport store from '../store.js';\nimport { profile } from '../toolpaths/profile.js';\nimport { pocket } from '../toolpaths/pocket.js';\n\nvar AdvancedOptions =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(AdvancedOptions, _Component);\n\n  function AdvancedOptions() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, AdvancedOptions);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(AdvancedOptions)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      isShown: false,\n      cutDepthValid: true,\n      toolDiameterValid: true,\n      stepoverPercentageValid: true,\n      toleranceValid: true,\n      jogHeightValid: true,\n      jogRateValid: true,\n      feedRateValid: true,\n      tabThicknessValid: true,\n      offset: [{\n        label: 'outside',\n        value: \"outside\"\n      }, {\n        label: 'inside',\n        value: \"inside\"\n      }, {\n        label: 'none',\n        value: \"none\"\n      }],\n      tabOptions: [{\n        label: 'true',\n        value: true\n      }, {\n        label: 'false',\n        value: false\n      }],\n      dogboneOptions: [{\n        label: 'true',\n        value: true\n      }, {\n        label: 'false',\n        value: false\n      }],\n      offsetTemp: _this.props.params.offset,\n      tabsTemp: _this.props.params.tabs,\n      dogboneTemp: _this.props.params.dogbone\n    };\n\n    _this.validateSubmit = function () {\n      var valid = _this.state.cutDepthValid && _this.state.toolDiameterValid && _this.state.stepoverPercentageValid && _this.state.toleranceValid && _this.state.jogHeightValid && _this.state.jogRateValid && _this.state.feedRateValid;\n\n      if (valid) {\n        var cutDepth = Number(utils.helpExtract(\"cutDepth\"));\n        var toolDiameter = Number(utils.helpExtract(\"toolDiameter\"));\n        var stepoverPercentage = Number(utils.helpExtract(\"stepoverPercentage\")); //must be between 1 and 100%\n\n        var tolerance = Number(utils.helpExtract(\"tolerance\"));\n        var jogHeight = Number(utils.helpExtract(\"jogHeight\"));\n        var jogRate = Number(utils.helpExtract(\"jogRate\"));\n        var feedRate = Number(utils.helpExtract(\"feedRate\"));\n        var tabThickness = Number(utils.helpExtract(\"tabThickness\"));\n        if (utils.helpExtract(\"cutDepth\") === \"\") cutDepth = _this.props.params.cutDepth;\n        if (utils.helpExtract(\"toolDiameter\") === \"\") toolDiameter = _this.props.params.toolDiameter;\n        if (utils.helpExtract(\"stepoverPercentage\") === \"\") stepoverPercentage = _this.props.params.stepoverPercentage; //must be between 1 and 100%\n\n        if (utils.helpExtract(\"tolerance\") === \"\") tolerance = _this.props.params.tolerance;\n        if (utils.helpExtract(\"jogHeight\") === \"\") jogHeight = _this.props.params.jogHeight;\n        if (utils.helpExtract(\"jogRate\") === \"\") jogRate = _this.props.params.jogRate;\n        if (utils.helpExtract(\"feedRate\") === \"\") feedRate = _this.props.params.feedRate;\n        if (utils.helpExtract(\"tabThickness\") === \"\") tabThickness = _this.props.params.tabThickness;\n        var dogbone = _this.state.dogboneTemp;\n        var tabs = _this.state.tabsTemp;\n        var offset = _this.state.offsetTemp; //derived parameters\n\n        var passDepth = cutDepth / 2;\n        var toolRadius = toolDiameter / 2;\n        var compensatedRadius = toolRadius + tolerance;\n        var tempFloor = Math.ceil(cutDepth / passDepth); //should this be ceiling or floor, I think ceil\n\n        var actualPassDepth = cutDepth / tempFloor;\n        var depthOfPasses = utils.makeSeries(actualPassDepth, actualPassDepth, tempFloor).map(function (n) {\n          return -n;\n        }); //settings will be compiled to a single object here\n\n        var parameters = utils.deepcopy(_this.props.params);\n        parameters[\"dogbone\"] = dogbone;\n        parameters[\"tabs\"] = tabs;\n        parameters[\"offset\"] = offset;\n        parameters[\"tolerance\"] = tolerance;\n        parameters[\"tabThickness\"] = tabThickness;\n        parameters[\"toolDiameter\"] = toolDiameter;\n        parameters[\"compensatedRadius\"] = compensatedRadius;\n        parameters[\"cutDepth\"] = cutDepth;\n        parameters[\"depthOfPasses\"] = depthOfPasses;\n        parameters[\"feedRate\"] = feedRate;\n        parameters[\"jogHeight\"] = jogHeight;\n        parameters[\"jogRate\"] = jogRate; // parameters[\"insideCutting\"] = insideCutting;\n\n        parameters[\"stepoverPercentage\"] = stepoverPercentage; //console.log(\"parameters\", parameters);\n\n        _this.setState({\n          isShown: false\n        }); //update app state here\n        // if this.props.default === true then update defaultParameters state, if false then update parameters of toolpath id\n\n\n        if (_this.props.default) {\n          console.log(\"update default parameters\", parameters);\n          store.update({\n            defaultParameters: parameters\n          });\n        } else {\n          var state = store.getState();\n          var toolpaths = state.toolpaths;\n          var path = toolpaths[_this.props.index];\n          path.parameters = parameters;\n          var sourceID = path.sourceGeometryID;\n          var sourceGeo = state.shapes[sourceID];\n\n          if (path.type === \"profile\") {\n            var cutGeo = profile(sourceGeo, parameters);\n            path.geometry = cutGeo;\n          }\n\n          if (path.type === \"pocket\") {\n            var _cutGeo = pocket(sourceGeo, parameters);\n\n            path.geometry = _cutGeo;\n          }\n\n          if (path.type === \"drill\") {//console.log(\"ya got to wait for that feature\") //TODO\n          }\n\n          store.update({\n            toolpaths: toolpaths\n          });\n        }\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(AdvancedOptions, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      // console.log(this.props.params);\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137\n        },\n        __self: this\n      }, React.createElement(Dialog, {\n        isShown: this.state.isShown,\n        title: this.props.default ? \"Advanced Default Settings\" : \"Specific Toolpath Settings\",\n        onCloseComplete: function onCloseComplete() {\n          _this2.setState({\n            isShown: false,\n            dogboneTemp: _this2.props.params.dogbone,\n            tabsTemp: _this2.props.params.tabs,\n            offsetTemp: _this2.props.params.offset\n          });\n        },\n        onConfirm: this.validateSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138\n        },\n        __self: this\n      }, React.createElement(TextInputField, {\n        onChange: function onChange(e) {\n          var valid = utils.isNum(e.target.value);\n\n          _this2.setState({\n            cutDepthValid: valid\n          });\n        },\n        isInvalid: !this.state.cutDepthValid,\n        name: \"cutDepth\",\n        description: this.state.cutDepthValid ? \"\" : \"please enter a valid number\",\n        label: \"Depth of Cut\",\n        placeholder: String(this.props.params.cutDepth),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151\n        },\n        __self: this\n      }), React.createElement(TextInputField, {\n        onChange: function onChange(e) {\n          var valid = utils.isNum(e.target.value);\n\n          _this2.setState({\n            toolDiameterValid: valid\n          });\n        },\n        isInvalid: !this.state.toolDiameterValid,\n        name: \"toolDiameter\",\n        description: this.state.toolDiameterValid ? \"\" : \"please enter a valid number\",\n        label: \"Tool Diameter\",\n        placeholder: String(this.props.params.toolDiameter),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162\n        },\n        __self: this\n      }), React.createElement(TextInputField, {\n        onChange: function onChange(e) {\n          var valid = utils.isNum(e.target.value);\n          valid = 0 < Number(e.target.value) && Number(e.target.value) <= 100; //process value here\n\n          _this2.setState({\n            stepoverPercentageValid: valid\n          });\n        },\n        isInvalid: !this.state.stepoverPercentageValid,\n        name: \"stepoverPercentage\",\n        description: this.state.stepoverPercentageValid ? \"\" : \"please enter a valid number\",\n        label: \"Stepover Percentage (this is only relevant for pocket cuts)\",\n        placeholder: String(this.props.params.stepoverPercentage),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 173\n        },\n        __self: this\n      }), React.createElement(TextInputField, {\n        onChange: function onChange(e) {\n          var valid = utils.isNum(e.target.value);\n\n          _this2.setState({\n            feedRateValid: valid\n          });\n        },\n        isInvalid: !this.state.feedRateValid,\n        name: \"feedRate\",\n        description: this.state.feedRateValid ? \"\" : \"please enter a valid number\",\n        label: \"Feed Rate\",\n        placeholder: String(this.props.params.feedRate),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 186\n        },\n        __self: this\n      }), React.createElement(TextInputField, {\n        onChange: function onChange(e) {\n          var valid = utils.isNum(e.target.value);\n\n          _this2.setState({\n            toleranceValid: valid\n          });\n        },\n        isInvalid: !this.state.toleranceValid,\n        name: \"tolerance\",\n        description: this.state.toleranceValid ? \"\" : \"please enter a valid number\",\n        label: \"Tolerance\",\n        placeholder: String(this.props.params.tolerance),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 197\n        },\n        __self: this\n      }), React.createElement(TextInputField, {\n        onChange: function onChange(e) {\n          var valid = utils.isNum(e.target.value);\n\n          _this2.setState({\n            jogRateValid: valid\n          });\n        },\n        isInvalid: !this.state.jogRateValid,\n        name: \"jogRate\",\n        description: this.state.jogRateValid ? \"\" : \"please enter a valid number\",\n        label: \"Jog Rate\",\n        placeholder: String(this.props.params.jogRate),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 208\n        },\n        __self: this\n      }), React.createElement(TextInputField, {\n        onChange: function onChange(e) {\n          var valid = utils.isNum(e.target.value);\n\n          _this2.setState({\n            jogHeightValid: valid\n          });\n        },\n        isInvalid: !this.state.jogHeightValid,\n        name: \"jogHeight\",\n        description: this.state.jogHeightValid ? \"\" : \"please enter a valid number\",\n        label: \"Jog Height\",\n        placeholder: String(this.props.params.jogHeight),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 219\n        },\n        __self: this\n      }), React.createElement(Heading, {\n        marginTop: 8,\n        size: 400,\n        color: \"rgba(67, 90, 111, .91)\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 230\n        },\n        __self: this\n      }, \"Offset Direction (this is only relevant for profile cuts)\"), React.createElement(SegmentedControl, {\n        marginTop: 4,\n        options: this.state.offsetOptions,\n        value: this.state.offsetTemp,\n        onChange: function onChange(value) {\n          var offsetTemp = value;\n\n          _this2.setState({\n            offsetTemp: offsetTemp\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 231\n        },\n        __self: this\n      }), React.createElement(Heading, {\n        marginTop: 20,\n        size: 400,\n        color: \"rgba(67, 90, 111, .91)\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 241\n        },\n        __self: this\n      }, \"Auto Tabs (this is only relevant for profile cuts)\"), React.createElement(SegmentedControl, {\n        marginTop: 4,\n        options: this.state.tabOptions,\n        value: this.state.tabsTemp,\n        onChange: function onChange(value) {\n          var tabsTemp = value;\n\n          _this2.setState({\n            tabsTemp: tabsTemp\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 242\n        },\n        __self: this\n      }), React.createElement(TextInputField, {\n        marginTop: 20,\n        onChange: function onChange(e) {\n          var valid = utils.isNum(e.target.value);\n\n          _this2.setState({\n            tabThicknessValid: valid\n          });\n        },\n        isInvalid: !this.state.tabThicknessValid,\n        name: \"tabThickness\",\n        description: this.state.tabThicknessValid ? \"\" : \"please enter a valid number\",\n        label: \"Tab Thickness\",\n        placeholder: String(this.props.params.tabThickness),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 252\n        },\n        __self: this\n      }), React.createElement(Heading, {\n        marginTop: 20,\n        size: 400,\n        color: \"rgba(67, 90, 111, .91)\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 264\n        },\n        __self: this\n      }, \"Auto Dogbone\"), React.createElement(SegmentedControl, {\n        marginTop: 4,\n        options: this.state.dogboneOptions,\n        value: this.state.dogboneTemp,\n        onChange: function onChange(value) {\n          var dogboneTemp = value;\n\n          _this2.setState({\n            dogboneTemp: dogboneTemp\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 265\n        },\n        __self: this\n      })), React.createElement(Link, {\n        onClick: function onClick() {\n          return _this2.setState({\n            isShown: !_this2.props.disabled\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 276\n        },\n        __self: this\n      }, this.props.default ? \"Advanced Default Options\" : \"edit\"));\n    }\n  }]);\n\n  return AdvancedOptions;\n}(Component);\n\nexport { AdvancedOptions };","map":{"version":3,"sources":["/Users/leomcelroy/Desktop/barkbeetle_js/src/components/AdvancedOptions.js"],"names":["React","Component","PureComponent","Button","Dialog","TextInputField","SegmentedControl","Heading","Link","Strong","Text","utils","store","profile","pocket","AdvancedOptions","state","isShown","cutDepthValid","toolDiameterValid","stepoverPercentageValid","toleranceValid","jogHeightValid","jogRateValid","feedRateValid","tabThicknessValid","offset","label","value","tabOptions","dogboneOptions","offsetTemp","props","params","tabsTemp","tabs","dogboneTemp","dogbone","validateSubmit","valid","cutDepth","Number","helpExtract","toolDiameter","stepoverPercentage","tolerance","jogHeight","jogRate","feedRate","tabThickness","passDepth","toolRadius","compensatedRadius","tempFloor","Math","ceil","actualPassDepth","depthOfPasses","makeSeries","map","n","parameters","deepcopy","setState","default","console","log","update","defaultParameters","getState","toolpaths","path","index","sourceID","sourceGeometryID","sourceGeo","shapes","type","cutGeo","geometry","e","isNum","target","String","offsetOptions","disabled"],"mappings":"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","sourcesContent":["import React, { Component, PureComponent } from 'react';\nimport {Button, Dialog, TextInputField, SegmentedControl, Heading, Link, Strong, Text} from 'evergreen-ui';\nimport * as utils from '../utils.js';\nimport store from '../store.js';\nimport {profile} from '../toolpaths/profile.js';\nimport {pocket} from '../toolpaths/pocket.js';\n\nclass AdvancedOptions extends Component {\n\n  state = {\n    isShown: false,\n    cutDepthValid: true,\n    toolDiameterValid: true,\n    stepoverPercentageValid: true,\n    toleranceValid: true,\n    jogHeightValid: true,\n    jogRateValid: true,\n    feedRateValid: true,\n    tabThicknessValid: true,\n    offset: [\n      { label: 'outside', value: \"outside\" },\n      { label: 'inside', value: \"inside\" },\n      { label: 'none', value: \"none\"}\n    ],\n    tabOptions: [\n      { label: 'true', value: true },\n      { label: 'false', value: false },\n    ],\n    dogboneOptions: [\n      { label: 'true', value: true },\n      { label: 'false', value: false },\n    ],\n    offsetTemp: this.props.params.offset,\n    tabsTemp: this.props.params.tabs,\n    dogboneTemp: this.props.params.dogbone,\n  }\n\n  validateSubmit = () => {\n\n    let valid = this.state.cutDepthValid && this.state.toolDiameterValid &&\n                this.state.stepoverPercentageValid && this.state.toleranceValid &&\n                this.state.jogHeightValid && this.state.jogRateValid && this.state.feedRateValid;\n    if (valid) {\n\n      let cutDepth = Number(utils.helpExtract(\"cutDepth\"));\n      let toolDiameter = Number(utils.helpExtract(\"toolDiameter\"));\n      let stepoverPercentage = Number(utils.helpExtract(\"stepoverPercentage\")); //must be between 1 and 100%\n      let tolerance = Number(utils.helpExtract(\"tolerance\"));\n      let jogHeight = Number(utils.helpExtract(\"jogHeight\"));\n      let jogRate = Number(utils.helpExtract(\"jogRate\"));\n      let feedRate = Number(utils.helpExtract(\"feedRate\"));\n      let tabThickness = Number(utils.helpExtract(\"tabThickness\"));\n\n      if (utils.helpExtract(\"cutDepth\") === \"\") cutDepth = this.props.params.cutDepth;\n      if (utils.helpExtract(\"toolDiameter\") === \"\") toolDiameter = this.props.params.toolDiameter;\n      if (utils.helpExtract(\"stepoverPercentage\") === \"\") stepoverPercentage = this.props.params.stepoverPercentage; //must be between 1 and 100%\n      if (utils.helpExtract(\"tolerance\") === \"\") tolerance = this.props.params.tolerance;\n      if (utils.helpExtract(\"jogHeight\") === \"\") jogHeight = this.props.params.jogHeight;\n      if (utils.helpExtract(\"jogRate\") === \"\") jogRate = this.props.params.jogRate;\n      if (utils.helpExtract(\"feedRate\") === \"\") feedRate = this.props.params.feedRate;\n      if (utils.helpExtract(\"tabThickness\") === \"\") tabThickness = this.props.params.tabThickness;\n\n      let dogbone = this.state.dogboneTemp;\n      let tabs = this.state.tabsTemp;\n      let offset = this.state.offsetTemp;\n\n      //derived parameters\n      let passDepth = cutDepth/2;\n      let toolRadius = toolDiameter/2;\n      let compensatedRadius = toolRadius + tolerance;\n      let tempFloor = Math.ceil(cutDepth/passDepth); //should this be ceiling or floor, I think ceil\n      let actualPassDepth = cutDepth/tempFloor;\n      let depthOfPasses = utils.makeSeries(actualPassDepth, actualPassDepth, tempFloor).map(n => -n);\n\n      //settings will be compiled to a single object here\n      let parameters = utils.deepcopy(this.props.params);\n\n      parameters[\"dogbone\"] = dogbone;\n      parameters[\"tabs\"] = tabs;\n      parameters[\"offset\"] = offset;\n      parameters[\"tolerance\"] = tolerance;\n      parameters[\"tabThickness\"] = tabThickness;\n      parameters[\"toolDiameter\"] = toolDiameter;\n      parameters[\"compensatedRadius\"] = compensatedRadius;\n      parameters[\"cutDepth\"] = cutDepth;\n      parameters[\"depthOfPasses\"] = depthOfPasses;\n      parameters[\"feedRate\"] = feedRate;\n      parameters[\"jogHeight\"] = jogHeight;\n      parameters[\"jogRate\"] = jogRate;\n      // parameters[\"insideCutting\"] = insideCutting;\n      parameters[\"stepoverPercentage\"] = stepoverPercentage;\n\n      //console.log(\"parameters\", parameters);\n\n      this.setState({\n        isShown:false,\n      });\n\n      //update app state here\n      // if this.props.default === true then update defaultParameters state, if false then update parameters of toolpath id\n      if (this.props.default) {\n        console.log(\"update default parameters\", parameters)\n        store.update({defaultParameters:parameters});\n      } else {\n        let state = store.getState();\n        let toolpaths = state.toolpaths;\n        let path = toolpaths[this.props.index];\n\n        path.parameters = parameters;\n        let sourceID = path.sourceGeometryID;\n        let sourceGeo = state.shapes[sourceID];\n\n        if (path.type === \"profile\") {\n          let cutGeo = profile(sourceGeo, parameters);\n          path.geometry = cutGeo;\n        }\n\n        if (path.type === \"pocket\") {\n          let cutGeo = pocket(sourceGeo, parameters);\n          path.geometry = cutGeo;\n        }\n\n        if (path.type === \"drill\") {\n          //console.log(\"ya got to wait for that feature\") //TODO\n        }\n\n        store.update({toolpaths});\n      }\n    }\n  }\n\n  render() {\n\n    // console.log(this.props.params);\n\n    return (\n      <div>\n        <Dialog\n          isShown={this.state.isShown}\n          title={this.props.default ? \"Advanced Default Settings\" : \"Specific Toolpath Settings\"}\n          onCloseComplete={() => {\n            this.setState({\n              isShown:false,\n              dogboneTemp: this.props.params.dogbone,\n              tabsTemp: this.props.params.tabs,\n              offsetTemp: this.props.params.offset,\n            })\n          }}\n          onConfirm={this.validateSubmit}>\n\n          <TextInputField\n            onChange={e => {\n              let valid = utils.isNum(e.target.value);\n              this.setState({cutDepthValid:valid})\n            }}\n            isInvalid={!this.state.cutDepthValid}\n            name=\"cutDepth\"\n            description={(this.state.cutDepthValid) ? \"\" : \"please enter a valid number\"}\n            label=\"Depth of Cut\"\n            placeholder={String(this.props.params.cutDepth)}/>\n\n          <TextInputField\n            onChange={e => {\n              let valid = utils.isNum(e.target.value);\n              this.setState({toolDiameterValid:valid})\n            }}\n            isInvalid={!this.state.toolDiameterValid}\n            name=\"toolDiameter\"\n            description={(this.state.toolDiameterValid) ? \"\" : \"please enter a valid number\"}\n            label=\"Tool Diameter\"\n            placeholder={String(this.props.params.toolDiameter)}/>\n\n          <TextInputField\n            onChange={e => {\n              let valid = utils.isNum(e.target.value);\n              valid = 0 < Number(e.target.value) && Number(e.target.value) <= 100;\n              //process value here\n              this.setState({stepoverPercentageValid:valid})\n            }}\n            isInvalid={!this.state.stepoverPercentageValid}\n            name=\"stepoverPercentage\"\n            description={(this.state.stepoverPercentageValid) ? \"\" : \"please enter a valid number\"}\n            label=\"Stepover Percentage (this is only relevant for pocket cuts)\"\n            placeholder={String(this.props.params.stepoverPercentage)}/>\n\n            <TextInputField\n              onChange={e => {\n                let valid = utils.isNum(e.target.value);\n                this.setState({feedRateValid:valid})\n              }}\n              isInvalid={!this.state.feedRateValid}\n              name=\"feedRate\"\n              description={(this.state.feedRateValid) ? \"\" : \"please enter a valid number\"}\n              label=\"Feed Rate\"\n              placeholder={String(this.props.params.feedRate)}/>\n\n              <TextInputField\n                onChange={e => {\n                  let valid = utils.isNum(e.target.value);\n                  this.setState({toleranceValid:valid})\n                }}\n                isInvalid={!this.state.toleranceValid}\n                name=\"tolerance\"\n                description={(this.state.toleranceValid) ? \"\" : \"please enter a valid number\"}\n                label=\"Tolerance\"\n                placeholder={String(this.props.params.tolerance)}/>\n\n            <TextInputField\n              onChange={e => {\n                let valid = utils.isNum(e.target.value);\n                this.setState({jogRateValid:valid})\n              }}\n              isInvalid={!this.state.jogRateValid}\n              name=\"jogRate\"\n              description={(this.state.jogRateValid) ? \"\" : \"please enter a valid number\"}\n              label=\"Jog Rate\"\n              placeholder={String(this.props.params.jogRate)}/>\n\n              <TextInputField\n                onChange={e => {\n                  let valid = utils.isNum(e.target.value);\n                  this.setState({jogHeightValid:valid})\n                }}\n                isInvalid={!this.state.jogHeightValid}\n                name=\"jogHeight\"\n                description={(this.state.jogHeightValid) ? \"\" : \"please enter a valid number\"}\n                label=\"Jog Height\"\n                placeholder={String(this.props.params.jogHeight)}/>\n\n              <Heading marginTop={8} size={400} color={\"rgba(67, 90, 111, .91)\"}>Offset Direction (this is only relevant for profile cuts)</Heading>\n              <SegmentedControl\n                marginTop={4}\n                options={this.state.offsetOptions}\n                value={this.state.offsetTemp}\n                onChange={value => {\n                  let offsetTemp = value;\n                  this.setState({ offsetTemp });\n                }}\n              />\n\n              <Heading marginTop={20} size={400} color={\"rgba(67, 90, 111, .91)\"}>Auto Tabs (this is only relevant for profile cuts)</Heading>\n              <SegmentedControl\n                marginTop={4}\n                options={this.state.tabOptions}\n                value={this.state.tabsTemp}\n                onChange={value => {\n                  let tabsTemp = value;\n                  this.setState({ tabsTemp });\n                }}\n              />\n\n              <TextInputField\n                marginTop={20}\n                onChange={e => {\n                  let valid = utils.isNum(e.target.value);\n                  this.setState({tabThicknessValid:valid})\n                }}\n                isInvalid={!this.state.tabThicknessValid}\n                name=\"tabThickness\"\n                description={(this.state.tabThicknessValid) ? \"\" : \"please enter a valid number\"}\n                label=\"Tab Thickness\"\n                placeholder={String(this.props.params.tabThickness)}/>\n\n              <Heading marginTop={20} size={400} color={\"rgba(67, 90, 111, .91)\"}>Auto Dogbone</Heading>\n              <SegmentedControl\n                marginTop={4}\n                options={this.state.dogboneOptions}\n                value={this.state.dogboneTemp}\n                onChange={value => {\n                  let dogboneTemp = value;\n                  this.setState({ dogboneTemp });\n                }}\n              />\n\n        </Dialog>\n        <Link onClick={() => this.setState({isShown:!this.props.disabled})}>{this.props.default ? \"Advanced Default Options\" : \"edit\"}</Link>\n      </div>\n    );\n  }\n}\n\nexport {AdvancedOptions};\n"]},"metadata":{},"sourceType":"module"}