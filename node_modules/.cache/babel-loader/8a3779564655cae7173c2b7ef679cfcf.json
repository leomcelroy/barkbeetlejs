{"ast":null,"code":"import _classCallCheck from \"/Users/leomcelroy/Desktop/barkBeetleEverything/barkbeetle_js_real/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/leomcelroy/Desktop/barkBeetleEverything/barkbeetle_js_real/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/leomcelroy/Desktop/barkBeetleEverything/barkbeetle_js_real/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/leomcelroy/Desktop/barkBeetleEverything/barkbeetle_js_real/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/leomcelroy/Desktop/barkBeetleEverything/barkbeetle_js_real/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/leomcelroy/Desktop/barkBeetleEverything/barkbeetle_js_real/src/components/AdvancedOptions.js\";\nimport React, { Component } from 'react';\nimport { Button, Dialog, TextInputField, SegmentedControl, Heading, Link, Strong, Text } from 'evergreen-ui';\nimport * as utils from '../utils.js';\nimport store from '../store.js';\nimport * as params from '../parameters.js';\n\nvar AdvancedOptions =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(AdvancedOptions, _Component);\n\n  function AdvancedOptions() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, AdvancedOptions);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(AdvancedOptions)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      isShown: false,\n      cutDepthValid: true,\n      toolDiameterValid: true,\n      stepoverPercentageValid: true,\n      toleranceValid: true,\n      jogHeightValid: true,\n      jogRateValid: true,\n      feedRateValid: true,\n      tabThicknessValid: true,\n      insideCuttingOptions: [{\n        label: 'true',\n        value: true\n      }, {\n        label: 'false',\n        value: false\n      }],\n      tabOptions: [{\n        label: 'true',\n        value: true\n      }, {\n        label: 'false',\n        value: false\n      }],\n      dogboneOptions: [{\n        label: 'true',\n        value: true\n      }, {\n        label: 'false',\n        value: false\n      }],\n      parameters: params\n    };\n    return _this;\n  }\n\n  _createClass(AdvancedOptions, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      // console.log(this.state.parameters);\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39\n        },\n        __self: this\n      }, React.createElement(Dialog, {\n        isShown: this.state.isShown,\n        title: \"Advanced Default Settings\",\n        onCloseComplete: function onCloseComplete() {\n          return _this2.setState({\n            isShown: false\n          });\n        },\n        onConfirm: function onConfirm() {\n          var valid = _this2.state.cutDepthValid && _this2.state.toolDiameterValid && _this2.state.stepoverPercentageValid && _this2.state.toleranceValid && _this2.state.jogHeightValid && _this2.state.jogRateValid && _this2.state.feedRateValid;\n\n          if (valid) {\n            var cutDepth = parseFloat(document.getElementsByName(\"cutDepth\")[0].value);\n            var toolDiameter = parseFloat(document.getElementsByName(\"toolDiameter\")[0].value);\n            var stepoverPercentage = parseFloat(document.getElementsByName(\"stepoverPercentage\")[0].value); //must be between 1 and 100%\n\n            var tolerance = parseFloat(document.getElementsByName(\"tolerance\")[0].value);\n            var jogHeight = parseFloat(document.getElementsByName(\"jogHeight\")[0].value);\n            var jogRate = parseFloat(document.getElementsByName(\"jogRate\")[0].value);\n            var feedRate = parseFloat(document.getElementsByName(\"feedRate\")[0].value);\n            var tabThickness = parseFloat(document.getElementsByName(\"tabThickness\")[0].value);\n            var insideCutting = _this2.state.parameters.insideCutting; //derived parameters\n\n            var passDepth = cutDepth / 2;\n            var toolRadius = toolDiameter / 2;\n            var compensatedRadius = toolRadius + tolerance;\n            var tempFloor = Math.ceil(cutDepth / passDepth); //should this be ceiling or floor, I think ceil\n\n            var actualPassDepth = cutDepth / tempFloor;\n            var depthOfPasses = utils.makeSeries(actualPassDepth, actualPassDepth, tempFloor).map(function (n) {\n              return -n;\n            }); //settings will be compiled to a single object here\n\n            var parameters = utils.deepcopy(_this2.state.parameters);\n            console.log(parameters);\n\n            if (!isNaN(tolerance)) {\n              parameters[\"tolerance\"] = tolerance;\n            }\n\n            if (!isNaN(toolDiameter)) {\n              parameters[\"toolDiameter\"] = toolDiameter;\n              parameters[\"compensatedRadius\"] = compensatedRadius;\n            }\n\n            if (!isNaN(cutDepth)) {\n              parameters[\"cutDepth\"] = cutDepth;\n              parameters[\"depthOfPasses\"] = depthOfPasses;\n            }\n\n            if (!isNaN(feedRate)) {\n              parameters[\"feedRate\"] = feedRate;\n            }\n\n            if (!isNaN(jogHeight)) {\n              parameters[\"jogHeight\"] = jogHeight;\n            }\n\n            if (!isNaN(jogRate)) {\n              parameters[\"jogRate\"] = jogRate;\n            }\n\n            parameters[\"insideCutting\"] = insideCutting;\n\n            if (!isNaN(stepoverPercentage)) {\n              stepoverPercentage = stepoverPercentage / 100;\n              parameters[\"stepoverPercentage\"] = stepoverPercentage;\n            }\n\n            console.log(\"parameters\", parameters);\n\n            _this2.setState({\n              isShown: false,\n              parameters: parameters\n            }); //update app state here\n\n          }\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40\n        },\n        __self: this\n      }, React.createElement(TextInputField, {\n        onChange: function onChange(e) {\n          var valid = utils.isNum(e.target.value);\n\n          _this2.setState({\n            cutDepthValid: valid\n          });\n        },\n        isInvalid: !this.state.cutDepthValid,\n        name: \"cutDepth\",\n        description: this.state.cutDepthValid ? \"\" : \"please enter a valid number\",\n        label: \"Default Depth of Cut for Pockets\",\n        placeholder: String(this.state.parameters.cutDepth),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      }), React.createElement(TextInputField, {\n        onChange: function onChange(e) {\n          var valid = utils.isNum(e.target.value);\n\n          _this2.setState({\n            toolDiameterValid: valid\n          });\n        },\n        isInvalid: !this.state.toolDiameterValid,\n        name: \"toolDiameter\",\n        description: this.state.toolDiameterValid ? \"\" : \"please enter a valid number\",\n        label: \"Tool Diameter\",\n        placeholder: String(this.state.parameters.toolDiameter),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116\n        },\n        __self: this\n      }), React.createElement(TextInputField, {\n        onChange: function onChange(e) {\n          var valid = utils.isNum(e.target.value);\n          valid = 0 < parseFloat(e.target.value) && parseFloat(e.target.value) <= 100; //process value here\n\n          _this2.setState({\n            stepoverPercentageValid: valid\n          });\n        },\n        isInvalid: !this.state.stepoverPercentageValid,\n        name: \"stepoverPercentage\",\n        description: this.state.stepoverPercentageValid ? \"\" : \"please enter a valid number\",\n        label: \"Stepover Percentage (this is only relevant for pocket cuts)\",\n        placeholder: String(this.state.parameters.stepoverPercentage * 100),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127\n        },\n        __self: this\n      }), React.createElement(TextInputField, {\n        onChange: function onChange(e) {\n          var valid = utils.isNum(e.target.value);\n\n          _this2.setState({\n            feedRateValid: valid\n          });\n        },\n        isInvalid: !this.state.feedRateValid,\n        name: \"feedRate\",\n        description: this.state.feedRateValid ? \"\" : \"please enter a valid number\",\n        label: \"Feed Rate\",\n        placeholder: String(this.state.parameters.feedRate),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140\n        },\n        __self: this\n      }), React.createElement(TextInputField, {\n        onChange: function onChange(e) {\n          var valid = utils.isNum(e.target.value);\n\n          _this2.setState({\n            toleranceValid: valid\n          });\n        },\n        isInvalid: !this.state.toleranceValid,\n        name: \"tolerance\",\n        description: this.state.toleranceValid ? \"\" : \"please enter a valid number\",\n        label: \"Tolerance\",\n        placeholder: String(this.state.parameters.tolerance),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151\n        },\n        __self: this\n      }), React.createElement(TextInputField, {\n        onChange: function onChange(e) {\n          var valid = utils.isNum(e.target.value);\n\n          _this2.setState({\n            jogRateValid: valid\n          });\n        },\n        isInvalid: !this.state.jogRateValid,\n        name: \"jogRate\",\n        description: this.state.jogRateValid ? \"\" : \"please enter a valid number\",\n        label: \"Jog Rate\",\n        placeholder: String(this.state.parameters.jogRate),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162\n        },\n        __self: this\n      }), React.createElement(TextInputField, {\n        onChange: function onChange(e) {\n          var valid = utils.isNum(e.target.value);\n\n          _this2.setState({\n            jogHeightValid: valid\n          });\n        },\n        isInvalid: !this.state.jogHeightValid,\n        name: \"jogHeight\",\n        description: this.state.jogHeightValid ? \"\" : \"please enter a valid number\",\n        label: \"Jog Height\",\n        placeholder: String(this.state.parameters.jogHeight),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 173\n        },\n        __self: this\n      }), React.createElement(Heading, {\n        marginTop: 8,\n        size: 400,\n        color: \"rgba(67, 90, 111, .91)\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 184\n        },\n        __self: this\n      }, \"Inside Cutting (this is only relevant for profile cuts)\"), React.createElement(SegmentedControl, {\n        marginTop: 4,\n        options: this.state.insideCuttingOptions,\n        value: this.state.parameters.insideCutting,\n        onChange: function onChange(value) {\n          // update app state here\n          var newState = Object.assign({}, _this2.state.parameters);\n          newState.insideCutting = value;\n\n          _this2.setState({\n            parameters: newState\n          }); //this.props.updateparent(value);\n          // this.props.context.setState({units:value});\n\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 185\n        },\n        __self: this\n      }), React.createElement(Heading, {\n        marginTop: 20,\n        size: 400,\n        color: \"rgba(67, 90, 111, .91)\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 199\n        },\n        __self: this\n      }, \"Auto Tabs (this is only relevant for profile cuts)\"), React.createElement(SegmentedControl, {\n        marginTop: 4,\n        options: this.state.tabOptions,\n        value: this.state.parameters.tabs,\n        onChange: function onChange(value) {\n          // update app state here\n          var newState = Object.assign({}, _this2.state.parameters);\n          newState.tabs = value;\n\n          _this2.setState({\n            parameters: newState\n          }); //this.props.updateparent(value);\n          // this.props.context.setState({units:value});\n\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 200\n        },\n        __self: this\n      }), React.createElement(TextInputField, {\n        onChange: function onChange(e) {\n          var valid = utils.isNum(e.target.value);\n\n          _this2.setState({\n            tabThicknessValid: valid\n          });\n        },\n        isInvalid: !this.state.tabThicknessValid,\n        name: \"tabThickness\",\n        description: this.state.tabThicknessValid ? \"\" : \"please enter a valid number\",\n        label: \"Tab Thickness\",\n        placeholder: String(this.state.parameters.tabThickness),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 214\n        },\n        __self: this\n      }), React.createElement(Heading, {\n        marginTop: 20,\n        size: 400,\n        color: \"rgba(67, 90, 111, .91)\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 225\n        },\n        __self: this\n      }, \"Auto Dogbone (this is only relevant for pocket cuts)\"), React.createElement(SegmentedControl, {\n        marginTop: 4,\n        options: this.state.dogboneOptions,\n        value: this.state.parameters.dogbone,\n        onChange: function onChange(value) {\n          // update app state here\n          var newState = Object.assign({}, _this2.state.parameters);\n          newState.tabs = value;\n\n          _this2.setState({\n            parameters: newState\n          }); //this.props.updateparent(value);\n          // this.props.context.setState({units:value});\n\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 226\n        },\n        __self: this\n      })), React.createElement(Link, {\n        onClick: function onClick() {\n          return _this2.setState({\n            isShown: true\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 241\n        },\n        __self: this\n      }, \"Advanced Options\"));\n    }\n  }]);\n\n  return AdvancedOptions;\n}(Component);\n\nexport { AdvancedOptions };","map":{"version":3,"sources":["/Users/leomcelroy/Desktop/barkBeetleEverything/barkbeetle_js_real/src/components/AdvancedOptions.js"],"names":["React","Component","Button","Dialog","TextInputField","SegmentedControl","Heading","Link","Strong","Text","utils","store","params","AdvancedOptions","state","isShown","cutDepthValid","toolDiameterValid","stepoverPercentageValid","toleranceValid","jogHeightValid","jogRateValid","feedRateValid","tabThicknessValid","insideCuttingOptions","label","value","tabOptions","dogboneOptions","parameters","setState","valid","cutDepth","parseFloat","document","getElementsByName","toolDiameter","stepoverPercentage","tolerance","jogHeight","jogRate","feedRate","tabThickness","insideCutting","passDepth","toolRadius","compensatedRadius","tempFloor","Math","ceil","actualPassDepth","depthOfPasses","makeSeries","map","n","deepcopy","console","log","isNaN","e","isNum","target","String","newState","Object","assign","tabs","dogbone"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport {Button, Dialog, TextInputField, SegmentedControl, Heading, Link, Strong, Text} from 'evergreen-ui';\nimport * as utils from '../utils.js';\nimport store from '../store.js';\nimport * as params from '../parameters.js';\n\nclass AdvancedOptions extends Component {\n\n  state = {\n    isShown: false,\n    cutDepthValid: true,\n    toolDiameterValid: true,\n    stepoverPercentageValid: true,\n    toleranceValid: true,\n    jogHeightValid: true,\n    jogRateValid: true,\n    feedRateValid: true,\n    tabThicknessValid: true,\n    insideCuttingOptions: [\n      { label: 'true', value: true },\n      { label: 'false', value: false },\n    ],\n    tabOptions: [\n      { label: 'true', value: true },\n      { label: 'false', value: false },\n    ],\n    dogboneOptions: [\n      { label: 'true', value: true },\n      { label: 'false', value: false },\n    ],\n    parameters: params,\n  }\n\n  render() {\n\n    // console.log(this.state.parameters);\n\n    return (\n      <div>\n        <Dialog\n          isShown={this.state.isShown}\n          title=\"Advanced Default Settings\"\n          onCloseComplete={() => this.setState({isShown:false})}\n          onConfirm={() => {\n            let valid = this.state.cutDepthValid && this.state.toolDiameterValid &&\n                        this.state.stepoverPercentageValid && this.state.toleranceValid &&\n                        this.state.jogHeightValid && this.state.jogRateValid && this.state.feedRateValid;\n            if (valid) {\n              let cutDepth = parseFloat(document.getElementsByName(\"cutDepth\")[0].value);\n              let toolDiameter = parseFloat(document.getElementsByName(\"toolDiameter\")[0].value);\n              let stepoverPercentage = parseFloat(document.getElementsByName(\"stepoverPercentage\")[0].value); //must be between 1 and 100%\n              let tolerance = parseFloat(document.getElementsByName(\"tolerance\")[0].value);\n              let jogHeight = parseFloat(document.getElementsByName(\"jogHeight\")[0].value);\n              let jogRate = parseFloat(document.getElementsByName(\"jogRate\")[0].value);\n              let feedRate = parseFloat(document.getElementsByName(\"feedRate\")[0].value);\n              let tabThickness = parseFloat(document.getElementsByName(\"tabThickness\")[0].value);\n\n              let insideCutting = this.state.parameters.insideCutting;\n\n              //derived parameters\n              let passDepth = cutDepth/2;\n              let toolRadius = toolDiameter/2;\n              let compensatedRadius = toolRadius + tolerance;\n              let tempFloor = Math.ceil(cutDepth/passDepth); //should this be ceiling or floor, I think ceil\n              let actualPassDepth = cutDepth/tempFloor;\n              let depthOfPasses = utils.makeSeries(actualPassDepth, actualPassDepth, tempFloor).map(n => -n);\n\n              //settings will be compiled to a single object here\n              let parameters = utils.deepcopy(this.state.parameters);\n              console.log(parameters)\n\n              if (!isNaN(tolerance)) { parameters[\"tolerance\"] = tolerance; }\n              if (!isNaN(toolDiameter)) {\n                parameters[\"toolDiameter\"] = toolDiameter;\n                parameters[\"compensatedRadius\"] = compensatedRadius;\n\n              }\n              if (!isNaN(cutDepth)) {\n                parameters[\"cutDepth\"] = cutDepth;\n                parameters[\"depthOfPasses\"] = depthOfPasses;\n              }\n              if (!isNaN(feedRate)) { parameters[\"feedRate\"] = feedRate; }\n              if (!isNaN(jogHeight)) { parameters[\"jogHeight\"] = jogHeight; }\n              if (!isNaN(jogRate)) { parameters[\"jogRate\"] = jogRate; }\n\n              parameters[\"insideCutting\"] = insideCutting;\n\n              if (!isNaN(stepoverPercentage)) {\n                stepoverPercentage = stepoverPercentage/100;\n                parameters[\"stepoverPercentage\"] = stepoverPercentage;\n              }\n\n              console.log(\"parameters\", parameters);\n\n              this.setState({\n                isShown:false,\n                parameters\n              });\n\n              //update app state here\n\n            }\n          }}>\n\n          <TextInputField\n            onChange={e => {\n              let valid = utils.isNum(e.target.value);\n              this.setState({cutDepthValid:valid})\n            }}\n            isInvalid={!this.state.cutDepthValid}\n            name=\"cutDepth\"\n            description={(this.state.cutDepthValid) ? \"\" : \"please enter a valid number\"}\n            label=\"Default Depth of Cut for Pockets\"\n            placeholder={String(this.state.parameters.cutDepth)}/>\n\n          <TextInputField\n            onChange={e => {\n              let valid = utils.isNum(e.target.value);\n              this.setState({toolDiameterValid:valid})\n            }}\n            isInvalid={!this.state.toolDiameterValid}\n            name=\"toolDiameter\"\n            description={(this.state.toolDiameterValid) ? \"\" : \"please enter a valid number\"}\n            label=\"Tool Diameter\"\n            placeholder={String(this.state.parameters.toolDiameter)}/>\n\n          <TextInputField\n            onChange={e => {\n              let valid = utils.isNum(e.target.value);\n              valid = 0 < parseFloat(e.target.value) && parseFloat(e.target.value) <= 100;\n              //process value here\n              this.setState({stepoverPercentageValid:valid})\n            }}\n            isInvalid={!this.state.stepoverPercentageValid}\n            name=\"stepoverPercentage\"\n            description={(this.state.stepoverPercentageValid) ? \"\" : \"please enter a valid number\"}\n            label=\"Stepover Percentage (this is only relevant for pocket cuts)\"\n            placeholder={String(this.state.parameters.stepoverPercentage * 100)}/>\n\n            <TextInputField\n              onChange={e => {\n                let valid = utils.isNum(e.target.value);\n                this.setState({feedRateValid:valid})\n              }}\n              isInvalid={!this.state.feedRateValid}\n              name=\"feedRate\"\n              description={(this.state.feedRateValid) ? \"\" : \"please enter a valid number\"}\n              label=\"Feed Rate\"\n              placeholder={String(this.state.parameters.feedRate)}/>\n\n              <TextInputField\n                onChange={e => {\n                  let valid = utils.isNum(e.target.value);\n                  this.setState({toleranceValid:valid})\n                }}\n                isInvalid={!this.state.toleranceValid}\n                name=\"tolerance\"\n                description={(this.state.toleranceValid) ? \"\" : \"please enter a valid number\"}\n                label=\"Tolerance\"\n                placeholder={String(this.state.parameters.tolerance)}/>\n\n            <TextInputField\n              onChange={e => {\n                let valid = utils.isNum(e.target.value);\n                this.setState({jogRateValid:valid})\n              }}\n              isInvalid={!this.state.jogRateValid}\n              name=\"jogRate\"\n              description={(this.state.jogRateValid) ? \"\" : \"please enter a valid number\"}\n              label=\"Jog Rate\"\n              placeholder={String(this.state.parameters.jogRate)}/>\n\n              <TextInputField\n                onChange={e => {\n                  let valid = utils.isNum(e.target.value);\n                  this.setState({jogHeightValid:valid})\n                }}\n                isInvalid={!this.state.jogHeightValid}\n                name=\"jogHeight\"\n                description={(this.state.jogHeightValid) ? \"\" : \"please enter a valid number\"}\n                label=\"Jog Height\"\n                placeholder={String(this.state.parameters.jogHeight)}/>\n\n              <Heading marginTop={8} size={400} color={\"rgba(67, 90, 111, .91)\"}>Inside Cutting (this is only relevant for profile cuts)</Heading>\n              <SegmentedControl\n                marginTop={4}\n                options={this.state.insideCuttingOptions}\n                value={this.state.parameters.insideCutting}\n                onChange={value => {\n                  // update app state here\n                  let newState = Object.assign({}, this.state.parameters);\n                  newState.insideCutting = value;\n                  this.setState({ parameters:newState });\n                  //this.props.updateparent(value);\n                  // this.props.context.setState({units:value});\n                }}\n              />\n\n              <Heading marginTop={20} size={400} color={\"rgba(67, 90, 111, .91)\"}>Auto Tabs (this is only relevant for profile cuts)</Heading>\n              <SegmentedControl\n                marginTop={4}\n                options={this.state.tabOptions}\n                value={this.state.parameters.tabs}\n                onChange={value => {\n                  // update app state here\n                  let newState = Object.assign({}, this.state.parameters);\n                  newState.tabs = value;\n                  this.setState({ parameters:newState });\n                  //this.props.updateparent(value);\n                  // this.props.context.setState({units:value});\n                }}\n              />\n\n              <TextInputField\n                onChange={e => {\n                  let valid = utils.isNum(e.target.value);\n                  this.setState({tabThicknessValid:valid})\n                }}\n                isInvalid={!this.state.tabThicknessValid}\n                name=\"tabThickness\"\n                description={(this.state.tabThicknessValid) ? \"\" : \"please enter a valid number\"}\n                label=\"Tab Thickness\"\n                placeholder={String(this.state.parameters.tabThickness)}/>\n\n              <Heading marginTop={20} size={400} color={\"rgba(67, 90, 111, .91)\"}>Auto Dogbone (this is only relevant for pocket cuts)</Heading>\n              <SegmentedControl\n                marginTop={4}\n                options={this.state.dogboneOptions}\n                value={this.state.parameters.dogbone}\n                onChange={value => {\n                  // update app state here\n                  let newState = Object.assign({}, this.state.parameters);\n                  newState.tabs = value;\n                  this.setState({ parameters:newState });\n                  //this.props.updateparent(value);\n                  // this.props.context.setState({units:value});\n                }}\n              />\n\n        </Dialog>\n        <Link onClick={() => this.setState({isShown:true})}>Advanced Options</Link>\n      </div>\n    );\n  }\n}\n\nexport {AdvancedOptions};\n"]},"metadata":{},"sourceType":"module"}