{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _defineProperty2 = require('babel-runtime/helpers/defineProperty');\n\nvar _defineProperty3 = _interopRequireDefault(_defineProperty2);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _libs = require('../../libs');\n\nvar _Cover = require('./Cover');\n\nvar _Cover2 = _interopRequireDefault(_Cover);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar IframeUpload = function (_Component) {\n  (0, _inherits3.default)(IframeUpload, _Component);\n\n  function IframeUpload(props) {\n    (0, _classCallCheck3.default)(this, IframeUpload);\n\n    var _this = (0, _possibleConstructorReturn3.default)(this, (IframeUpload.__proto__ || Object.getPrototypeOf(IframeUpload)).call(this, props));\n\n    _this.state = {\n      dragOver: false,\n      file: null,\n      disabled: false,\n      frameName: 'frame-' + Date.now()\n    };\n    return _this;\n  }\n\n  (0, _createClass3.default)(IframeUpload, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      var _props = this.props,\n          action = _props.action,\n          onSuccess = _props.onSuccess,\n          onError = _props.onError;\n      var file = this.state.file;\n      window.addEventListener('message', function (event) {\n        var _ref = new URL(action),\n            origin = _ref.origin;\n\n        if (event.origin !== origin) return false;\n        var response = event.data;\n\n        if (response.result === 'success') {\n          onSuccess(response, file);\n        } else if (response.result === 'failed') {\n          onError(response, file);\n        }\n      }, false);\n    }\n  }, {\n    key: 'onload',\n    value: function onload() {\n      this.setState({\n        disabled: false\n      });\n    }\n  }, {\n    key: 'onDrop',\n    value: function onDrop(e) {\n      e.preventDefault();\n      this.setState({\n        dragOver: false\n      });\n      this.uploadFiles(e.dataTransfer.files); // TODO\n    }\n  }, {\n    key: 'handleChange',\n    value: function handleChange(e) {\n      if (e.target instanceof HTMLInputElement) {\n        var file = e.target.files[0];\n\n        if (file) {\n          this.uploadFiles(file);\n        }\n      }\n    }\n  }, {\n    key: 'uploadFiles',\n    value: function uploadFiles(file) {\n      if (this.state.disabled) return;\n      this.setState({\n        disabled: false,\n        file: file\n      });\n      this.props.onStart && this.props.onStart(file);\n      var formNode = this.refs.form;\n      var dataSpan = this.refs.data;\n      var data = this.props.data;\n\n      if (typeof data === 'function') {\n        data = data(file);\n      }\n\n      var inputs = Object.keys(data).map(function (key) {\n        return '<input name=\"' + key + '\" value=\"' + data[key] + '\"/>';\n      });\n      dataSpan.innerHTML = inputs.join('');\n      formNode.submit();\n      dataSpan.innerHTML = '';\n    }\n  }, {\n    key: 'handleClick',\n    value: function handleClick() {\n      if (!this.state.disabled) {\n        this.refs.input.click();\n      }\n    }\n  }, {\n    key: 'handleDragover',\n    value: function handleDragover(e) {\n      e.preventDefault();\n      this.setState({\n        onDrop: true\n      });\n    }\n  }, {\n    key: 'handleDragleave',\n    value: function handleDragleave(e) {\n      e.preventDefault();\n      this.setState({\n        onDrop: false\n      });\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this2 = this;\n\n      var _props2 = this.props,\n          drag = _props2.drag,\n          action = _props2.action,\n          name = _props2.name,\n          accept = _props2.accept,\n          listType = _props2.listType;\n      var frameName = this.state.frameName;\n      var classes = this.classNames((0, _defineProperty3.default)({\n        'el-upload': true\n      }, 'el-upload--' + listType, true));\n      return _react2.default.createElement('div', {\n        className: classes,\n        onClick: function onClick() {\n          return _this2.handleClick();\n        },\n        onDrop: function onDrop(e) {\n          return _this2.onDrop(e);\n        },\n        onDragOver: function onDragOver(e) {\n          return _this2.handleDragover(e);\n        },\n        onDragLeave: function onDragLeave(e) {\n          return _this2.handleDragleave(e);\n        }\n      }, _react2.default.createElement('iframe', {\n        onLoad: function onLoad() {\n          return _this2.onload();\n        },\n        ref: 'iframe',\n        name: frameName\n      }), _react2.default.createElement('form', {\n        ref: 'form',\n        action: action,\n        target: frameName,\n        encType: 'multipart/form-data',\n        method: 'POST'\n      }, _react2.default.createElement('input', {\n        className: 'el-upload__input',\n        type: 'file',\n        ref: 'input',\n        name: name,\n        onChange: function onChange(e) {\n          return _this2.handleChange(e);\n        },\n        accept: accept\n      }), _react2.default.createElement('input', {\n        type: 'hidden',\n        name: 'documentDomain',\n        value: document.domain\n      }), _react2.default.createElement('span', {\n        ref: 'data'\n      })), drag ? _react2.default.createElement(_Cover2.default, {\n        onFile: function onFile(file) {\n          return _this2.uploadFiles(file);\n        }\n      }, this.props.children) : this.props.children);\n    }\n  }]);\n  return IframeUpload;\n}(_libs.Component);\n\nIframeUpload.defaultProps = {\n  name: 'file'\n};\nvar _default = IframeUpload;\nexports.default = _default;\nIframeUpload.propTypes = {\n  drag: _libs.PropTypes.bool,\n  data: _libs.PropTypes.object,\n  action: _libs.PropTypes.string.isRequired,\n  name: _libs.PropTypes.string,\n  accept: _libs.PropTypes.string,\n  onStart: _libs.PropTypes.func,\n  onSuccess: _libs.PropTypes.func,\n  onError: _libs.PropTypes.func,\n  listType: _libs.PropTypes.string\n};\n;\n\nvar _temp = function () {\n  if (typeof __REACT_HOT_LOADER__ === 'undefined') {\n    return;\n  }\n\n  __REACT_HOT_LOADER__.register(IframeUpload, 'IframeUpload', 'src/upload/iFrameUpload.jsx');\n\n  __REACT_HOT_LOADER__.register(_default, 'default', 'src/upload/iFrameUpload.jsx');\n}();\n\n;","map":null,"metadata":{},"sourceType":"script"}