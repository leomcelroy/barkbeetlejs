{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport React from 'react';\nimport { css } from 'glamor';\nimport PropTypes from 'prop-types';\nimport { StackingOrder } from '../../constants';\nimport Toast from './Toast';\nvar wrapperClass = css({\n  maxWidth: 560,\n  margin: '0 auto',\n  top: 0,\n  left: 0,\n  right: 0,\n  position: 'fixed',\n  zIndex: StackingOrder.TOASTER,\n  pointerEvents: 'none'\n});\n\nvar hasCustomId = function hasCustomId(settings) {\n  return Object.hasOwnProperty.call(settings, 'id');\n};\n\nvar ToastManager =\n/*#__PURE__*/\nfunction (_React$PureComponent) {\n  _inherits(ToastManager, _React$PureComponent);\n\n  function ToastManager(props, context) {\n    var _this;\n\n    _classCallCheck(this, ToastManager);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ToastManager).call(this, props, context));\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"getToasts\", function () {\n      return _this.state.toasts;\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"closeAll\", function () {\n      _this.getToasts().forEach(function (toast) {\n        return toast.close();\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"notify\", function (title, settings) {\n      // If there's a custom toast ID passed, close existing toasts with the same custom ID\n      if (hasCustomId(settings)) {\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n          for (var _iterator = _this.state.toasts[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var toast = _step.value; // Since unique ID is still appended to a custom ID, skip the unique ID and check only prefix\n\n            if (String(toast.id).startsWith(settings.id)) {\n              _this.closeToast(toast.id);\n            }\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n              _iterator.return();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n      }\n\n      var instance = _this.createToastInstance(title, settings);\n\n      _this.setState(function (previousState) {\n        return {\n          toasts: [instance].concat(_toConsumableArray(previousState.toasts))\n        };\n      });\n\n      return instance;\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"createToastInstance\", function (title, settings) {\n      var uniqueId = ++ToastManager.idCounter;\n      var id = hasCustomId(settings) ? \"\".concat(settings.id, \"-\").concat(uniqueId) : uniqueId;\n      return {\n        id: id,\n        title: title,\n        description: settings.description,\n        hasCloseButton: settings.hasCloseButton || true,\n        duration: settings.duration || 5,\n        close: function close() {\n          return _this.closeToast(id);\n        },\n        intent: settings.intent\n      };\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"closeToast\", function (id) {\n      _this.setState(function (previousState) {\n        return {\n          toasts: previousState.toasts.map(function (toast) {\n            if (toast.id === id) {\n              return _objectSpread({}, toast, {\n                isShown: false\n              });\n            }\n\n            return toast;\n          })\n        };\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"removeToast\", function (id) {\n      _this.setState(function (previousState) {\n        return {\n          toasts: previousState.toasts.filter(function (toast) {\n            return toast.id !== id;\n          })\n        };\n      });\n    });\n\n    props.bindNotify(_this.notify);\n    props.bindGetToasts(_this.getToasts);\n    props.bindCloseAll(_this.closeAll);\n    _this.state = {\n      toasts: []\n    };\n    return _this;\n  }\n\n  _createClass(ToastManager, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(\"span\", {\n        className: wrapperClass\n      }, this.state.toasts.map(function (_ref) {\n        var id = _ref.id,\n            description = _ref.description,\n            props = _objectWithoutProperties(_ref, [\"id\", \"description\"]);\n\n        return React.createElement(Toast, _extends({\n          key: id,\n          onRemove: function onRemove() {\n            return _this2.removeToast(id);\n          }\n        }, props), description);\n      }));\n    }\n  }]);\n\n  return ToastManager;\n}(React.PureComponent);\n\nToastManager.displayName = \"ToastManager\";\n\n_defineProperty(ToastManager, \"propTypes\", {\n  /**\n   * Function called with the `this.notify` function.\n   */\n  bindNotify: PropTypes.func.isRequired,\n\n  /**\n   * Function called with the `this.getToasts` function.\n   */\n  bindGetToasts: PropTypes.func.isRequired,\n\n  /**\n   * Function called with the `this.closeAll` function.\n   */\n  bindCloseAll: PropTypes.func.isRequired\n});\n\n_defineProperty(ToastManager, \"idCounter\", 0);\n\nexport { ToastManager as default };","map":null,"metadata":{},"sourceType":"module"}