{"ast":null,"code":"import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport { dimensions, spacing, position, layout } from 'ui-box';\nimport { Text } from '../../typography';\nimport { Icon } from '../../icon';\nimport { Spinner } from '../../spinner';\nimport { withTheme } from '../../theme';\n\nvar TextDropdownButton =\n/*#__PURE__*/\nfunction (_PureComponent) {\n  _inherits(TextDropdownButton, _PureComponent);\n\n  function TextDropdownButton() {\n    _classCallCheck(this, TextDropdownButton);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(TextDropdownButton).apply(this, arguments));\n  }\n\n  _createClass(TextDropdownButton, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          theme = _this$props.theme,\n          className = _this$props.className,\n          intent = _this$props.intent,\n          height = _this$props.height,\n          isActive = _this$props.isActive,\n          children = _this$props.children,\n          disabled = _this$props.disabled,\n          appearance = _this$props.appearance,\n          isLoading = _this$props.isLoading,\n          paddingRight = _this$props.paddingRight,\n          paddingLeft = _this$props.paddingLeft,\n          paddingTop = _this$props.paddingTop,\n          paddingBottom = _this$props.paddingBottom,\n          icon = _this$props.icon,\n          props = _objectWithoutProperties(_this$props, [\"theme\", \"className\", \"intent\", \"height\", \"isActive\", \"children\", \"disabled\", \"appearance\", \"isLoading\", \"paddingRight\", \"paddingLeft\", \"paddingTop\", \"paddingBottom\", \"icon\"]);\n\n      var themedClassName = theme.getTextDropdownButtonClassName();\n      return React.createElement(Text, _extends({\n        is: \"button\",\n        className: themedClassName,\n        paddingX: 4,\n        marginX: -4,\n        paddingY: 2,\n        marginY: -2,\n        size: 300,\n        \"data-active\": isActive\n      }, TextDropdownButton.styles, props, {\n        disabled: disabled\n      }), isLoading && React.createElement(Spinner, {\n        marginLeft: -Math.round(height / 8),\n        marginRight: Math.round(height / 4),\n        size: Math.round(height / 2)\n      }), children, React.createElement(Icon, {\n        color: \"default\",\n        icon: icon,\n        size: 12,\n        marginLeft: 2\n      }));\n    }\n  }]);\n\n  return TextDropdownButton;\n}(PureComponent);\n\nTextDropdownButton.displayName = \"TextDropdownButton\";\n\n_defineProperty(TextDropdownButton, \"propTypes\", _objectSpread({}, dimensions.propTypes, spacing.propTypes, position.propTypes, layout.propTypes, {\n  /**\n   * Forcefully set the active state of a button.\n   * Useful in conjuction with a Popover.\n   */\n  isActive: PropTypes.bool,\n\n  /**\n   * When true, the button is disabled.\n   * isLoading also sets the button to disabled.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * Name of a Blueprint UI icon, or an icon element, to render.\n   * This prop is required because it determines the content of the component, but it can\n   * be explicitly set to falsy values to render nothing.\n   *\n   * - If `null` or `undefined` or `false`, this component will render nothing.\n   * - If given an `IconName` (a string literal union of all icon names),\n   *   that icon will be rendered as an `<svg>` with `<path>` tags.\n   * - If given a `JSX.Element`, that element will be rendered and _all other props on this component are ignored._\n   *   This type is supported to simplify usage of this component in other Blueprint components.\n   *   As a consumer, you should never use `<Icon icon={<element />}` directly; simply render `<element />` instead.\n   */\n  icon: PropTypes.string.isRequired,\n\n  /**\n   * Theme provided by ThemeProvider.\n   */\n  theme: PropTypes.object.isRequired,\n\n  /**\n   * Class name passed to the button.\n   * Only use if you know what you are doing.\n   */\n  className: PropTypes.string\n}));\n\n_defineProperty(TextDropdownButton, \"defaultProps\", {\n  isActive: false,\n  icon: 'caret-down'\n});\n\n_defineProperty(TextDropdownButton, \"styles\", {\n  position: 'relative',\n  fontFamily: 'ui',\n  fontWeight: 500,\n  display: 'inline-flex',\n  alignItems: 'center',\n  flexWrap: 'nowrap'\n});\n\nexport default withTheme(TextDropdownButton);","map":null,"metadata":{},"sourceType":"module"}