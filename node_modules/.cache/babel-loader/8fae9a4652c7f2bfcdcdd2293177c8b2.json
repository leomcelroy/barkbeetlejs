{"ast":null,"code":"import _defineProperty from \"/Users/leomcelroy/Desktop/barkbeetle_js/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n//This code is adapted from https://github.com/makercam/makercam/blob/master/src/clipperOffset.ts\nimport ClipperLib from 'js-clipper';\nvar EndTypes = {\n  etOpenSquare: 0,\n  etOpenRound: 1,\n  etOpenButt: 2,\n  etClosedPolygon: 3,\n  etClosedLine: 4\n};\nvar JoinTypes = [ClipperLib.JoinType.jtSquare, ClipperLib.JoinType.jtRound, ClipperLib.JoinType.jtMiter];\nexport var clipOffset = function clipOffset(contour, offset) {\n  var joints = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  var tolerance = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0.01;\n  var scale = 1000;\n  console.log(paths);\n  var paths = contour.map(function (lines) {\n    return lines.map(function (line) {\n      var _ref;\n\n      return _ref = {\n        X: Math.round(line.origin[0] * scale),\n        Y: Math.round(line.origin[1] * scale)\n      }, _defineProperty(_ref, \"X\", Math.round(line.end[0] * scale)), _defineProperty(_ref, \"Y\", Math.round(line.end[1] * scale)), _ref;\n    });\n  });\n  var co = new ClipperLib.ClipperOffset();\n  var offsetted = new ClipperLib.Paths();\n  co.Clear();\n  co.AddPaths(paths, JoinTypes[joints], EndTypes.etClosedLine); //chain.endless ? EndTypes.etClosedLine : EndTypes.etOpenButt\n\n  co.MiterLimit = 2;\n  co.ArcTolerance = 0.25;\n  co.Execute(offsetted, offset * scale);\n  console.log(offsetted);\n};","map":{"version":3,"sources":["/Users/leomcelroy/Desktop/barkbeetle_js/src/unmakerjs/clipper.js"],"names":["ClipperLib","EndTypes","etOpenSquare","etOpenRound","etOpenButt","etClosedPolygon","etClosedLine","JoinTypes","JoinType","jtSquare","jtRound","jtMiter","clipOffset","contour","offset","joints","tolerance","scale","console","log","paths","map","lines","line","X","Math","round","origin","Y","end","co","ClipperOffset","offsetted","Paths","Clear","AddPaths","MiterLimit","ArcTolerance","Execute"],"mappings":";AAAA;AAEA,OAAOA,UAAP,MAAuB,YAAvB;AAEA,IAAMC,QAAQ,GAAG;AACbC,EAAAA,YAAY,EAAE,CADD;AAEbC,EAAAA,WAAW,EAAE,CAFA;AAGbC,EAAAA,UAAU,EAAE,CAHC;AAIbC,EAAAA,eAAe,EAAE,CAJJ;AAKbC,EAAAA,YAAY,EAAE;AALD,CAAjB;AAQA,IAAMC,SAAS,GAAG,CACdP,UAAU,CAACQ,QAAX,CAAoBC,QADN,EAEdT,UAAU,CAACQ,QAAX,CAAoBE,OAFN,EAGdV,UAAU,CAACQ,QAAX,CAAoBG,OAHN,CAAlB;AAMA,OAAO,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAACC,OAAD,EAAUC,MAAV,EAAmD;AAAA,MAAjCC,MAAiC,uEAAxB,CAAwB;AAAA,MAArBC,SAAqB,uEAAT,IAAS;AACzE,MAAMC,KAAK,GAAG,IAAd;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYC,KAAZ;AACA,MAAIA,KAAK,GAAGP,OAAO,CAACQ,GAAR,CAAY,UAAAC,KAAK;AAAA,WAAKA,KAAK,CAACD,GAAN,CAAU,UAAAE,IAAI;AAAA;;AAAA;AAC5BC,QAAAA,CAAC,EAAEC,IAAI,CAACC,KAAL,CAAWH,IAAI,CAACI,MAAL,CAAY,CAAZ,IAAiBV,KAA5B,CADyB;AAE5BW,QAAAA,CAAC,EAAEH,IAAI,CAACC,KAAL,CAAWH,IAAI,CAACI,MAAL,CAAY,CAAZ,IAAiBV,KAA5B;AAFyB,oCAGzBQ,IAAI,CAACC,KAAL,CAAWH,IAAI,CAACM,GAAL,CAAS,CAAT,IAAcZ,KAAzB,CAHyB,8BAIzBQ,IAAI,CAACC,KAAL,CAAWH,IAAI,CAACM,GAAL,CAAS,CAAT,IAAcZ,KAAzB,CAJyB;AAAA,KAAd,CAAL;AAAA,GAAjB,CAAZ;AAQA,MAAMa,EAAE,GAAG,IAAI9B,UAAU,CAAC+B,aAAf,EAAX;AACA,MAAMC,SAAS,GAAG,IAAIhC,UAAU,CAACiC,KAAf,EAAlB;AACAH,EAAAA,EAAE,CAACI,KAAH;AACAJ,EAAAA,EAAE,CAACK,QAAH,CAAYf,KAAZ,EAAmBb,SAAS,CAACQ,MAAD,CAA5B,EAAsCd,QAAQ,CAACK,YAA/C,EAdyE,CAcZ;;AAC7DwB,EAAAA,EAAE,CAACM,UAAH,GAAgB,CAAhB;AACAN,EAAAA,EAAE,CAACO,YAAH,GAAkB,IAAlB;AACAP,EAAAA,EAAE,CAACQ,OAAH,CAAWN,SAAX,EAAsBlB,MAAM,GAAGG,KAA/B;AAEAC,EAAAA,OAAO,CAACC,GAAR,CAAYa,SAAZ;AACH,CApBM","sourcesContent":["//This code is adapted from https://github.com/makercam/makercam/blob/master/src/clipperOffset.ts\n\nimport ClipperLib from 'js-clipper';\n\nconst EndTypes = {\n    etOpenSquare: 0,\n    etOpenRound: 1,\n    etOpenButt: 2,\n    etClosedPolygon: 3,\n    etClosedLine: 4\n};\n\nconst JoinTypes = [\n    ClipperLib.JoinType.jtSquare,\n    ClipperLib.JoinType.jtRound,\n    ClipperLib.JoinType.jtMiter\n]\n\nexport const clipOffset = (contour, offset, joints = 0, tolerance = 0.01) => {\n    const scale = 1000\n    console.log(paths)\n    let paths = contour.map(lines => (lines.map(line =>({\n                        X: Math.round(line.origin[0] * scale),\n                        Y: Math.round(line.origin[1] * scale),\n                        X: Math.round(line.end[0] * scale),\n                        Y: Math.round(line.end[1] * scale),\n                    }))\n                ))\n\n    const co = new ClipperLib.ClipperOffset()\n    const offsetted = new ClipperLib.Paths()\n    co.Clear()\n    co.AddPaths(paths, JoinTypes[joints], EndTypes.etClosedLine) //chain.endless ? EndTypes.etClosedLine : EndTypes.etOpenButt\n    co.MiterLimit = 2\n    co.ArcTolerance = 0.25\n    co.Execute(offsetted, offset * scale);\n\n    console.log(offsetted);\n}\n"]},"metadata":{},"sourceType":"module"}