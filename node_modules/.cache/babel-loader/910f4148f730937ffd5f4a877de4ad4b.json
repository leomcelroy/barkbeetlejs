{"ast":null,"code":"'use strict';\n\nvar React = require('react');\n\nvar classNames = require('classnames');\n\nvar REGEXP_EMAIL = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n\nfunction validateEmail(value) {\n  return REGEXP_EMAIL.test(value);\n}\n\nmodule.exports = React.createClass({\n  displayName: 'EmailInputGroup',\n  propTypes: {\n    alwaysValidate: React.PropTypes.bool,\n    className: React.PropTypes.string,\n    invalidMessage: React.PropTypes.string,\n    label: React.PropTypes.string,\n    onChange: React.PropTypes.func,\n    required: React.PropTypes.bool,\n    requiredMessage: React.PropTypes.string,\n    value: React.PropTypes.string\n  },\n  getDefaultProps: function getDefaultProps() {\n    return {\n      requiredMessage: 'Email address is required',\n      invalidMessage: 'Please enter a valid email address'\n    };\n  },\n  getInitialState: function getInitialState() {\n    return {\n      isValid: true,\n      validationIsActive: this.props.alwaysValidate\n    };\n  },\n  componentDidMount: function componentDidMount() {\n    if (this.state.validationIsActive) {\n      this.validateInput(this.props.value);\n    }\n  },\n  componentWillReceiveProps: function componentWillReceiveProps(newProps) {\n    if (this.state.validationIsActive) {\n      if (newProps.value !== this.props.value && newProps.value !== this._lastChangeValue && !newProps.alwaysValidate) {\n        // reset validation state if the value was changed outside the component\n        return this.setState({\n          isValid: true,\n          validationIsActive: false\n        });\n      }\n\n      this.validateInput(newProps.value);\n    }\n  },\n  handleChange: function handleChange(e) {\n    this._lastChangeValue = e.target.value;\n    if (this.props.onChange) this.props.onChange(e);\n  },\n  handleBlur: function handleBlur() {\n    if (!this.props.alwaysValidate) {\n      this.setState({\n        validationIsActive: false\n      });\n    }\n\n    this.validateInput(this.props.value);\n  },\n  validateInput: function validateInput(value) {\n    var newState = {\n      isValid: true\n    };\n\n    if (value.length && !validateEmail(value) || !value.length && this.props.required) {\n      newState.isValid = false;\n    }\n\n    if (!newState.isValid) {\n      newState.validationIsActive = true;\n    }\n\n    this.setState(newState);\n  },\n  render: function render() {\n    var validationMessage;\n\n    if (!this.state.isValid) {\n      validationMessage = React.createElement('div', {\n        className: 'form-validation is-invalid'\n      }, this.props.value.length ? this.props.invalidMessage : this.props.requiredMessage);\n    }\n\n    var formGroupClass = classNames('FormField', {\n      'is-invalid': !this.state.isValid\n    }, this.props.className);\n    var componentLabel = this.props.label ? React.createElement('label', {\n      className: 'FormLabel',\n      htmlFor: 'inputEmail'\n    }, this.props.label) : null;\n    return React.createElement('div', {\n      className: formGroupClass\n    }, componentLabel, React.createElement('input', {\n      onChange: this.handleChange,\n      onBlur: this.handleBlur,\n      value: this.props.value,\n      type: 'email',\n      className: 'FormInput',\n      placeholder: 'Enter email',\n      id: 'inputEmail'\n    }), validationMessage);\n  }\n});","map":null,"metadata":{},"sourceType":"script"}