{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport { StackingOrder } from '../../constants';\nimport StackingContext from './StackingContext';\n\nvar Stack =\n/*#__PURE__*/\nfunction (_PureComponent) {\n  _inherits(Stack, _PureComponent);\n\n  function Stack() {\n    _classCallCheck(this, Stack);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Stack).apply(this, arguments));\n  }\n\n  _createClass(Stack, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          children = _this$props.children,\n          value = _this$props.value;\n      return React.createElement(StackingContext.Consumer, null, function (previousValue) {\n        var currentValue = Math.max(value, previousValue);\n        var nextValue = currentValue + 1;\n        return React.createElement(StackingContext.Provider, {\n          value: nextValue\n        }, children(currentValue));\n      });\n    }\n  }]);\n\n  return Stack;\n}(PureComponent);\n\nStack.displayName = \"Stack\";\n\n_defineProperty(Stack, \"propTypes\", {\n  /**\n   * Function that takes the current z-index and returns a React Node.\n   * (zIndex) => ReactNode.\n   */\n  children: PropTypes.func.isRequired,\n\n  /**\n   * Set the value of the stack. This will increment for children.\n   */\n  value: PropTypes.number\n});\n\n_defineProperty(Stack, \"defaultProps\", {\n  value: StackingOrder.STACKING_CONTEXT\n});\n\nexport { Stack as default };","map":null,"metadata":{},"sourceType":"module"}