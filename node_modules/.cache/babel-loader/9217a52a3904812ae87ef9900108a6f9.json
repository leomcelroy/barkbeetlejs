{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport debounce from 'lodash.debounce';\nimport { withTheme } from '../../theme';\nimport { SelectMenu } from '../../select-menu';\nimport { Icon } from '../../icon';\nimport TextTableCell from './TextTableCell';\nimport TableCell from './TableCell';\nvar MIN_SELECT_MENU_WIDTH = 240;\n\nvar SelectMenuCell =\n/*#__PURE__*/\nfunction (_React$PureComponent) {\n  _inherits(SelectMenuCell, _React$PureComponent);\n\n  function SelectMenuCell(props) {\n    var _this;\n\n    _classCallCheck(this, SelectMenuCell);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(SelectMenuCell).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"state\", {\n      targetWidth: MIN_SELECT_MENU_WIDTH,\n      shouldClickToggle: false,\n      isFocused: false\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"onResize\", function () {\n      _this.updateOnResize();\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"updateOnResize\", function () {\n      if (!_this.mainRef) return;\n      var targetWidth = _this.mainRef.offsetWidth;\n\n      _this.setState({\n        targetWidth: Math.max(MIN_SELECT_MENU_WIDTH, targetWidth)\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"onMainRef\", function (getRef, ref) {\n      _this.mainRef = ref;\n      getRef(ref);\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"onOverlayRef\", function (ref) {\n      _this.overlayRef = ref;\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"handleKeyDown\", function (toggle, isShown, e) {\n      if (e.key === 'Enter') {\n        e.preventDefault();\n        e.stopPropagation();\n\n        if (!isShown && _this.props.isSelectable && !_this.props.disabled) {\n          toggle();\n        }\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"handleDoubleClick\", function (toggle, isShown) {\n      if (!isShown && _this.props.isSelectable && !_this.props.disabled) {\n        toggle();\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"handleClick\", function (toggle, isShown) {\n      var shouldClickToggle = _this.state.shouldClickToggle;\n\n      if (!shouldClickToggle && !isShown) {\n        _this.setState({\n          shouldClickToggle: true\n        });\n\n        return;\n      }\n\n      if (_this.props.isSelectable && !_this.props.disabled) {\n        toggle();\n\n        _this.setState({\n          shouldClickToggle: true\n        });\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"handleFocus\", function () {\n      _this.setState({\n        isFocused: true\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"handleBlur\", function () {\n      _this.setState({\n        shouldClickToggle: false,\n        isFocused: false\n      });\n    });\n\n    _this.onResize = debounce(_this.onResize, 200);\n    return _this;\n  }\n\n  _createClass(SelectMenuCell, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      // Call this to initialize and set\n      this.updateOnResize();\n      window.addEventListener('resize', this.onResize, false);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      window.removeEventListener('resize', this.onResize);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          children = _this$props.children,\n          theme = _this$props.theme,\n          size = _this$props.size,\n          selectMenuProps = _this$props.selectMenuProps,\n          disabled = _this$props.disabled,\n          placeholder = _this$props.placeholder,\n          isSelectable = _this$props.isSelectable,\n          _this$props$textProps = _this$props.textProps,\n          textProps = _this$props$textProps === void 0 ? {} : _this$props$textProps,\n          props = _objectWithoutProperties(_this$props, [\"children\", \"theme\", \"size\", \"selectMenuProps\", \"disabled\", \"placeholder\", \"isSelectable\", \"textProps\"]);\n\n      var _this$state = this.state,\n          targetWidth = _this$state.targetWidth,\n          isFocused = _this$state.isFocused;\n      var cursor = 'default';\n\n      if (disabled) {\n        cursor = 'not-allowed';\n      } else if (isSelectable) {\n        if (isFocused) {\n          cursor = 'pointer';\n        } else {\n          cursor = 'default';\n        }\n      } else {\n        cursor = 'text';\n      }\n\n      return React.createElement(SelectMenu, _extends({\n        width: targetWidth\n      }, selectMenuProps), function (_ref) {\n        var toggle = _ref.toggle,\n            getRef = _ref.getRef,\n            isShown = _ref.isShown;\n        return React.createElement(TextTableCell, _extends({\n          innerRef: _this2.onMainRef.bind(null, getRef),\n          onClick: _this2.handleClick.bind(null, toggle, isShown),\n          onFocus: _this2.handleFocus.bind(null, toggle, isShown),\n          onBlur: _this2.handleBlur,\n          isSelectable: isSelectable && !disabled,\n          rightView: isSelectable ? React.createElement(Icon, {\n            icon: \"caret-down\",\n            color: \"muted\"\n          }) : null,\n          \"aria-haspopup\": true,\n          \"aria-expanded\": isShown,\n          cursor: isShown ? 'pointer' : cursor,\n          textProps: _objectSpread({\n            size: size,\n            opacity: disabled || !children && placeholder ? 0.5 : 1\n          }, textProps),\n          onKeyDown: _this2.handleKeyDown.bind(null, toggle, isShown),\n          onDoubleClick: _this2.handleDoubleClick.bind(null, toggle, isShown)\n        }, props), children ? children : placeholder);\n      });\n    }\n  }]);\n\n  return SelectMenuCell;\n}(React.PureComponent);\n\nSelectMenuCell.displayName = \"SelectMenuCell\";\n\n_defineProperty(SelectMenuCell, \"propTypes\", _objectSpread({}, TableCell.propTypes, {\n  /*\n  * Makes the TableCell focusable.\n  * Will add tabIndex={-1 || this.props.tabIndex}.\n  */\n  isSelectable: PropTypes.bool.isRequired,\n\n  /**\n   * When true, the cell can't be edited.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * Optional placeholder when children is falsy.\n   */\n  placeholder: PropTypes.node,\n\n  /**\n   * The size used for the TextTableCell and Textarea.\n   */\n  size: PropTypes.oneOf([300, 400]).isRequired,\n  selectMenuProps: PropTypes.object\n}));\n\n_defineProperty(SelectMenuCell, \"defaultProps\", {\n  size: 300,\n  isSelectable: true\n});\n\nexport default withTheme(SelectMenuCell);","map":null,"metadata":{},"sourceType":"module"}