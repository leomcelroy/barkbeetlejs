{"ast":null,"code":"import _toConsumableArray from \"/Users/leomcelroy/Desktop/barkbeetle_js/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport { line } from '../unmakerjs/primitives.js';\n\nvar linesToPolylinePoints = function linesToPolylinePoints(lines, lastIndex) {\n  return lines.map(function (line, i) {\n    //should import this instead\n    if (i === lastIndex - 1) return [{\n      x: line.origin[0],\n      y: line.origin[1]\n    }, {\n      x: line.end[0],\n      y: line.end[1]\n    }];\n    return {\n      x: line.origin[0],\n      y: line.origin[1]\n    };\n  }).flat();\n};\n\nvar sum = function sum(a, b) {\n  return a + b;\n};\n\nvar getCenter = function getCenter(contour) {\n  var polyline = linesToPolylinePoints(contour);\n  var xS = polyline.map(function (point) {\n    return point.x;\n  });\n  var averageX = xS.reduce(sum, 0) / xS.length;\n  var medianX = (Math.max.apply(Math, _toConsumableArray(xS)) + Math.min.apply(Math, _toConsumableArray(xS))) / 2;\n  var yS = polyline.map(function (point) {\n    return point.y;\n  });\n  var medianY = (Math.max.apply(Math, _toConsumableArray(yS)) + Math.min.apply(Math, _toConsumableArray(yS))) / 2;\n  var averageY = yS.reduce(sum, 0) / yS.length; // return [averageX, averageY];\n\n  return [averageX, averageY];\n};\n\nexport var drill = function drill(contour, params) {\n  var center = getCenter(contour);\n  var preamble = [params.units, \"G90\"];\n  var gcode = [].concat(preamble, [\"(end of preamble)\", \"G1 Z\".concat(params.jogHeight, \" F\").concat(params.jogRate), \"G0 X\".concat(center[0], \" Y\").concat(center[1]), \"G0 Z\".concat(params.cutDepth), \"G1 Z\".concat(params.jogHeight, \" F\").concat(params.jogRate)]);\n  var text = gcode.join('\\n');\n  var drawing = [[line([center[0] - params.compensatedRadius, center[1]], [center[0] + params.compensatedRadius, center[1]])], [line([center[0], center[1] - params.compensatedRadius], [center[0], center[1] + params.compensatedRadius])]];\n  return {\n    drawing: drawing,\n    gcode: text\n  };\n};","map":{"version":3,"sources":["/Users/leomcelroy/Desktop/barkbeetle_js/src/toolpaths/drill.js"],"names":["line","linesToPolylinePoints","lines","lastIndex","map","i","x","origin","y","end","flat","sum","a","b","getCenter","contour","polyline","xS","point","averageX","reduce","length","medianX","Math","max","min","yS","medianY","averageY","drill","params","center","preamble","units","gcode","jogHeight","jogRate","cutDepth","text","join","drawing","compensatedRadius"],"mappings":"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","sourcesContent":["import {line} from '../unmakerjs/primitives.js';\n\nconst linesToPolylinePoints = (lines, lastIndex) => lines.map((line, i) => { //should import this instead\n  if (i === lastIndex-1) return [{x:line.origin[0], y:line.origin[1]}, {x:line.end[0], y:line.end[1]}];\n\n  return {x:line.origin[0], y:line.origin[1]}\n}).flat()\n\nlet sum = (a, b) => a + b;\n\nconst getCenter = (contour) => {\n  let polyline = linesToPolylinePoints(contour);\n\n  let xS = polyline.map(point => point.x);\n  let averageX = xS.reduce(sum, 0)/xS.length;\n  let medianX = (Math.max(...xS) + Math.min(...xS))/2\n\n  let yS = polyline.map(point => point.y);\n  let medianY = (Math.max(...yS) + Math.min(...yS))/2\n  let averageY = yS.reduce(sum, 0)/yS.length;\n\n  // return [averageX, averageY];\n  return [averageX, averageY];\n\n}\n\nexport const drill = (contour, params) => {\n  let center = getCenter(contour);\n\n  let preamble = [params.units, \"G90\"];\n\n  let gcode = [\n    ...preamble,\n    \"(end of preamble)\",\n    `G1 Z${params.jogHeight} F${params.jogRate}`,\n    `G0 X${center[0]} Y${center[1]}`,\n    `G0 Z${params.cutDepth}`,\n    `G1 Z${params.jogHeight} F${params.jogRate}`,\n  ]\n\n  let text = gcode.join('\\n');\n\n  let drawing = [\n    [line([center[0] - params.compensatedRadius, center[1]], [center[0] + params.compensatedRadius, center[1]])],\n    [line([center[0], center[1] - params.compensatedRadius], [center[0], center[1] + params.compensatedRadius])]\n  ]\n\n  return {drawing, gcode: text};\n};\n"]},"metadata":{},"sourceType":"module"}