{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeof2 = require('babel-runtime/helpers/typeof');\n\nvar _typeof3 = _interopRequireDefault(_typeof2);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar hsv2hsl = function hsv2hsl(hue, sat, val) {\n  var sl = void 0,\n      l = void 0;\n  l = (2 - sat) * val;\n  sl = sat * val;\n  sl /= l < 1 ? l : 2 - l;\n  sl = sl || 0;\n  l /= 2;\n  return [hue, sl, l];\n}; // Need to handle 1.0 as 100%, since once it is a number, there is no difference between it and 1\n// <http://stackoverflow.com/questions/7422072/javascript-how-to-detect-number-as-a-decimal-including-1-0>\n\n\nvar isOnePointZero = function isOnePointZero(n) {\n  return typeof n === 'string' && n.indexOf('.') !== -1 && parseFloat(n) === 1;\n};\n\nvar isPercentage = function isPercentage(n) {\n  return typeof n === 'string' && n.indexOf('%') !== -1;\n}; // Take input from [0, n] and return it as [0, 1]\n\n\nvar bound01 = function bound01(value, max) {\n  if (isOnePointZero(value)) value = '100%';\n  var processPercent = isPercentage(value);\n  value = Math.min(max, Math.max(0, parseFloat(value))); // Automatically convert percentage into number\n\n  if (processPercent) {\n    value = parseInt(value * max, 10) / 100;\n  } // Handle floating point rounding errors\n\n\n  if (Math.abs(value - max) < 0.000001) {\n    return 1;\n  } // Convert into [0, 1] range if it isn't already\n\n\n  return value % max / parseFloat(max);\n};\n\nvar INT_HEX_MAP = {\n  10: 'A',\n  11: 'B',\n  12: 'C',\n  13: 'D',\n  14: 'E',\n  15: 'F'\n};\n\nvar toHex = function toHex(_ref) {\n  var r = _ref.r,\n      g = _ref.g,\n      b = _ref.b;\n\n  var hexOne = function hexOne(value) {\n    value = Math.min(Math.round(value), 255);\n    var high = Math.floor(value / 16);\n    var low = value % 16;\n    return '' + (INT_HEX_MAP[high] || high) + (INT_HEX_MAP[low] || low);\n  };\n\n  if (isNaN(r) || isNaN(g) || isNaN(b)) return '';\n  return '#' + hexOne(r) + hexOne(g) + hexOne(b);\n};\n\nvar HEX_INT_MAP = {\n  A: 10,\n  B: 11,\n  C: 12,\n  D: 13,\n  E: 14,\n  F: 15\n};\n\nvar parseHexChannel = function parseHexChannel(hex) {\n  if (hex.length === 2) {\n    return (HEX_INT_MAP[hex[0].toUpperCase()] || +hex[0]) * 16 + (HEX_INT_MAP[hex[1].toUpperCase()] || +hex[1]);\n  }\n\n  return HEX_INT_MAP[hex[1].toUpperCase()] || +hex[1];\n};\n\nvar hsl2hsv = function hsl2hsv(hue, sat, light) {\n  sat = sat / 100;\n  light = light / 100;\n  var smin = sat;\n  var lmin = Math.max(light, 0.01);\n  var sv = void 0;\n  var v = void 0;\n  light *= 2;\n  sat *= light <= 1 ? light : 2 - light;\n  smin *= lmin <= 1 ? lmin : 2 - lmin;\n  v = (light + sat) / 2;\n  sv = light === 0 ? 2 * smin / (lmin + smin) : 2 * sat / (light + sat);\n  return {\n    h: hue,\n    s: sv * 100,\n    v: v * 100\n  };\n}; // `rgbToHsv`\n// Converts an RGB color value to HSV\n// *Assumes:* r, g, and b are contained in the set [0, 255] or [0, 1]\n// *Returns:* { h, s, v } in [0,1]\n\n\nvar rgb2hsv = function rgb2hsv(r, g, b) {\n  r = bound01(r, 255);\n  g = bound01(g, 255);\n  b = bound01(b, 255);\n  var max = Math.max(r, g, b);\n  var min = Math.min(r, g, b);\n  var h = void 0,\n      s = void 0;\n  var v = max;\n  var d = max - min;\n  s = max === 0 ? 0 : d / max;\n\n  if (max === min) {\n    h = 0; // achromatic\n  } else {\n    switch (max) {\n      case r:\n        h = (g - b) / d + (g < b ? 6 : 0);\n        break;\n\n      case g:\n        h = (b - r) / d + 2;\n        break;\n\n      case b:\n        h = (r - g) / d + 4;\n        break;\n    }\n\n    h /= 6;\n  }\n\n  return {\n    h: Math.round(h * 360),\n    s: Math.round(s * 100),\n    v: Math.round(v * 100)\n  };\n}; // `hsvToRgb`\n// Converts an HSV color value to RGB.\n// *Assumes:* h is contained in [0, 1] or [0, 360] and s and v are contained in [0, 1] or [0, 100]\n// *Returns:* { r, g, b } in the set [0, 255]\n\n\nvar hsv2rgb = function hsv2rgb(h, s, v) {\n  h = bound01(h, 360) * 6;\n  s = bound01(s, 100);\n  v = bound01(v, 100);\n  var i = Math.floor(h);\n  var f = h - i;\n  var p = v * (1 - s);\n  var q = v * (1 - f * s);\n  var t = v * (1 - (1 - f) * s);\n  var mod = i % 6;\n  var r = [v, q, p, p, t, v][mod];\n  var g = [t, v, v, q, p, p][mod];\n  var b = [p, p, t, v, v, q][mod];\n  return {\n    r: Math.round(r * 255),\n    g: Math.round(g * 255),\n    b: Math.round(b * 255)\n  };\n};\n\nvar Color = function () {\n  function Color(options) {\n    (0, _classCallCheck3.default)(this, Color);\n    this._hue = 0;\n    this._saturation = 100;\n    this._value = 100;\n    this._alpha = 100;\n    this.enableAlpha = false;\n    this.format = 'hex';\n    this.value = '';\n    options = options || {};\n\n    for (var option in options) {\n      if (options.hasOwnProperty(option)) {\n        this[option] = options[option];\n      }\n    }\n\n    this.doOnChange();\n  }\n\n  (0, _createClass3.default)(Color, [{\n    key: 'set',\n    value: function set(prop, value) {\n      if (arguments.length === 1 && (typeof prop === 'undefined' ? 'undefined' : (0, _typeof3.default)(prop)) === 'object') {\n        for (var p in prop) {\n          if (prop.hasOwnProperty(p)) {\n            this.set(p, prop[p]);\n          }\n        }\n\n        return;\n      }\n\n      this['_' + prop] = value;\n      this.doOnChange();\n    }\n  }, {\n    key: 'get',\n    value: function get(prop) {\n      return this['_' + prop];\n    }\n  }, {\n    key: 'toRgb',\n    value: function toRgb() {\n      return hsv2rgb(this._hue, this._saturation, this._value);\n    }\n  }, {\n    key: 'fromString',\n    value: function fromString(value) {\n      var _this = this;\n\n      if (!value) {\n        this._hue = 0;\n        this._saturation = 100;\n        this._value = 100;\n        this.doOnChange();\n        return;\n      }\n\n      var fromHSV = function fromHSV(h, s, v) {\n        _this._hue = h;\n        _this._saturation = s;\n        _this._value = v;\n\n        _this.doOnChange();\n      };\n\n      if (value.indexOf('hsl') !== -1) {\n        var parts = value.replace(/hsla|hsl|\\(|\\)/gm, '').split(/\\s|,/g).filter(function (val) {\n          return val !== '';\n        }).map(function (val, index) {\n          return index > 2 ? parseFloat(val) : parseInt(val, 10);\n        });\n\n        if (parts.length === 4) {\n          this._alpha = Math.floor(parseFloat(parts[3]) * 100);\n        }\n\n        if (parts.length >= 3) {\n          var _hsl2hsv = hsl2hsv(parts[0], parts[1], parts[2]),\n              h = _hsl2hsv.h,\n              s = _hsl2hsv.s,\n              v = _hsl2hsv.v;\n\n          fromHSV(h, s, v);\n        }\n      } else if (value.indexOf('hsv') !== -1) {\n        var _parts = value.replace(/hsva|hsv|\\(|\\)/gm, '').split(/\\s|,/g).filter(function (val) {\n          return val !== '';\n        }).map(function (val, index) {\n          return index > 2 ? parseFloat(val) : parseInt(val, 10);\n        });\n\n        if (_parts.length === 4) {\n          this._alpha = Math.floor(parseFloat(_parts[3]) * 100);\n        }\n\n        if (_parts.length >= 3) {\n          fromHSV(_parts[0], _parts[1], _parts[2]);\n        }\n      } else if (value.indexOf('rgb') !== -1) {\n        var _parts2 = value.replace(/rgba|rgb|\\(|\\)/gm, '').split(/\\s|,/g).filter(function (val) {\n          return val !== '';\n        }).map(function (val, index) {\n          return index > 2 ? parseFloat(val) : parseInt(val, 10);\n        });\n\n        if (_parts2.length === 4) {\n          this._alpha = Math.floor(parseFloat(_parts2[3]) * 100);\n        }\n\n        if (_parts2.length >= 3) {\n          var _rgb2hsv = rgb2hsv(_parts2[0], _parts2[1], _parts2[2]),\n              _h = _rgb2hsv.h,\n              _s = _rgb2hsv.s,\n              _v = _rgb2hsv.v;\n\n          fromHSV(_h, _s, _v);\n        }\n      } else if (value.indexOf('#') !== -1) {\n        var hex = value.replace('#', '').trim();\n        var r = void 0,\n            g = void 0,\n            b = void 0;\n\n        if (hex.length === 3) {\n          r = parseHexChannel(hex[0] + hex[0]);\n          g = parseHexChannel(hex[1] + hex[1]);\n          b = parseHexChannel(hex[2] + hex[2]);\n        } else if (hex.length === 6) {\n          r = parseHexChannel(hex.substring(0, 2));\n          g = parseHexChannel(hex.substring(2, 4));\n          b = parseHexChannel(hex.substring(4));\n        }\n\n        var _rgb2hsv2 = rgb2hsv(r, g, b),\n            _h2 = _rgb2hsv2.h,\n            _s2 = _rgb2hsv2.s,\n            _v2 = _rgb2hsv2.v;\n\n        fromHSV(_h2, _s2, _v2);\n      }\n    }\n  }, {\n    key: 'doOnChange',\n    value: function doOnChange() {\n      var _hue = this._hue,\n          _saturation = this._saturation,\n          _value = this._value,\n          _alpha = this._alpha,\n          format = this.format;\n\n      if (this.enableAlpha) {\n        switch (format) {\n          case 'hsl':\n            {\n              var hsl = hsv2hsl(_hue, _saturation / 100, _value / 100);\n              this.value = 'hsla(' + _hue + ', ' + Math.round(hsl[1] * 100) + '%, ' + Math.round(hsl[2] * 100) + '%, ' + _alpha / 100 + ')';\n              break;\n            }\n\n          case 'hsv':\n            this.value = 'hsva(' + _hue + ', ' + Math.round(_saturation) + '%, ' + Math.round(_value) + '%, ' + _alpha / 100 + ')';\n            break;\n\n          default:\n            {\n              var _hsv2rgb = hsv2rgb(_hue, _saturation, _value),\n                  r = _hsv2rgb.r,\n                  g = _hsv2rgb.g,\n                  b = _hsv2rgb.b;\n\n              this.value = 'rgba(' + r + ', ' + g + ', ' + b + ', ' + _alpha / 100 + ')';\n            }\n        }\n      } else {\n        switch (format) {\n          case 'hsl':\n            {\n              var _hsl = hsv2hsl(_hue, _saturation / 100, _value / 100);\n\n              this.value = 'hsl(' + _hue + ', ' + Math.round(_hsl[1] * 100) + '%, ' + Math.round(_hsl[2] * 100) + '%)';\n              break;\n            }\n\n          case 'hsv':\n            this.value = 'hsv(' + _hue + ', ' + Math.round(_saturation) + '%, ' + Math.round(_value) + '%)';\n            break;\n\n          case 'rgb':\n            {\n              var _hsv2rgb2 = hsv2rgb(_hue, _saturation, _value),\n                  _r = _hsv2rgb2.r,\n                  _g = _hsv2rgb2.g,\n                  _b = _hsv2rgb2.b;\n\n              this.value = 'rgb(' + _r + ', ' + _g + ', ' + _b + ')';\n              break;\n            }\n\n          default:\n            this.value = toHex(hsv2rgb(_hue, _saturation, _value));\n        }\n      }\n    }\n  }]);\n  return Color;\n}();\n\nvar _default = Color;\nexports.default = _default;\n;\n\nvar _temp = function () {\n  if (typeof __REACT_HOT_LOADER__ === 'undefined') {\n    return;\n  }\n\n  __REACT_HOT_LOADER__.register(hsv2hsl, 'hsv2hsl', 'src/color-picker/color.js');\n\n  __REACT_HOT_LOADER__.register(isOnePointZero, 'isOnePointZero', 'src/color-picker/color.js');\n\n  __REACT_HOT_LOADER__.register(isPercentage, 'isPercentage', 'src/color-picker/color.js');\n\n  __REACT_HOT_LOADER__.register(bound01, 'bound01', 'src/color-picker/color.js');\n\n  __REACT_HOT_LOADER__.register(INT_HEX_MAP, 'INT_HEX_MAP', 'src/color-picker/color.js');\n\n  __REACT_HOT_LOADER__.register(toHex, 'toHex', 'src/color-picker/color.js');\n\n  __REACT_HOT_LOADER__.register(HEX_INT_MAP, 'HEX_INT_MAP', 'src/color-picker/color.js');\n\n  __REACT_HOT_LOADER__.register(parseHexChannel, 'parseHexChannel', 'src/color-picker/color.js');\n\n  __REACT_HOT_LOADER__.register(hsl2hsv, 'hsl2hsv', 'src/color-picker/color.js');\n\n  __REACT_HOT_LOADER__.register(rgb2hsv, 'rgb2hsv', 'src/color-picker/color.js');\n\n  __REACT_HOT_LOADER__.register(hsv2rgb, 'hsv2rgb', 'src/color-picker/color.js');\n\n  __REACT_HOT_LOADER__.register(Color, 'Color', 'src/color-picker/color.js');\n\n  __REACT_HOT_LOADER__.register(_default, 'default', 'src/color-picker/color.js');\n}();\n\n;","map":null,"metadata":{},"sourceType":"script"}