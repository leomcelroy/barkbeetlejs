{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { withTheme } from '../../theme';\nimport { Portal } from '../../portal';\nimport { Stack } from '../../stack';\nimport safeInvoke from '../../lib/safe-invoke';\nimport TextTableCell from './TextTableCell';\nimport TableCell from './TableCell';\nimport EditableCellField from './EditableCellField';\n\nvar EditableCell =\n/*#__PURE__*/\nfunction (_React$PureComponent) {\n  _inherits(EditableCell, _React$PureComponent);\n\n  function EditableCell() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, EditableCell);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(EditableCell)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"state\", {\n      value: _this.props.children\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"onMainRef\", function (ref) {\n      _this.mainRef = ref;\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"onOverlayRef\", function (ref) {\n      _this.overlayRef = ref;\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"handleDoubleClick\", function () {\n      if (_this.props.disabled || !_this.props.isSelectable) return;\n\n      _this.setState({\n        isEditing: true\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"handleKeyDown\", function (e) {\n      if (_this.props.disabled) return;\n      var key = e.key;\n      /**\n       * When the user presses a character on the keyboard, use that character\n       * as the value in the text field.\n       */\n\n      if (key.match(/^[a-z]{0,10}$/) && !e.metaKey && !e.ctrlKey && !e.altKey) {\n        _this.setState({\n          isEditing: true,\n          value: key\n        });\n      } else if (key === 'Enter') {\n        _this.setState({\n          isEditing: true\n        });\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"handleFieldChangeComplete\", function (value) {\n      var _this$props = _this.props,\n          onChange = _this$props.onChange,\n          isSelectable = _this$props.isSelectable;\n      var currentValue = _this.state.value;\n\n      _this.setState({\n        isEditing: false,\n        value: value\n      });\n\n      if (currentValue !== value) {\n        safeInvoke(onChange, value);\n      }\n\n      if (_this.mainRef && isSelectable) {\n        _this.mainRef.focus();\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"handleFieldCancel\", function () {\n      _this.setState({\n        isEditing: false\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"handleClick\", function () {\n      _this.mainRef.focus();\n    });\n\n    return _this;\n  }\n\n  _createClass(EditableCell, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props2 = this.props,\n          children = _this$props2.children,\n          theme = _this$props2.theme,\n          size = _this$props2.size,\n          disabled = _this$props2.disabled,\n          placeholder = _this$props2.placeholder,\n          isSelectable = _this$props2.isSelectable,\n          _this$props2$textProp = _this$props2.textProps,\n          textProps = _this$props2$textProp === void 0 ? {} : _this$props2$textProp,\n          props = _objectWithoutProperties(_this$props2, [\"children\", \"theme\", \"size\", \"disabled\", \"placeholder\", \"isSelectable\", \"textProps\"]);\n\n      var _this$state = this.state,\n          isEditing = _this$state.isEditing,\n          value = _this$state.value;\n      return React.createElement(React.Fragment, null, React.createElement(TextTableCell, _extends({\n        innerRef: this.onMainRef,\n        isSelectable: isSelectable && !disabled,\n        onClick: this.handleClick,\n        onDoubleClick: this.handleDoubleClick,\n        onKeyDown: this.handleKeyDown,\n        cursor: disabled ? 'not-allowed' : isSelectable ? 'default' : 'text',\n        textProps: _objectSpread({\n          size: size,\n          opacity: disabled || !children && placeholder ? 0.5 : 1\n        }, textProps)\n      }, props), children ? children : placeholder), isEditing && React.createElement(Portal, null, React.createElement(Stack, null, function (zIndex) {\n        return React.createElement(EditableCellField, {\n          zIndex: zIndex,\n          getTargetRef: function getTargetRef() {\n            return _this2.mainRef;\n          },\n          value: value,\n          onEscape: _this2.handleFieldEscape,\n          onChangeComplete: _this2.handleFieldChangeComplete,\n          onCancel: _this2.handleFieldCancel,\n          size: size\n        });\n      })));\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(props, state) {\n      if (props.children !== state.value) {\n        return {\n          value: props.children\n        };\n      }\n\n      return null;\n    }\n  }]);\n\n  return EditableCell;\n}(React.PureComponent);\n\nEditableCell.displayName = \"EditableCell\";\n\n_defineProperty(EditableCell, \"propTypes\", _objectSpread({}, TableCell.propTypes, {\n  /*\n  * Makes the TableCell focusable.\n  * Will add tabIndex={-1 || this.props.tabIndex}.\n  */\n  isSelectable: PropTypes.bool.isRequired,\n\n  /**\n   * When true, the cell can't be edited.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * Optional placeholder when children is falsy.\n   */\n  placeholder: PropTypes.node,\n\n  /**\n   * The size used for the TextTableCell and Textarea.\n   */\n  size: PropTypes.oneOf([300, 400]).isRequired,\n\n  /**\n   * This is the value of the cell.\n   */\n  children: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n\n  /**\n   * Function called when value changes. (value: string) => void.\n   */\n  onChange: PropTypes.func\n}));\n\n_defineProperty(EditableCell, \"defaultProps\", {\n  size: 300,\n  isSelectable: true\n});\n\nexport default withTheme(EditableCell);","map":null,"metadata":{},"sourceType":"module"}