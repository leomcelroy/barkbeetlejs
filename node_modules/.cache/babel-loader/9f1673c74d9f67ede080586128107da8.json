{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\nexports.default = getCss;\n\nvar _prefixer = require('./prefixer');\n\nvar _prefixer2 = _interopRequireDefault(_prefixer);\n\nvar _valueToString = require('./value-to-string');\n\nvar _valueToString2 = _interopRequireDefault(_valueToString);\n\nvar _getClassName = require('./get-class-name');\n\nvar _getClassName2 = _interopRequireDefault(_getClassName);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * Generates the class name and styles.\n */\n\n\nfunction getCss(propertyInfo, value) {\n  var rules = void 0; // Protect against unexpected values\n\n  var valueType = typeof value === 'undefined' ? 'undefined' : _typeof(value);\n\n  if (valueType !== 'string' && valueType !== 'number') {\n    if (process.env.NODE_ENV !== 'production') {\n      var name = propertyInfo.jsName;\n      var encodedValue = JSON.stringify(value);\n      console.error(\"\\uD83D\\uDCE6 ui-box: property \\u201C\" + name + \"\\u201D was passed invalid value \\u201C\" + encodedValue + \"\\u201D. Only numbers and strings are supported.\");\n    }\n\n    return null;\n  }\n\n  var valueString = (0, _valueToString2.default)(value, propertyInfo.defaultUnit);\n  var className = (0, _getClassName2.default)(propertyInfo, valueString); // Avoid running the prefixer when possible because it's slow\n\n  if (propertyInfo.isPrefixed) {\n    rules = (0, _prefixer2.default)(propertyInfo.jsName, valueString);\n  } else {\n    rules = [{\n      property: propertyInfo.cssName,\n      value: valueString\n    }];\n  }\n\n  var styles = void 0;\n\n  if (process.env.NODE_ENV === 'production') {\n    var rulesString = rules.map(function (rule) {\n      return rule.property + ':' + rule.value;\n    }).join(';');\n    styles = '.' + className + '{' + rulesString + '}';\n  } else {\n    var _rulesString = rules.map(function (rule) {\n      return '  ' + rule.property + ': ' + rule.value + ';';\n    }).join('\\n');\n\n    styles = '\\n.' + className + ' {\\n' + _rulesString + '\\n}';\n  }\n\n  return {\n    className: className,\n    styles: styles\n  };\n}","map":null,"metadata":{},"sourceType":"script"}