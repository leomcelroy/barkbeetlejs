{"ast":null,"code":"import _toConsumableArray from \"/Users/leomcelroy/Desktop/barkBeetleEverything/barkbeetle_js_real/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\n// makerjs model, depth, params -> pocket toolpath\nimport * as mjs from 'makerjs';\nvar STRANGE_CORRECTION = 0.0000001; //TODO: why is this neccessary otherwise outline shits the bed\n\nvar isToolpath = function isToolpath(toolpath) {\n  if (Object.keys(toolpath.models).length === 0) {\n    return false;\n  } else {\n    return true;\n  }\n};\n\nvar intToolpath = function intToolpath(geo, radius) {\n  if (Object.keys(geo.models).length > 1) {\n    return {\n      models: {}\n    };\n  }\n\n  ;\n  return mjs.model.outline(geo, radius + STRANGE_CORRECTION, 1, true);\n};\n\nvar intToolpaths = function intToolpaths(geo, radius, params) {\n  var first = intToolpath(geo, radius);\n\n  if (isToolpath(first) !== true) {\n    return {\n      models: {}\n    };\n  }\n\n  var models = {};\n  var count = 0;\n  models[count] = intToolpath(geo, radius);\n  count++;\n\n  while (isToolpath(intToolpath(models[count - 1], radius * params.stepoverPercentage))) {\n    models[count] = intToolpath(models[count - 1], radius * params.stepoverPercentage);\n    count++;\n  }\n\n  var model = {\n    models: models // console.log(model)\n\n  };\n  return model;\n};\n\nvar pocket = function pocket(model, params) {\n  //let p = model.models.profile;\n  var p = model; // let outline = mjs.model.outline(p, params.compensatedRadius, 1, true); //third parameter is what type of corners, 0 (rounded) by default\n\n  var outline = intToolpath(p, params.compensatedRadius);\n  var outlines = intToolpaths(p, params.compensatedRadius, params);\n  var iterOut = Object.values(outlines.models); //let chains = mjs.model.findChains(expansion);\n\n  var chain = mjs.model.findSingleChain(outline);\n  var chain2 = iterOut.map(function (x) {\n    return mjs.model.findSingleChain(x);\n  }); //TODO: need to change this to find chains\n\n  var divisions = Math.floor(chain.pathLength / params.minimumSpacing);\n  var spacing = chain.pathLength / divisions;\n  var keyPoints = mjs.chain.toKeyPoints(chain, spacing);\n  var keyPoints2 = chain2.map(function (x) {\n    return mjs.chain.toKeyPoints(x, spacing);\n  }); // console.log(keyPoints2);\n  // let scaleFactor = 10;\n  // let scaleXY = keyPoints.map(p => [p[0] * scaleFactor, p[1] * scaleFactor]);\n\n  var gcodePoints = keyPoints.map(function (p) {\n    return \"G1 X\".concat(p[0], \" Y\").concat(p[1], \" F\").concat(params.feedRate);\n  });\n  var gcodePoints2 = keyPoints2.map(function (x) {\n    return x.map(function (p) {\n      return \"G1 X\".concat(p[0], \" Y\").concat(p[1], \" F\").concat(params.feedRate);\n    });\n  }); // console.log(gcodePoints2)\n  // gcodePoints2 = gcodePoints2.flat(1);\n  // let gcode = JSON.parse(JSON.stringify(gcodePoints));\n  // let gcode2 = JSON.parse(JSON.stringify(gcodePoints2));\n  //console.log(gcode2);\n\n  var firstPoint = keyPoints[0];\n  var firstPoints2 = keyPoints2.map(function (x) {\n    return x[0];\n  }); // console.log(firstPoints2)\n\n  var paths = params.depthOfPasses.map(function (p, i) {\n    return [\"G1 Z\".concat(params.depthOfPasses[i], \" F12.0\")].concat(_toConsumableArray(gcodePoints), [\"G1 X\".concat(firstPoint[0], \" Y\").concat(firstPoint[1], \" F\").concat(params.feedRate)]);\n  });\n  paths = paths.flat(1);\n  var paths2 = gcodePoints2.map(function (p, i) {\n    return _toConsumableArray(p).concat([\"G1 X\".concat(firstPoints2[i][0], \" Y\").concat(firstPoints2[i][1], \" F\").concat(params.feedRate)]);\n  });\n  paths2 = paths2.flat(1); //console.log(paths2)\n\n  var paths3 = params.depthOfPasses.map(function (p, i) {\n    return [\"G1 Z\".concat(params.depthOfPasses[i], \" F12.0\")].concat(_toConsumableArray(paths2));\n  });\n  paths3 = paths3.flat(1); // console.log(paths3)\n\n  var gcode = [params.units, \"G90\", \"G1 Z\".concat(params.jogHeight, \" F9.0\"), \"G0 X\".concat(firstPoint[0], \" Y\").concat(firstPoint[1])].concat(_toConsumableArray(paths));\n  var gcode2 = [params.units, \"G90\", \"G1 Z\".concat(params.jogHeight, \" F9.0\"), \"G0 X\".concat(firstPoints2[0][0], \" Y\").concat(firstPoints2[0][1])].concat(_toConsumableArray(paths3), [\"G1 Z\".concat(params.jogHeight, \" F9.0\")]); // write to a new file named\n\n  var filename = 'testGcodePocket.nc';\n  var text = gcode2.join('\\n');\n  return {\n    drawing: outlines,\n    gcode: text,\n    filename: filename\n  };\n};\n\nexport { pocket };","map":{"version":3,"sources":["/Users/leomcelroy/Desktop/barkBeetleEverything/barkbeetle_js_real/src/toolpaths/pocket.js"],"names":["mjs","STRANGE_CORRECTION","isToolpath","toolpath","Object","keys","models","length","intToolpath","geo","radius","model","outline","intToolpaths","params","first","count","stepoverPercentage","pocket","p","compensatedRadius","outlines","iterOut","values","chain","findSingleChain","chain2","map","x","divisions","Math","floor","pathLength","minimumSpacing","spacing","keyPoints","toKeyPoints","keyPoints2","gcodePoints","feedRate","gcodePoints2","firstPoint","firstPoints2","paths","depthOfPasses","i","flat","paths2","paths3","gcode","units","jogHeight","gcode2","filename","text","join","drawing"],"mappings":"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","sourcesContent":["// makerjs model, depth, params -> pocket toolpath\nimport * as mjs from 'makerjs';\n\nconst STRANGE_CORRECTION = 0.0000001; //TODO: why is this neccessary otherwise outline shits the bed\n\nconst isToolpath = (toolpath) => {\n  if (Object.keys(toolpath.models).length === 0) {\n    return false;\n  } else {\n    return true;\n  }\n}\n\nconst intToolpath = (geo, radius) => {\n  if (Object.keys(geo.models).length >1) {\n    return {models:{}}\n  };\n  return mjs.model.outline(geo, radius + STRANGE_CORRECTION, 1, true);\n}\n\nconst intToolpaths = (geo, radius, params) => {\n  let first = intToolpath(geo, radius);\n\n  if (isToolpath(first) !== true) {\n    return {models:{}};\n  }\n\n  let models = {}\n  let count = 0;\n\n  models[count] = intToolpath(geo, radius);\n\n  count++;\n\n  while ( isToolpath(intToolpath(models[count-1], radius*params.stepoverPercentage)) ) {\n    models[count] = intToolpath(models[count-1], radius*params.stepoverPercentage);\n    count++;\n  }\n\n  let model = {models}\n\n  // console.log(model)\n\n  return model;\n}\n\nconst pocket = (model, params) => {\n  //let p = model.models.profile;\n  let p = model;\n\n  // let outline = mjs.model.outline(p, params.compensatedRadius, 1, true); //third parameter is what type of corners, 0 (rounded) by default\n  let outline = intToolpath(p, params.compensatedRadius);\n  let outlines = intToolpaths(p, params.compensatedRadius, params);\n  let iterOut = Object.values(outlines.models);\n\n  //let chains = mjs.model.findChains(expansion);\n  let chain = mjs.model.findSingleChain(outline);\n  let chain2 = iterOut.map(x => mjs.model.findSingleChain(x)); //TODO: need to change this to find chains\n\n  var divisions = Math.floor(chain.pathLength / params.minimumSpacing);\n  var spacing = chain.pathLength / divisions;\n\n  let keyPoints = mjs.chain.toKeyPoints(chain, spacing);\n  let keyPoints2 = chain2.map(x => mjs.chain.toKeyPoints(x, spacing));\n  // console.log(keyPoints2);\n\n  // let scaleFactor = 10;\n  // let scaleXY = keyPoints.map(p => [p[0] * scaleFactor, p[1] * scaleFactor]);\n\n  let gcodePoints = keyPoints.map(p => `G1 X${p[0]} Y${p[1]} F${params.feedRate}`)\n  let gcodePoints2 = keyPoints2.map(x => x.map(p => `G1 X${p[0]} Y${p[1]} F${params.feedRate}`));\n  // console.log(gcodePoints2)\n  // gcodePoints2 = gcodePoints2.flat(1);\n\n  // let gcode = JSON.parse(JSON.stringify(gcodePoints));\n  // let gcode2 = JSON.parse(JSON.stringify(gcodePoints2));\n\n  //console.log(gcode2);\n\n  let firstPoint = keyPoints[0];\n  let firstPoints2 = keyPoints2.map(x => x[0]);\n  // console.log(firstPoints2)\n\n  let paths = params.depthOfPasses.map((p,i) => [\n    `G1 Z${params.depthOfPasses[i]} F12.0`,\n    ...gcodePoints,\n    `G1 X${firstPoint[0]} Y${firstPoint[1]} F${params.feedRate}`\n  ])\n  paths = paths.flat(1);\n\n  let paths2 = gcodePoints2.map((p, i) => [\n    ...p,\n    `G1 X${firstPoints2[i][0]} Y${firstPoints2[i][1]} F${params.feedRate}`\n  ])\n  paths2 = paths2.flat(1);\n  //console.log(paths2)\n\n  let paths3 = params.depthOfPasses.map((p,i) => [\n    `G1 Z${params.depthOfPasses[i]} F12.0`,\n    ...paths2,\n  ])\n  paths3 = paths3.flat(1);\n\n  // console.log(paths3)\n\n  let gcode = [\n    params.units,\n    \"G90\",\n    `G1 Z${params.jogHeight} F9.0`,\n    `G0 X${firstPoint[0]} Y${firstPoint[1]}`,\n    ...paths\n  ]\n\n  let gcode2 = [\n    params.units,\n    \"G90\",\n    `G1 Z${params.jogHeight} F9.0`,\n    `G0 X${firstPoints2[0][0]} Y${firstPoints2[0][1]}`,\n    ...paths3,\n    `G1 Z${params.jogHeight} F9.0`,\n  ]\n\n  // write to a new file named\n  let filename = 'testGcodePocket.nc';\n\n  let text = gcode2.join('\\n');\n\n  return {drawing: outlines, gcode: text, filename};\n};\n\n\nexport {pocket};\n"]},"metadata":{},"sourceType":"module"}