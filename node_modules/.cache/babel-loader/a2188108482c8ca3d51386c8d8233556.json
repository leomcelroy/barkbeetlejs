{"ast":null,"code":"import { getCommonParent, getTabbableNodes, parentAutofocusables } from './utils/DOMutils';\nimport pickFirstFocus from './utils/firstFocus';\nimport getAllAffectedNodes from './utils/all-affected';\n\nvar findAutoFocused = function findAutoFocused(autoFocusables) {\n  return function (node) {\n    return !!node.autofocus || node.dataset && !!node.dataset.autofocus || autoFocusables.indexOf(node) >= 0;\n  };\n};\n\nexport var newFocus = function newFocus(innerNodes, outerNodes, activeElement, lastNode, autoFocused) {\n  var cnt = innerNodes.length;\n  var firstFocus = innerNodes[0];\n  var lastFocus = innerNodes[cnt - 1]; // focus is inside\n\n  if (innerNodes.indexOf(activeElement) >= 0) {\n    return undefined;\n  }\n\n  var activeIndex = outerNodes.indexOf(activeElement);\n  var lastIndex = outerNodes.indexOf(lastNode || activeIndex);\n  var lastNodeInside = innerNodes.indexOf(lastNode);\n  var indexDiff = activeIndex - lastIndex;\n  var firstNodeIndex = outerNodes.indexOf(firstFocus);\n  var lastNodeIndex = outerNodes.indexOf(lastFocus); // new focus\n\n  if (activeIndex === -1 || lastNodeInside === -1) {\n    return innerNodes.indexOf(autoFocused.length ? pickFirstFocus(autoFocused) : pickFirstFocus(innerNodes));\n  } // old focus\n\n\n  if (!indexDiff && lastNodeInside >= 0) {\n    return lastNodeInside;\n  } // jump out\n\n\n  if (indexDiff && Math.abs(indexDiff) > 1) {\n    return lastNodeInside;\n  } // focus above lock\n\n\n  if (activeIndex <= firstNodeIndex) {\n    return cnt - 1;\n  } // focus below lock\n\n\n  if (activeIndex > lastNodeIndex) {\n    return 0;\n  } // index is inside tab order, but outside Lock\n\n\n  if (indexDiff) {\n    if (Math.abs(indexDiff) > 1) {\n      return lastNodeInside;\n    }\n\n    return (cnt + lastNodeInside + indexDiff) % cnt;\n  } // do nothing\n\n\n  return undefined;\n};\n\nvar getTopCommonParent = function getTopCommonParent(activeElement, entry, entries) {\n  var topCommon = entry;\n  entries.forEach(function (subEntry) {\n    var common = getCommonParent(activeElement, subEntry);\n\n    if (common) {\n      if (common.contains(topCommon)) {\n        topCommon = common;\n      } else {\n        topCommon = getCommonParent(common, topCommon);\n      }\n    }\n  });\n  return topCommon;\n};\n\nvar allParentAutofocusables = function allParentAutofocusables(entries) {\n  return entries.reduce(function (acc, node) {\n    return acc.concat(parentAutofocusables(node));\n  }, []);\n};\n\nvar notAGuard = function notAGuard(node) {\n  return !(node.dataset && node.dataset.focusGuard);\n};\n\nvar getFocusMerge = function getFocusMerge(topNode, lastNode) {\n  var activeElement = document && document.activeElement;\n  var entries = getAllAffectedNodes(topNode).filter(notAGuard);\n  var commonParent = getTopCommonParent(activeElement || topNode, topNode, entries);\n  var innerElements = getTabbableNodes(entries).filter(function (_ref) {\n    var node = _ref.node;\n    return notAGuard(node);\n  });\n\n  if (!innerElements[0]) {\n    return undefined;\n  }\n\n  var innerNodes = innerElements.map(function (_ref2) {\n    var node = _ref2.node;\n    return node;\n  });\n  var outerNodes = getTabbableNodes([commonParent]).map(function (_ref3) {\n    var node = _ref3.node;\n    return node;\n  });\n  var newId = newFocus(innerNodes, outerNodes, activeElement, lastNode, innerNodes.filter(findAutoFocused(allParentAutofocusables(entries))));\n\n  if (newId === undefined) {\n    return newId;\n  }\n\n  return innerElements[newId];\n};\n\nexport default getFocusMerge;","map":null,"metadata":{},"sourceType":"module"}