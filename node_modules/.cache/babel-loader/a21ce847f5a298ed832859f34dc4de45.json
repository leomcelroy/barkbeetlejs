{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n/**\n * @overview TagInput accepts multiple values that can be individually removed\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Box from 'ui-box';\nimport cx from 'classnames';\nimport { Text } from '../../typography';\nimport { withTheme } from '../../theme';\nimport { majorScale } from '../../scales';\nimport safeInvoke from '../../lib/safe-invoke';\nimport Tag from './Tag';\nvar inputId = 1;\n\nvar TagInput =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(TagInput, _React$Component);\n\n  function TagInput() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, TagInput);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(TagInput)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"state\", {\n      inputValue: '',\n      isFocused: false\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"id\", \"TagInput-\".concat(inputId++));\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"addTags\", function () {\n      var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      var _this$props = _this.props,\n          onAdd = _this$props.onAdd,\n          onChange = _this$props.onChange,\n          values = _this$props.values;\n\n      var newValues = _this.getValues(value);\n\n      var shouldClearInput = safeInvoke(onAdd, newValues);\n\n      if (typeof onChange === 'function') {\n        shouldClearInput = shouldClearInput || onChange(values.concat(newValues));\n      }\n\n      if (shouldClearInput !== false) {\n        _this.setState({\n          inputValue: ''\n        });\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"getValues\", function () {\n      var inputValue = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      var separator = _this.props.separator;\n      return separator ? inputValue.split(separator).map(function (v) {\n        return v.trim();\n      }).filter(function (v) {\n        return v.length > 0;\n      }) : [inputValue];\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"handleBackspaceToRemove\", function () {\n      var values = _this.props.values; // Delete last item in values\n\n      _this.removeTagAtIndex(values.length - 1);\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"handleBlur\", function (event) {\n      var container = event.target; // Use raf so that the dom has time to update `activeElement`\n\n      requestAnimationFrame(function () {\n        if (!container.contains(document.activeElement)) {\n          if (_this.props.addOnBlur && _this.state.inputValue) {\n            _this.addTags(_this.state.inputValue);\n          }\n\n          _this.setState({\n            isFocused: false\n          });\n        }\n      });\n      safeInvoke(_this.props.onBlur, event);\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"handleInputChange\", function (event) {\n      _this.setState({\n        inputValue: event.target.value\n      });\n\n      safeInvoke(_this.props.onInputChange, event);\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"handleInputFocus\", function (event) {\n      _this.setState({\n        isFocused: true\n      });\n\n      safeInvoke(_this.props.onFocus, event);\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"handleKeyDown\", function (event) {\n      var _event$target = event.target,\n          selectionEnd = _event$target.selectionEnd,\n          value = _event$target.value;\n\n      if (event.key === 'Enter') {\n        // Prevent Enter keypresses from submitting forms since they have special powers inside TagInput\n        event.preventDefault();\n\n        _this.addTags(value);\n      } else if (event.key === 'Backspace' && selectionEnd === 0) {\n        _this.handleBackspaceToRemove(event);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"handleRemoveTag\", function (event) {\n      // Using data attribute to simplify callback logic -- one handler for all children\n      var index = Number(event.currentTarget.parentElement.getAttribute('data-tag-index'));\n\n      _this.removeTagAtIndex(index);\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"maybeRenderTag\", function (tag, index) {\n      if (!tag) {\n        return null;\n      }\n\n      var _this$props2 = _this.props,\n          disabled = _this$props2.disabled,\n          tagProps = _this$props2.tagProps;\n      var props = safeInvoke(tagProps, tag, index) || tagProps;\n      return React.createElement(Tag, _extends({\n        key: \"\".concat(tag, \":\").concat(index),\n        \"data-tag-index\": index,\n        marginRight: majorScale(1),\n        marginY: \"6px\",\n        onRemove: disabled ? null : _this.handleRemoveTag,\n        isRemovable: !disabled\n      }, props), tag);\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"removeTagAtIndex\", function (index) {\n      var _this$props3 = _this.props,\n          onChange = _this$props3.onChange,\n          onRemove = _this$props3.onRemove,\n          values = _this$props3.values;\n      safeInvoke(onRemove, values[index], index); // Remove item at index as a new array\n\n      var newValues = values.filter(function (_, i) {\n        return i !== index;\n      });\n      safeInvoke(onChange, newValues);\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"setRef\", function (node) {\n      _this.input = node;\n      safeInvoke(_this.props.inputRef, node);\n    });\n\n    return _this;\n  }\n\n  _createClass(TagInput, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props4 = this.props,\n          addOnBlur = _this$props4.addOnBlur,\n          className = _this$props4.className,\n          disabled = _this$props4.disabled,\n          height = _this$props4.height,\n          inputProps = _this$props4.inputProps,\n          inputRef = _this$props4.inputRef,\n          onAdd = _this$props4.onAdd,\n          onChange = _this$props4.onChange,\n          onInputChange = _this$props4.onInputChange,\n          onRemove = _this$props4.onRemove,\n          separator = _this$props4.separator,\n          tagProps = _this$props4.tagProps,\n          theme = _this$props4.theme,\n          values = _this$props4.values,\n          props = _objectWithoutProperties(_this$props4, [\"addOnBlur\", \"className\", \"disabled\", \"height\", \"inputProps\", \"inputRef\", \"onAdd\", \"onChange\", \"onInputChange\", \"onRemove\", \"separator\", \"tagProps\", \"theme\", \"values\"]);\n\n      var _this$state = this.state,\n          inputValue = _this$state.inputValue,\n          isFocused = _this$state.isFocused;\n      var themedContainerClassName = theme.getTagInputClassName('default');\n      var themedInputClassName = theme.getTextInputClassName('none');\n      var textSize = theme.getTextSizeForControlHeight(height);\n      var borderRadius = theme.getBorderRadiusForControlHeight(height);\n      return React.createElement(Box, _extends({\n        \"aria-disabled\": disabled || undefined,\n        \"aria-activedescendant\": isFocused ? this.id : undefined,\n        borderRadius: borderRadius,\n        className: cx(themedContainerClassName, className),\n        paddingLeft: Math.round(height / 3.2),\n        paddingRight: Math.round(height / 3.2),\n        paddingY: \"2px\"\n      }, props, {\n        onBlur: this.handleBlur\n      }), values.map(this.maybeRenderTag), React.createElement(Text, _extends({\n        is: \"input\",\n        id: this.id,\n        color: disabled ? 'muted' : undefined,\n        disabled: disabled,\n        flexGrow: \"1\",\n        height: height - 4,\n        size: textSize,\n        type: \"text\",\n        value: inputValue\n      }, inputProps, {\n        className: themedInputClassName,\n        ref: this.setRef,\n        onChange: this.handleInputChange,\n        onFocus: this.handleInputFocus,\n        onKeyDown: this.handleKeyDown\n      })));\n    }\n  }]);\n\n  return TagInput;\n}(React.Component);\n\nTagInput.displayName = \"TagInput\";\n\n_defineProperty(TagInput, \"propTypes\", {\n  /** Whether or not the inputValue should be added to the tags when the input blurs. */\n  addOnBlur: PropTypes.bool,\n\n  /** The class name to apply to the container component. */\n  className: PropTypes.string,\n\n  /** Whether or not the input should be disabled. */\n  disabled: PropTypes.bool,\n\n  /** Props to pass to the input component. Note that `ref` and `key` are not supported. See `inputRef`. */\n  inputProps: PropTypes.object,\n\n  /**\n   * Ref handler for the <input> element.\n   * (input: HTMLInputElement | null) => void\n   */\n  inputRef: PropTypes.func,\n\n  /**\n   * Callback invoked when new tags are added.\n   * Returning `false` will prevent clearing the input.\n   * (values: Array) => void | false\n   */\n  onAdd: PropTypes.func,\n\n  /**\n   * Callback invoked when the tag values change.\n   * Returning `false` will prevent clearing the input.\n   * (values: Array) => void | false\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * Callback invoked when the value of the <input> is changed. Shorthand for `inputProps={{ onChange }}`.\n   * (event) => void\n   */\n  onInputChange: PropTypes.func,\n\n  /**\n   * Callback invoked when a tag is removed.\n   * Receives value and index of removed tag.\n   * (value: string | node, index: number) => void\n   */\n  onRemove: PropTypes.func,\n\n  /** Value or RegExp to split on pasted text or on enter keypress */\n  separator: PropTypes.oneOfType([PropTypes.string, PropTypes.instanceOf(RegExp), PropTypes.oneOf([false])]),\n\n  /** Provide props to tag component (actually `Badge`, for now). */\n  tagProps: PropTypes.oneOfType([PropTypes.object, PropTypes.func]),\n\n  /** Controlled tag values. Each value is rendered inside a tag. */\n  values: PropTypes.arrayOf(PropTypes.node)\n});\n\n_defineProperty(TagInput, \"defaultProps\", {\n  addOnBlur: false,\n  disabled: false,\n  height: 32,\n  separator: /[,\\n\\r]/,\n  values: [],\n  tagProps: {}\n});\n\nexport default withTheme(TagInput);","map":null,"metadata":{},"sourceType":"module"}