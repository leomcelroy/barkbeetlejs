{"ast":null,"code":"import _toConsumableArray from \"/Users/leomcelroy/Desktop/barkbeetle_js/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"/Users/leomcelroy/Desktop/barkbeetle_js/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"/Users/leomcelroy/Desktop/barkbeetle_js/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/leomcelroy/Desktop/barkbeetle_js/src/components/DrillButton.js\";\nimport React, { Component, useState } from 'react';\nimport { Button, Dialog, TextInputField, SegmentedControl, Heading, Link, Strong, Text } from 'evergreen-ui';\nimport * as utils from '../utils.js';\nimport { drill } from '../toolpaths/drill.js';\nimport store from '../store.js';\n\nvar DrillButton = function DrillButton(_ref) {\n  var disabled = _ref.disabled;\n\n  var _useState = useState({\n    isShown: false,\n    nameValid: true,\n    cutDepthValid: true,\n    toolDiameterValid: true,\n    toleranceValid: true,\n    jogHeightValid: true,\n    jogRateValid: true,\n    feedRateValid: true\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      state = _useState2[0],\n      setState = _useState2[1];\n\n  var validateSubmit = function validateSubmit() {\n    var valid = state.nameValid && state.cutDepthValid && state.toolDiameterValid && state.toleranceValid && state.jogHeightValid && state.jogRateValid && state.feedRateValid;\n\n    if (valid) {\n      var name = utils.helpExtract(\"name\");\n      var cutDepth = Number(utils.helpExtract(\"cutDepth\"));\n      var toolDiameter = Number(utils.helpExtract(\"toolDiameter\"));\n      var tolerance = Number(utils.helpExtract(\"tolerance\"));\n      var jogHeight = Number(utils.helpExtract(\"jogHeight\"));\n      var jogRate = Number(utils.helpExtract(\"jogRate\"));\n      var feedRate = Number(utils.helpExtract(\"feedRate\"));\n      if (utils.helpExtract(\"name\") === \"\") name = store.getState().defaultParameters.name;\n      if (utils.helpExtract(\"cutDepth\") === \"\") cutDepth = store.getState().defaultParameters.cutDepth;\n      if (utils.helpExtract(\"toolDiameter\") === \"\") toolDiameter = store.getState().defaultParameters.toolDiameter;\n      if (utils.helpExtract(\"tolerance\") === \"\") tolerance = store.getState().defaultParameters.tolerance;\n      if (utils.helpExtract(\"jogHeight\") === \"\") jogHeight = store.getState().defaultParameters.jogHeight;\n      if (utils.helpExtract(\"jogRate\") === \"\") jogRate = store.getState().defaultParameters.jogRate;\n      if (utils.helpExtract(\"feedRate\") === \"\") feedRate = store.getState().defaultParameters.feedRate;\n      if (isNaN(cutDepth)) cutDepth = store.getState().defaultParameters.cutDepth;\n      if (isNaN(toolDiameter)) toolDiameter = store.getState().defaultParameters.toolDiameter;\n      if (isNaN(tolerance)) tolerance = store.getState().defaultParameters.tolerance;\n      if (isNaN(jogHeight)) jogHeight = store.getState().defaultParameters.jogHeight;\n      if (isNaN(jogRate)) jogRate = store.getState().defaultParameters.jogRate;\n      if (isNaN(feedRate)) feedRate = store.getState().defaultParameters.feedRate; //derived parameters\n\n      var toolRadius = toolDiameter / 2;\n      var compensatedRadius = toolRadius + tolerance; //settings will be compiled to a single object here\n\n      var parameters = utils.deepcopy(store.state.defaultParameters);\n      parameters[\"cutDepth\"] = cutDepth;\n      parameters[\"toolDiameter\"] = toolDiameter;\n      parameters[\"tolerance\"] = tolerance;\n      parameters[\"compensatedRadius\"] = compensatedRadius;\n      parameters[\"feedRate\"] = feedRate;\n      parameters[\"jogHeight\"] = jogHeight;\n      parameters[\"jogRate\"] = jogRate; // parameters[\"insideCutting\"] = insideCutting;\n      //console.log(\"parameters\", parameters);\n\n      setState(_objectSpread({}, state, {\n        isShown: false\n      })); //update app state here\n\n      var oldToolpaths = store.state.toolpaths;\n      var newProfiles = store.state.selected.map(function (path) {\n        return {\n          type: \"drill\",\n          name: name,\n          parameters: parameters,\n          sourceGeometryID: path,\n          geometry: drill(store.state.contours[path], parameters),\n          id: utils.makeID(),\n          cutSelected: false,\n          visible: true\n        };\n      });\n      var newToolpaths = [].concat(_toConsumableArray(oldToolpaths), _toConsumableArray(newProfiles)); // console.log(\"newToolpaths\", newToolpaths);\n\n      store.update({\n        toolpaths: newToolpaths\n      });\n    }\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105\n    },\n    __self: this\n  }, React.createElement(Dialog, {\n    isShown: state.isShown,\n    title: \"Settings for this Drill Cut\",\n    onCloseComplete: function onCloseComplete() {\n      setState(_objectSpread({}, state, {\n        isShown: false\n      }));\n    },\n    onConfirm: validateSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106\n    },\n    __self: this\n  }, React.createElement(TextInputField, {\n    onChange: function onChange(e) {\n      var valid = utils.isNum(e.target.value);\n      setState(_objectSpread({}, state, {\n        cutDepthValid: valid\n      }));\n    },\n    isInvalid: !state.cutDepthValid,\n    name: \"cutDepth\",\n    description: state.cutDepthValid ? \"\" : \"please enter a valid number\",\n    label: \"Depth of Cut\",\n    placeholder: String(store.getState().defaultParameters.cutDepth),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117\n    },\n    __self: this\n  }), React.createElement(TextInputField, {\n    onChange: function onChange(e) {\n      var valid = utils.isNum(e.target.value);\n      setState(_objectSpread({}, state, {\n        toolDiameterValid: valid\n      }));\n    },\n    isInvalid: !state.toolDiameterValid,\n    name: \"toolDiameter\",\n    description: state.toolDiameterValid ? \"\" : \"please enter a valid number\",\n    label: \"Tool Diameter\",\n    placeholder: String(store.getState().defaultParameters.toolDiameter),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128\n    },\n    __self: this\n  }), React.createElement(TextInputField, {\n    onChange: function onChange(e) {\n      var valid = utils.isNum(e.target.value);\n      setState(_objectSpread({}, state, {\n        feedRateValid: valid\n      }));\n    },\n    isInvalid: !state.feedRateValid,\n    name: \"feedRate\",\n    description: state.feedRateValid ? \"\" : \"please enter a valid number\",\n    label: \"Feed Rate\",\n    placeholder: String(store.getState().defaultParameters.feedRate),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139\n    },\n    __self: this\n  }), React.createElement(TextInputField, {\n    onChange: function onChange(e) {\n      var valid = utils.isNum(e.target.value);\n      setState(_objectSpread({}, state, {\n        toleranceValid: valid\n      }));\n    },\n    isInvalid: !state.toleranceValid,\n    name: \"tolerance\",\n    description: state.toleranceValid ? \"\" : \"please enter a valid number\",\n    label: \"Tolerance\",\n    placeholder: String(store.getState().defaultParameters.tolerance),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150\n    },\n    __self: this\n  }), React.createElement(TextInputField, {\n    onChange: function onChange(e) {\n      var valid = utils.isNum(e.target.value);\n      setState(_objectSpread({}, state, {\n        jogRateValid: valid\n      }));\n    },\n    isInvalid: !state.jogRateValid,\n    name: \"jogRate\",\n    description: state.jogRateValid ? \"\" : \"please enter a valid number\",\n    label: \"Jog Rate\",\n    placeholder: String(store.getState().defaultParameters.jogRate),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161\n    },\n    __self: this\n  }), React.createElement(TextInputField, {\n    onChange: function onChange(e) {\n      var valid = utils.isNum(e.target.value);\n      setState(_objectSpread({}, state, {\n        jogHeightValid: valid\n      }));\n    },\n    isInvalid: !state.jogHeightValid,\n    name: \"jogHeight\",\n    description: state.jogHeightValid ? \"\" : \"please enter a valid number\",\n    label: \"Jog Height\",\n    placeholder: String(store.getState().defaultParameters.jogHeight),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172\n    },\n    __self: this\n  }), React.createElement(TextInputField, {\n    marginTop: 20,\n    onChange: function onChange(e) {\n      var valid = e.target.value !== \"\";\n      setState(_objectSpread({}, state, {\n        nameValid: valid\n      }));\n    },\n    isInvalid: !state.nameValid,\n    name: \"name\",\n    description: state.nameValid ? \"\" : \"please enter something\",\n    label: \"Name for this Profile\",\n    placeholder: String(store.getState().defaultParameters.name),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183\n    },\n    __self: this\n  })), React.createElement(Button, {\n    disabled: disabled,\n    onClick: function onClick() {\n      return setState(_objectSpread({}, state, {\n        isShown: true\n      }));\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196\n    },\n    __self: this\n  }, \"Drill\"));\n};\n\nexport { DrillButton };","map":{"version":3,"sources":["/Users/leomcelroy/Desktop/barkbeetle_js/src/components/DrillButton.js"],"names":["React","Component","useState","Button","Dialog","TextInputField","SegmentedControl","Heading","Link","Strong","Text","utils","drill","store","DrillButton","disabled","isShown","nameValid","cutDepthValid","toolDiameterValid","toleranceValid","jogHeightValid","jogRateValid","feedRateValid","state","setState","validateSubmit","valid","name","helpExtract","cutDepth","Number","toolDiameter","tolerance","jogHeight","jogRate","feedRate","getState","defaultParameters","isNaN","toolRadius","compensatedRadius","parameters","deepcopy","oldToolpaths","toolpaths","newProfiles","selected","map","path","type","sourceGeometryID","geometry","contours","id","makeID","cutSelected","visible","newToolpaths","update","e","isNum","target","value","String"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAAQC,MAAR,EAAgBC,MAAhB,EAAwBC,cAAxB,EAAwCC,gBAAxC,EAA0DC,OAA1D,EAAmEC,IAAnE,EAAyEC,MAAzE,EAAiFC,IAAjF,QAA4F,cAA5F;AACA,OAAO,KAAKC,KAAZ,MAAuB,aAAvB;AACA,SAAQC,KAAR,QAAoB,uBAApB;AAEA,OAAOC,KAAP,MAAkB,aAAlB;;AAEA,IAAMC,WAAW,GAAG,SAAdA,WAAc,OAAgB;AAAA,MAAdC,QAAc,QAAdA,QAAc;;AAAA,kBAERb,QAAQ,CAAC;AACjCc,IAAAA,OAAO,EAAE,KADwB;AAEjCC,IAAAA,SAAS,EAAE,IAFsB;AAGjCC,IAAAA,aAAa,EAAE,IAHkB;AAIjCC,IAAAA,iBAAiB,EAAE,IAJc;AAKjCC,IAAAA,cAAc,EAAE,IALiB;AAMjCC,IAAAA,cAAc,EAAE,IANiB;AAOjCC,IAAAA,YAAY,EAAE,IAPmB;AAQjCC,IAAAA,aAAa,EAAE;AARkB,GAAD,CAFA;AAAA;AAAA,MAE3BC,KAF2B;AAAA,MAEpBC,QAFoB;;AAalC,MAAMC,cAAc,GAAG,SAAjBA,cAAiB,GAAM;AAE3B,QAAIC,KAAK,GAAGH,KAAK,CAACP,SAAN,IACAO,KAAK,CAACN,aADN,IAEAM,KAAK,CAACL,iBAFN,IAGAK,KAAK,CAACJ,cAHN,IAIAI,KAAK,CAACH,cAJN,IAKAG,KAAK,CAACF,YALN,IAMAE,KAAK,CAACD,aANlB;;AAOA,QAAII,KAAJ,EAAW;AAET,UAAIC,IAAI,GAAGjB,KAAK,CAACkB,WAAN,CAAkB,MAAlB,CAAX;AACA,UAAIC,QAAQ,GAAGC,MAAM,CAACpB,KAAK,CAACkB,WAAN,CAAkB,UAAlB,CAAD,CAArB;AACA,UAAIG,YAAY,GAAGD,MAAM,CAACpB,KAAK,CAACkB,WAAN,CAAkB,cAAlB,CAAD,CAAzB;AACA,UAAII,SAAS,GAAGF,MAAM,CAACpB,KAAK,CAACkB,WAAN,CAAkB,WAAlB,CAAD,CAAtB;AACA,UAAIK,SAAS,GAAGH,MAAM,CAACpB,KAAK,CAACkB,WAAN,CAAkB,WAAlB,CAAD,CAAtB;AACA,UAAIM,OAAO,GAAGJ,MAAM,CAACpB,KAAK,CAACkB,WAAN,CAAkB,SAAlB,CAAD,CAApB;AACA,UAAIO,QAAQ,GAAGL,MAAM,CAACpB,KAAK,CAACkB,WAAN,CAAkB,UAAlB,CAAD,CAArB;AAEA,UAAIlB,KAAK,CAACkB,WAAN,CAAkB,MAAlB,MAA8B,EAAlC,EAAsCD,IAAI,GAAGf,KAAK,CAACwB,QAAN,GAAiBC,iBAAjB,CAAmCV,IAA1C;AACtC,UAAIjB,KAAK,CAACkB,WAAN,CAAkB,UAAlB,MAAkC,EAAtC,EAA0CC,QAAQ,GAAGjB,KAAK,CAACwB,QAAN,GAAiBC,iBAAjB,CAAmCR,QAA9C;AAC1C,UAAInB,KAAK,CAACkB,WAAN,CAAkB,cAAlB,MAAsC,EAA1C,EAA8CG,YAAY,GAAGnB,KAAK,CAACwB,QAAN,GAAiBC,iBAAjB,CAAmCN,YAAlD;AAC9C,UAAIrB,KAAK,CAACkB,WAAN,CAAkB,WAAlB,MAAmC,EAAvC,EAA2CI,SAAS,GAAGpB,KAAK,CAACwB,QAAN,GAAiBC,iBAAjB,CAAmCL,SAA/C;AAC3C,UAAItB,KAAK,CAACkB,WAAN,CAAkB,WAAlB,MAAmC,EAAvC,EAA2CK,SAAS,GAAGrB,KAAK,CAACwB,QAAN,GAAiBC,iBAAjB,CAAmCJ,SAA/C;AAC3C,UAAIvB,KAAK,CAACkB,WAAN,CAAkB,SAAlB,MAAiC,EAArC,EAAyCM,OAAO,GAAGtB,KAAK,CAACwB,QAAN,GAAiBC,iBAAjB,CAAmCH,OAA7C;AACzC,UAAIxB,KAAK,CAACkB,WAAN,CAAkB,UAAlB,MAAkC,EAAtC,EAA0CO,QAAQ,GAAGvB,KAAK,CAACwB,QAAN,GAAiBC,iBAAjB,CAAmCF,QAA9C;AAE1C,UAAIG,KAAK,CAACT,QAAD,CAAT,EAAqBA,QAAQ,GAAGjB,KAAK,CAACwB,QAAN,GAAiBC,iBAAjB,CAAmCR,QAA9C;AACrB,UAAIS,KAAK,CAACP,YAAD,CAAT,EAAyBA,YAAY,GAAGnB,KAAK,CAACwB,QAAN,GAAiBC,iBAAjB,CAAmCN,YAAlD;AACzB,UAAIO,KAAK,CAACN,SAAD,CAAT,EAAsBA,SAAS,GAAGpB,KAAK,CAACwB,QAAN,GAAiBC,iBAAjB,CAAmCL,SAA/C;AACtB,UAAIM,KAAK,CAACL,SAAD,CAAT,EAAsBA,SAAS,GAAGrB,KAAK,CAACwB,QAAN,GAAiBC,iBAAjB,CAAmCJ,SAA/C;AACtB,UAAIK,KAAK,CAACJ,OAAD,CAAT,EAAoBA,OAAO,GAAGtB,KAAK,CAACwB,QAAN,GAAiBC,iBAAjB,CAAmCH,OAA7C;AACpB,UAAII,KAAK,CAACH,QAAD,CAAT,EAAqBA,QAAQ,GAAGvB,KAAK,CAACwB,QAAN,GAAiBC,iBAAjB,CAAmCF,QAA9C,CAvBZ,CA0BT;;AACA,UAAII,UAAU,GAAGR,YAAY,GAAC,CAA9B;AACA,UAAIS,iBAAiB,GAAGD,UAAU,GAAGP,SAArC,CA5BS,CA8BT;;AACA,UAAIS,UAAU,GAAG/B,KAAK,CAACgC,QAAN,CAAe9B,KAAK,CAACW,KAAN,CAAYc,iBAA3B,CAAjB;AAEAI,MAAAA,UAAU,CAAC,UAAD,CAAV,GAAyBZ,QAAzB;AACAY,MAAAA,UAAU,CAAC,cAAD,CAAV,GAA6BV,YAA7B;AACAU,MAAAA,UAAU,CAAC,WAAD,CAAV,GAA0BT,SAA1B;AACAS,MAAAA,UAAU,CAAC,mBAAD,CAAV,GAAkCD,iBAAlC;AACAC,MAAAA,UAAU,CAAC,UAAD,CAAV,GAAyBN,QAAzB;AACAM,MAAAA,UAAU,CAAC,WAAD,CAAV,GAA0BR,SAA1B;AACAQ,MAAAA,UAAU,CAAC,SAAD,CAAV,GAAwBP,OAAxB,CAvCS,CAwCT;AAEA;;AAEAV,MAAAA,QAAQ,mBACHD,KADG;AAENR,QAAAA,OAAO,EAAC;AAFF,SAAR,CA5CS,CAiDT;;AACA,UAAI4B,YAAY,GAAG/B,KAAK,CAACW,KAAN,CAAYqB,SAA/B;AACA,UAAIC,WAAW,GAAGjC,KAAK,CAACW,KAAN,CAAYuB,QAAZ,CAAqBC,GAArB,CAAyB,UAAAC,IAAI,EAAI;AAEjD,eAAO;AACLC,UAAAA,IAAI,EAAE,OADD;AAELtB,UAAAA,IAAI,EAAEA,IAFD;AAGLc,UAAAA,UAAU,EAAEA,UAHP;AAILS,UAAAA,gBAAgB,EAAEF,IAJb;AAKLG,UAAAA,QAAQ,EAAExC,KAAK,CAACC,KAAK,CAACW,KAAN,CAAY6B,QAAZ,CAAqBJ,IAArB,CAAD,EAA6BP,UAA7B,CALV;AAMLY,UAAAA,EAAE,EAAE3C,KAAK,CAAC4C,MAAN,EANC;AAOLC,UAAAA,WAAW,EAAE,KAPR;AAQLC,UAAAA,OAAO,EAAE;AARJ,SAAP;AAUD,OAZiB,CAAlB;AAcA,UAAIC,YAAY,gCAAOd,YAAP,sBAAwBE,WAAxB,EAAhB,CAjES,CAmET;;AAEAjC,MAAAA,KAAK,CAAC8C,MAAN,CAAa;AAACd,QAAAA,SAAS,EAACa;AAAX,OAAb;AAED;AACF,GAjFD;;AAmFA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,MAAD;AACE,IAAA,OAAO,EAAElC,KAAK,CAACR,OADjB;AAEE,IAAA,KAAK,EAAE,6BAFT;AAGE,IAAA,eAAe,EAAE,2BAAM;AACrBS,MAAAA,QAAQ,mBACHD,KADG;AAENR,QAAAA,OAAO,EAAC;AAFF,SAAR;AAID,KARH;AASE,IAAA,SAAS,EAAEU,cATb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAWE,oBAAC,cAAD;AACE,IAAA,QAAQ,EAAE,kBAAAkC,CAAC,EAAI;AACb,UAAIjC,KAAK,GAAGhB,KAAK,CAACkD,KAAN,CAAYD,CAAC,CAACE,MAAF,CAASC,KAArB,CAAZ;AACAtC,MAAAA,QAAQ,mBAAKD,KAAL;AAAYN,QAAAA,aAAa,EAACS;AAA1B,SAAR;AACD,KAJH;AAKE,IAAA,SAAS,EAAE,CAACH,KAAK,CAACN,aALpB;AAME,IAAA,IAAI,EAAC,UANP;AAOE,IAAA,WAAW,EAAGM,KAAK,CAACN,aAAP,GAAwB,EAAxB,GAA6B,6BAP5C;AAQE,IAAA,KAAK,EAAC,cARR;AASE,IAAA,WAAW,EAAE8C,MAAM,CAACnD,KAAK,CAACwB,QAAN,GAAiBC,iBAAjB,CAAmCR,QAApC,CATrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAXF,EAsBE,oBAAC,cAAD;AACE,IAAA,QAAQ,EAAE,kBAAA8B,CAAC,EAAI;AACb,UAAIjC,KAAK,GAAGhB,KAAK,CAACkD,KAAN,CAAYD,CAAC,CAACE,MAAF,CAASC,KAArB,CAAZ;AACAtC,MAAAA,QAAQ,mBAAKD,KAAL;AAAYL,QAAAA,iBAAiB,EAACQ;AAA9B,SAAR;AACD,KAJH;AAKE,IAAA,SAAS,EAAE,CAACH,KAAK,CAACL,iBALpB;AAME,IAAA,IAAI,EAAC,cANP;AAOE,IAAA,WAAW,EAAGK,KAAK,CAACL,iBAAP,GAA4B,EAA5B,GAAiC,6BAPhD;AAQE,IAAA,KAAK,EAAC,eARR;AASE,IAAA,WAAW,EAAE6C,MAAM,CAACnD,KAAK,CAACwB,QAAN,GAAiBC,iBAAjB,CAAmCN,YAApC,CATrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAtBF,EAiCI,oBAAC,cAAD;AACE,IAAA,QAAQ,EAAE,kBAAA4B,CAAC,EAAI;AACb,UAAIjC,KAAK,GAAGhB,KAAK,CAACkD,KAAN,CAAYD,CAAC,CAACE,MAAF,CAASC,KAArB,CAAZ;AACAtC,MAAAA,QAAQ,mBAAKD,KAAL;AAAYD,QAAAA,aAAa,EAACI;AAA1B,SAAR;AACD,KAJH;AAKE,IAAA,SAAS,EAAE,CAACH,KAAK,CAACD,aALpB;AAME,IAAA,IAAI,EAAC,UANP;AAOE,IAAA,WAAW,EAAGC,KAAK,CAACD,aAAP,GAAwB,EAAxB,GAA6B,6BAP5C;AAQE,IAAA,KAAK,EAAC,WARR;AASE,IAAA,WAAW,EAAEyC,MAAM,CAACnD,KAAK,CAACwB,QAAN,GAAiBC,iBAAjB,CAAmCF,QAApC,CATrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAjCJ,EA4CM,oBAAC,cAAD;AACE,IAAA,QAAQ,EAAE,kBAAAwB,CAAC,EAAI;AACb,UAAIjC,KAAK,GAAGhB,KAAK,CAACkD,KAAN,CAAYD,CAAC,CAACE,MAAF,CAASC,KAArB,CAAZ;AACAtC,MAAAA,QAAQ,mBAAKD,KAAL;AAAYJ,QAAAA,cAAc,EAACO;AAA3B,SAAR;AACD,KAJH;AAKE,IAAA,SAAS,EAAE,CAACH,KAAK,CAACJ,cALpB;AAME,IAAA,IAAI,EAAC,WANP;AAOE,IAAA,WAAW,EAAGI,KAAK,CAACJ,cAAP,GAAyB,EAAzB,GAA8B,6BAP7C;AAQE,IAAA,KAAK,EAAC,WARR;AASE,IAAA,WAAW,EAAE4C,MAAM,CAACnD,KAAK,CAACwB,QAAN,GAAiBC,iBAAjB,CAAmCL,SAApC,CATrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA5CN,EAuDI,oBAAC,cAAD;AACE,IAAA,QAAQ,EAAE,kBAAA2B,CAAC,EAAI;AACb,UAAIjC,KAAK,GAAGhB,KAAK,CAACkD,KAAN,CAAYD,CAAC,CAACE,MAAF,CAASC,KAArB,CAAZ;AACAtC,MAAAA,QAAQ,mBAAKD,KAAL;AAAYF,QAAAA,YAAY,EAACK;AAAzB,SAAR;AACD,KAJH;AAKE,IAAA,SAAS,EAAE,CAACH,KAAK,CAACF,YALpB;AAME,IAAA,IAAI,EAAC,SANP;AAOE,IAAA,WAAW,EAAGE,KAAK,CAACF,YAAP,GAAuB,EAAvB,GAA4B,6BAP3C;AAQE,IAAA,KAAK,EAAC,UARR;AASE,IAAA,WAAW,EAAE0C,MAAM,CAACnD,KAAK,CAACwB,QAAN,GAAiBC,iBAAjB,CAAmCH,OAApC,CATrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAvDJ,EAkEM,oBAAC,cAAD;AACE,IAAA,QAAQ,EAAE,kBAAAyB,CAAC,EAAI;AACb,UAAIjC,KAAK,GAAGhB,KAAK,CAACkD,KAAN,CAAYD,CAAC,CAACE,MAAF,CAASC,KAArB,CAAZ;AACAtC,MAAAA,QAAQ,mBAAKD,KAAL;AAAYH,QAAAA,cAAc,EAACM;AAA3B,SAAR;AACD,KAJH;AAKE,IAAA,SAAS,EAAE,CAACH,KAAK,CAACH,cALpB;AAME,IAAA,IAAI,EAAC,WANP;AAOE,IAAA,WAAW,EAAGG,KAAK,CAACH,cAAP,GAAyB,EAAzB,GAA8B,6BAP7C;AAQE,IAAA,KAAK,EAAC,YARR;AASE,IAAA,WAAW,EAAE2C,MAAM,CAACnD,KAAK,CAACwB,QAAN,GAAiBC,iBAAjB,CAAmCJ,SAApC,CATrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAlEN,EA6EM,oBAAC,cAAD;AACE,IAAA,SAAS,EAAE,EADb;AAEE,IAAA,QAAQ,EAAE,kBAAA0B,CAAC,EAAI;AACb,UAAIjC,KAAK,GAAGiC,CAAC,CAACE,MAAF,CAASC,KAAT,KAAmB,EAA/B;AACAtC,MAAAA,QAAQ,mBAAKD,KAAL;AAAYP,QAAAA,SAAS,EAACU;AAAtB,SAAR;AACD,KALH;AAME,IAAA,SAAS,EAAE,CAACH,KAAK,CAACP,SANpB;AAOE,IAAA,IAAI,EAAC,MAPP;AAQE,IAAA,WAAW,EAAGO,KAAK,CAACP,SAAP,GAAoB,EAApB,GAAyB,wBARxC;AASE,IAAA,KAAK,EAAC,uBATR;AAUE,IAAA,WAAW,EAAE+C,MAAM,CAACnD,KAAK,CAACwB,QAAN,GAAiBC,iBAAjB,CAAmCV,IAApC,CAVrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA7EN,CADF,EA2FE,oBAAC,MAAD;AACE,IAAA,QAAQ,EAAEb,QADZ;AAEE,IAAA,OAAO,EAAE;AAAA,aAAMU,QAAQ,mBAAKD,KAAL;AAAYR,QAAAA,OAAO,EAAC;AAApB,SAAd;AAAA,KAFX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aA3FF,CADF;AAmGD,CAnMD;;AAqMA,SAAQF,WAAR","sourcesContent":["import React, { Component, useState } from 'react';\nimport {Button, Dialog, TextInputField, SegmentedControl, Heading, Link, Strong, Text} from 'evergreen-ui';\nimport * as utils from '../utils.js';\nimport {drill} from '../toolpaths/drill.js';\n\nimport store from '../store.js';\n\nconst DrillButton = ({disabled}) => {\n\n  const [state, setState] = useState({\n    isShown: false,\n    nameValid: true,\n    cutDepthValid: true,\n    toolDiameterValid: true,\n    toleranceValid: true,\n    jogHeightValid: true,\n    jogRateValid: true,\n    feedRateValid: true,\n  });\n\n  const validateSubmit = () => {\n\n    let valid = state.nameValid &&\n                state.cutDepthValid &&\n                state.toolDiameterValid &&\n                state.toleranceValid &&\n                state.jogHeightValid &&\n                state.jogRateValid &&\n                state.feedRateValid;\n    if (valid) {\n\n      let name = utils.helpExtract(\"name\");\n      let cutDepth = Number(utils.helpExtract(\"cutDepth\"));\n      let toolDiameter = Number(utils.helpExtract(\"toolDiameter\"));\n      let tolerance = Number(utils.helpExtract(\"tolerance\"));\n      let jogHeight = Number(utils.helpExtract(\"jogHeight\"));\n      let jogRate = Number(utils.helpExtract(\"jogRate\"));\n      let feedRate = Number(utils.helpExtract(\"feedRate\"));\n\n      if (utils.helpExtract(\"name\") === \"\") name = store.getState().defaultParameters.name;\n      if (utils.helpExtract(\"cutDepth\") === \"\") cutDepth = store.getState().defaultParameters.cutDepth;\n      if (utils.helpExtract(\"toolDiameter\") === \"\") toolDiameter = store.getState().defaultParameters.toolDiameter;\n      if (utils.helpExtract(\"tolerance\") === \"\") tolerance = store.getState().defaultParameters.tolerance;\n      if (utils.helpExtract(\"jogHeight\") === \"\") jogHeight = store.getState().defaultParameters.jogHeight;\n      if (utils.helpExtract(\"jogRate\") === \"\") jogRate = store.getState().defaultParameters.jogRate;\n      if (utils.helpExtract(\"feedRate\") === \"\") feedRate = store.getState().defaultParameters.feedRate;\n\n      if (isNaN(cutDepth)) cutDepth = store.getState().defaultParameters.cutDepth;\n      if (isNaN(toolDiameter)) toolDiameter = store.getState().defaultParameters.toolDiameter;\n      if (isNaN(tolerance)) tolerance = store.getState().defaultParameters.tolerance;\n      if (isNaN(jogHeight)) jogHeight = store.getState().defaultParameters.jogHeight;\n      if (isNaN(jogRate)) jogRate = store.getState().defaultParameters.jogRate;\n      if (isNaN(feedRate)) feedRate = store.getState().defaultParameters.feedRate;\n\n\n      //derived parameters\n      let toolRadius = toolDiameter/2;\n      let compensatedRadius = toolRadius + tolerance;\n\n      //settings will be compiled to a single object here\n      let parameters = utils.deepcopy(store.state.defaultParameters);\n\n      parameters[\"cutDepth\"] = cutDepth;\n      parameters[\"toolDiameter\"] = toolDiameter;\n      parameters[\"tolerance\"] = tolerance;\n      parameters[\"compensatedRadius\"] = compensatedRadius;\n      parameters[\"feedRate\"] = feedRate;\n      parameters[\"jogHeight\"] = jogHeight;\n      parameters[\"jogRate\"] = jogRate;\n      // parameters[\"insideCutting\"] = insideCutting;\n\n      //console.log(\"parameters\", parameters);\n\n      setState({\n        ...state,\n        isShown:false,\n      });\n\n      //update app state here\n      let oldToolpaths = store.state.toolpaths;\n      let newProfiles = store.state.selected.map(path => {\n\n        return {\n          type: \"drill\",\n          name: name,\n          parameters: parameters,\n          sourceGeometryID: path,\n          geometry: drill(store.state.contours[path], parameters),\n          id: utils.makeID(),\n          cutSelected: false,\n          visible: true,\n        }\n      })\n\n      let newToolpaths = [...oldToolpaths, ...newProfiles];\n\n      // console.log(\"newToolpaths\", newToolpaths);\n\n      store.update({toolpaths:newToolpaths});\n\n    }\n  }\n\n  return (\n    <div>\n      <Dialog\n        isShown={state.isShown}\n        title={\"Settings for this Drill Cut\"}\n        onCloseComplete={() => {\n          setState({\n            ...state,\n            isShown:false,\n          })\n        }}\n        onConfirm={validateSubmit}>\n\n        <TextInputField\n          onChange={e => {\n            let valid = utils.isNum(e.target.value);\n            setState({...state, cutDepthValid:valid})\n          }}\n          isInvalid={!state.cutDepthValid}\n          name=\"cutDepth\"\n          description={(state.cutDepthValid) ? \"\" : \"please enter a valid number\"}\n          label=\"Depth of Cut\"\n          placeholder={String(store.getState().defaultParameters.cutDepth)}/>\n\n        <TextInputField\n          onChange={e => {\n            let valid = utils.isNum(e.target.value);\n            setState({...state, toolDiameterValid:valid})\n          }}\n          isInvalid={!state.toolDiameterValid}\n          name=\"toolDiameter\"\n          description={(state.toolDiameterValid) ? \"\" : \"please enter a valid number\"}\n          label=\"Tool Diameter\"\n          placeholder={String(store.getState().defaultParameters.toolDiameter)}/>\n\n          <TextInputField\n            onChange={e => {\n              let valid = utils.isNum(e.target.value);\n              setState({...state, feedRateValid:valid})\n            }}\n            isInvalid={!state.feedRateValid}\n            name=\"feedRate\"\n            description={(state.feedRateValid) ? \"\" : \"please enter a valid number\"}\n            label=\"Feed Rate\"\n            placeholder={String(store.getState().defaultParameters.feedRate)}/>\n\n            <TextInputField\n              onChange={e => {\n                let valid = utils.isNum(e.target.value);\n                setState({...state, toleranceValid:valid})\n              }}\n              isInvalid={!state.toleranceValid}\n              name=\"tolerance\"\n              description={(state.toleranceValid) ? \"\" : \"please enter a valid number\"}\n              label=\"Tolerance\"\n              placeholder={String(store.getState().defaultParameters.tolerance)}/>\n\n          <TextInputField\n            onChange={e => {\n              let valid = utils.isNum(e.target.value);\n              setState({...state, jogRateValid:valid})\n            }}\n            isInvalid={!state.jogRateValid}\n            name=\"jogRate\"\n            description={(state.jogRateValid) ? \"\" : \"please enter a valid number\"}\n            label=\"Jog Rate\"\n            placeholder={String(store.getState().defaultParameters.jogRate)}/>\n\n            <TextInputField\n              onChange={e => {\n                let valid = utils.isNum(e.target.value);\n                setState({...state, jogHeightValid:valid})\n              }}\n              isInvalid={!state.jogHeightValid}\n              name=\"jogHeight\"\n              description={(state.jogHeightValid) ? \"\" : \"please enter a valid number\"}\n              label=\"Jog Height\"\n              placeholder={String(store.getState().defaultParameters.jogHeight)}/>\n\n            <TextInputField\n              marginTop={20}\n              onChange={e => {\n                let valid = e.target.value !== \"\";\n                setState({...state, nameValid:valid})\n              }}\n              isInvalid={!state.nameValid}\n              name=\"name\"\n              description={(state.nameValid) ? \"\" : \"please enter something\"}\n              label=\"Name for this Profile\"\n              placeholder={String(store.getState().defaultParameters.name)}/>\n\n      </Dialog>\n      <Button\n        disabled={disabled}\n        onClick={() => setState({...state, isShown:true})}>\n        Drill\n      </Button>\n    </div>\n  );\n}\n\nexport {DrillButton};\n"]},"metadata":{},"sourceType":"module"}