{"ast":null,"code":"import _toConsumableArray from \"/Users/leomcelroy/Desktop/barkbeetle_js/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport { clipOffsetContour } from '../unmakerjs/clipper.js';\n\nvar offsetFunc = function offsetFunc(offset) {\n  if (offset === \"outside\") {\n    return false;\n  } else if (offset === \"inside\") {\n    return true;\n  } else if (offset === \"none\") {\n    return \"none\";\n  }\n};\n\nvar profile = function profile(contour, params) {\n  var outline;\n  var offset = offsetFunc(params.offset);\n\n  if (offset === \"none\") {\n    outline = clipOffsetContour(contour, 0); //or contour\n  } else {\n    //outline = mjs.model.outline(p, params.compensatedRadius, 0, offset); //third parameter is what type of corners, 0 (rounded) by default\n    offset = offset === true ? -1 : 1;\n    outline = clipOffsetContour(contour, offset * params.compensatedRadius);\n  }\n\n  outline = outline.flat(); //this is a hack to deal with not raising the bit yet\n\n  var keyPoints = outline.map(function (line) {\n    return [line.origin[0], line.origin[1]];\n  });\n  var gcodePoints = keyPoints.map(function (p) {\n    return \"G1 X\".concat(p[0], \" Y\").concat(p[1], \" F\").concat(params.feedRate);\n  }); //let gcode = JSON.parse(JSON.stringify(gcodePoints));\n\n  var firstPoint = keyPoints[0];\n  var paths = params.depthOfPasses.map(function (p, i) {\n    return [\"G1 Z\".concat(params.depthOfPasses[i], \" F12.0\")].concat(_toConsumableArray(gcodePoints), [\"G1 X\".concat(firstPoint[0], \" Y\").concat(firstPoint[1], \" F\").concat(params.feedRate)]);\n  });\n  paths = paths.flat(1);\n  var preamble = [params.units, \"G90\"];\n  var gcode = [].concat(preamble, [\"(end of preamble)\", \"G1 Z\".concat(params.jogHeight, \" F\").concat(params.jogRate), \"G0 X\".concat(firstPoint[0], \" Y\").concat(firstPoint[1])], _toConsumableArray(paths), [\"G1 Z\".concat(params.jogHeight, \" F\").concat(params.jogRate)]); // write to a new file named\n  //let filename = 'testGcodeProfile.gcode';\n\n  var text = gcode.join('\\n');\n  return {\n    drawing: [outline],\n    gcode: text\n  };\n};\n\nexport { profile };","map":{"version":3,"sources":["/Users/leomcelroy/Desktop/barkbeetle_js/src/toolpaths/profile.js"],"names":["clipOffsetContour","offsetFunc","offset","profile","contour","params","outline","compensatedRadius","flat","keyPoints","map","line","origin","gcodePoints","p","feedRate","firstPoint","paths","depthOfPasses","i","preamble","units","gcode","jogHeight","jogRate","text","join","drawing"],"mappings":";AAAA,SAAQA,iBAAR,QAAgC,yBAAhC;;AAGA,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAACC,MAAD,EAAY;AAC7B,MAAIA,MAAM,KAAK,SAAf,EAA0B;AACxB,WAAO,KAAP;AACD,GAFD,MAEO,IAAIA,MAAM,KAAK,QAAf,EAAyB;AAC9B,WAAO,IAAP;AACD,GAFM,MAEA,IAAIA,MAAM,KAAK,MAAf,EAAuB;AAC5B,WAAO,MAAP;AACD;AACF,CARD;;AAUA,IAAMC,OAAO,GAAG,SAAVA,OAAU,CAACC,OAAD,EAAUC,MAAV,EAAqB;AAEnC,MAAIC,OAAJ;AACA,MAAIJ,MAAM,GAAGD,UAAU,CAACI,MAAM,CAACH,MAAR,CAAvB;;AACA,MAAIA,MAAM,KAAK,MAAf,EAAuB;AACrBI,IAAAA,OAAO,GAAGN,iBAAiB,CAACI,OAAD,EAAU,CAAV,CAA3B,CADqB,CACoB;AAC1C,GAFD,MAEO;AACL;AACAF,IAAAA,MAAM,GAAIA,MAAM,KAAK,IAAZ,GAAoB,CAAC,CAArB,GAAyB,CAAlC;AAEAI,IAAAA,OAAO,GAAGN,iBAAiB,CAACI,OAAD,EAAUF,MAAM,GAAGG,MAAM,CAACE,iBAA1B,CAA3B;AACD;;AAEDD,EAAAA,OAAO,GAAGA,OAAO,CAACE,IAAR,EAAV,CAbmC,CAaT;;AAE1B,MAAIC,SAAS,GAAGH,OAAO,CAACI,GAAR,CAAY,UAAAC,IAAI;AAAA,WAAI,CAACA,IAAI,CAACC,MAAL,CAAY,CAAZ,CAAD,EAAiBD,IAAI,CAACC,MAAL,CAAY,CAAZ,CAAjB,CAAJ;AAAA,GAAhB,CAAhB;AAEA,MAAIC,WAAW,GAAGJ,SAAS,CAACC,GAAV,CAAc,UAAAI,CAAC;AAAA,yBAAWA,CAAC,CAAC,CAAD,CAAZ,eAAoBA,CAAC,CAAC,CAAD,CAArB,eAA6BT,MAAM,CAACU,QAApC;AAAA,GAAf,CAAlB,CAjBmC,CAkBnC;;AAEA,MAAIC,UAAU,GAAGP,SAAS,CAAC,CAAD,CAA1B;AAEA,MAAIQ,KAAK,GAAGZ,MAAM,CAACa,aAAP,CAAqBR,GAArB,CAAyB,UAACI,CAAD,EAAGK,CAAH;AAAA,0BAC5Bd,MAAM,CAACa,aAAP,CAAqBC,CAArB,CAD4B,uCAEhCN,WAFgC,kBAG5BG,UAAU,CAAC,CAAD,CAHkB,eAGVA,UAAU,CAAC,CAAD,CAHA,eAGQX,MAAM,CAACU,QAHf;AAAA,GAAzB,CAAZ;AAMAE,EAAAA,KAAK,GAAGA,KAAK,CAACT,IAAN,CAAW,CAAX,CAAR;AAEA,MAAIY,QAAQ,GAAG,CAACf,MAAM,CAACgB,KAAR,EAAe,KAAf,CAAf;AAEA,MAAIC,KAAK,aACJF,QADI,GAEP,mBAFO,gBAGAf,MAAM,CAACkB,SAHP,eAGqBlB,MAAM,CAACmB,OAH5B,iBAIAR,UAAU,CAAC,CAAD,CAJV,eAIkBA,UAAU,CAAC,CAAD,CAJ5B,uBAKJC,KALI,kBAMAZ,MAAM,CAACkB,SANP,eAMqBlB,MAAM,CAACmB,OAN5B,GAAT,CAhCmC,CAyCnC;AACA;;AAEA,MAAIC,IAAI,GAAGH,KAAK,CAACI,IAAN,CAAW,IAAX,CAAX;AAEA,SAAO;AAACC,IAAAA,OAAO,EAAE,CAACrB,OAAD,CAAV;AAAqBgB,IAAAA,KAAK,EAAEG;AAA5B,GAAP;AACD,CA/CD;;AAkDA,SAAQtB,OAAR","sourcesContent":["import {clipOffsetContour} from '../unmakerjs/clipper.js'\n\n\nconst offsetFunc = (offset) => {\n  if (offset === \"outside\") {\n    return false;\n  } else if (offset === \"inside\") {\n    return true;\n  } else if (offset === \"none\") {\n    return \"none\";\n  }\n}\n\nconst profile = (contour, params) => {\n\n  let outline;\n  let offset = offsetFunc(params.offset);\n  if (offset === \"none\") {\n    outline = clipOffsetContour(contour, 0); //or contour\n  } else {\n    //outline = mjs.model.outline(p, params.compensatedRadius, 0, offset); //third parameter is what type of corners, 0 (rounded) by default\n    offset = (offset === true) ? -1 : 1;\n\n    outline = clipOffsetContour(contour, offset * params.compensatedRadius);\n  }\n\n  outline = outline.flat(); //this is a hack to deal with not raising the bit yet\n\n  let keyPoints = outline.map(line => [line.origin[0], line.origin[1]]);\n\n  let gcodePoints = keyPoints.map(p => `G1 X${p[0]} Y${p[1]} F${params.feedRate}`)\n  //let gcode = JSON.parse(JSON.stringify(gcodePoints));\n\n  let firstPoint = keyPoints[0];\n\n  let paths = params.depthOfPasses.map((p,i) => [\n    `G1 Z${params.depthOfPasses[i]} F12.0`,\n    ...gcodePoints,\n    `G1 X${firstPoint[0]} Y${firstPoint[1]} F${params.feedRate}`\n  ])\n\n  paths = paths.flat(1);\n\n  let preamble = [params.units, \"G90\"];\n\n  let gcode = [\n    ...preamble,\n    \"(end of preamble)\",\n    `G1 Z${params.jogHeight} F${params.jogRate}`,\n    `G0 X${firstPoint[0]} Y${firstPoint[1]}`,\n    ...paths,\n    `G1 Z${params.jogHeight} F${params.jogRate}`,\n  ]\n\n  // write to a new file named\n  //let filename = 'testGcodeProfile.gcode';\n\n  let text = gcode.join('\\n');\n\n  return {drawing: [outline], gcode: text};\n};\n\n\nexport {profile};\n"]},"metadata":{},"sourceType":"module"}