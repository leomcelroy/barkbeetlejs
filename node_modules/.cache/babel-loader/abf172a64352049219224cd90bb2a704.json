{"ast":null,"code":"'use strict';\n\nimport { substitute } from './strings';\nimport assign from 'object-assign';\nimport { default as _deepEqual } from './deepEqual';\nexport var objectAssign = assign;\nexport var deepEqual = _deepEqual;\nexport function isEmpty(obj) {\n  // null and undefined are \"empty\"\n  if (obj === null || obj === undefined) {\n    return true;\n  }\n\n  if (typeof obj === 'number' && isNaN(obj)) {\n    return true;\n  }\n\n  if (obj.length !== undefined) {\n    return obj.length === 0;\n  }\n\n  if (obj instanceof Date) {\n    return false;\n  }\n\n  if (typeof obj === 'object') {\n    return Object.keys(obj).length === 0;\n  }\n\n  return false;\n}\nexport function forEach(obj, fn, context) {\n  Object.keys(obj).forEach(function (key) {\n    return fn.call(context, obj[key], key);\n  });\n}\nexport function toTextValue(arr) {\n  var textTpl = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '{text}';\n  var valueTpl = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '{id}';\n\n  if (!arr) {\n    return [];\n  }\n\n  if (!Array.isArray(arr)) {\n    arr = Object.keys(arr).map(function (key) {\n      return {\n        id: key,\n        text: arr[key]\n      };\n    });\n  }\n\n  return arr.map(function (s) {\n    if (typeof s !== 'object') {\n      s = s.toString();\n      return {\n        $text: s,\n        $value: s,\n        $key: hashcode(s)\n      };\n    } else {\n      var $text = typeof textTpl === 'function' ? textTpl(s) : substitute(textTpl, s);\n      var $value = typeof valueTpl === 'function' ? valueTpl(s) : substitute(valueTpl, s);\n      var $key = s.id ? s.id : hashcode(s);\n      return assign({}, s, {\n        $text: $text,\n        $value: $value,\n        $key: $key\n      });\n    }\n  });\n}\nexport function hashcode(obj) {\n  var hash = 0;\n  var i, chr, len, str;\n  var type = typeof obj;\n\n  switch (type) {\n    case 'object':\n      // let newObj = {};\n      // forEach(obj, (v, k) => v && (typeof v === 'object' || 'function') ? v.toString() : v);\n      str = JSON.stringify(obj);\n      break;\n\n    case 'string':\n      str = obj;\n      break;\n\n    default:\n      str = obj ? obj.toString() : '';\n      break;\n  }\n\n  if (str.length === 0) return hash;\n\n  for (i = 0, len = str.length; i < len; i++) {\n    chr = str.charCodeAt(i);\n    hash = (hash << 5) - hash + chr;\n    hash |= 0; // Convert to 32bit integer\n  }\n\n  return hash.toString(36);\n}\nexport function sortByKey(obj) {\n  if (!obj) {\n    return {};\n  }\n\n  var newObj = {};\n  Object.keys(obj).sort().forEach(function (key) {\n    newObj[key] = obj[key];\n  });\n  return newObj;\n}\nexport function shallowEqual(objA, objB) {\n  if (objA === objB) {\n    return true;\n  }\n\n  if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {\n    return false;\n  }\n\n  var keysA = Object.keys(objA);\n\n  if (keysA.length !== Object.keys(objB).length) {\n    return false;\n  }\n\n  for (var i = 0, key; i < keysA.length; i++) {\n    key = keysA[i];\n\n    if (!objB.hasOwnProperty(key) || objA[key] !== objB[key]) {\n      return false;\n    }\n  }\n\n  return true;\n}\nexport function partialEqual() {\n  var objA = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var objB = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var keys = arguments.length > 2 ? arguments[2] : undefined;\n  if (!keys || keys.length === 0) return true;\n  var newA = {};\n  var newB = {};\n  keys.forEach(function (key) {\n    newA[key] = objA;\n    newB[key] = objB;\n  });\n  return _deepEqual(newA, newB);\n}","map":null,"metadata":{},"sourceType":"module"}