{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport arrify from 'arrify';\nimport { Popover } from '../../popover';\nimport { Position } from '../../constants';\nimport SelectMenuContent from './SelectMenuContent';\nimport OptionShapePropType from './OptionShapePropType';\nimport SelectedPropType from './SelectedPropType';\n\nvar SelectMenu =\n/*#__PURE__*/\nfunction (_PureComponent) {\n  _inherits(SelectMenu, _PureComponent);\n\n  function SelectMenu() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, SelectMenu);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(SelectMenu)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"getDetailView\", function (close, detailView) {\n      if (typeof detailView === 'function') {\n        return {\n          detailView: detailView({\n            close: close\n          })\n        };\n      }\n\n      if (detailView) {\n        return {\n          detailView: detailView\n        };\n      }\n\n      return {};\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"getEmptyView\", function (close, emptyView) {\n      if (typeof emptyView === 'function') {\n        return {\n          emptyView: emptyView({\n            close: close\n          })\n        };\n      }\n\n      if (emptyView) {\n        return {\n          emptyView: emptyView\n        };\n      }\n\n      return {};\n    });\n\n    return _this;\n  }\n\n  _createClass(SelectMenu, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          title = _this$props.title,\n          width = _this$props.width,\n          height = _this$props.height,\n          options = _this$props.options,\n          selected = _this$props.selected,\n          position = _this$props.position,\n          hasTitle = _this$props.hasTitle,\n          hasFilter = _this$props.hasFilter,\n          detailView = _this$props.detailView,\n          emptyView = _this$props.emptyView,\n          isMultiSelect = _this$props.isMultiSelect,\n          props = _objectWithoutProperties(_this$props, [\"title\", \"width\", \"height\", \"options\", \"selected\", \"position\", \"hasTitle\", \"hasFilter\", \"detailView\", \"emptyView\", \"isMultiSelect\"]);\n\n      return React.createElement(Popover, _extends({\n        minWidth: width,\n        position: position,\n        minHeight: height,\n        content: function content(_ref) {\n          var close = _ref.close;\n          return React.createElement(SelectMenuContent, _extends({\n            width: width,\n            height: height,\n            options: options,\n            title: title,\n            hasFilter: hasFilter,\n            hasTitle: hasTitle,\n            isMultiSelect: isMultiSelect,\n            listProps: {\n              onSelect: function onSelect(item) {\n                _this2.props.onSelect(item);\n              },\n              onDeselect: function onDeselect(item) {\n                _this2.props.onDeselect(item);\n              },\n              selected: arrify(selected)\n            },\n            close: close\n          }, _this2.getDetailView(close, detailView), _this2.getEmptyView(close, emptyView)));\n        }\n      }, props));\n    }\n  }]);\n\n  return SelectMenu;\n}(PureComponent);\n\nSelectMenu.displayName = \"SelectMenu\";\n\n_defineProperty(SelectMenu, \"propTypes\", {\n  /**\n   * The title of the Select Menu.\n   */\n  title: PropTypes.string,\n\n  /**\n   * The width of the Select Menu.\n   */\n  width: PropTypes.number,\n\n  /**\n   * The height of the Select Menu.\n   */\n  height: PropTypes.number,\n\n  /**\n   * The options to show in the menu.\n   * [{ label: String, value: String | Number, labelInList?: String }]\n   */\n  options: PropTypes.arrayOf(OptionShapePropType),\n\n  /**\n   * Function that is called when an option is selected.\n   */\n  onSelect: PropTypes.func,\n\n  /**\n   * Function that is called when an option is deselected.\n   */\n  onDeselect: PropTypes.func,\n\n  /**\n   * The selected value/values.\n   */\n  selected: SelectedPropType,\n\n  /**\n   * When true, multi select is accounted for.\n   */\n  isMultiSelect: PropTypes.bool,\n\n  /**\n   * When true, show the title.\n   */\n  hasTitle: PropTypes.bool,\n\n  /**\n   * When true, show the filter.\n   */\n  hasFilter: PropTypes.bool,\n\n  /**\n   * The position of the Select Menu.\n   */\n  position: PropTypes.oneOf([Position.TOP, Position.TOP_LEFT, Position.TOP_RIGHT, Position.BOTTOM, Position.BOTTOM_LEFT, Position.BOTTOM_RIGHT]),\n\n  /**\n   * Can be a function that returns a node, or a node itself, that is\n   * rendered on the right side of the Select Menu to give additional\n   * information when an option is selected.\n   */\n  detailView: PropTypes.oneOfType([PropTypes.func, PropTypes.node]),\n\n  /**\n   * Can be a function that returns a node, or a node itself, that is\n   * rendered instead of the options list when there are no options.\n   */\n  emptyView: PropTypes.oneOfType([PropTypes.func, PropTypes.node])\n});\n\n_defineProperty(SelectMenu, \"defaultProps\", {\n  onSelect: function onSelect() {},\n  onDeselect: function onDeselect() {},\n  width: 240,\n  height: 248,\n  position: Position.BOTTOM_LEFT,\n  isMultiSelect: false\n});\n\nexport { SelectMenu as default };","map":null,"metadata":{},"sourceType":"module"}