{"ast":null,"code":"import _objectSpread from \"/Users/leomcelroy/Desktop/barkbeetle_js/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport * as mjs from 'makerjs';\nimport * as s2p from 'shape2path';\nimport * as svgson from 'svgson';\nimport * as utils from './utils.js';\nimport { flattenSVG } from 'flatten-svg';\nimport { connectPoints } from './unmakerjs/primitives.js';\nimport store from \"./store.js\"; //this is my global state library, this is the only file that will getState() it will pass that to all sub components or should i import store in respective components\n\nvar uploadSVG = function uploadSVG(e) {\n  //main event\n  var files = e.target.files;\n  var file = files[0];\n  var reader = new FileReader();\n\n  reader.onload = function (event) {\n    var text = event.target.result;\n    var hmm = document.getElementById('thisIsDumb');\n    hmm.innerHTML = text;\n    var paths = flattenSVG(hmm);\n    var models = {};\n    var models2 = {};\n    Object.values(paths).forEach(function (path, i) {\n      var lines2 = connectPoints(path.points);\n      models2[utils.makeID()] = lines2;\n    });\n\n    var shapes2 = _objectSpread({}, store.state.shapes2, models2);\n\n    store.update({\n      contours: shapes2\n    });\n  };\n\n  reader.readAsText(file);\n};\n\nexport { uploadSVG };","map":{"version":3,"sources":["/Users/leomcelroy/Desktop/barkbeetle_js/src/uploadSVG.js"],"names":["mjs","s2p","svgson","utils","flattenSVG","connectPoints","store","uploadSVG","e","files","target","file","reader","FileReader","onload","event","text","result","hmm","document","getElementById","innerHTML","paths","models","models2","Object","values","forEach","path","i","lines2","points","makeID","shapes2","state","update","contours","readAsText"],"mappings":";AAAA,OAAO,KAAKA,GAAZ,MAAqB,SAArB;AACA,OAAO,KAAKC,GAAZ,MAAqB,YAArB;AACA,OAAO,KAAKC,MAAZ,MAAwB,QAAxB;AACA,OAAO,KAAKC,KAAZ,MAAuB,YAAvB;AACA,SAAQC,UAAR,QAAyB,aAAzB;AAEA,SAAQC,aAAR,QAA4B,2BAA5B;AAGA,OAAOC,KAAP,MAAkB,YAAlB,C,CAAgC;;AAGhC,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAACC,CAAD,EAAO;AAEvB;AACA,MAAIC,KAAK,GAAGD,CAAC,CAACE,MAAF,CAASD,KAArB;AACA,MAAIE,IAAI,GAAGF,KAAK,CAAC,CAAD,CAAhB;AAEA,MAAIG,MAAM,GAAG,IAAIC,UAAJ,EAAb;;AAEAD,EAAAA,MAAM,CAACE,MAAP,GAAgB,UAACC,KAAD,EAAW;AACzB,QAAIC,IAAI,GAAGD,KAAK,CAACL,MAAN,CAAaO,MAAxB;AAEA,QAAIC,GAAG,GAAGC,QAAQ,CAACC,cAAT,CAAwB,YAAxB,CAAV;AACAF,IAAAA,GAAG,CAACG,SAAJ,GAAgBL,IAAhB;AAEA,QAAIM,KAAK,GAAGlB,UAAU,CAACc,GAAD,CAAtB;AAEA,QAAIK,MAAM,GAAG,EAAb;AACA,QAAIC,OAAO,GAAG,EAAd;AAEAC,IAAAA,MAAM,CAACC,MAAP,CAAcJ,KAAd,EAAqBK,OAArB,CAA6B,UAACC,IAAD,EAAOC,CAAP,EAAa;AACxC,UAAIC,MAAM,GAAGzB,aAAa,CAACuB,IAAI,CAACG,MAAN,CAA1B;AACAP,MAAAA,OAAO,CAACrB,KAAK,CAAC6B,MAAN,EAAD,CAAP,GAA0BF,MAA1B;AACD,KAHD;;AAKA,QAAIG,OAAO,qBAAO3B,KAAK,CAAC4B,KAAN,CAAYD,OAAnB,EAA+BT,OAA/B,CAAX;;AAEAlB,IAAAA,KAAK,CAAC6B,MAAN,CAAa;AAACC,MAAAA,QAAQ,EAAEH;AAAX,KAAb;AAED,GApBD;;AAsBArB,EAAAA,MAAM,CAACyB,UAAP,CAAkB1B,IAAlB;AACD,CA/BD;;AAiCA,SAAQJ,SAAR","sourcesContent":["import * as mjs from 'makerjs';\nimport * as s2p from 'shape2path';\nimport * as svgson from 'svgson';\nimport * as utils from './utils.js';\nimport {flattenSVG} from 'flatten-svg';\n\nimport {connectPoints} from './unmakerjs/primitives.js';\n\n\nimport store from \"./store.js\"; //this is my global state library, this is the only file that will getState() it will pass that to all sub components or should i import store in respective components\n\n\nconst uploadSVG = (e) => {\n\n  //main event\n  let files = e.target.files;\n  let file = files[0];\n\n  var reader = new FileReader();\n\n  reader.onload = (event) => {\n    let text = event.target.result;\n\n    let hmm = document.getElementById('thisIsDumb');\n    hmm.innerHTML = text;\n\n    let paths = flattenSVG(hmm);\n\n    let models = {};\n    let models2 = {};\n\n    Object.values(paths).forEach((path, i) => {\n      let lines2 = connectPoints(path.points);\n      models2[utils.makeID()] = lines2;\n    })\n\n    let shapes2 = {...store.state.shapes2, ...models2}\n\n    store.update({contours: shapes2});\n\n  };\n\n  reader.readAsText(file);\n}\n\nexport {uploadSVG};\n"]},"metadata":{},"sourceType":"module"}