{"ast":null,"code":"var _jsxFileName = \"/Users/leomcelroy/Desktop/barkBeetleEverything/barkbeetle_js_real/src/App.js\";\nimport React, { Component, PureComponent } from 'react';\nimport './App.css';\nimport * as utils from './utils.js';\nimport * as mjs from 'makerjs';\nimport * as params from './parameters.js';\nimport * as s2p from 'shape2path';\nimport * as svgson from 'svgson';\nimport { Workplane } from './Workplane.js';\nimport { kk } from './joints/koshikake.js';\nimport { profile } from './toolpaths/profile.js';\nimport { pocket } from './toolpaths/pocket.js';\nimport { Button, Heading, Pane } from 'evergreen-ui'; //import {replaceWithPath} from './svg_to_makerjs.js';\n\nimport { MaterialType } from './components/MaterialType.js';\nimport { MaterialThickness } from './components/MaterialThickness.js';\nimport { Origin } from './components/Origin.js';\nimport { Units } from './components/Units.js';\nimport { PocketButton } from './components/PocketButton.js';\nimport { AdvancedOptions } from './components/AdvancedOptions.js';\nimport { ToolpathList } from './components/ToolpathList.js';\nimport store from \"./store.js\"; //this is my global state library\n// const store = createStore({\n//   shapes: {},\n//   toolpaths:[],\n//   selected: [],\n//   material: \"wood\",\n//   thickness: 34,\n//   units: \"mm\",\n//   zero: \"bottomleft\",\n// });\n\nvar app = function app() {\n  // constructor() {\n  //   super();\n  //\n  //   this.state = {\n  //     shapes: {},\n  //     toolpaths:[],\n  //     selected: [],\n  //     material: \"wood\",\n  //     thickness: 34,\n  //     units: \"mm\",\n  //     zero: \"bottom_left\",\n  //   }\n  // };\n  // <div>\n  //   <input\n  //     id=\"myInput\"\n  //     type=\"file\"\n  //     ref={(ref) => this.upload = ref}\n  //     style={{ display: 'none' }}\n  //     onChange={(e) => this.uploadSVG(e)}/>\n  //   <Button\n  //     marginRight={4}\n  //     onClick={(e) => this.upload.click()}>\n  //       upload (SVG, DXF, BBJS, or Makerjs)\n  //   </Button>\n  //   <Button>\n  //     save\n  //   </Button>\n  // </div>\n  // uploadSVG(e) {\n  //   //helper function\n  //   const replaceWithPath = (child) => { //why cant I put this in a different file\n  //     console.log(\"child\", child);\n  //\n  //     if (child.name === \"g\") {\n  //       return child.children.map(grandchild => replaceWithPath(grandchild));\n  //     }\n  //\n  //     if (child.name === \"rectangle\") {\n  //       let x;\n  //       let y;\n  //       let width;\n  //       let height;\n  //       let rx;\n  //       let ry;\n  //\n  //       let temp = s2p.rect({x, y, width, height, rx, ry});\n  //       return mjs.importer.fromSVGPathData(temp);\n  //     }\n  //\n  //     if (child.name === \"circle\") {\n  //       let cx;\n  //       let cy;\n  //       let r;\n  //\n  //       let temp = s2p.rect({cx, cy, r});\n  //       return mjs.importer.fromSVGPathData(temp);\n  //     }\n  //\n  //     if (child.name === \"ellipse\") {\n  //       let cx;\n  //       let cy;\n  //       let rx;\n  //       let ry;\n  //\n  //       let temp = s2p.ellipse({cx, cy, rx, ry});\n  //       return mjs.importer.fromSVGPathData(temp);\n  //     }\n  //\n  //     if (child.name === \"polygon\") {\n  //       let points\n  //\n  //       let temp = s2p.polygon({points});\n  //       return mjs.importer.fromSVGPathData(temp);\n  //     }\n  //\n  //     if (child.name === \"polyline\") {\n  //       let points\n  //\n  //       let temp = s2p.polyline({points});\n  //       return mjs.importer.fromSVGPathData(temp);\n  //     }\n  //\n  //     if (child.name === \"line\") {\n  //       let x1;\n  //       let x2;\n  //       let y1;\n  //       let y2;\n  //\n  //       let temp = s2p.line({x1, x2, y1, y2});\n  //       return mjs.importer.fromSVGPathData(temp);\n  //     }\n  //\n  //     if (child.name === \"path\") {\n  //       let makerjsPath = mjs.importer.fromSVGPathData(child.attributes.d);\n  //       return makerjsPath;\n  //     }\n  //   }\n  //\n  //   //main event\n  //   let files = e.target.files;\n  //   let file = files[0];\n  //\n  //   var reader = new FileReader();\n  //\n  //   reader.onload = (event) => {\n  //     let text = event.target.result;\n  //\n  //     svgson.parse(text).then((json) => {\n  //       let svg = json.children.map(child => {\n  //         return replaceWithPath(child);\n  //       });\n  //\n  //       svg = svg.flat(1); //TODO: what does the argument do again?\n  //\n  //       //TODO: update state to have makerjs models\n  //       console.log(\"svg\", svg);\n  //       let models = {};\n  //\n  //       svg.forEach(shape => {\n  //         models[utils.makeID()] = shape;\n  //       })\n  //\n  //       console.log(\"models\", models);\n  //\n  //       //ultimately I will set state of app\n  //     });\n  //   };\n  //\n  //   reader.readAsText(file);\n  // }\n  // updateFromChild(newState) {\n  //   console.log(\"why\")\n  //   if (newState === \"mm\") {\n  //     this.setState({units:\"mm\"});\n  //   } else if (newState === \"in\") {\n  //     this.setState({units:\"in\"});\n  //   }\n  // }\n  // shouldComponentUpdate(nextProps, nextState) { //TODO: never needed this before, why now\n  //   return this.props.children !== nextProps.children;\n  // }\n  //should I put everything in a list or all to one model, there seem to be some issues with origins if I mjs.exporter.toSVG() seperately\n  var test = kk; //test = mjs.model.originate(test);\n\n  var testProfile = test.models.profile;\n  var testPocket = test.models.pocket;\n  var profileCut = profile(testProfile, params);\n  var pocketCut = pocket(testPocket, params); // let drawings = [test, profile(test)];\n  // drawings = drawings.map(d => mjs.exporter.toSVG(d));\n  //testing if internal outlines will make acceptable pocket paths, appears so\n  //let p2 = pocket(testPocket, params).drawing;\n\n  var t1 = new mjs.models.Oval(20, 20);\n  var t2 = mjs.model.move(new mjs.models.Oval(20, 20), [19, 0]);\n  var test0 = mjs.model.combineUnion(t1, t2); // console.log(\"test0\", test0)\n\n  var test1 = pocket(test0, params); // console.log(test0)\n  // test0 = mjs.model.move(test0, [50, 0]);\n\n  var model = {\n    models: {\n      shapes: {\n        models: {\n          profileSource: testProfile,\n          pocketSource: testPocket //test0\n\n        }\n      },\n      cuts: {\n        models: {\n          profileCut: profileCut.drawing,\n          pocketCut: pocketCut.drawing //test1: test1.drawing\n\n        } //pocketCut2: pocket(p2, params).drawing,\n        // test0,\n        // test1,\n\n      }\n    }\n  };\n  model.models.cuts.layer = \"red\"; // model = mjs.model.originate(model);\n  // model = mjs.model.zero(model);\n\n  model['paths'] = {\n    origin: new mjs.paths.Circle(params.compensatedRadius)\n  };\n  var modelToView = mjs.model.scale(utils.deepcopy(model), 10); //TODO: make drawing easier to see, but this ruins toolpaths\n\n  var viewModel = mjs.exporter.toSVG(modelToView, {\n    useSvgPathOnly: false,\n    strokeWidth: \".5mm\" // layerOptions:{\n    //   cuts: {\n    //     stroke: \"red\"\n    //   }\n    // },\n\n  }); //viewModel = viewModel.concat(Object.values(modelToView.models).map(m => mjs.exporter.toSVG(m)));\n\n  viewModel = [viewModel]; //let p = material_type(this.state.dialogs.material_type, this);\n\n  return React.createElement(\"div\", {\n    className: \"wrapper\",\n    onMouseDown: function onMouseDown(e) {\n      return console.log(\"div target\", e.target.getAttribute(\"data-route\"));\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 253\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"mainEvent\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 257\n    },\n    __self: this\n  }, React.createElement(Workplane, {\n    groups: viewModel,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 258\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"sidebar\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 262\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 263\n    },\n    __self: this\n  }, React.createElement(Heading, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 264\n    },\n    __self: this\n  }, \"Settings\"), React.createElement(Pane, {\n    marginTop: 4,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 265\n    },\n    __self: this\n  }, \" \", React.createElement(MaterialType, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 265\n    },\n    __self: this\n  })), React.createElement(Pane, {\n    marginTop: 4,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 266\n    },\n    __self: this\n  }, \" \", React.createElement(MaterialThickness, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 266\n    },\n    __self: this\n  })), React.createElement(Pane, {\n    marginTop: 4,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 267\n    },\n    __self: this\n  }, \" \", React.createElement(Units, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 267\n    },\n    __self: this\n  })), React.createElement(Pane, {\n    marginTop: 4,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 268\n    },\n    __self: this\n  }, \" \", React.createElement(Origin, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 268\n    },\n    __self: this\n  })), React.createElement(Pane, {\n    marginTop: 4,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 269\n    },\n    __self: this\n  }, \" \", React.createElement(AdvancedOptions, {\n    default: true,\n    params: store.getState().defaultParameters,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 269\n    },\n    __self: this\n  }))), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 272\n    },\n    __self: this\n  }, React.createElement(Heading, {\n    marginTop: 8,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 273\n    },\n    __self: this\n  }, \"Create Toolpaths\"), React.createElement(Button, {\n    marginTop: 4,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 274\n    },\n    __self: this\n  }, \"Profile\"), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 274\n    },\n    __self: this\n  }), React.createElement(Pane, {\n    marginTop: 4,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 275\n    },\n    __self: this\n  }, React.createElement(PocketButton, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 275\n    },\n    __self: this\n  })), React.createElement(Button, {\n    marginTop: 4,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 276\n    },\n    __self: this\n  }, \"Drill\"), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 276\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 279\n    },\n    __self: this\n  }, React.createElement(Heading, {\n    marginTop: 8,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 280\n    },\n    __self: this\n  }, \"Toolpaths\"), React.createElement(Button, {\n    marginTop: 4,\n    onClick: function onClick() {\n      //utils.download(test1.filename, test1.gcode);\n      utils.download(profileCut.filename, profileCut.gcode);\n      utils.download(pocketCut.filename, pocketCut.gcode);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 281\n    },\n    __self: this\n  }, \"download gcode\"), React.createElement(ToolpathList, {\n    state: store.getState(),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 291\n    },\n    __self: this\n  }))), React.createElement(Button, {\n    onClick: function onClick() {\n      return console.log(store.getState());\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 294\n    },\n    __self: this\n  }, \"Log State\"));\n};\n\nexport default app;","map":{"version":3,"sources":["/Users/leomcelroy/Desktop/barkBeetleEverything/barkbeetle_js_real/src/App.js"],"names":["React","Component","PureComponent","utils","mjs","params","s2p","svgson","Workplane","kk","profile","pocket","Button","Heading","Pane","MaterialType","MaterialThickness","Origin","Units","PocketButton","AdvancedOptions","ToolpathList","store","app","test","testProfile","models","testPocket","profileCut","pocketCut","t1","Oval","t2","model","move","test0","combineUnion","test1","shapes","profileSource","pocketSource","cuts","drawing","layer","origin","paths","Circle","compensatedRadius","modelToView","scale","deepcopy","viewModel","exporter","toSVG","useSvgPathOnly","strokeWidth","e","console","log","target","getAttribute","getState","defaultParameters","download","filename","gcode"],"mappings":"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","sourcesContent":["import React, { Component, PureComponent } from 'react';\nimport './App.css';\nimport * as utils from './utils.js';\nimport * as mjs from 'makerjs';\nimport * as params from './parameters.js';\nimport * as s2p from 'shape2path';\nimport * as svgson from 'svgson';\nimport {Workplane} from './Workplane.js'\nimport {kk} from './joints/koshikake.js';\nimport {profile} from './toolpaths/profile.js';\nimport {pocket} from './toolpaths/pocket.js';\n\nimport {Button, Heading, Pane} from 'evergreen-ui';\n//import {replaceWithPath} from './svg_to_makerjs.js';\n\nimport {MaterialType} from './components/MaterialType.js';\nimport {MaterialThickness} from './components/MaterialThickness.js';\nimport {Origin} from './components/Origin.js';\nimport {Units} from './components/Units.js';\nimport {PocketButton} from './components/PocketButton.js';\nimport {AdvancedOptions} from './components/AdvancedOptions.js';\nimport {ToolpathList} from './components/ToolpathList.js';\n\n\nimport store from \"./store.js\"; //this is my global state library\n\n// const store = createStore({\n//   shapes: {},\n//   toolpaths:[],\n//   selected: [],\n//   material: \"wood\",\n//   thickness: 34,\n//   units: \"mm\",\n//   zero: \"bottomleft\",\n// });\n\nconst app = () => {\n  // constructor() {\n  //   super();\n  //\n  //   this.state = {\n  //     shapes: {},\n  //     toolpaths:[],\n  //     selected: [],\n  //     material: \"wood\",\n  //     thickness: 34,\n  //     units: \"mm\",\n  //     zero: \"bottom_left\",\n  //   }\n  // };\n\n  // <div>\n  //   <input\n  //     id=\"myInput\"\n  //     type=\"file\"\n  //     ref={(ref) => this.upload = ref}\n  //     style={{ display: 'none' }}\n  //     onChange={(e) => this.uploadSVG(e)}/>\n  //   <Button\n  //     marginRight={4}\n  //     onClick={(e) => this.upload.click()}>\n  //       upload (SVG, DXF, BBJS, or Makerjs)\n  //   </Button>\n  //   <Button>\n  //     save\n  //   </Button>\n  // </div>\n  // uploadSVG(e) {\n  //   //helper function\n  //   const replaceWithPath = (child) => { //why cant I put this in a different file\n  //     console.log(\"child\", child);\n  //\n  //     if (child.name === \"g\") {\n  //       return child.children.map(grandchild => replaceWithPath(grandchild));\n  //     }\n  //\n  //     if (child.name === \"rectangle\") {\n  //       let x;\n  //       let y;\n  //       let width;\n  //       let height;\n  //       let rx;\n  //       let ry;\n  //\n  //       let temp = s2p.rect({x, y, width, height, rx, ry});\n  //       return mjs.importer.fromSVGPathData(temp);\n  //     }\n  //\n  //     if (child.name === \"circle\") {\n  //       let cx;\n  //       let cy;\n  //       let r;\n  //\n  //       let temp = s2p.rect({cx, cy, r});\n  //       return mjs.importer.fromSVGPathData(temp);\n  //     }\n  //\n  //     if (child.name === \"ellipse\") {\n  //       let cx;\n  //       let cy;\n  //       let rx;\n  //       let ry;\n  //\n  //       let temp = s2p.ellipse({cx, cy, rx, ry});\n  //       return mjs.importer.fromSVGPathData(temp);\n  //     }\n  //\n  //     if (child.name === \"polygon\") {\n  //       let points\n  //\n  //       let temp = s2p.polygon({points});\n  //       return mjs.importer.fromSVGPathData(temp);\n  //     }\n  //\n  //     if (child.name === \"polyline\") {\n  //       let points\n  //\n  //       let temp = s2p.polyline({points});\n  //       return mjs.importer.fromSVGPathData(temp);\n  //     }\n  //\n  //     if (child.name === \"line\") {\n  //       let x1;\n  //       let x2;\n  //       let y1;\n  //       let y2;\n  //\n  //       let temp = s2p.line({x1, x2, y1, y2});\n  //       return mjs.importer.fromSVGPathData(temp);\n  //     }\n  //\n  //     if (child.name === \"path\") {\n  //       let makerjsPath = mjs.importer.fromSVGPathData(child.attributes.d);\n  //       return makerjsPath;\n  //     }\n  //   }\n  //\n  //   //main event\n  //   let files = e.target.files;\n  //   let file = files[0];\n  //\n  //   var reader = new FileReader();\n  //\n  //   reader.onload = (event) => {\n  //     let text = event.target.result;\n  //\n  //     svgson.parse(text).then((json) => {\n  //       let svg = json.children.map(child => {\n  //         return replaceWithPath(child);\n  //       });\n  //\n  //       svg = svg.flat(1); //TODO: what does the argument do again?\n  //\n  //       //TODO: update state to have makerjs models\n  //       console.log(\"svg\", svg);\n  //       let models = {};\n  //\n  //       svg.forEach(shape => {\n  //         models[utils.makeID()] = shape;\n  //       })\n  //\n  //       console.log(\"models\", models);\n  //\n  //       //ultimately I will set state of app\n  //     });\n  //   };\n  //\n  //   reader.readAsText(file);\n  // }\n\n  // updateFromChild(newState) {\n  //   console.log(\"why\")\n  //   if (newState === \"mm\") {\n  //     this.setState({units:\"mm\"});\n  //   } else if (newState === \"in\") {\n  //     this.setState({units:\"in\"});\n  //   }\n  // }\n\n  // shouldComponentUpdate(nextProps, nextState) { //TODO: never needed this before, why now\n  //   return this.props.children !== nextProps.children;\n  // }\n\n\n    //should I put everything in a list or all to one model, there seem to be some issues with origins if I mjs.exporter.toSVG() seperately\n    let test = kk;\n    //test = mjs.model.originate(test);\n    let testProfile = test.models.profile;\n    let testPocket = test.models.pocket;\n    let profileCut = profile(testProfile, params);\n    let pocketCut = pocket(testPocket, params);\n\n    // let drawings = [test, profile(test)];\n    // drawings = drawings.map(d => mjs.exporter.toSVG(d));\n\n    //testing if internal outlines will make acceptable pocket paths, appears so\n    //let p2 = pocket(testPocket, params).drawing;\n    let t1 = new mjs.models.Oval(20,20)\n    let t2 = mjs.model.move(new mjs.models.Oval(20,20), [19,0])\n    let test0 = mjs.model.combineUnion(t1, t2);\n    // console.log(\"test0\", test0)\n    let test1 = pocket(test0, params);\n    // console.log(test0)\n    // test0 = mjs.model.move(test0, [50, 0]);\n\n    let model = {\n      models: {\n        shapes: {\n          models: {\n            profileSource: testProfile,\n            pocketSource: testPocket,\n            //test0\n          }\n        },\n        cuts: {\n          models: {\n            profileCut: profileCut.drawing,\n            pocketCut: pocketCut.drawing,\n            //test1: test1.drawing\n          }\n        }\n        //pocketCut2: pocket(p2, params).drawing,\n        // test0,\n        // test1,\n      }\n    }\n\n    model.models.cuts.layer = \"red\";\n\n    // model = mjs.model.originate(model);\n    // model = mjs.model.zero(model);\n\n    model['paths'] = {\n      origin: new mjs.paths.Circle(params.compensatedRadius)\n    }\n\n    let modelToView = mjs.model.scale(utils.deepcopy(model), 10); //TODO: make drawing easier to see, but this ruins toolpaths\n\n    let viewModel = mjs.exporter.toSVG(modelToView, {\n      useSvgPathOnly:false,\n      strokeWidth:\".5mm\",\n      // layerOptions:{\n      //   cuts: {\n      //     stroke: \"red\"\n      //   }\n      // },\n    });\n    //viewModel = viewModel.concat(Object.values(modelToView.models).map(m => mjs.exporter.toSVG(m)));\n    viewModel = [viewModel];\n\n    //let p = material_type(this.state.dialogs.material_type, this);\n    return (\n      <div\n        className=\"wrapper\"\n        onMouseDown={(e) => console.log(\"div target\", e.target.getAttribute(\"data-route\"))}>\n\n        <div className=\"mainEvent\">\n          <Workplane groups={viewModel}/>\n\n        </div>\n\n        <div className=\"sidebar\">\n          <div>\n            <Heading>Settings</Heading>\n            <Pane marginTop={4}> <MaterialType/></Pane>\n            <Pane marginTop={4}> <MaterialThickness/></Pane>\n            <Pane marginTop={4}> <Units/></Pane>\n            <Pane marginTop={4}> <Origin/></Pane>\n            <Pane marginTop={4}> <AdvancedOptions default={true} params={store.getState().defaultParameters}/></Pane>\n          </div>\n\n          <div>\n            <Heading marginTop={8}>Create Toolpaths</Heading>\n            <Button marginTop={4}>Profile</Button><br/>\n            <Pane marginTop={4}><PocketButton/></Pane>\n            <Button marginTop={4}>Drill</Button><br/>\n          </div>\n\n          <div>\n            <Heading marginTop={8}>Toolpaths</Heading>\n            <Button\n              marginTop={4}\n              onClick={() => {\n                //utils.download(test1.filename, test1.gcode);\n                utils.download(profileCut.filename, profileCut.gcode);\n                utils.download(pocketCut.filename, pocketCut.gcode);\n              }}\n              >\n                download gcode\n            </Button>\n            <ToolpathList state={store.getState()}/>\n          </div>\n        </div>\n        <Button onClick={() => console.log(store.getState())}>Log State</Button>\n      </div>\n    );\n\n}\n\nexport default app;\n"]},"metadata":{},"sourceType":"module"}