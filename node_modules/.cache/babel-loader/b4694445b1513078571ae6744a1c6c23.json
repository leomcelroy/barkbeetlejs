{"ast":null,"code":"import _toConsumableArray from \"/Users/leomcelroy/Desktop/barkbeetle_js/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Users/leomcelroy/Desktop/barkbeetle_js/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/leomcelroy/Desktop/barkbeetle_js/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/leomcelroy/Desktop/barkbeetle_js/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/leomcelroy/Desktop/barkbeetle_js/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/leomcelroy/Desktop/barkbeetle_js/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/leomcelroy/Desktop/barkbeetle_js/src/components/ProfileButton.js\";\nimport React, { Component } from 'react';\nimport { Button, Dialog, TextInputField, SegmentedControl, Heading, Link, Strong, Text } from 'evergreen-ui';\nimport * as utils from '../utils.js';\nimport { profile } from '../toolpaths/profile.js';\nimport store from '../store.js';\n\nvar ProfileButton =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(ProfileButton, _Component);\n\n  function ProfileButton() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, ProfileButton);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ProfileButton)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      isShown: false,\n      cutDepthValid: true,\n      toolDiameterValid: true,\n      toleranceValid: true,\n      jogHeightValid: true,\n      jogRateValid: true,\n      feedRateValid: true,\n      tabThicknessValid: true,\n      offsetOptions: [{\n        label: 'outside',\n        value: \"outside\"\n      }, {\n        label: 'inside',\n        value: \"inside\"\n      }, {\n        label: 'none',\n        value: \"none\"\n      }],\n      tabOptions: [{\n        label: 'true',\n        value: true\n      }, {\n        label: 'false',\n        value: false\n      }],\n      dogboneOptions: [{\n        label: 'true',\n        value: true\n      }, {\n        label: 'false',\n        value: false\n      }],\n      offsetTemp: store.state.defaultParameters.offset,\n      tabsTemp: store.state.defaultParameters.tabs,\n      dogboneTemp: store.state.defaultParameters.dogbone\n    };\n\n    _this.validateSubmit = function () {\n      var valid = _this.state.cutDepthValid && _this.state.toolDiameterValid && _this.state.toleranceValid && _this.state.jogHeightValid && _this.state.jogRateValid && _this.state.feedRateValid;\n\n      if (valid) {\n        var name = utils.helpExtract(\"name\");\n        var cutDepth = Number(utils.helpExtract(\"cutDepth\"));\n        var toolDiameter = Number(utils.helpExtract(\"toolDiameter\"));\n        var tolerance = Number(utils.helpExtract(\"tolerance\"));\n        var jogHeight = Number(utils.helpExtract(\"jogHeight\"));\n        var jogRate = Number(utils.helpExtract(\"jogRate\"));\n        var feedRate = Number(utils.helpExtract(\"feedRate\"));\n        var tabThickness = Number(utils.helpExtract(\"tabThickness\"));\n        if (utils.helpExtract(\"name\") === \"\") name = store.getState().defaultParameters.name;\n        if (utils.helpExtract(\"cutDepth\") === \"\") cutDepth = store.getState().defaultParameters.cutDepth;\n        if (utils.helpExtract(\"toolDiameter\") === \"\") toolDiameter = store.getState().defaultParameters.toolDiameter;\n        if (utils.helpExtract(\"tolerance\") === \"\") tolerance = store.getState().defaultParameters.tolerance;\n        if (utils.helpExtract(\"jogHeight\") === \"\") jogHeight = store.getState().defaultParameters.jogHeight;\n        if (utils.helpExtract(\"jogRate\") === \"\") jogRate = store.getState().defaultParameters.jogRate;\n        if (utils.helpExtract(\"feedRate\") === \"\") feedRate = store.getState().defaultParameters.feedRate;\n        if (utils.helpExtract(\"tabThickness\") === \"\") tabThickness = store.getState().defaultParameters.tabThickness;\n        if (isNaN(cutDepth)) cutDepth = store.getState().defaultParameters.cutDepth;\n        if (isNaN(toolDiameter)) toolDiameter = store.getState().defaultParameters.toolDiameter;\n        if (isNaN(tolerance)) tolerance = store.getState().defaultParameters.tolerance;\n        if (isNaN(jogHeight)) jogHeight = store.getState().defaultParameters.jogHeight;\n        if (isNaN(jogRate)) jogRate = store.getState().defaultParameters.jogRate;\n        if (isNaN(feedRate)) feedRate = store.getState().defaultParameters.feedRate;\n        if (isNaN(tabThickness)) tabThickness = store.getState().defaultParameters.tabThickness;\n        var dogbone = _this.state.dogboneTemp;\n        var tabs = _this.state.tabsTemp;\n        var offset = _this.state.offsetTemp; //derived parameters\n\n        var passDepth = cutDepth / 2;\n        var toolRadius = toolDiameter / 2;\n        var compensatedRadius = toolRadius + tolerance;\n        var tempFloor = Math.ceil(cutDepth / passDepth); //should this be ceiling or floor, I think ceil\n\n        var actualPassDepth = cutDepth / tempFloor;\n        var depthOfPasses = utils.makeSeries(actualPassDepth, actualPassDepth, tempFloor).map(function (n) {\n          return -n;\n        }); //settings will be compiled to a single object here\n\n        var parameters = utils.deepcopy(store.state.defaultParameters);\n        parameters[\"dogbone\"] = dogbone;\n        parameters[\"tabs\"] = tabs;\n        parameters[\"offset\"] = offset;\n        parameters[\"tolerance\"] = tolerance;\n        parameters[\"tabThickness\"] = tabThickness;\n        parameters[\"toolDiameter\"] = toolDiameter;\n        parameters[\"compensatedRadius\"] = compensatedRadius;\n        parameters[\"cutDepth\"] = cutDepth;\n        parameters[\"depthOfPasses\"] = depthOfPasses;\n        parameters[\"feedRate\"] = feedRate;\n        parameters[\"jogHeight\"] = jogHeight;\n        parameters[\"jogRate\"] = jogRate; // parameters[\"insideCutting\"] = insideCutting;\n        //console.log(\"parameters\", parameters);\n\n        _this.setState({\n          isShown: false\n        }); //update app state here\n\n\n        var oldToolpaths = store.state.toolpaths;\n        var newProfiles = store.state.selected.map(function (path) {\n          return {\n            type: \"profile\",\n            name: name,\n            parameters: parameters,\n            sourceGeometryID: path,\n            geometry: profile(store.state.shapes[path], parameters),\n            id: utils.makeID(),\n            cutSelected: true\n          };\n        });\n\n        var newToolpaths = _toConsumableArray(oldToolpaths).concat(_toConsumableArray(newProfiles));\n\n        console.log(\"newToolpaths\", newToolpaths);\n        store.update({\n          toolpaths: newToolpaths\n        });\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(ProfileButton, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131\n        },\n        __self: this\n      }, React.createElement(Dialog, {\n        isShown: this.state.isShown,\n        title: \"Settings for this Profile Cut\",\n        onCloseComplete: function onCloseComplete() {\n          _this2.setState({\n            isShown: false,\n            dogboneTemp: store.getState().defaultParameters.dogbone,\n            tabsTemp: store.getState().defaultParameters.tabs,\n            offsetTemp: store.getState().defaultParameters.offset\n          });\n        },\n        onConfirm: this.validateSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132\n        },\n        __self: this\n      }, React.createElement(TextInputField, {\n        onChange: function onChange(e) {\n          var valid = utils.isNum(e.target.value);\n\n          _this2.setState({\n            cutDepthValid: valid\n          });\n        },\n        isInvalid: !this.state.cutDepthValid,\n        name: \"cutDepth\",\n        description: this.state.cutDepthValid ? \"\" : \"please enter a valid number\",\n        label: \"Depth of Cut\",\n        placeholder: String(store.getState().defaultParameters.cutDepth),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145\n        },\n        __self: this\n      }), React.createElement(TextInputField, {\n        onChange: function onChange(e) {\n          var valid = utils.isNum(e.target.value);\n\n          _this2.setState({\n            toolDiameterValid: valid\n          });\n        },\n        isInvalid: !this.state.toolDiameterValid,\n        name: \"toolDiameter\",\n        description: this.state.toolDiameterValid ? \"\" : \"please enter a valid number\",\n        label: \"Tool Diameter\",\n        placeholder: String(store.getState().defaultParameters.toolDiameter),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156\n        },\n        __self: this\n      }), React.createElement(TextInputField, {\n        onChange: function onChange(e) {\n          var valid = utils.isNum(e.target.value);\n\n          _this2.setState({\n            feedRateValid: valid\n          });\n        },\n        isInvalid: !this.state.feedRateValid,\n        name: \"feedRate\",\n        description: this.state.feedRateValid ? \"\" : \"please enter a valid number\",\n        label: \"Feed Rate\",\n        placeholder: String(store.getState().defaultParameters.feedRate),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 167\n        },\n        __self: this\n      }), React.createElement(TextInputField, {\n        onChange: function onChange(e) {\n          var valid = utils.isNum(e.target.value);\n\n          _this2.setState({\n            toleranceValid: valid\n          });\n        },\n        isInvalid: !this.state.toleranceValid,\n        name: \"tolerance\",\n        description: this.state.toleranceValid ? \"\" : \"please enter a valid number\",\n        label: \"Tolerance\",\n        placeholder: String(store.getState().defaultParameters.tolerance),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 178\n        },\n        __self: this\n      }), React.createElement(TextInputField, {\n        onChange: function onChange(e) {\n          var valid = utils.isNum(e.target.value);\n\n          _this2.setState({\n            jogRateValid: valid\n          });\n        },\n        isInvalid: !this.state.jogRateValid,\n        name: \"jogRate\",\n        description: this.state.jogRateValid ? \"\" : \"please enter a valid number\",\n        label: \"Jog Rate\",\n        placeholder: String(store.getState().defaultParameters.jogRate),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 189\n        },\n        __self: this\n      }), React.createElement(TextInputField, {\n        onChange: function onChange(e) {\n          var valid = utils.isNum(e.target.value);\n\n          _this2.setState({\n            jogHeightValid: valid\n          });\n        },\n        isInvalid: !this.state.jogHeightValid,\n        name: \"jogHeight\",\n        description: this.state.jogHeightValid ? \"\" : \"please enter a valid number\",\n        label: \"Jog Height\",\n        placeholder: String(store.getState().defaultParameters.jogHeight),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 200\n        },\n        __self: this\n      }), React.createElement(Heading, {\n        marginTop: 8,\n        size: 400,\n        color: \"rgba(67, 90, 111, .91)\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 211\n        },\n        __self: this\n      }, \"Offset Direction\"), React.createElement(SegmentedControl, {\n        marginTop: 4,\n        options: this.state.offsetOptions,\n        value: this.state.offsetTemp,\n        onChange: function onChange(value) {\n          var offsetTemp = value;\n\n          _this2.setState({\n            offsetTemp: offsetTemp\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 212\n        },\n        __self: this\n      }), React.createElement(Heading, {\n        marginTop: 20,\n        size: 400,\n        color: \"rgba(67, 90, 111, .91)\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 222\n        },\n        __self: this\n      }, \"Auto Tabs\"), React.createElement(SegmentedControl, {\n        marginTop: 4,\n        options: this.state.tabOptions,\n        value: this.state.tabsTemp,\n        onChange: function onChange(value) {\n          var tabsTemp = value;\n\n          _this2.setState({\n            tabsTemp: tabsTemp\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 223\n        },\n        __self: this\n      }), React.createElement(TextInputField, {\n        marginTop: 20,\n        onChange: function onChange(e) {\n          var valid = utils.isNum(e.target.value);\n\n          _this2.setState({\n            tabThicknessValid: valid\n          });\n        },\n        isInvalid: !this.state.tabThicknessValid,\n        name: \"tabThickness\",\n        description: this.state.tabThicknessValid ? \"\" : \"please enter a valid number\",\n        label: \"Tab Thickness\",\n        placeholder: String(store.getState().defaultParameters.tabThickness),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 233\n        },\n        __self: this\n      }), React.createElement(Heading, {\n        marginTop: 20,\n        size: 400,\n        color: \"rgba(67, 90, 111, .91)\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 245\n        },\n        __self: this\n      }, \"Auto Dogbone\"), React.createElement(SegmentedControl, {\n        marginTop: 4,\n        options: this.state.dogboneOptions,\n        value: this.state.dogboneTemp,\n        onChange: function onChange(value) {\n          var dogboneTemp = value;\n\n          _this2.setState({\n            dogboneTemp: dogboneTemp\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 246\n        },\n        __self: this\n      }), React.createElement(TextInputField, {\n        marginTop: 20,\n        onChange: function onChange(e) {\n          var valid = e.target.value !== \"\";\n\n          _this2.setState({\n            nameValid: valid\n          });\n        },\n        isInvalid: !this.state.nameValid,\n        name: \"name\",\n        description: this.state.nameValid ? \"\" : \"please enter something\",\n        label: \"Name for this Profile\",\n        placeholder: String(store.getState().defaultParameters.name),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 256\n        },\n        __self: this\n      })), React.createElement(Button, {\n        disabled: this.props.disabled,\n        onClick: function onClick() {\n          return _this2.setState({\n            isShown: true\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 269\n        },\n        __self: this\n      }, \"Profile\"));\n    }\n  }]);\n\n  return ProfileButton;\n}(Component);\n\nexport { ProfileButton };","map":{"version":3,"sources":["/Users/leomcelroy/Desktop/barkbeetle_js/src/components/ProfileButton.js"],"names":["React","Component","Button","Dialog","TextInputField","SegmentedControl","Heading","Link","Strong","Text","utils","profile","store","ProfileButton","state","isShown","cutDepthValid","toolDiameterValid","toleranceValid","jogHeightValid","jogRateValid","feedRateValid","tabThicknessValid","offsetOptions","label","value","tabOptions","dogboneOptions","offsetTemp","defaultParameters","offset","tabsTemp","tabs","dogboneTemp","dogbone","validateSubmit","valid","name","helpExtract","cutDepth","Number","toolDiameter","tolerance","jogHeight","jogRate","feedRate","tabThickness","getState","isNaN","passDepth","toolRadius","compensatedRadius","tempFloor","Math","ceil","actualPassDepth","depthOfPasses","makeSeries","map","n","parameters","deepcopy","setState","oldToolpaths","toolpaths","newProfiles","selected","path","type","sourceGeometryID","geometry","shapes","id","makeID","cutSelected","newToolpaths","console","log","update","e","isNum","target","String","nameValid","props","disabled"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport {Button, Dialog, TextInputField, SegmentedControl, Heading, Link, Strong, Text} from 'evergreen-ui';\nimport * as utils from '../utils.js';\nimport {profile} from '../toolpaths/profile.js';\n\nimport store from '../store.js';\n\nclass ProfileButton extends Component {\n\n  state = {\n    isShown: false,\n    cutDepthValid: true,\n    toolDiameterValid: true,\n    toleranceValid: true,\n    jogHeightValid: true,\n    jogRateValid: true,\n    feedRateValid: true,\n    tabThicknessValid: true,\n    offsetOptions: [\n      { label: 'outside', value: \"outside\" },\n      { label: 'inside', value: \"inside\" },\n      { label: 'none', value: \"none\"}\n    ],\n    tabOptions: [\n      { label: 'true', value: true },\n      { label: 'false', value: false },\n    ],\n    dogboneOptions: [\n      { label: 'true', value: true },\n      { label: 'false', value: false },\n    ],\n    offsetTemp: store.state.defaultParameters.offset,\n    tabsTemp: store.state.defaultParameters.tabs,\n    dogboneTemp: store.state.defaultParameters.dogbone,\n  }\n\n  validateSubmit = () => {\n\n    let valid = this.state.cutDepthValid && this.state.toolDiameterValid && this.state.toleranceValid &&\n                this.state.jogHeightValid && this.state.jogRateValid && this.state.feedRateValid;\n    if (valid) {\n\n      let name = utils.helpExtract(\"name\");\n      let cutDepth = Number(utils.helpExtract(\"cutDepth\"));\n      let toolDiameter = Number(utils.helpExtract(\"toolDiameter\"));\n      let tolerance = Number(utils.helpExtract(\"tolerance\"));\n      let jogHeight = Number(utils.helpExtract(\"jogHeight\"));\n      let jogRate = Number(utils.helpExtract(\"jogRate\"));\n      let feedRate = Number(utils.helpExtract(\"feedRate\"));\n      let tabThickness = Number(utils.helpExtract(\"tabThickness\"));\n\n      if (utils.helpExtract(\"name\") === \"\") name = store.getState().defaultParameters.name;\n      if (utils.helpExtract(\"cutDepth\") === \"\") cutDepth = store.getState().defaultParameters.cutDepth;\n      if (utils.helpExtract(\"toolDiameter\") === \"\") toolDiameter = store.getState().defaultParameters.toolDiameter;\n      if (utils.helpExtract(\"tolerance\") === \"\") tolerance = store.getState().defaultParameters.tolerance;\n      if (utils.helpExtract(\"jogHeight\") === \"\") jogHeight = store.getState().defaultParameters.jogHeight;\n      if (utils.helpExtract(\"jogRate\") === \"\") jogRate = store.getState().defaultParameters.jogRate;\n      if (utils.helpExtract(\"feedRate\") === \"\") feedRate = store.getState().defaultParameters.feedRate;\n      if (utils.helpExtract(\"tabThickness\") === \"\") tabThickness = store.getState().defaultParameters.tabThickness;\n\n      if (isNaN(cutDepth)) cutDepth = store.getState().defaultParameters.cutDepth;\n      if (isNaN(toolDiameter)) toolDiameter = store.getState().defaultParameters.toolDiameter;\n      if (isNaN(tolerance)) tolerance = store.getState().defaultParameters.tolerance;\n      if (isNaN(jogHeight)) jogHeight = store.getState().defaultParameters.jogHeight;\n      if (isNaN(jogRate)) jogRate = store.getState().defaultParameters.jogRate;\n      if (isNaN(feedRate)) feedRate = store.getState().defaultParameters.feedRate;\n      if (isNaN(tabThickness)) tabThickness = store.getState().defaultParameters.tabThickness;\n\n      let dogbone = this.state.dogboneTemp;\n      let tabs = this.state.tabsTemp;\n      let offset = this.state.offsetTemp;\n\n      //derived parameters\n      let passDepth = cutDepth/2;\n      let toolRadius = toolDiameter/2;\n      let compensatedRadius = toolRadius + tolerance;\n      let tempFloor = Math.ceil(cutDepth/passDepth); //should this be ceiling or floor, I think ceil\n      let actualPassDepth = cutDepth/tempFloor;\n      let depthOfPasses = utils.makeSeries(actualPassDepth, actualPassDepth, tempFloor).map(n => -n);\n\n      //settings will be compiled to a single object here\n      let parameters = utils.deepcopy(store.state.defaultParameters);\n\n      parameters[\"dogbone\"] = dogbone;\n      parameters[\"tabs\"] = tabs;\n      parameters[\"offset\"] = offset;\n      parameters[\"tolerance\"] = tolerance;\n      parameters[\"tabThickness\"] = tabThickness;\n      parameters[\"toolDiameter\"] = toolDiameter;\n      parameters[\"compensatedRadius\"] = compensatedRadius;\n      parameters[\"cutDepth\"] = cutDepth;\n      parameters[\"depthOfPasses\"] = depthOfPasses;\n      parameters[\"feedRate\"] = feedRate;\n      parameters[\"jogHeight\"] = jogHeight;\n      parameters[\"jogRate\"] = jogRate;\n      // parameters[\"insideCutting\"] = insideCutting;\n\n      //console.log(\"parameters\", parameters);\n\n      this.setState({\n        isShown:false,\n      });\n\n      //update app state here\n      let oldToolpaths = store.state.toolpaths;\n      let newProfiles = store.state.selected.map(path => {\n\n        return {\n          type: \"profile\",\n          name: name,\n          parameters: parameters,\n          sourceGeometryID: path,\n          geometry: profile(store.state.shapes[path], parameters),\n          id: utils.makeID(),\n          cutSelected: true,\n        }\n      })\n\n      let newToolpaths = [...oldToolpaths, ...newProfiles];\n\n      console.log(\"newToolpaths\", newToolpaths);\n\n      store.update({toolpaths:newToolpaths});\n\n    }\n  }\n\nrender() {\n\n  return (\n    <div>\n      <Dialog\n        isShown={this.state.isShown}\n        title={\"Settings for this Profile Cut\"}\n        onCloseComplete={() => {\n          this.setState({\n            isShown:false,\n            dogboneTemp: store.getState().defaultParameters.dogbone,\n            tabsTemp: store.getState().defaultParameters.tabs,\n            offsetTemp: store.getState().defaultParameters.offset,\n          })\n        }}\n        onConfirm={this.validateSubmit}>\n\n        <TextInputField\n          onChange={e => {\n            let valid = utils.isNum(e.target.value);\n            this.setState({cutDepthValid:valid})\n          }}\n          isInvalid={!this.state.cutDepthValid}\n          name=\"cutDepth\"\n          description={(this.state.cutDepthValid) ? \"\" : \"please enter a valid number\"}\n          label=\"Depth of Cut\"\n          placeholder={String(store.getState().defaultParameters.cutDepth)}/>\n\n        <TextInputField\n          onChange={e => {\n            let valid = utils.isNum(e.target.value);\n            this.setState({toolDiameterValid:valid})\n          }}\n          isInvalid={!this.state.toolDiameterValid}\n          name=\"toolDiameter\"\n          description={(this.state.toolDiameterValid) ? \"\" : \"please enter a valid number\"}\n          label=\"Tool Diameter\"\n          placeholder={String(store.getState().defaultParameters.toolDiameter)}/>\n\n          <TextInputField\n            onChange={e => {\n              let valid = utils.isNum(e.target.value);\n              this.setState({feedRateValid:valid})\n            }}\n            isInvalid={!this.state.feedRateValid}\n            name=\"feedRate\"\n            description={(this.state.feedRateValid) ? \"\" : \"please enter a valid number\"}\n            label=\"Feed Rate\"\n            placeholder={String(store.getState().defaultParameters.feedRate)}/>\n\n            <TextInputField\n              onChange={e => {\n                let valid = utils.isNum(e.target.value);\n                this.setState({toleranceValid:valid})\n              }}\n              isInvalid={!this.state.toleranceValid}\n              name=\"tolerance\"\n              description={(this.state.toleranceValid) ? \"\" : \"please enter a valid number\"}\n              label=\"Tolerance\"\n              placeholder={String(store.getState().defaultParameters.tolerance)}/>\n\n          <TextInputField\n            onChange={e => {\n              let valid = utils.isNum(e.target.value);\n              this.setState({jogRateValid:valid})\n            }}\n            isInvalid={!this.state.jogRateValid}\n            name=\"jogRate\"\n            description={(this.state.jogRateValid) ? \"\" : \"please enter a valid number\"}\n            label=\"Jog Rate\"\n            placeholder={String(store.getState().defaultParameters.jogRate)}/>\n\n            <TextInputField\n              onChange={e => {\n                let valid = utils.isNum(e.target.value);\n                this.setState({jogHeightValid:valid})\n              }}\n              isInvalid={!this.state.jogHeightValid}\n              name=\"jogHeight\"\n              description={(this.state.jogHeightValid) ? \"\" : \"please enter a valid number\"}\n              label=\"Jog Height\"\n              placeholder={String(store.getState().defaultParameters.jogHeight)}/>\n\n            <Heading marginTop={8} size={400} color={\"rgba(67, 90, 111, .91)\"}>Offset Direction</Heading>\n            <SegmentedControl\n              marginTop={4}\n              options={this.state.offsetOptions}\n              value={this.state.offsetTemp}\n              onChange={value => {\n                let offsetTemp = value;\n                this.setState({ offsetTemp });\n              }}\n            />\n\n            <Heading marginTop={20} size={400} color={\"rgba(67, 90, 111, .91)\"}>Auto Tabs</Heading>\n            <SegmentedControl\n              marginTop={4}\n              options={this.state.tabOptions}\n              value={this.state.tabsTemp}\n              onChange={value => {\n                let tabsTemp = value;\n                this.setState({ tabsTemp });\n              }}\n            />\n\n            <TextInputField\n              marginTop={20}\n              onChange={e => {\n                let valid = utils.isNum(e.target.value);\n                this.setState({tabThicknessValid:valid})\n              }}\n              isInvalid={!this.state.tabThicknessValid}\n              name=\"tabThickness\"\n              description={(this.state.tabThicknessValid) ? \"\" : \"please enter a valid number\"}\n              label=\"Tab Thickness\"\n              placeholder={String(store.getState().defaultParameters.tabThickness)}/>\n\n            <Heading marginTop={20} size={400} color={\"rgba(67, 90, 111, .91)\"}>Auto Dogbone</Heading>\n            <SegmentedControl\n              marginTop={4}\n              options={this.state.dogboneOptions}\n              value={this.state.dogboneTemp}\n              onChange={value => {\n                let dogboneTemp = value;\n                this.setState({ dogboneTemp });\n              }}\n            />\n\n            <TextInputField\n              marginTop={20}\n              onChange={e => {\n                let valid = e.target.value !== \"\";\n                this.setState({nameValid:valid})\n              }}\n              isInvalid={!this.state.nameValid}\n              name=\"name\"\n              description={(this.state.nameValid) ? \"\" : \"please enter something\"}\n              label=\"Name for this Profile\"\n              placeholder={String(store.getState().defaultParameters.name)}/>\n\n      </Dialog>\n      <Button disabled={this.props.disabled} onClick={() => this.setState({isShown:true})}>Profile</Button>\n    </div>\n  );\n}\n}\n\nexport {ProfileButton};\n"]},"metadata":{},"sourceType":"module"}