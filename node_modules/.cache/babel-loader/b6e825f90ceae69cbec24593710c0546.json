{"ast":null,"code":"/*\n * Copyright 2015 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the terms of the LICENSE file distributed with this project.\n */\nimport * as tslib_1 from \"tslib\";\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport { AbstractPureComponent } from \"../../common/abstractPureComponent\";\nimport * as Classes from \"../../common/classes\";\nimport { SPINNER_WARN_CLASSES_SIZE } from \"../../common/errors\";\nimport { DISPLAYNAME_PREFIX } from \"../../common/props\";\nimport { clamp } from \"../../common/utils\"; // see http://stackoverflow.com/a/18473154/3124288 for calculating arc path\n\nvar R = 45;\nvar SPINNER_TRACK = \"M 50,50 m 0,-\" + R + \" a \" + R + \",\" + R + \" 0 1 1 0,\" + R * 2 + \" a \" + R + \",\" + R + \" 0 1 1 0,-\" + R * 2; // unitless total length of SVG path, to which stroke-dash* properties are relative.\n// https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/pathLength\n// this value is the result of `<path d={SPINNER_TRACK} />.getTotalLength()` and works in all browsers:\n\nvar PATH_LENGTH = 280;\nvar MIN_SIZE = 10;\nvar STROKE_WIDTH = 4;\nvar MIN_STROKE_WIDTH = 16;\n\nvar Spinner =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(Spinner, _super);\n\n  function Spinner() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  Spinner.prototype.componentDidUpdate = function (prevProps) {\n    if (prevProps.value !== this.props.value) {\n      // IE/Edge: re-render after changing value to force SVG update\n      this.forceUpdate();\n    }\n  };\n\n  Spinner.prototype.render = function () {\n    var _a = this.props,\n        className = _a.className,\n        intent = _a.intent,\n        value = _a.value,\n        _b = _a.tagName,\n        TagName = _b === void 0 ? \"div\" : _b;\n    var size = this.getSize();\n    var classes = classNames(Classes.SPINNER, Classes.intentClass(intent), (_c = {}, _c[Classes.SPINNER_NO_SPIN] = value != null, _c), className); // keep spinner track width consistent at all sizes (down to about 10px).\n\n    var strokeWidth = Math.min(MIN_STROKE_WIDTH, STROKE_WIDTH * Spinner.SIZE_LARGE / size);\n    var strokeOffset = PATH_LENGTH - PATH_LENGTH * (value == null ? 0.25 : clamp(value, 0, 1)); // multiple DOM elements around SVG are necessary to properly isolate animation:\n    // - SVG elements in IE do not support anim/trans so they must be set on a parent HTML element.\n    // - SPINNER_ANIMATION isolates svg from parent display and is always centered inside root element.\n\n    return React.createElement(TagName, {\n      className: classes\n    }, React.createElement(TagName, {\n      className: Classes.SPINNER_ANIMATION\n    }, React.createElement(\"svg\", {\n      width: size,\n      height: size,\n      strokeWidth: strokeWidth.toFixed(2),\n      viewBox: this.getViewBox(strokeWidth)\n    }, React.createElement(\"path\", {\n      className: Classes.SPINNER_TRACK,\n      d: SPINNER_TRACK\n    }), React.createElement(\"path\", {\n      className: Classes.SPINNER_HEAD,\n      d: SPINNER_TRACK,\n      pathLength: PATH_LENGTH,\n      strokeDasharray: PATH_LENGTH + \" \" + PATH_LENGTH,\n      strokeDashoffset: strokeOffset\n    }))));\n\n    var _c;\n  };\n\n  Spinner.prototype.validateProps = function (_a) {\n    var _b = _a.className,\n        className = _b === void 0 ? \"\" : _b,\n        size = _a.size;\n\n    if (size != null && (className.indexOf(Classes.SMALL) >= 0 || className.indexOf(Classes.LARGE) >= 0)) {\n      console.warn(SPINNER_WARN_CLASSES_SIZE);\n    }\n  };\n  /**\n   * Resolve size to a pixel value.\n   * Size can be set by className, props, default, or minimum constant.\n   */\n\n\n  Spinner.prototype.getSize = function () {\n    var _a = this.props,\n        _b = _a.className,\n        className = _b === void 0 ? \"\" : _b,\n        size = _a.size;\n\n    if (size == null) {\n      // allow Classes constants to determine default size.\n      if (className.indexOf(Classes.SMALL) >= 0) {\n        return Spinner.SIZE_SMALL;\n      } else if (className.indexOf(Classes.LARGE) >= 0) {\n        return Spinner.SIZE_LARGE;\n      }\n\n      return Spinner.SIZE_STANDARD;\n    }\n\n    return Math.max(MIN_SIZE, size);\n  };\n  /** Compute viewbox such that stroked track sits exactly at edge of image frame. */\n\n\n  Spinner.prototype.getViewBox = function (strokeWidth) {\n    var radius = R + strokeWidth / 2;\n    var viewBoxX = (50 - radius).toFixed(2);\n    var viewBoxWidth = (radius * 2).toFixed(2);\n    return viewBoxX + \" \" + viewBoxX + \" \" + viewBoxWidth + \" \" + viewBoxWidth;\n  };\n\n  Spinner.displayName = DISPLAYNAME_PREFIX + \".Spinner\";\n  Spinner.SIZE_SMALL = 24;\n  Spinner.SIZE_STANDARD = 50;\n  Spinner.SIZE_LARGE = 100;\n  return Spinner;\n}(AbstractPureComponent);\n\nexport { Spinner };","map":null,"metadata":{},"sourceType":"module"}