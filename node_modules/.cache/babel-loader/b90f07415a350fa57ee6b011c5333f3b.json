{"ast":null,"code":"'use strict';\n\nvar React = require('react');\n\nvar classNames = require('classnames');\n\nvar Page = React.createClass({\n  displayName: 'Page',\n  propTypes: {\n    children: React.PropTypes.node,\n    label: React.PropTypes.string,\n    onSelect: React.PropTypes.func,\n    page: React.PropTypes.number,\n    selected: React.PropTypes.bool\n  },\n  onSelect: function onSelect() {\n    this.props.onSelect(this.props.page);\n  },\n  render: function render() {\n    var _props = this.props;\n    var children = _props.children;\n    var selected = _props.selected;\n    var label = _props.label;\n    var className = classNames('Pagination__list__item', {\n      'is-selected': selected\n    });\n    return React.createElement('button', {\n      className: className,\n      onClick: this.onSelect\n    }, children);\n  }\n});\nmodule.exports = React.createClass({\n  displayName: 'Pagination',\n  propTypes: {\n    className: React.PropTypes.string,\n    currentPage: React.PropTypes.number.isRequired,\n    limit: React.PropTypes.number,\n    onPageSelect: React.PropTypes.func,\n    pageSize: React.PropTypes.number.isRequired,\n    plural: React.PropTypes.string,\n    singular: React.PropTypes.string,\n    style: React.PropTypes.object,\n    total: React.PropTypes.number.isRequired\n  },\n  renderCount: function renderCount() {\n    var count = '';\n    var _props2 = this.props;\n    var currentPage = _props2.currentPage;\n    var pageSize = _props2.pageSize;\n    var plural = _props2.plural;\n    var singular = _props2.singular;\n    var total = _props2.total;\n\n    if (!total) {\n      count = 'No ' + (plural || 'records');\n    } else if (total > pageSize) {\n      var start = pageSize * (currentPage - 1) + 1;\n      var end = Math.min(start + pageSize - 1, total);\n      count = 'Showing ' + start + ' to ' + end + ' of ' + total;\n    } else {\n      count = 'Showing ' + total;\n\n      if (total > 1 && plural) {\n        count += ' ' + plural;\n      } else if (total === 1 && singular) {\n        count += ' ' + singular;\n      }\n    }\n\n    return React.createElement('div', {\n      className: 'Pagination__count'\n    }, count);\n  },\n  onPageSelect: function onPageSelect(page) {\n    if (this.props.onPageSelect) {\n      this.props.onPageSelect(page);\n    }\n  },\n  renderPages: function renderPages() {\n    if (this.props.total <= this.props.pageSize) return null;\n    var pages = [];\n    var _props3 = this.props;\n    var currentPage = _props3.currentPage;\n    var pageSize = _props3.pageSize;\n    var total = _props3.total;\n    var limit = _props3.limit;\n    var totalPages = Math.ceil(total / pageSize);\n    var minPage = 1;\n    var maxPage = totalPages;\n\n    if (limit && limit < totalPages) {\n      var rightLimit = Math.floor(limit / 2);\n      var leftLimit = rightLimit + limit % 2 - 1;\n      minPage = currentPage - leftLimit;\n      maxPage = currentPage + rightLimit;\n\n      if (minPage < 1) {\n        maxPage = limit;\n        minPage = 1;\n      }\n\n      if (maxPage > totalPages) {\n        minPage = totalPages - limit + 1;\n        maxPage = totalPages;\n      }\n    }\n\n    if (minPage > 1) {\n      pages.push(React.createElement(Page, {\n        key: 'page_start',\n        onSelect: this.onPageSelect,\n        page: 1\n      }, '...'));\n    }\n\n    for (var page = minPage; page <= maxPage; page++) {\n      var selected = page === currentPage;\n      /* eslint-disable no-loop-func */\n\n      pages.push(React.createElement(Page, {\n        key: 'page_' + page,\n        selected: selected,\n        onSelect: this.onPageSelect,\n        page: page\n      }, page));\n      /* eslint-enable */\n    }\n\n    if (maxPage < totalPages) {\n      pages.push(React.createElement(Page, {\n        key: 'page_end',\n        onSelect: this.onPageSelect,\n        page: totalPages\n      }, '...'));\n    }\n\n    return React.createElement('div', {\n      className: 'Pagination__list'\n    }, pages);\n  },\n  render: function render() {\n    var className = classNames('Pagination', this.props.className);\n    return React.createElement('div', {\n      className: className,\n      style: this.props.style\n    }, this.renderCount(), this.renderPages());\n  }\n});","map":null,"metadata":{},"sourceType":"script"}