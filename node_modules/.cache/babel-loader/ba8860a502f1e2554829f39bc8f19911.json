{"ast":null,"code":"(function () {\n  \"use strict\";\n\n  var utils = require(\"./utils.js\");\n  /**\n   * Poly Bezier\n   * @param {[type]} curves [description]\n   */\n\n\n  var PolyBezier = function PolyBezier(curves) {\n    this.curves = [];\n    this._3d = false;\n\n    if (!!curves) {\n      this.curves = curves;\n      this._3d = this.curves[0]._3d;\n    }\n  };\n\n  PolyBezier.prototype = {\n    valueOf: function valueOf() {\n      return this.toString();\n    },\n    toString: function toString() {\n      return \"[\" + this.curves.map(function (curve) {\n        return utils.pointsToString(curve.points);\n      }).join(\", \") + \"]\";\n    },\n    addCurve: function addCurve(curve) {\n      this.curves.push(curve);\n      this._3d = this._3d || curve._3d;\n    },\n    length: function length() {\n      return this.curves.map(function (v) {\n        return v.length();\n      }).reduce(function (a, b) {\n        return a + b;\n      });\n    },\n    curve: function curve(idx) {\n      return this.curves[idx];\n    },\n    bbox: function bbox() {\n      var c = this.curves;\n      var bbox = c[0].bbox();\n\n      for (var i = 1; i < c.length; i++) {\n        utils.expandbox(bbox, c[i].bbox());\n      }\n\n      return bbox;\n    },\n    offset: function offset(d) {\n      var offset = [];\n      this.curves.forEach(function (v) {\n        offset = offset.concat(v.offset(d));\n      });\n      return new PolyBezier(offset);\n    }\n  };\n  module.exports = PolyBezier;\n})();","map":null,"metadata":{},"sourceType":"script"}