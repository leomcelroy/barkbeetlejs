{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends2 = require('babel-runtime/helpers/extends');\n\nvar _extends3 = _interopRequireDefault(_extends2);\n\nvar _defineProperty2 = require('babel-runtime/helpers/defineProperty');\n\nvar _defineProperty3 = _interopRequireDefault(_defineProperty2);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _react = require('react');\n\nvar React = _interopRequireWildcard(_react);\n\nvar _libs = require('../../libs');\n\nvar _locale = require('../locale');\n\nvar _locale2 = _interopRequireDefault(_locale);\n\nvar _TableLayout = require('./TableLayout');\n\nvar _TableLayout2 = _interopRequireDefault(_TableLayout);\n\nvar _normalizeColumns = require('./normalizeColumns');\n\nvar _normalizeColumns2 = _interopRequireDefault(_normalizeColumns);\n\nvar _utils = require('./utils');\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n      }\n    }\n\n    newObj.default = obj;\n    return newObj;\n  }\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar tableIDSeed = 1;\n\nfunction filterData(data, columns) {\n  return columns.reduce(function (preData, column) {\n    var filterable = column.filterable,\n        filterMultiple = column.filterMultiple,\n        filteredValue = column.filteredValue,\n        filterMethod = column.filterMethod;\n\n    if (filterable) {\n      if (filterMultiple && Array.isArray(filteredValue) && filteredValue.length) {\n        return preData.filter(function (_data) {\n          return filteredValue.some(function (value) {\n            return filterMethod(value, _data);\n          });\n        });\n      } else if (filteredValue) {\n        return preData.filter(function (_data) {\n          return filterMethod(filteredValue, _data);\n        });\n      }\n    }\n\n    return preData;\n  }, data);\n}\n\nvar TableStore = function (_Component) {\n  (0, _inherits3.default)(TableStore, _Component);\n  (0, _createClass3.default)(TableStore, [{\n    key: 'getChildContext',\n    value: function getChildContext() {\n      return {\n        store: this\n      };\n    }\n  }]);\n\n  function TableStore(props) {\n    (0, _classCallCheck3.default)(this, TableStore);\n\n    var _this = (0, _possibleConstructorReturn3.default)(this, (TableStore.__proto__ || Object.getPrototypeOf(TableStore)).call(this, props));\n\n    _this.state = {\n      fixedColumns: null,\n      // left fixed columns in _columns\n      rightFixedColumns: null,\n      // right fixed columns in _columns\n      columnRows: null,\n      // columns to render header\n      columns: null,\n      // contain only leaf column\n      isComplex: null,\n      // whether some column is fixed\n      expandingRows: [],\n      hoverRow: null,\n      currentRow: null,\n      selectable: null,\n      selectedRows: null,\n      sortOrder: null,\n      sortColumn: null\n    };\n    ['toggleRowSelection', 'toggleAllSelection', 'clearSelection', 'setCurrentRow'].forEach(function (fn) {\n      _this[fn] = _this[fn].bind(_this);\n    });\n    _this._isMounted = false;\n    return _this;\n  }\n\n  (0, _createClass3.default)(TableStore, [{\n    key: 'componentWillMount',\n    value: function componentWillMount() {\n      this.updateColumns((0, _utils.getColumns)(this.props));\n      this.updateData(this.props);\n      this._isMounted = true;\n    }\n  }, {\n    key: 'componentWillReceiveProps',\n    value: function componentWillReceiveProps(nextProps) {\n      var data = this.props.data;\n      var nextColumns = (0, _utils.getColumns)(nextProps);\n\n      if ((0, _utils.getColumns)(this.props) !== nextColumns) {\n        this.updateColumns(nextColumns);\n      }\n\n      if (JSON.stringify(data) !== JSON.stringify(nextProps.data)) {\n        this.updateData(nextProps);\n      }\n    }\n  }, {\n    key: 'updateColumns',\n    // shouldComponentUpdate(nextProps) {\n    //   const propsKeys = Object.keys(this.props);\n    //   const nextPropsKeys = Object.keys(nextProps);\n    //\n    //   if (propsKeys.length !== nextPropsKeys.length) {\n    //     return true;\n    //   }\n    //   for (const key of propsKeys) {\n    //     if (this.props[key] !== nextProps[key]) {\n    //       return true;\n    //     }\n    //   }\n    //   return false;\n    // }\n    value: function updateColumns(columns) {\n      var _columns = (0, _normalizeColumns2.default)(columns, tableIDSeed++);\n\n      var fixedColumns = _columns.filter(function (column) {\n        return column.fixed === true || column.fixed === 'left';\n      });\n\n      var rightFixedColumns = _columns.filter(function (column) {\n        return column.fixed === 'right';\n      });\n\n      var selectable = void 0;\n\n      if (_columns[0] && _columns[0].type === 'selection') {\n        selectable = _columns[0].selectable;\n\n        if (fixedColumns.length && !_columns[0].fixed) {\n          _columns[0].fixed = true;\n          fixedColumns.unshift(_columns[0]);\n        }\n      }\n\n      _columns = [].concat(fixedColumns, _columns.filter(function (column) {\n        return !column.fixed;\n      }), rightFixedColumns);\n      this.setState(Object.assign(this.state || {}, {\n        fixedColumns: fixedColumns,\n        rightFixedColumns: rightFixedColumns,\n        columnRows: (0, _utils.convertToRows)(_columns),\n        columns: (0, _utils.getLeafColumns)(_columns),\n        isComplex: fixedColumns.length > 0 || rightFixedColumns.length > 0,\n        selectable: selectable\n      }));\n    }\n  }, {\n    key: 'updateData',\n    value: function updateData(props) {\n      var _props$data = props.data,\n          data = _props$data === undefined ? [] : _props$data,\n          defaultExpandAll = props.defaultExpandAll,\n          defaultSort = props.defaultSort;\n      var columns = this.state.columns;\n      var filteredData = filterData(data.slice(), columns);\n      var _state = this.state,\n          hoverRow = _state.hoverRow,\n          currentRow = _state.currentRow,\n          selectedRows = _state.selectedRows,\n          expandingRows = _state.expandingRows;\n      hoverRow = hoverRow && data.includes(hoverRow) ? hoverRow : null;\n      currentRow = currentRow && data.includes(currentRow) ? currentRow : null;\n\n      if (this._isMounted && data !== this.props.data && !columns[0].reserveSelection) {\n        selectedRows = [];\n      } else {\n        selectedRows = selectedRows && selectedRows.filter(function (row) {\n          return data.includes(row);\n        }) || [];\n      }\n\n      if (!this._isMounted) {\n        expandingRows = defaultExpandAll ? data.slice() : [];\n      } else {\n        expandingRows = expandingRows.filter(function (row) {\n          return data.includes(row);\n        });\n      }\n\n      this.setState(Object.assign(this.state, {\n        data: filteredData,\n        filteredData: filteredData,\n        hoverRow: hoverRow,\n        currentRow: currentRow,\n        expandingRows: expandingRows,\n        selectedRows: selectedRows\n      }));\n\n      if ((!this._isMounted || data !== this.props.data) && defaultSort) {\n        var prop = defaultSort.prop,\n            _defaultSort$order = defaultSort.order,\n            order = _defaultSort$order === undefined ? 'ascending' : _defaultSort$order;\n        var sortColumn = columns.find(function (column) {\n          return column.property === prop;\n        });\n        this.changeSortCondition(sortColumn, order, false);\n      } else {\n        this.changeSortCondition(null, null, false);\n      }\n    }\n  }, {\n    key: 'setHoverRow',\n    value: function setHoverRow(index) {\n      if (!this.state.isComplex) return;\n      this.setState({\n        hoverRow: index\n      });\n    }\n  }, {\n    key: 'toggleRowExpanded',\n    value: function toggleRowExpanded(row, rowKey) {\n      var _this2 = this;\n\n      var expandRowKeys = this.props.expandRowKeys;\n      var expandingRows = this.state.expandingRows;\n\n      if (expandRowKeys) {\n        var isRowExpanding = expandRowKeys.includes(rowKey);\n        this.dispatchEvent('onExpand', row, !isRowExpanding);\n        return;\n      }\n\n      expandingRows = expandingRows.slice();\n      var rowIndex = expandingRows.indexOf(row);\n\n      if (rowIndex > -1) {\n        expandingRows.splice(rowIndex, 1);\n      } else {\n        expandingRows.push(row);\n      }\n\n      this.setState({\n        expandingRows: expandingRows\n      }, function () {\n        _this2.dispatchEvent('onExpand', row, rowIndex === -1);\n      });\n    }\n  }, {\n    key: 'isRowExpanding',\n    value: function isRowExpanding(row, rowKey) {\n      var expandRowKeys = this.props.expandRowKeys;\n      var expandingRows = this.state.expandingRows;\n\n      if (expandRowKeys) {\n        return expandRowKeys.includes(rowKey);\n      }\n\n      return expandingRows.includes(row);\n    }\n  }, {\n    key: 'setCurrentRow',\n    value: function setCurrentRow(row) {\n      var _this3 = this;\n\n      var _props = this.props,\n          currentRowKey = _props.currentRowKey,\n          rowKey = _props.rowKey;\n\n      if (currentRowKey && !Array.isArray(currentRowKey)) {\n        this.dispatchEvent('onCurrentChange', (0, _utils.getRowIdentity)(row, rowKey), currentRowKey);\n        return;\n      }\n\n      var oldRow = this.state.currentRow;\n      this.setState({\n        currentRow: row\n      }, function () {\n        _this3.dispatchEvent('onCurrentChange', row, oldRow);\n      });\n    }\n  }, {\n    key: 'toggleRowSelection',\n    value: function toggleRowSelection(row, isSelected) {\n      var _this4 = this;\n\n      var _props2 = this.props,\n          currentRowKey = _props2.currentRowKey,\n          rowKey = _props2.rowKey;\n\n      if (Array.isArray(currentRowKey)) {\n        var toggledRowKey = (0, _utils.getRowIdentity)(row, rowKey);\n\n        var _rowIndex = currentRowKey.indexOf(toggledRowKey);\n\n        var newCurrentRowKey = currentRowKey.slice();\n\n        if (isSelected !== undefined) {\n          if (isSelected && _rowIndex === -1) {\n            newCurrentRowKey.push(toggledRowKey);\n          } else if (!isSelected && _rowIndex !== -1) {\n            newCurrentRowKey.splice(_rowIndex, 1);\n          }\n        } else {\n          _rowIndex === -1 ? newCurrentRowKey.push(toggledRowKey) : newCurrentRowKey.splice(_rowIndex, 1);\n        }\n\n        this.dispatchEvent('onSelect', newCurrentRowKey, row);\n        this.dispatchEvent('onSelectChange', newCurrentRowKey);\n        return;\n      }\n\n      var selectedRows = this.state.selectedRows.slice();\n      var rowIndex = selectedRows.indexOf(row);\n\n      if (isSelected !== undefined) {\n        if (isSelected) {\n          rowIndex === -1 && selectedRows.push(row);\n        } else {\n          rowIndex !== -1 && selectedRows.splice(rowIndex, 1);\n        }\n      } else {\n        rowIndex === -1 ? selectedRows.push(row) : selectedRows.splice(rowIndex, 1);\n      }\n\n      this.setState({\n        selectedRows: selectedRows\n      }, function () {\n        _this4.dispatchEvent('onSelect', selectedRows, row);\n\n        _this4.dispatchEvent('onSelectChange', selectedRows);\n      });\n    }\n  }, {\n    key: 'toggleAllSelection',\n    value: function toggleAllSelection() {\n      var _this5 = this;\n\n      var _props3 = this.props,\n          currentRowKey = _props3.currentRowKey,\n          rowKey = _props3.rowKey;\n      var _state2 = this.state,\n          data = _state2.data,\n          selectedRows = _state2.selectedRows,\n          selectable = _state2.selectable;\n      var allSelectableRows = selectable ? data.filter(function (data, index) {\n        return selectable(data, index);\n      }) : data.slice();\n\n      if (Array.isArray(currentRowKey)) {\n        var newCurrentRowKey = this.isAllSelected ? [] : allSelectableRows.map(function (row) {\n          return (0, _utils.getRowIdentity)(row, rowKey);\n        });\n        this.dispatchEvent('onSelectAll', newCurrentRowKey);\n        this.dispatchEvent('onSelectChange', newCurrentRowKey);\n        return;\n      }\n\n      if (this.isAllSelected) {\n        selectedRows = [];\n      } else {\n        selectedRows = allSelectableRows;\n      }\n\n      this.setState({\n        selectedRows: selectedRows\n      }, function () {\n        _this5.dispatchEvent('onSelectAll', selectedRows);\n\n        _this5.dispatchEvent('onSelectChange', selectedRows);\n      });\n    }\n  }, {\n    key: 'clearSelection',\n    value: function clearSelection() {\n      var currentRowKey = this.props.currentRowKey;\n      if (Array.isArray(currentRowKey)) return;\n      this.setState({\n        selectedRows: []\n      });\n    }\n  }, {\n    key: 'isRowSelected',\n    value: function isRowSelected(row, rowKey) {\n      var currentRowKey = this.props.currentRowKey;\n      var selectedRows = this.state.selectedRows;\n\n      if (Array.isArray(currentRowKey)) {\n        return currentRowKey.includes(rowKey);\n      }\n\n      return selectedRows.includes(row);\n    }\n  }, {\n    key: 'changeSortCondition',\n    value: function changeSortCondition(column, order) {\n      var _this6 = this;\n\n      var shouldDispatchEvent = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n\n      if (!column) {\n        ;\n        var _state3 = this.state;\n        column = _state3.sortColumn;\n        order = _state3.sortOrder;\n      }\n\n      var data = this.state.filteredData.slice();\n\n      if (!column) {\n        this.setState({\n          data: data\n        });\n        return;\n      }\n\n      var _column = column,\n          sortMethod = _column.sortMethod,\n          property = _column.property,\n          sortable = _column.sortable;\n      var sortedData = void 0;\n\n      if (!order || sortable === 'custom') {\n        sortedData = data;\n      } else if (sortable && sortable !== 'custom') {\n        var flag = order === 'ascending' ? 1 : -1;\n\n        if (sortMethod) {\n          sortedData = data.sort(function (a, b) {\n            return sortMethod(a, b) ? flag : -flag;\n          });\n        } else {\n          sortedData = data.sort(function (a, b) {\n            var aVal = (0, _utils.getValueByPath)(a, property);\n            var bVal = (0, _utils.getValueByPath)(b, property);\n            return aVal === bVal ? 0 : aVal > bVal ? flag : -flag;\n          });\n        }\n      }\n\n      var sortSet = function sortSet() {\n        shouldDispatchEvent && _this6.dispatchEvent('onSortChange', column && order ? {\n          column: column,\n          prop: column.property,\n          order: order\n        } : {\n          column: null,\n          prop: null,\n          order: null\n        });\n      };\n\n      if (sortable && sortable !== 'custom') {\n        this.setState({\n          sortColumn: column,\n          sortOrder: order,\n          data: sortedData\n        }, sortSet());\n      } else if (sortable && sortable === 'custom') {\n        this.setState({\n          sortColumn: column,\n          sortOrder: order\n        }, sortSet());\n      }\n    }\n  }, {\n    key: 'toggleFilterOpened',\n    value: function toggleFilterOpened(column) {\n      column.filterOpened = !column.filterOpened;\n      this.forceUpdate();\n    }\n  }, {\n    key: 'changeFilteredValue',\n    value: function changeFilteredValue(column, value) {\n      var _this7 = this;\n\n      column.filteredValue = value;\n      var filteredData = filterData(this.props.data.slice(), this.state.columns);\n      this.setState(Object.assign(this.state, {\n        filteredData: filteredData\n      }), function () {\n        _this7.dispatchEvent('onFilterChange', (0, _defineProperty3.default)({}, column.columnKey, value));\n      });\n      this.changeSortCondition(null, null, false);\n    }\n  }, {\n    key: 'dispatchEvent',\n    value: function dispatchEvent(name) {\n      var fn = this.props[name];\n\n      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      fn && fn.apply(undefined, args);\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var renderExpanded = (this.state.columns.find(function (column) {\n        return column.type === 'expand';\n      }) || {}).expandPannel;\n      return React.createElement(_TableLayout2.default, (0, _extends3.default)({}, this.props, {\n        renderExpanded: renderExpanded,\n        store: this.state\n      }));\n    }\n  }, {\n    key: 'isAllSelected',\n    get: function get() {\n      var _props4 = this.props,\n          currentRowKey = _props4.currentRowKey,\n          rowKey = _props4.rowKey;\n      var _state4 = this.state,\n          selectedRows = _state4.selectedRows,\n          data = _state4.data,\n          selectable = _state4.selectable;\n      var selectableData = selectable ? data.filter(function (row, index) {\n        return selectable(row, index);\n      }) : data;\n\n      if (!selectableData.length) {\n        return false;\n      }\n\n      if (Array.isArray(currentRowKey)) {\n        return selectableData.every(function (data) {\n          return currentRowKey.includes((0, _utils.getRowIdentity)(data, rowKey));\n        });\n      }\n\n      return selectedRows && selectedRows.length === selectableData.length;\n    }\n  }]);\n  return TableStore;\n}(_libs.Component);\n\nTableStore.propTypes = {\n  style: _libs.PropTypes.object,\n  columns: _libs.PropTypes.arrayOf(_libs.PropTypes.object),\n  data: _libs.PropTypes.arrayOf(_libs.PropTypes.object),\n  height: _libs.PropTypes.oneOfType([_libs.PropTypes.string, _libs.PropTypes.number]),\n  maxHeight: _libs.PropTypes.oneOfType([_libs.PropTypes.string, _libs.PropTypes.number]),\n  stripe: _libs.PropTypes.bool,\n  border: _libs.PropTypes.bool,\n  fit: _libs.PropTypes.bool,\n  showHeader: _libs.PropTypes.bool,\n  highlightCurrentRow: _libs.PropTypes.bool,\n  currentRowKey: _libs.PropTypes.oneOfType([_libs.PropTypes.string, _libs.PropTypes.number]),\n  rowClassName: _libs.PropTypes.func,\n  rowStyle: _libs.PropTypes.func,\n  rowKey: _libs.PropTypes.func,\n  emptyText: _libs.PropTypes.string,\n  defaultExpandAll: _libs.PropTypes.bool,\n  expandRowKeys: _libs.PropTypes.arrayOf(_libs.PropTypes.oneOfType([_libs.PropTypes.string, _libs.PropTypes.number])),\n  defaultSort: _libs.PropTypes.shape({\n    prop: _libs.PropTypes.string,\n    order: _libs.PropTypes.oneOf(['ascending', 'descending'])\n  }),\n  tooltipEffect: _libs.PropTypes.oneOf(['dark', 'light']),\n  showSummary: _libs.PropTypes.bool,\n  sumText: _libs.PropTypes.string,\n  summaryMethod: _libs.PropTypes.func,\n  onSelect: _libs.PropTypes.func,\n  onSelectAll: _libs.PropTypes.func,\n  onSelectChange: _libs.PropTypes.func\n};\nTableStore.defaultProps = {\n  data: [],\n  showHeader: true,\n  stripe: false,\n  fit: true,\n  emptyText: _locale2.default.t('el.table.emptyText'),\n  defaultExpandAll: false,\n  highlightCurrentRow: false,\n  showSummary: false,\n  sumText: _locale2.default.t('el.table.sumText')\n};\nTableStore.childContextTypes = {\n  store: _libs.PropTypes.any\n};\nvar _default = TableStore;\nexports.default = _default;\n;\n\nvar _temp = function () {\n  if (typeof __REACT_HOT_LOADER__ === 'undefined') {\n    return;\n  }\n\n  __REACT_HOT_LOADER__.register(tableIDSeed, 'tableIDSeed', 'src/table/TableStore.jsx');\n\n  __REACT_HOT_LOADER__.register(filterData, 'filterData', 'src/table/TableStore.jsx');\n\n  __REACT_HOT_LOADER__.register(TableStore, 'TableStore', 'src/table/TableStore.jsx');\n\n  __REACT_HOT_LOADER__.register(_default, 'default', 'src/table/TableStore.jsx');\n}();\n\n;","map":null,"metadata":{},"sourceType":"script"}