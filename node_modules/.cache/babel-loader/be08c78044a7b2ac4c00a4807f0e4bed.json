{"ast":null,"code":"/*\n * Copyright 2015 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the terms of the LICENSE file distributed with this project.\n */\nimport * as tslib_1 from \"tslib\";\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport * as Classes from \"../../common/classes\";\nimport * as Errors from \"../../common/errors\";\nimport { DISPLAYNAME_PREFIX } from \"../../common/props\";\nimport { isFunction } from \"../../common/utils\";\n/** Detect if `React.createPortal()` API method does not exist. */\n\nvar cannotCreatePortal = !isFunction(ReactDOM.createPortal);\nvar REACT_CONTEXT_TYPES = {\n  blueprintPortalClassName: function blueprintPortalClassName(obj, key) {\n    if (obj[key] != null && typeof obj[key] !== \"string\") {\n      return new Error(Errors.PORTAL_CONTEXT_CLASS_NAME_STRING);\n    }\n\n    return undefined;\n  }\n};\n/**\n * This component detaches its contents and re-attaches them to document.body.\n * Use it when you need to circumvent DOM z-stacking (for dialogs, popovers, etc.).\n * Any class names passed to this element will be propagated to the new container element on document.body.\n */\n\nvar Portal =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(Portal, _super);\n\n  function Portal() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.state = {\n      hasMounted: false\n    };\n    return _this;\n  }\n\n  Portal.prototype.render = function () {\n    // Only render `children` once this component has mounted in a browser environment, so they are\n    // immediately attached to the DOM tree and can do DOM things like measuring or `autoFocus`.\n    // See long comment on componentDidMount in https://reactjs.org/docs/portals.html#event-bubbling-through-portals\n    if (cannotCreatePortal || typeof document === \"undefined\" || !this.state.hasMounted) {\n      return null;\n    } else {\n      return ReactDOM.createPortal(this.props.children, this.portalElement);\n    }\n  };\n\n  Portal.prototype.componentDidMount = function () {\n    if (!this.props.container) {\n      return;\n    }\n\n    this.portalElement = this.createContainerElement();\n    this.props.container.appendChild(this.portalElement);\n    this.setState({\n      hasMounted: true\n    }, this.props.onChildrenMount);\n\n    if (cannotCreatePortal) {\n      this.unstableRenderNoPortal();\n    }\n  };\n\n  Portal.prototype.componentDidUpdate = function (prevProps) {\n    // update className prop on portal DOM element\n    if (this.portalElement != null && prevProps.className !== this.props.className) {\n      this.portalElement.classList.remove(prevProps.className);\n      maybeAddClass(this.portalElement.classList, this.props.className);\n    }\n\n    if (cannotCreatePortal) {\n      this.unstableRenderNoPortal();\n    }\n  };\n\n  Portal.prototype.componentWillUnmount = function () {\n    if (this.portalElement != null) {\n      if (cannotCreatePortal) {\n        ReactDOM.unmountComponentAtNode(this.portalElement);\n      }\n\n      this.portalElement.remove();\n    }\n  };\n\n  Portal.prototype.createContainerElement = function () {\n    var container = document.createElement(\"div\");\n    container.classList.add(Classes.PORTAL);\n    maybeAddClass(container.classList, this.props.className);\n\n    if (this.context != null) {\n      maybeAddClass(container.classList, this.context.blueprintPortalClassName);\n    }\n\n    return container;\n  };\n\n  Portal.prototype.unstableRenderNoPortal = function () {\n    ReactDOM.unstable_renderSubtreeIntoContainer(\n    /* parentComponent */\n    this, React.createElement(\"div\", null, this.props.children), this.portalElement);\n  };\n\n  Portal.displayName = DISPLAYNAME_PREFIX + \".Portal\";\n  Portal.contextTypes = REACT_CONTEXT_TYPES;\n  Portal.defaultProps = {\n    container: typeof document !== \"undefined\" ? document.body : null\n  };\n  return Portal;\n}(React.Component);\n\nexport { Portal };\n\nfunction maybeAddClass(classList, className) {\n  if (className != null && className !== \"\") {\n    classList.add.apply(classList, className.split(\" \"));\n  }\n}","map":null,"metadata":{},"sourceType":"module"}