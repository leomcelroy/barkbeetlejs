{"ast":null,"code":"// makerjs model, params -> profile toolpath\nimport * as params from '../parameters.js';\nimport * as mjs from 'makerjs';\n\nvar profile = function profile(model) {\n  var p = model.models.profile;\n  console.log(p);\n  var expansion = mjs.model.expandPaths(p, params.compensatedRadius, 1); //let chains = mjs.model.findChains(expansion);\n\n  var chain = mjs.model.findSingleChain(expansion);\n  var divisions = Math.floor(chain.pathLength / params.minimumSpacing);\n  var spacing = chain.pathLength / divisions;\n  var keyPoints = mjs.chain.toPoints(chain, spacing);\n  return new mjs.models.Rectangle(20, 30);\n};\n\nexport { profile };","map":{"version":3,"sources":["/Users/leomcelroy/Desktop/barkBeetleEverything/barkbeetle_js_real/src/toolpaths/profile.js"],"names":["params","mjs","profile","model","p","models","console","log","expansion","expandPaths","compensatedRadius","chain","findSingleChain","divisions","Math","floor","pathLength","minimumSpacing","spacing","keyPoints","toPoints","Rectangle"],"mappings":"AAAA;AAEA,OAAO,KAAKA,MAAZ,MAAwB,kBAAxB;AACA,OAAO,KAAKC,GAAZ,MAAqB,SAArB;;AAEA,IAAMC,OAAO,GAAG,SAAVA,OAAU,CAACC,KAAD,EAAW;AACzB,MAAIC,CAAC,GAAGD,KAAK,CAACE,MAAN,CAAaH,OAArB;AAEAI,EAAAA,OAAO,CAACC,GAAR,CAAYH,CAAZ;AAEA,MAAII,SAAS,GAAGP,GAAG,CAACE,KAAJ,CAAUM,WAAV,CAAsBL,CAAtB,EAAyBJ,MAAM,CAACU,iBAAhC,EAAmD,CAAnD,CAAhB,CALyB,CAMzB;;AACA,MAAIC,KAAK,GAAGV,GAAG,CAACE,KAAJ,CAAUS,eAAV,CAA0BJ,SAA1B,CAAZ;AAEA,MAAIK,SAAS,GAAGC,IAAI,CAACC,KAAL,CAAWJ,KAAK,CAACK,UAAN,GAAmBhB,MAAM,CAACiB,cAArC,CAAhB;AACA,MAAIC,OAAO,GAAGP,KAAK,CAACK,UAAN,GAAmBH,SAAjC;AAEA,MAAIM,SAAS,GAAGlB,GAAG,CAACU,KAAJ,CAAUS,QAAV,CAAmBT,KAAnB,EAA0BO,OAA1B,CAAhB;AAKA,SAAO,IAAIjB,GAAG,CAACI,MAAJ,CAAWgB,SAAf,CAAyB,EAAzB,EAA6B,EAA7B,CAAP;AACD,CAlBD;;AAqBA,SAAQnB,OAAR","sourcesContent":["// makerjs model, params -> profile toolpath\n\nimport * as params from '../parameters.js'\nimport * as mjs from 'makerjs';\n\nconst profile = (model) => {\n  let p = model.models.profile;\n\n  console.log(p);\n\n  let expansion = mjs.model.expandPaths(p, params.compensatedRadius, 1);\n  //let chains = mjs.model.findChains(expansion);\n  let chain = mjs.model.findSingleChain(expansion);\n\n  var divisions = Math.floor(chain.pathLength / params.minimumSpacing);\n  var spacing = chain.pathLength / divisions;\n\n  let keyPoints = mjs.chain.toPoints(chain, spacing);\n\n  \n\n\n  return new mjs.models.Rectangle(20, 30)\n};\n\n\nexport {profile};\n"]},"metadata":{},"sourceType":"module"}