{"ast":null,"code":"/*\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the terms of the LICENSE file distributed with this project.\n */\nimport * as tslib_1 from \"tslib\";\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport { AbstractPureComponent } from \"../../common/abstractPureComponent\";\nimport * as Classes from \"../../common/classes\";\nimport { Position } from \"../../common/position\";\nimport { safeInvoke } from \"../../common/utils\";\nimport { Popover } from \"../popover/popover\";\nvar POPPER_MODIFIERS = {\n  preventOverflow: {\n    boundariesElement: \"viewport\"\n  }\n};\nvar TRANSITION_DURATION = 100;\n/* istanbul ignore next */\n\nvar ContextMenu =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(ContextMenu, _super);\n\n  function ContextMenu() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.state = {\n      isDarkTheme: false,\n      isOpen: false,\n      menu: null,\n      offset: null\n    };\n\n    _this.cancelContextMenu = function (e) {\n      return e.preventDefault();\n    };\n\n    _this.handleBackdropContextMenu = function (e) {\n      // React function to remove from the event pool, useful when using a event within a callback\n      e.persist();\n      e.preventDefault(); // wait for backdrop to disappear so we can find the \"real\" element at event coordinates.\n      // timeout duration is equivalent to transition duration so we know it's animated out.\n\n      _this.setTimeout(function () {\n        // retrigger context menu event at the element beneath the backdrop.\n        // if it has a `contextmenu` event handler then it'll be invoked.\n        // if it doesn't, no native menu will show (at least on OSX) :(\n        var newTarget = document.elementFromPoint(e.clientX, e.clientY);\n        newTarget.dispatchEvent(new MouseEvent(\"contextmenu\", e));\n      }, TRANSITION_DURATION);\n    };\n\n    _this.handlePopoverInteraction = function (nextOpenState) {\n      if (!nextOpenState) {\n        // delay the actual hiding till the event queue clears\n        // to avoid flicker of opening twice\n        requestAnimationFrame(function () {\n          return _this.hide();\n        });\n      }\n    };\n\n    return _this;\n  }\n\n  ContextMenu.prototype.render = function () {\n    // prevent right-clicking in a context menu\n    var content = React.createElement(\"div\", {\n      onContextMenu: this.cancelContextMenu\n    }, this.state.menu);\n    var popoverClassName = classNames((_a = {}, _a[Classes.DARK] = this.state.isDarkTheme, _a)); // HACKHACK: workaround until we have access to Popper#scheduleUpdate().\n    // https://github.com/palantir/blueprint/issues/692\n    // Generate key based on offset so a new Popover instance is created\n    // when offset changes, to force recomputing position.\n\n    var key = this.state.offset == null ? \"\" : this.state.offset.left + \"x\" + this.state.offset.top; // wrap the popover in a positioned div to make sure it is properly\n    // offset on the screen.\n\n    return React.createElement(\"div\", {\n      className: Classes.CONTEXT_MENU_POPOVER_TARGET,\n      style: this.state.offset\n    }, React.createElement(Popover, tslib_1.__assign({}, this.props, {\n      backdropProps: {\n        onContextMenu: this.handleBackdropContextMenu\n      },\n      content: content,\n      enforceFocus: false,\n      key: key,\n      hasBackdrop: true,\n      isOpen: this.state.isOpen,\n      minimal: true,\n      modifiers: POPPER_MODIFIERS,\n      onInteraction: this.handlePopoverInteraction,\n      position: Position.RIGHT_TOP,\n      popoverClassName: popoverClassName,\n      target: React.createElement(\"div\", null),\n      transitionDuration: TRANSITION_DURATION\n    })));\n\n    var _a;\n  };\n\n  ContextMenu.prototype.show = function (menu, offset, onClose, isDarkTheme) {\n    this.setState({\n      isOpen: true,\n      menu: menu,\n      offset: offset,\n      onClose: onClose,\n      isDarkTheme: isDarkTheme\n    });\n  };\n\n  ContextMenu.prototype.hide = function () {\n    safeInvoke(this.state.onClose);\n    this.setState({\n      isOpen: false,\n      onClose: undefined\n    });\n  };\n\n  return ContextMenu;\n}(AbstractPureComponent);\n\nvar contextMenuElement;\nvar contextMenu;\n/**\n * Show the given menu element at the given offset from the top-left corner of the viewport.\n * The menu will appear below-right of this point and will flip to below-left if there is not enough\n * room onscreen. The optional callback will be invoked when this menu closes.\n */\n\nexport function show(menu, offset, onClose, isDarkTheme) {\n  if (contextMenuElement == null) {\n    contextMenuElement = document.createElement(\"div\");\n    contextMenuElement.classList.add(Classes.CONTEXT_MENU);\n    document.body.appendChild(contextMenuElement);\n    contextMenu = ReactDOM.render(React.createElement(ContextMenu, {\n      onClosed: remove\n    }), contextMenuElement);\n  }\n\n  contextMenu.show(menu, offset, onClose, isDarkTheme);\n}\n/** Hide the open context menu. */\n\nexport function hide() {\n  if (contextMenu != null) {\n    contextMenu.hide();\n  }\n}\n/** Return whether a context menu is currently open. */\n\nexport function isOpen() {\n  return contextMenu != null && contextMenu.state.isOpen;\n}\n\nfunction remove() {\n  if (contextMenuElement != null) {\n    ReactDOM.unmountComponentAtNode(contextMenuElement);\n    contextMenuElement.remove();\n    contextMenuElement = null;\n    contextMenu = null;\n  }\n}","map":null,"metadata":{},"sourceType":"module"}