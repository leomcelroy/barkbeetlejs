{"ast":null,"code":"var _classCallCheck = require(\"/Users/leomcelroy/Desktop/barkbeetle_js/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/leomcelroy/Desktop/barkbeetle_js/node_modules/@babel/runtime/helpers/createClass\");\n\nvar inflate = require('tiny-inflate'); // Shift size for getting the index-1 table offset.\n\n\nvar SHIFT_1 = 6 + 5; // Shift size for getting the index-2 table offset.\n\nvar SHIFT_2 = 5; // Difference between the two shift sizes,\n// for getting an index-1 offset from an index-2 offset. 6=11-5\n\nvar SHIFT_1_2 = SHIFT_1 - SHIFT_2; // Number of index-1 entries for the BMP. 32=0x20\n// This part of the index-1 table is omitted from the serialized form.\n\nvar OMITTED_BMP_INDEX_1_LENGTH = 0x10000 >> SHIFT_1; // Number of entries in an index-2 block. 64=0x40\n\nvar INDEX_2_BLOCK_LENGTH = 1 << SHIFT_1_2; // Mask for getting the lower bits for the in-index-2-block offset. */\n\nvar INDEX_2_MASK = INDEX_2_BLOCK_LENGTH - 1; // Shift size for shifting left the index array values.\n// Increases possible data size with 16-bit index values at the cost\n// of compactability.\n// This requires data blocks to be aligned by DATA_GRANULARITY.\n\nvar INDEX_SHIFT = 2; // Number of entries in a data block. 32=0x20\n\nvar DATA_BLOCK_LENGTH = 1 << SHIFT_2; // Mask for getting the lower bits for the in-data-block offset.\n\nvar DATA_MASK = DATA_BLOCK_LENGTH - 1; // The part of the index-2 table for U+D800..U+DBFF stores values for\n// lead surrogate code _units_ not code _points_.\n// Values for lead surrogate code _points_ are indexed with this portion of the table.\n// Length=32=0x20=0x400>>SHIFT_2. (There are 1024=0x400 lead surrogates.)\n\nvar LSCP_INDEX_2_OFFSET = 0x10000 >> SHIFT_2;\nvar LSCP_INDEX_2_LENGTH = 0x400 >> SHIFT_2; // Count the lengths of both BMP pieces. 2080=0x820\n\nvar INDEX_2_BMP_LENGTH = LSCP_INDEX_2_OFFSET + LSCP_INDEX_2_LENGTH; // The 2-byte UTF-8 version of the index-2 table follows at offset 2080=0x820.\n// Length 32=0x20 for lead bytes C0..DF, regardless of SHIFT_2.\n\nvar UTF8_2B_INDEX_2_OFFSET = INDEX_2_BMP_LENGTH;\nvar UTF8_2B_INDEX_2_LENGTH = 0x800 >> 6; // U+0800 is the first code point after 2-byte UTF-8\n// The index-1 table, only used for supplementary code points, at offset 2112=0x840.\n// Variable length, for code points up to highStart, where the last single-value range starts.\n// Maximum length 512=0x200=0x100000>>SHIFT_1.\n// (For 0x100000 supplementary code points U+10000..U+10ffff.)\n//\n// The part of the index-2 table for supplementary code points starts\n// after this index-1 table.\n//\n// Both the index-1 table and the following part of the index-2 table\n// are omitted completely if there is only BMP data.\n\nvar INDEX_1_OFFSET = UTF8_2B_INDEX_2_OFFSET + UTF8_2B_INDEX_2_LENGTH; // The alignment size of a data block. Also the granularity for compaction.\n\nvar DATA_GRANULARITY = 1 << INDEX_SHIFT;\n\nvar UnicodeTrie =\n/*#__PURE__*/\nfunction () {\n  \"use strict\";\n\n  function UnicodeTrie(data) {\n    _classCallCheck(this, UnicodeTrie);\n\n    var isBuffer = typeof data.readUInt32BE === 'function' && typeof data.slice === 'function';\n\n    if (isBuffer || data instanceof Uint8Array) {\n      // read binary format\n      var uncompressedLength;\n\n      if (isBuffer) {\n        this.highStart = data.readUInt32BE(0);\n        this.errorValue = data.readUInt32BE(4);\n        uncompressedLength = data.readUInt32BE(8);\n        data = data.slice(12);\n      } else {\n        var view = new DataView(data.buffer);\n        this.highStart = view.getUint32(0);\n        this.errorValue = view.getUint32(4);\n        uncompressedLength = view.getUint32(8);\n        data = data.subarray(12);\n      } // double inflate the actual trie data\n\n\n      data = inflate(data, new Uint8Array(uncompressedLength));\n      data = inflate(data, new Uint8Array(uncompressedLength));\n      this.data = new Uint32Array(data.buffer);\n    } else {\n      // pre-parsed data\n      var _data = data;\n      this.data = _data.data;\n      this.highStart = _data.highStart;\n      this.errorValue = _data.errorValue;\n    }\n  }\n\n  _createClass(UnicodeTrie, [{\n    key: \"get\",\n    value: function get(codePoint) {\n      var index;\n\n      if (codePoint < 0 || codePoint > 0x10ffff) {\n        return this.errorValue;\n      }\n\n      if (codePoint < 0xd800 || codePoint > 0xdbff && codePoint <= 0xffff) {\n        // Ordinary BMP code point, excluding leading surrogates.\n        // BMP uses a single level lookup.  BMP index starts at offset 0 in the index.\n        // data is stored in the index array itself.\n        index = (this.data[codePoint >> SHIFT_2] << INDEX_SHIFT) + (codePoint & DATA_MASK);\n        return this.data[index];\n      }\n\n      if (codePoint <= 0xffff) {\n        // Lead Surrogate Code Point.  A Separate index section is stored for\n        // lead surrogate code units and code points.\n        //   The main index has the code unit data.\n        //   For this function, we need the code point data.\n        index = (this.data[LSCP_INDEX_2_OFFSET + (codePoint - 0xd800 >> SHIFT_2)] << INDEX_SHIFT) + (codePoint & DATA_MASK);\n        return this.data[index];\n      }\n\n      if (codePoint < this.highStart) {\n        // Supplemental code point, use two-level lookup.\n        index = this.data[INDEX_1_OFFSET - OMITTED_BMP_INDEX_1_LENGTH + (codePoint >> SHIFT_1)];\n        index = this.data[index + (codePoint >> SHIFT_2 & INDEX_2_MASK)];\n        index = (index << INDEX_SHIFT) + (codePoint & DATA_MASK);\n        return this.data[index];\n      }\n\n      return this.data[this.data.length - DATA_GRANULARITY];\n    }\n  }]);\n\n  return UnicodeTrie;\n}();\n\nmodule.exports = UnicodeTrie;","map":null,"metadata":{},"sourceType":"script"}