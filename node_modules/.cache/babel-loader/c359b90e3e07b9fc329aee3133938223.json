{"ast":null,"code":"var makeSeries = function makeSeries(s, n, c) {\n  var l = [];\n  l.push(s);\n\n  for (var i = 0; i < c - 1; i++) {\n    l.push(l[i] + n);\n  }\n\n  return l;\n}; //const editSVG  = (svg) => `<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" ${svg.slice(4)}`;\n\n\nvar editSVG = function editSVG(svg) {\n  // console.log(svg);\n  var path = \"\".concat(svg.slice(226, svg.length - 10));\n  var group = \"\".concat(svg.slice(52, svg.length - 6)); //console.log(group);\n\n  return group;\n};\n\nvar download = function download(filename, text) {\n  var pom = document.createElement('a');\n  pom.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(text));\n  pom.setAttribute('download', filename);\n\n  if (document.createEvent) {\n    var event = document.createEvent('MouseEvents');\n    event.initEvent('click', true, true);\n    pom.dispatchEvent(event);\n  } else {\n    pom.click();\n  }\n};\n\nvar getSVGpoint = function getSVGpoint(evt, v0, v1, v2, v3, width, height) {\n  //should this be a method on Workplane in Workplane.js\n  var svg = document.querySelector('svg');\n  var pt = {\n    x: 0,\n    y: 0\n  };\n  var svgBox = svg.getBoundingClientRect();\n  var boxWidth = svgBox.width;\n  var boxHeight = svgBox.height;\n  var xOffset = svgBox.x;\n  var yOffset = svgBox.y;\n  var xScale = v2 / boxWidth;\n  var yScale = v3 / boxHeight; //console.log(xScale, yScale)\n\n  pt.x = (evt.clientX - xOffset) / boxWidth * width * xScale + v0;\n  pt.y = (evt.clientY - yOffset) / boxHeight * height * yScale + v1;\n  return pt; //return pt.matrixTransform(svg.getScreenCTM().inverse());\n};\n\nvar deepcopy = function deepcopy(thing) {\n  return JSON.parse(JSON.stringify(thing));\n}; //align curve directions\n//detect curves inside curves\n//generate uuid\n\n\nvar makeID = function makeID() {\n  return Math.random().toString(36).substr(2, 9);\n}; //id\n//check if number\n\n\nvar isNum = function isNum(str) {\n  var regex = /[a-zA-Z]+$/;\n\n  if (str.match(regex) === null) {\n    return false;\n  }\n\n  return str.match(regex).length === 0;\n};\n\nexport { makeSeries, editSVG, download, getSVGpoint, deepcopy, makeID, isNum };","map":{"version":3,"sources":["/Users/leomcelroy/Desktop/barkBeetleEverything/barkbeetle_js_real/src/utils.js"],"names":["makeSeries","s","n","c","l","push","i","editSVG","svg","path","slice","length","group","download","filename","text","pom","document","createElement","setAttribute","encodeURIComponent","createEvent","event","initEvent","dispatchEvent","click","getSVGpoint","evt","v0","v1","v2","v3","width","height","querySelector","pt","x","y","svgBox","getBoundingClientRect","boxWidth","boxHeight","xOffset","yOffset","xScale","yScale","clientX","clientY","deepcopy","thing","JSON","parse","stringify","makeID","Math","random","toString","substr","isNum","str","regex","match"],"mappings":"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","sourcesContent":["const makeSeries = (s, n, c) => {\n  let l = [];\n  l.push(s);\n\n  for (let i = 0; i < c - 1; i++) {\n    l.push(l[i] + n);\n  }\n\n  return l;\n}\n\n//const editSVG  = (svg) => `<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" ${svg.slice(4)}`;\nconst editSVG  = (svg) => {\n  // console.log(svg);\n  let path = `${svg.slice(226, svg.length-10)}`;\n  let group = `${svg.slice(52, svg.length-6)}`;\n\n  //console.log(group);\n  return group;\n}\n\nconst download = (filename, text) => {\n  var pom = document.createElement('a');\n\n  pom.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(text));\n  pom.setAttribute('download', filename);\n\n  if (document.createEvent) {\n      var event = document.createEvent('MouseEvents');\n      event.initEvent('click', true, true);\n      pom.dispatchEvent(event);\n  }\n  else {\n      pom.click();\n  }\n}\n\nconst getSVGpoint = (evt, v0, v1, v2, v3, width, height) => { //should this be a method on Workplane in Workplane.js\n  var svg = document.querySelector('svg');\n  var pt = {x: 0, y: 0};\n\n  let svgBox = svg.getBoundingClientRect();\n  let boxWidth = svgBox.width;\n  let boxHeight = svgBox.height;\n  let xOffset = svgBox.x;\n  let yOffset = svgBox.y;\n  let xScale = v2/boxWidth;\n  let yScale = v3/boxHeight;\n\n  //console.log(xScale, yScale)\n\n  pt.x = (evt.clientX - xOffset)/boxWidth * width * xScale + v0;\n  pt.y = (evt.clientY - yOffset)/boxHeight * height * yScale + v1;\n\n  return pt;\n  //return pt.matrixTransform(svg.getScreenCTM().inverse());\n}\n\nconst deepcopy = (thing) => JSON.parse(JSON.stringify(thing));\n\n//align curve directions\n\n//detect curves inside curves\n\n//generate uuid\nconst makeID = () => Math.random().toString(36).substr(2, 9); //id\n\n//check if number\nconst isNum = (str) => {\n  let regex=/[a-zA-Z]+$/;\n\n  if (str.match(regex) === null) {\n    return false\n  }\n\n  return str.match(regex).length === 0;\n}\n\nexport {\n  makeSeries,\n  editSVG,\n  download,\n  getSVGpoint,\n  deepcopy,\n  makeID,\n  isNum\n}\n"]},"metadata":{},"sourceType":"module"}