{"ast":null,"code":"import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport Box, { spacing, position, layout, dimensions } from 'ui-box';\nimport { Text } from '../../typography';\nimport { withTheme } from '../../theme';\n\nvar CircleIcon = function CircleIcon(_ref) {\n  var size = _ref.size,\n      _ref$fill = _ref.fill,\n      fill = _ref$fill === void 0 ? 'currentColor' : _ref$fill,\n      props = _objectWithoutProperties(_ref, [\"size\", \"fill\"]);\n\n  return React.createElement(\"svg\", _extends({\n    width: size,\n    height: size,\n    viewBox: \"0 0 10 10\"\n  }, props), React.createElement(\"circle\", {\n    fill: fill,\n    cx: \"5\",\n    cy: \"5\",\n    r: \"5\"\n  }));\n};\n\nCircleIcon.displayName = \"CircleIcon\";\nCircleIcon.propTypes = {\n  fill: PropTypes.string,\n  size: PropTypes.number\n};\n\nvar Radio =\n/*#__PURE__*/\nfunction (_PureComponent) {\n  _inherits(Radio, _PureComponent);\n\n  function Radio() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Radio);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Radio)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"handleChange\", function (event) {\n      _this.props.onChange(event, event.target.checked);\n    });\n\n    return _this;\n  }\n\n  _createClass(Radio, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          theme = _this$props.theme,\n          id = _this$props.id,\n          name = _this$props.name,\n          label = _this$props.label,\n          disabled = _this$props.disabled,\n          isInvalid = _this$props.isInvalid,\n          checked = _this$props.checked,\n          onChange = _this$props.onChange,\n          value = _this$props.value,\n          size = _this$props.size,\n          isRequired = _this$props.isRequired,\n          appearance = _this$props.appearance,\n          props = _objectWithoutProperties(_this$props, [\"theme\", \"id\", \"name\", \"label\", \"disabled\", \"isInvalid\", \"checked\", \"onChange\", \"value\", \"size\", \"isRequired\", \"appearance\"]);\n\n      var themedClassName = theme.getRadioClassName(appearance);\n      return React.createElement(Box, _extends({\n        is: \"label\",\n        cursor: disabled ? 'not-allowed' : 'pointer',\n        position: \"relative\",\n        display: \"flex\",\n        marginY: size === 12 ? 8 : 12\n      }, props), React.createElement(Box, {\n        is: \"input\",\n        className: themedClassName,\n        id: id,\n        type: \"radio\",\n        name: name,\n        value: value,\n        checked: checked,\n        onChange: this.handleChange,\n        disabled: disabled,\n        \"aria-invalid\": isInvalid,\n        required: isRequired\n      }), React.createElement(Box, {\n        boxSizing: \"border-box\",\n        borderRadius: 9999,\n        display: \"flex\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        marginTop: 2,\n        width: size,\n        height: size\n      }, React.createElement(CircleIcon, {\n        size: size === 12 ? 4 : 4\n      })), label && React.createElement(Text, {\n        marginLeft: size === 12 ? 8 : 10,\n        size: size === 12 ? 300 : 400,\n        color: disabled ? 'muted' : 'default'\n      }, label));\n    }\n  }]);\n\n  return Radio;\n}(PureComponent);\n\nRadio.displayName = \"Radio\";\n\n_defineProperty(Radio, \"propTypes\", _objectSpread({}, spacing.propTypes, position.propTypes, layout.propTypes, dimensions.propTypes, {\n  /**\n   * The id attribute of the radio.\n   */\n  id: PropTypes.string,\n\n  /**\n   * The name attribute of the radio.\n   */\n  name: PropTypes.string,\n\n  /**\n   * Label of the radio.\n   */\n  label: PropTypes.node,\n\n  /**\n   * The value attribute of the radio.\n   */\n  value: PropTypes.string,\n\n  /**\n   * Function called when state changes\n   * Signature:\n   * ```\n   * function(event: object, checked: boolean) => void\n   * ```\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * When true, the radio is disabled.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * When true, the radio is checked.\n   */\n  checked: PropTypes.bool,\n\n  /**\n   * The size of the radio circle. This also informs the text size and spacing.\n   */\n  size: PropTypes.oneOf([12, 16]),\n\n  /**\n   * When true, the radio get the required attribute.\n   */\n  isRequired: PropTypes.bool.isRequired,\n\n  /**\n   * When true, the aria-invalid attribute is true.\n   * Used for accessibility.\n   */\n  isInvalid: PropTypes.bool.isRequired,\n\n  /**\n   * The appearance of the checkbox.\n   * The default theme only comes with a default style.\n   */\n  appearance: PropTypes.string.isRequired,\n\n  /**\n   * Theme provided by ThemeProvider.\n   */\n  theme: PropTypes.object.isRequired\n}));\n\n_defineProperty(Radio, \"defaultProps\", {\n  appearance: 'default',\n  onChange: function onChange() {},\n  size: 12,\n  isRequired: false,\n  isInvalid: false\n});\n\nexport default withTheme(Radio);","map":null,"metadata":{},"sourceType":"module"}