{"ast":null,"code":"'use strict';\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar React = require('react');\n\nvar blacklist = require('blacklist');\n\nvar classNames = require('classnames');\n\nmodule.exports = React.createClass({\n  displayName: 'RadioGroup',\n  propTypes: {\n    alwaysValidate: React.PropTypes.bool,\n    className: React.PropTypes.string,\n    inline: React.PropTypes.bool,\n    label: React.PropTypes.string,\n    onChange: React.PropTypes.func.isRequired,\n    options: React.PropTypes.array.isRequired,\n    required: React.PropTypes.bool,\n    requiredMessage: React.PropTypes.string,\n    value: React.PropTypes.string\n  },\n  getDefaultProps: function getDefaultProps() {\n    return {\n      requiredMessage: 'This field is required'\n    };\n  },\n  getInitialState: function getInitialState() {\n    return {\n      isValid: true,\n      validationIsActive: this.props.alwaysValidate\n    };\n  },\n  componentDidMount: function componentDidMount() {\n    if (this.state.validationIsActive) {\n      this.validateInput(this.props.value);\n    }\n  },\n  componentWillReceiveProps: function componentWillReceiveProps(newProps) {\n    if (this.state.validationIsActive) {\n      if (newProps.value !== this.props.value && newProps.value !== this._lastChangeValue && !newProps.alwaysValidate) {\n        // reset validation state if the value was changed outside the component\n        return this.setState({\n          isValid: true,\n          validationIsActive: false\n        });\n      }\n\n      this.validateInput(newProps.value);\n    }\n  },\n  handleChange: function handleChange(e) {\n    this._lastChangeValue = e.target.value;\n    if (this.props.onChange) this.props.onChange(e.target.value);\n  },\n  handleBlur: function handleBlur() {\n    if (!this.props.alwaysValidate) {\n      this.setState({\n        validationIsActive: false\n      });\n    }\n\n    this.validateInput(this.props.value);\n  },\n  validateInput: function validateInput(value) {\n    var newState = {\n      isValid: true\n    };\n\n    if (this.props.required && (!value || value && !value.length)) {\n      newState.isValid = false;\n    }\n\n    if (!newState.isValid) {\n      newState.validationIsActive = true;\n    }\n\n    this.setState(newState);\n  },\n  render: function render() {\n    var self = this; // props\n\n    var props = blacklist(this.props, 'alwaysValidate', 'label', 'onChange', 'options', 'required', 'requiredMessage', 'value', 'inline'); // classes\n\n    var componentClass = classNames('FormField', {\n      'is-invalid': !this.state.isValid\n    }, this.props.className); // validation message\n\n    var validationMessage;\n\n    if (!this.state.isValid) {\n      validationMessage = React.createElement('div', {\n        className: 'form-validation is-invalid'\n      }, this.props.requiredMessage);\n    } // dynamic elements\n\n\n    var componentLabel = this.props.label ? React.createElement('label', {\n      className: 'FormLabel'\n    }, this.props.label) : null; // options\n\n    var radios = this.props.options.map(function (radio, i) {\n      return React.createElement('label', {\n        key: 'radio-' + i,\n        className: 'Radio'\n      }, React.createElement('input', {\n        value: radio.value,\n        type: 'radio',\n        onChange: self.handleChange,\n        onBlur: self.handleBlur,\n        name: self.props.name,\n        className: 'Radio__input'\n      }), React.createElement('span', {\n        className: 'Radio__label'\n      }, radio.label));\n    });\n\n    if (this.props.inline) {\n      radios = React.createElement('div', {\n        className: 'inline-controls'\n      }, radios);\n    }\n\n    return React.createElement('div', _extends({\n      className: componentClass\n    }, props), componentLabel, radios, validationMessage);\n  }\n});","map":null,"metadata":{},"sourceType":"script"}