{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport fuzzaldrin from 'fuzzaldrin-plus';\nimport Downshift from 'downshift';\nimport VirtualList from 'react-tiny-virtual-list';\nimport { Popover } from '../../popover';\nimport { Position } from '../../constants';\nimport { Heading } from '../../typography';\nimport { Pane } from '../../layers';\nimport AutocompleteItem from './AutocompleteItem';\n\nvar fuzzyFilter = function fuzzyFilter(items, input) {\n  return fuzzaldrin.filter(items, input);\n};\n\nvar autocompleteItemRenderer = function autocompleteItemRenderer(props) {\n  return React.createElement(AutocompleteItem, props);\n};\n\nautocompleteItemRenderer.displayName = \"autocompleteItemRenderer\"; // https://github.com/paypal/downshift/issues/164\n\nvar Autocomplete =\n/*#__PURE__*/\nfunction (_PureComponent) {\n  _inherits(Autocomplete, _PureComponent);\n\n  function Autocomplete() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Autocomplete);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Autocomplete)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"state\", {\n      targetWidth: 0\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"renderResults\", function (_ref) {\n      var width = _ref.width,\n          inputValue = _ref.inputValue,\n          highlightedIndex = _ref.highlightedIndex,\n          selectItemAtIndex = _ref.selectItemAtIndex,\n          selectedItem = _ref.selectedItem,\n          getItemProps = _ref.getItemProps;\n      var _this$props = _this.props,\n          title = _this$props.title,\n          itemSize = _this$props.itemSize,\n          itemsFilter = _this$props.itemsFilter,\n          originalItems = _this$props.items,\n          itemToString = _this$props.itemToString,\n          _renderItem = _this$props.renderItem,\n          popoverMaxHeight = _this$props.popoverMaxHeight,\n          isFilterDisabled = _this$props.isFilterDisabled;\n      var items = isFilterDisabled || inputValue.trim() === '' ? originalItems : itemsFilter(originalItems, inputValue);\n      if (items.length === 0) return null;\n      return React.createElement(Pane, {\n        width: width\n      }, title && React.createElement(Pane, {\n        padding: 8,\n        borderBottom: \"muted\"\n      }, React.createElement(Heading, {\n        size: 100\n      }, title)), items.length > 0 && React.createElement(VirtualList, {\n        width: \"100%\",\n        height: Math.min(items.length * itemSize, popoverMaxHeight),\n        itemSize: itemSize,\n        itemCount: items.length,\n        scrollToIndex: highlightedIndex || 0,\n        overscanCount: 3,\n        scrollToAlignment: \"auto\",\n        renderItem: function renderItem(_ref2) {\n          var index = _ref2.index,\n              style = _ref2.style;\n          var item = items[index];\n          var itemString = itemToString(item);\n          return _renderItem(getItemProps({\n            item: item,\n            key: itemString,\n            index: index,\n            style: style,\n            children: itemString,\n            onMouseUp: function onMouseUp() {\n              selectItemAtIndex(index);\n            },\n            isSelected: itemToString(selectedItem) === itemString,\n            isHighlighted: highlightedIndex === index\n          }));\n        }\n      }));\n    });\n\n    return _this;\n  }\n\n  _createClass(Autocomplete, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.setState({\n        targetWidth: this.targetRef.getBoundingClientRect().width\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props2 = this.props,\n          children = _this$props2.children,\n          itemSize = _this$props2.itemSize,\n          position = _this$props2.position,\n          renderItem = _this$props2.renderItem,\n          itemsFilter = _this$props2.itemsFilter,\n          popoverMaxHeight = _this$props2.popoverMaxHeight,\n          popoverMinWidth = _this$props2.popoverMinWidth,\n          defaultSelectedItem = _this$props2.defaultSelectedItem,\n          props = _objectWithoutProperties(_this$props2, [\"children\", \"itemSize\", \"position\", \"renderItem\", \"itemsFilter\", \"popoverMaxHeight\", \"popoverMinWidth\", \"defaultSelectedItem\"]);\n\n      return React.createElement(Downshift, _extends({\n        defaultSelectedItem: defaultSelectedItem\n      }, props), function (_ref3) {\n        var isShown = _ref3.isOpen,\n            inputValue = _ref3.inputValue,\n            getItemProps = _ref3.getItemProps,\n            selectedItem = _ref3.selectedItem,\n            highlightedIndex = _ref3.highlightedIndex,\n            selectItemAtIndex = _ref3.selectItemAtIndex,\n            getRootProps = _ref3.getRootProps,\n            restDownshiftProps = _objectWithoutProperties(_ref3, [\"isOpen\", \"inputValue\", \"getItemProps\", \"selectedItem\", \"highlightedIndex\", \"selectItemAtIndex\", \"getRootProps\"]);\n\n        return React.createElement(Pane, _extends({\n          width: \"100%\"\n        }, getRootProps({\n          refKey: 'innerRef'\n        })), React.createElement(Popover, {\n          bringFocusInside: false,\n          isShown: isShown,\n          minWidth: popoverMinWidth,\n          position: position || (_this2.state.targetWidth < popoverMinWidth ? Position.BOTTOM_LEFT : Position.BOTTOM),\n          content: function content() {\n            return _this2.renderResults({\n              width: Math.max(_this2.state.targetWidth, popoverMinWidth),\n              inputValue: inputValue,\n              getItemProps: getItemProps,\n              selectedItem: selectedItem,\n              highlightedIndex: highlightedIndex,\n              selectItemAtIndex: selectItemAtIndex\n            });\n          },\n          minHeight: 0,\n          animationDuration: 0\n        }, function (_ref4) {\n          var isShownPopover = _ref4.isShown,\n              toggle = _ref4.toggle,\n              _getRef = _ref4.getRef;\n          return children(_objectSpread({\n            isShown: isShownPopover,\n            toggle: toggle,\n            getRef: function getRef(ref) {\n              // Use the ref internally to determine the width\n              _this2.targetRef = ref;\n\n              _getRef(ref);\n            },\n            inputValue: inputValue,\n            selectedItem: selectedItem,\n            highlightedIndex: highlightedIndex,\n            selectItemAtIndex: selectItemAtIndex\n          }, restDownshiftProps));\n        }));\n      });\n    }\n  }]);\n\n  return Autocomplete;\n}(PureComponent);\n\nAutocomplete.displayName = \"Autocomplete\";\n\n_defineProperty(Autocomplete, \"propTypes\", _objectSpread({\n  /**\n   * This prop can be either a string or a Node.\n   * It will provide a title for the items\n   */\n  title: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n\n  /**\n   * An array of items to be used as options for the select\n   */\n  items: PropTypes.array.isRequired,\n\n  /**\n   * The selected Item to be shown on the autocomplete\n   */\n  selectedItem: PropTypes.any,\n\n  /**\n   * The selected item to be selected & shown by default on the autocomplete\n   */\n  defaultSelectedItem: PropTypes.any,\n\n  /**\n   * In case the array of items is not an array of strings,\n   * this function is used on each item to return the string that will be shown on the filter\n   */\n  itemToString: PropTypes.func.isRequired,\n\n  /**\n   * Function that will render the 'filter' component.\n   */\n  children: PropTypes.func.isRequired,\n\n  /**\n   * The height of each item in the list\n   * Because the list is virtualized this is required beforehand.\n   */\n  itemSize: PropTypes.number,\n\n  /**\n   * Function that returns a component to render the item\n   */\n  renderItem: PropTypes.func,\n\n  /**\n   * The position of the Popover the Autocomplete is rendered in.\n   */\n  position: PropTypes.oneOf(Object.keys(Position)),\n\n  /**\n   * A function that is used to filter the items.\n   * It should return a subset of the initial items.\n   * By default the \"fuzzaldrin-plus\" package is used.\n   */\n  itemsFilter: PropTypes.func,\n\n  /**\n   * Prop that enables and disables filtering\n   * True: Enables Filtering\n   * False: Disables Filtering\n   */\n  isFilterDisabled: PropTypes.bool,\n\n  /**\n   * Defines the minimum height the results container will be\n   */\n  popoverMinWidth: PropTypes.number,\n\n  /**\n   * Defines the maximum height the results container will be\n   */\n  popoverMaxHeight: PropTypes.number\n}, Downshift.propTypes));\n\n_defineProperty(Autocomplete, \"defaultProps\", {\n  itemToString: function itemToString(i) {\n    return i ? String(i) : '';\n  },\n  itemSize: 32,\n  itemsFilter: fuzzyFilter,\n  isFilterDisabled: false,\n  popoverMinWidth: 240,\n  popoverMaxHeight: 240,\n  renderItem: autocompleteItemRenderer\n});\n\nexport { Autocomplete as default };","map":null,"metadata":{},"sourceType":"module"}