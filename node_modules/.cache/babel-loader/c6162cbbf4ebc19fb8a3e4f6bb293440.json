{"ast":null,"code":"//This code is adapted from https://github.com/makercam/makercam/blob/master/src/clipperOffset.ts\nimport ClipperLib from 'js-clipper';\nimport { connectPoints } from './primitives.js';\nimport * as utils from '../utils.js'; // const EndTypes = {\n//     etOpenSquare: 0,\n//     etOpenRound: 1,\n//     etOpenButt: 2,\n//     etClosedPolygon: 3,\n//     etClosedLine: 4\n// };\n\nvar JoinTypes = [ClipperLib.JoinType.jtSquare, ClipperLib.JoinType.jtRound, ClipperLib.JoinType.jtMiter];\nexport var clipOffset = function clipOffset(contour, offset) {\n  var joints = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  var tolerance = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0.01;\n  var scale = 1000; // let paths = contour.map(line => ([\n  //                     {X: Math.round(line.origin[0] * scale), Y: Math.round(line.origin[1] * scale)},\n  //                     {X: Math.round(line.end[0] * scale), Y: Math.round(line.end[1] * scale)}\n  //             ])).reduce((result, value, index, array) => {\n  //                 if (index % 2 === 0) {\n  //                     result.push(array.slice(index, index + 2).flat());\n  //                 }\n  //                 return result;\n  //\n  //             }, []);\n\n  var keyPoints = contour.map(function (line) {\n    return [{\n      X: Math.round(line.origin[0] * scale),\n      Y: Math.round(line.origin[1] * scale)\n    }, {\n      X: Math.round(line.end[0] * scale),\n      Y: Math.round(line.end[1] * scale)\n    }];\n  }).flat();\n  console.log(\"keyPoints\", keyPoints);\n  keyPoints.push(keyPoints[0]);\n  var paths = [keyPoints]; //console.log(\"paths\", paths);\n\n  var co = new ClipperLib.ClipperOffset();\n  var offsetted = new ClipperLib.Paths();\n  co.Clear();\n  co.AddPaths(paths, JoinTypes[joints], ClipperLib.EndType.etClosedLine); //chain.endless ? EndTypes.etClosedLine : EndTypes.etOpenButt\n\n  co.MiterLimit = 2;\n  co.ArcTolerance = 0.25;\n  co.Execute(offsetted, offset * scale);\n  var newContours = [];\n  offsetted.forEach(function (points) {\n    if (points.length === 0) return;\n    var result = [];\n    points.forEach(function (point) {\n      result.push([point.X / scale, point.Y / scale]);\n    });\n    newContours[utils.makeID()] = connectPoints(result);\n  });\n  return newContours;\n};","map":{"version":3,"sources":["/Users/leomcelroy/Desktop/barkbeetle_js/src/unmakerjs/clipper.js"],"names":["ClipperLib","connectPoints","utils","JoinTypes","JoinType","jtSquare","jtRound","jtMiter","clipOffset","contour","offset","joints","tolerance","scale","keyPoints","map","line","X","Math","round","origin","Y","end","flat","console","log","push","paths","co","ClipperOffset","offsetted","Paths","Clear","AddPaths","EndType","etClosedLine","MiterLimit","ArcTolerance","Execute","newContours","forEach","points","length","result","point","makeID"],"mappings":"AAAA;AAEA,OAAOA,UAAP,MAAuB,YAAvB;AAEA,SAAQC,aAAR,QAA4B,iBAA5B;AACA,OAAO,KAAKC,KAAZ,MAAuB,aAAvB,C,CAIA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAMC,SAAS,GAAG,CACdH,UAAU,CAACI,QAAX,CAAoBC,QADN,EAEdL,UAAU,CAACI,QAAX,CAAoBE,OAFN,EAGdN,UAAU,CAACI,QAAX,CAAoBG,OAHN,CAAlB;AAMA,OAAO,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAACC,OAAD,EAAUC,MAAV,EAAmD;AAAA,MAAjCC,MAAiC,uEAAxB,CAAwB;AAAA,MAArBC,SAAqB,uEAAT,IAAS;AACzE,MAAMC,KAAK,GAAG,IAAd,CADyE,CAGzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAIC,SAAS,GAAGL,OAAO,CAACM,GAAR,CAAY,UAAAC,IAAI;AAAA,WAC3B,CACG;AAACC,MAAAA,CAAC,EAAEC,IAAI,CAACC,KAAL,CAAWH,IAAI,CAACI,MAAL,CAAY,CAAZ,IAAiBP,KAA5B,CAAJ;AAAwCQ,MAAAA,CAAC,EAAEH,IAAI,CAACC,KAAL,CAAWH,IAAI,CAACI,MAAL,CAAY,CAAZ,IAAiBP,KAA5B;AAA3C,KADH,EAEG;AAACI,MAAAA,CAAC,EAAEC,IAAI,CAACC,KAAL,CAAWH,IAAI,CAACM,GAAL,CAAS,CAAT,IAAcT,KAAzB,CAAJ;AAAqCQ,MAAAA,CAAC,EAAEH,IAAI,CAACC,KAAL,CAAWH,IAAI,CAACM,GAAL,CAAS,CAAT,IAAcT,KAAzB;AAAxC,KAFH,CAD2B;AAAA,GAAhB,EAIRU,IAJQ,EAAhB;AAMIC,EAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBX,SAAzB;AACJA,EAAAA,SAAS,CAACY,IAAV,CAAeZ,SAAS,CAAC,CAAD,CAAxB;AAEA,MAAIa,KAAK,GAAG,CAACb,SAAD,CAAZ,CAtByE,CAuBzE;;AAEA,MAAMc,EAAE,GAAG,IAAI5B,UAAU,CAAC6B,aAAf,EAAX;AACA,MAAMC,SAAS,GAAG,IAAI9B,UAAU,CAAC+B,KAAf,EAAlB;AACAH,EAAAA,EAAE,CAACI,KAAH;AACAJ,EAAAA,EAAE,CAACK,QAAH,CAAYN,KAAZ,EAAmBxB,SAAS,CAACQ,MAAD,CAA5B,EAAsCX,UAAU,CAACkC,OAAX,CAAmBC,YAAzD,EA5ByE,CA4BF;;AACvEP,EAAAA,EAAE,CAACQ,UAAH,GAAgB,CAAhB;AACAR,EAAAA,EAAE,CAACS,YAAH,GAAkB,IAAlB;AACAT,EAAAA,EAAE,CAACU,OAAH,CAAWR,SAAX,EAAsBpB,MAAM,GAAGG,KAA/B;AAEA,MAAI0B,WAAW,GAAG,EAAlB;AAEAT,EAAAA,SAAS,CAACU,OAAV,CAAkB,UAACC,MAAD,EAAY;AAC1B,QAAIA,MAAM,CAACC,MAAP,KAAkB,CAAtB,EAAyB;AACzB,QAAIC,MAAM,GAAG,EAAb;AACAF,IAAAA,MAAM,CAACD,OAAP,CAAe,UAACI,KAAD,EAAW;AACtBD,MAAAA,MAAM,CAACjB,IAAP,CAAY,CAACkB,KAAK,CAAC3B,CAAN,GAAUJ,KAAX,EAAkB+B,KAAK,CAACvB,CAAN,GAAUR,KAA5B,CAAZ;AACH,KAFD;AAIA0B,IAAAA,WAAW,CAACrC,KAAK,CAAC2C,MAAN,EAAD,CAAX,GAA8B5C,aAAa,CAAC0C,MAAD,CAA3C;AACH,GARD;AAUA,SAAOJ,WAAP;AACH,CA9CM","sourcesContent":["//This code is adapted from https://github.com/makercam/makercam/blob/master/src/clipperOffset.ts\n\nimport ClipperLib from 'js-clipper';\n\nimport {connectPoints} from './primitives.js';\nimport * as utils from '../utils.js';\n\n\n\n// const EndTypes = {\n//     etOpenSquare: 0,\n//     etOpenRound: 1,\n//     etOpenButt: 2,\n//     etClosedPolygon: 3,\n//     etClosedLine: 4\n// };\n\nconst JoinTypes = [\n    ClipperLib.JoinType.jtSquare,\n    ClipperLib.JoinType.jtRound,\n    ClipperLib.JoinType.jtMiter\n]\n\nexport const clipOffset = (contour, offset, joints = 0, tolerance = 0.01) => {\n    const scale = 1000\n\n    // let paths = contour.map(line => ([\n    //                     {X: Math.round(line.origin[0] * scale), Y: Math.round(line.origin[1] * scale)},\n    //                     {X: Math.round(line.end[0] * scale), Y: Math.round(line.end[1] * scale)}\n    //             ])).reduce((result, value, index, array) => {\n    //                 if (index % 2 === 0) {\n    //                     result.push(array.slice(index, index + 2).flat());\n    //                 }\n    //                 return result;\n    //\n    //             }, []);\n    let keyPoints = contour.map(line =>\n        ([\n            {X: Math.round(line.origin[0] * scale), Y: Math.round(line.origin[1] * scale)},\n            {X: Math.round(line.end[0] * scale), Y: Math.round(line.end[1] * scale)}\n        ])).flat();\n\n        console.log(\"keyPoints\", keyPoints);\n    keyPoints.push(keyPoints[0])\n\n    let paths = [keyPoints]\n    //console.log(\"paths\", paths);\n\n    const co = new ClipperLib.ClipperOffset()\n    const offsetted = new ClipperLib.Paths()\n    co.Clear()\n    co.AddPaths(paths, JoinTypes[joints], ClipperLib.EndType.etClosedLine) //chain.endless ? EndTypes.etClosedLine : EndTypes.etOpenButt\n    co.MiterLimit = 2\n    co.ArcTolerance = 0.25\n    co.Execute(offsetted, offset * scale);\n\n    let newContours = [];\n\n    offsetted.forEach((points) => {\n        if (points.length === 0) return\n        let result = []\n        points.forEach((point) => {\n            result.push([point.X / scale, point.Y / scale])\n        })\n\n        newContours[utils.makeID()] = connectPoints(result);\n    })\n\n    return newContours;\n}\n"]},"metadata":{},"sourceType":"module"}