{"ast":null,"code":"/*\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the terms of the LICENSE file distributed with this project.\n */\nimport * as tslib_1 from \"tslib\";\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport { CONTEXTMENU_WARN_DECORATOR_NEEDS_REACT_ELEMENT, CONTEXTMENU_WARN_DECORATOR_NO_METHOD } from \"../../common/errors\";\nimport { getDisplayName, isFunction, safeInvoke } from \"../../common/utils\";\nimport { isDarkTheme } from \"../../common/utils/isDarkTheme\";\nimport * as ContextMenu from \"./contextMenu\";\nexport function ContextMenuTarget(WrappedComponent) {\n  if (!isFunction(WrappedComponent.prototype.renderContextMenu)) {\n    console.warn(CONTEXTMENU_WARN_DECORATOR_NO_METHOD);\n  }\n\n  return _a =\n  /** @class */\n  function (_super) {\n    tslib_1.__extends(ContextMenuTargetClass, _super);\n\n    function ContextMenuTargetClass() {\n      return _super !== null && _super.apply(this, arguments) || this;\n    }\n\n    ContextMenuTargetClass.prototype.render = function () {\n      var _this = this;\n\n      var element = _super.prototype.render.call(this);\n\n      if (element == null) {\n        // always return `element` in case caller is distinguishing between `null` and `undefined`\n        return element;\n      }\n\n      if (!React.isValidElement(element)) {\n        console.warn(CONTEXTMENU_WARN_DECORATOR_NEEDS_REACT_ELEMENT);\n        return element;\n      }\n\n      var oldOnContextMenu = element.props.onContextMenu;\n\n      var onContextMenu = function onContextMenu(e) {\n        // support nested menus (inner menu target would have called preventDefault())\n        if (e.defaultPrevented) {\n          return;\n        }\n\n        if (isFunction(_this.renderContextMenu)) {\n          var menu = _this.renderContextMenu(e);\n\n          if (menu != null) {\n            var darkTheme = isDarkTheme(ReactDOM.findDOMNode(_this));\n            e.preventDefault();\n            ContextMenu.show(menu, {\n              left: e.clientX,\n              top: e.clientY\n            }, _this.onContextMenuClose, darkTheme);\n          }\n        }\n\n        safeInvoke(oldOnContextMenu, e);\n      };\n\n      return React.cloneElement(element, {\n        onContextMenu: onContextMenu\n      });\n    };\n\n    return ContextMenuTargetClass;\n  }(WrappedComponent), _a.displayName = \"ContextMenuTarget(\" + getDisplayName(WrappedComponent) + \")\", _a;\n\n  var _a;\n}","map":null,"metadata":{},"sourceType":"module"}