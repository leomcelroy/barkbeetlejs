{"ast":null,"code":"function _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport { transform, fromObject, translate, scale } from 'transformation-matrix';\nimport { ACTION_ZOOM, MODE_IDLE, MODE_ZOOMING, ALIGN_CENTER, ALIGN_LEFT, ALIGN_RIGHT, ALIGN_TOP, ALIGN_BOTTOM } from '../constants';\nimport { set, getSVGPoint } from './common';\nimport calculateBox from '../utils/calculateBox';\n\nfunction lessThanScaleFactorMin(value, scaleFactor) {\n  return value.scaleFactorMin && value.d * scaleFactor <= value.scaleFactorMin;\n}\n\nfunction moreThanScaleFactorMax(value, scaleFactor) {\n  return value.scaleFactorMax && value.d * scaleFactor >= value.scaleFactorMax;\n}\n\nexport function isZoomLevelGoingOutOfBounds(value, scaleFactor) {\n  return lessThanScaleFactorMin(value, scaleFactor) && scaleFactor < 1 || moreThanScaleFactorMax(value, scaleFactor) && scaleFactor > 1;\n}\nexport function limitZoomLevel(value, matrix) {\n  var scaleLevel = matrix.a;\n\n  if (value.scaleFactorMin != null) {\n    // limit minimum zoom\n    scaleLevel = Math.max(scaleLevel, value.scaleFactorMin);\n  }\n\n  if (value.scaleFactorMax != null) {\n    // limit maximum zoom\n    scaleLevel = Math.min(scaleLevel, value.scaleFactorMax);\n  }\n\n  return set(matrix, {\n    a: scaleLevel,\n    d: scaleLevel\n  });\n}\nexport function zoom(value, SVGPointX, SVGPointY, scaleFactor) {\n  if (isZoomLevelGoingOutOfBounds(value, scaleFactor)) {\n    // Do not change translation and scale of value\n    return value;\n  }\n\n  var matrix = transform(fromObject(value), translate(SVGPointX, SVGPointY), scale(scaleFactor, scaleFactor), translate(-SVGPointX, -SVGPointY));\n  return set(value, _objectSpread({\n    mode: MODE_IDLE\n  }, limitZoomLevel(value, matrix), {\n    startX: null,\n    startY: null,\n    endX: null,\n    endY: null\n  }), ACTION_ZOOM);\n}\nexport function fitSelection(value, selectionSVGPointX, selectionSVGPointY, selectionWidth, selectionHeight) {\n  var viewerWidth = value.viewerWidth,\n      viewerHeight = value.viewerHeight;\n  var scaleX = viewerWidth / selectionWidth;\n  var scaleY = viewerHeight / selectionHeight;\n  var scaleLevel = Math.min(scaleX, scaleY);\n  var matrix = transform(scale(scaleLevel, scaleLevel), //2\n  translate(-selectionSVGPointX, -selectionSVGPointY) //1\n  );\n\n  if (isZoomLevelGoingOutOfBounds(value, scaleLevel / value.d)) {\n    // Do not allow scale and translation\n    return set(value, {\n      mode: MODE_IDLE,\n      startX: null,\n      startY: null,\n      endX: null,\n      endY: null\n    });\n  }\n\n  return set(value, _objectSpread({\n    mode: MODE_IDLE\n  }, limitZoomLevel(value, matrix), {\n    startX: null,\n    startY: null,\n    endX: null,\n    endY: null\n  }), ACTION_ZOOM);\n}\nexport function fitToViewer(value) {\n  var SVGAlignX = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ALIGN_LEFT;\n  var SVGAlignY = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : ALIGN_TOP;\n  var viewerWidth = value.viewerWidth,\n      viewerHeight = value.viewerHeight,\n      SVGWidth = value.SVGWidth,\n      SVGHeight = value.SVGHeight;\n  var scaleX = viewerWidth / SVGWidth;\n  var scaleY = viewerHeight / SVGHeight;\n  var scaleLevel = Math.min(scaleX, scaleY);\n  var scaleMatrix = scale(scaleLevel, scaleLevel);\n  var translationMatrix = translate(0, 0); // after fitting, SVG and the viewer will match in width (1) or in height (2)\n\n  if (scaleX < scaleY) {\n    //(1) match in width, meaning scaled SVGHeight <= viewerHeight\n    var remainderY = viewerHeight - scaleX * SVGHeight;\n    if (SVGAlignY === ALIGN_CENTER) translationMatrix = translate(0, Math.round(remainderY / 2));\n    if (SVGAlignY === ALIGN_BOTTOM) translationMatrix = translate(0, remainderY);\n  } else {\n    //(2) match in height, meaning scaled SVGWidth <= viewerWidth\n    var remainderX = viewerWidth - scaleY * SVGWidth;\n    if (SVGAlignX === ALIGN_CENTER) translationMatrix = translate(Math.round(remainderX / 2), 0);\n    if (SVGAlignX === ALIGN_RIGHT) translationMatrix = translate(remainderX, 0);\n  }\n\n  var matrix = transform(translationMatrix, //2\n  scaleMatrix //1\n  );\n\n  if (isZoomLevelGoingOutOfBounds(value, scaleLevel / value.d)) {\n    // Do not allow scale and translation\n    return set(value, {\n      mode: MODE_IDLE,\n      startX: null,\n      startY: null,\n      endX: null,\n      endY: null\n    });\n  }\n\n  return set(value, _objectSpread({\n    mode: MODE_IDLE\n  }, limitZoomLevel(value, matrix), {\n    startX: null,\n    startY: null,\n    endX: null,\n    endY: null\n  }), ACTION_ZOOM);\n}\nexport function zoomOnViewerCenter(value, scaleFactor) {\n  var viewerWidth = value.viewerWidth,\n      viewerHeight = value.viewerHeight;\n  var SVGPoint = getSVGPoint(value, viewerWidth / 2, viewerHeight / 2);\n  return zoom(value, SVGPoint.x, SVGPoint.y, scaleFactor);\n}\nexport function startZooming(value, viewerX, viewerY) {\n  return set(value, {\n    mode: MODE_ZOOMING,\n    startX: viewerX,\n    startY: viewerY,\n    endX: viewerX,\n    endY: viewerY\n  });\n}\nexport function updateZooming(value, viewerX, viewerY) {\n  if (value.mode !== MODE_ZOOMING) throw new Error('update selection not allowed in this mode ' + value.mode);\n  return set(value, {\n    endX: viewerX,\n    endY: viewerY\n  });\n}\nexport function stopZooming(value, viewerX, viewerY, scaleFactor, props) {\n  var startX = value.startX,\n      startY = value.startY,\n      endX = value.endX,\n      endY = value.endY;\n  var start = getSVGPoint(value, startX, startY);\n  var end = getSVGPoint(value, endX, endY);\n\n  if (Math.abs(startX - endX) > 7 && Math.abs(startY - endY) > 7) {\n    var box = calculateBox(start, end);\n    return fitSelection(value, box.x, box.y, box.width, box.height);\n  } else {\n    var SVGPoint = getSVGPoint(value, viewerX, viewerY);\n    return zoom(value, SVGPoint.x, SVGPoint.y, scaleFactor, props);\n  }\n}","map":null,"metadata":{},"sourceType":"module"}