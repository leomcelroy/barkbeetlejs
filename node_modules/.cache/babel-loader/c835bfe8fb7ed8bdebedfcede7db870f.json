{"ast":null,"code":"/*\n * Copyright 2018 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the terms of the LICENSE file distributed with this project.\n */\nimport * as tslib_1 from \"tslib\";\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport { Classes, Intent } from \"../../common\";\nimport { AbstractPureComponent } from \"../../common/abstractPureComponent\";\nimport * as Errors from \"../../common/errors\";\nimport { DISPLAYNAME_PREFIX } from \"../../common/props\";\nimport * as Utils from \"../../common/utils\";\nimport { Handle } from \"./handle\";\nimport { HandleInteractionKind, HandleType } from \"./handleProps\";\nimport { argMin, fillValues, formatPercentage } from \"./sliderUtils\";\n/**\n * SFC used to pass slider handle props to a `MultiSlider`.\n * This element is not rendered directly.\n */\n\nvar MultiSliderHandle = function MultiSliderHandle() {\n  return null;\n};\n\nMultiSliderHandle.displayName = DISPLAYNAME_PREFIX + \".MultiSliderHandle\";\n\nvar MultiSlider =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(MultiSlider, _super);\n\n  function MultiSlider() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.state = {\n      labelPrecision: getLabelPrecision(_this.props),\n      tickSize: 0,\n      tickSizeRatio: 0\n    };\n    _this.handleElements = [];\n\n    _this.addHandleRef = function (ref) {\n      if (ref != null) {\n        _this.handleElements.push(ref);\n      }\n    };\n\n    _this.maybeHandleTrackClick = function (event) {\n      if (_this.canHandleTrackEvent(event)) {\n        var foundHandle = _this.nearestHandleForValue(_this.handleElements, function (handle) {\n          return handle.mouseEventClientOffset(event);\n        });\n\n        if (foundHandle) {\n          foundHandle.beginHandleMovement(event);\n        }\n      }\n    };\n\n    _this.maybeHandleTrackTouch = function (event) {\n      if (_this.canHandleTrackEvent(event)) {\n        var foundHandle = _this.nearestHandleForValue(_this.handleElements, function (handle) {\n          return handle.touchEventClientOffset(event);\n        });\n\n        if (foundHandle) {\n          foundHandle.beginHandleTouchMovement(event);\n        }\n      }\n    };\n\n    _this.canHandleTrackEvent = function (event) {\n      var target = event.target; // ensure event does not come from inside the handle\n\n      return !_this.props.disabled && target.closest(\".\" + Classes.SLIDER_HANDLE) == null;\n    };\n\n    _this.getHandlerForIndex = function (index, callback) {\n      return function (newValue) {\n        Utils.safeInvoke(callback, _this.getNewHandleValues(newValue, index));\n      };\n    };\n\n    _this.handleChange = function (newValues) {\n      var oldValues = _this.handleProps.map(function (handle) {\n        return handle.value;\n      });\n\n      if (!Utils.arraysEqual(newValues, oldValues)) {\n        Utils.safeInvoke(_this.props.onChange, newValues);\n\n        _this.handleProps.forEach(function (handle, index) {\n          if (oldValues[index] !== newValues[index]) {\n            Utils.safeInvoke(handle.onChange, newValues[index]);\n          }\n        });\n      }\n    };\n\n    _this.handleRelease = function (newValues) {\n      Utils.safeInvoke(_this.props.onRelease, newValues);\n\n      _this.handleProps.forEach(function (handle, index) {\n        Utils.safeInvoke(handle.onRelease, newValues[index]);\n      });\n    };\n\n    return _this;\n  }\n\n  MultiSlider.prototype.render = function () {\n    var _this = this;\n\n    var classes = classNames(Classes.SLIDER, (_a = {}, _a[Classes.DISABLED] = this.props.disabled, _a[Classes.SLIDER + \"-unlabeled\"] = this.props.labelRenderer === false, _a[Classes.VERTICAL] = this.props.vertical, _a), this.props.className);\n    return React.createElement(\"div\", {\n      className: classes,\n      onMouseDown: this.maybeHandleTrackClick,\n      onTouchStart: this.maybeHandleTrackTouch\n    }, React.createElement(\"div\", {\n      className: Classes.SLIDER_TRACK,\n      ref: function ref(_ref) {\n        return _this.trackElement = _ref;\n      }\n    }, this.renderTracks()), React.createElement(\"div\", {\n      className: Classes.SLIDER_AXIS\n    }, this.renderLabels()), this.renderHandles());\n\n    var _a;\n  };\n\n  MultiSlider.prototype.componentWillMount = function () {\n    this.handleProps = getSortedInteractiveHandleProps(this.props);\n  };\n\n  MultiSlider.prototype.componentDidMount = function () {\n    this.updateTickSize();\n  };\n\n  MultiSlider.prototype.componentDidUpdate = function () {\n    this.updateTickSize();\n  };\n\n  MultiSlider.prototype.componentWillReceiveProps = function (nextProps) {\n    this.setState({\n      labelPrecision: this.getLabelPrecision(nextProps)\n    });\n    var newHandleProps = getSortedInteractiveHandleProps(nextProps);\n\n    if (newHandleProps.length !== this.handleProps.length) {\n      this.handleElements = [];\n    }\n\n    this.handleProps = newHandleProps;\n  };\n\n  MultiSlider.prototype.validateProps = function (props) {\n    if (props.stepSize <= 0) {\n      throw new Error(Errors.SLIDER_ZERO_STEP);\n    }\n\n    if (props.labelStepSize <= 0) {\n      throw new Error(Errors.SLIDER_ZERO_LABEL_STEP);\n    }\n\n    var anyInvalidChildren = false;\n    React.Children.forEach(props.children, function (child) {\n      // allow boolean coercion to omit nulls and false values\n      if (child && !Utils.isElementOfType(child, MultiSlider.Handle)) {\n        anyInvalidChildren = true;\n      }\n    });\n\n    if (anyInvalidChildren) {\n      throw new Error(Errors.MULTISLIDER_INVALID_CHILD);\n    }\n  };\n\n  MultiSlider.prototype.formatLabel = function (value) {\n    var labelRenderer = this.props.labelRenderer;\n\n    if (labelRenderer === false) {\n      return null;\n    } else if (Utils.isFunction(labelRenderer)) {\n      return labelRenderer(value);\n    } else {\n      return value.toFixed(this.state.labelPrecision);\n    }\n  };\n\n  MultiSlider.prototype.renderLabels = function () {\n    if (this.props.labelRenderer === false) {\n      return null;\n    }\n\n    var _a = this.props,\n        labelStepSize = _a.labelStepSize,\n        max = _a.max,\n        min = _a.min;\n    var labels = [];\n    var stepSizeRatio = this.state.tickSizeRatio * labelStepSize; // step size lends itself naturally to a `for` loop\n    // tslint:disable-next-line:one-variable-per-declaration ban-comma-operator\n\n    for (var i = min, offsetRatio = 0; i < max || Utils.approxEqual(i, max); i += labelStepSize, offsetRatio += stepSizeRatio) {\n      var offsetPercentage = formatPercentage(offsetRatio);\n      var style = this.props.vertical ? {\n        bottom: offsetPercentage\n      } : {\n        left: offsetPercentage\n      };\n      labels.push(React.createElement(\"div\", {\n        className: Classes.SLIDER_LABEL,\n        key: i,\n        style: style\n      }, this.formatLabel(i)));\n    }\n\n    return labels;\n  };\n\n  MultiSlider.prototype.renderTracks = function () {\n    var trackStops = getSortedHandleProps(this.props);\n    trackStops.push({\n      value: this.props.max\n    }); // render from current to previous, then increment previous\n\n    var previous = {\n      value: this.props.min\n    };\n    var handles = [];\n\n    for (var index = 0; index < trackStops.length; index++) {\n      var current = trackStops[index];\n      handles.push(this.renderTrackFill(index, previous, current));\n      previous = current;\n    }\n\n    return handles;\n  };\n\n  MultiSlider.prototype.renderTrackFill = function (index, start, end) {\n    // ensure startRatio <= endRatio\n    var _a = [this.getOffsetRatio(start.value), this.getOffsetRatio(end.value)].sort(),\n        startRatio = _a[0],\n        endRatio = _a[1];\n\n    var startOffset = formatPercentage(startRatio);\n    var endOffset = formatPercentage(1 - endRatio);\n    var style = this.props.vertical ? {\n      bottom: startOffset,\n      top: endOffset,\n      left: 0\n    } : {\n      left: startOffset,\n      right: endOffset,\n      top: 0\n    };\n    var classes = classNames(Classes.SLIDER_PROGRESS, Classes.intentClass(this.getTrackIntent(start, end)));\n    return React.createElement(\"div\", {\n      key: \"track-\" + index,\n      className: classes,\n      style: style\n    });\n  };\n\n  MultiSlider.prototype.renderHandles = function () {\n    var _this = this;\n\n    var _a = this.props,\n        disabled = _a.disabled,\n        max = _a.max,\n        min = _a.min,\n        stepSize = _a.stepSize,\n        vertical = _a.vertical;\n    return this.handleProps.map(function (_a, index) {\n      var value = _a.value,\n          type = _a.type;\n      return React.createElement(Handle, {\n        className: classNames((_b = {}, _b[Classes.START] = type === HandleType.START, _b[Classes.END] = type === HandleType.END, _b)),\n        disabled: disabled,\n        key: index + \"-\" + _this.handleProps.length,\n        label: _this.formatLabel(value),\n        max: max,\n        min: min,\n        onChange: _this.getHandlerForIndex(index, _this.handleChange),\n        onRelease: _this.getHandlerForIndex(index, _this.handleRelease),\n        ref: _this.addHandleRef,\n        stepSize: stepSize,\n        tickSize: _this.state.tickSize,\n        tickSizeRatio: _this.state.tickSizeRatio,\n        value: value,\n        vertical: vertical\n      });\n\n      var _b;\n    });\n  };\n\n  MultiSlider.prototype.nearestHandleForValue = function (handles, getOffset) {\n    return argMin(handles, function (handle) {\n      var offset = getOffset(handle);\n      var offsetValue = handle.clientToValue(offset);\n      var handleValue = handle.props.value;\n      return Math.abs(offsetValue - handleValue);\n    });\n  };\n\n  MultiSlider.prototype.getNewHandleValues = function (newValue, oldIndex) {\n    var oldValues = this.handleProps.map(function (handle) {\n      return handle.value;\n    });\n    var newValues = oldValues.slice();\n    newValues[oldIndex] = newValue;\n    newValues.sort(function (left, right) {\n      return left - right;\n    });\n    var newIndex = newValues.indexOf(newValue);\n    var lockIndex = this.findFirstLockedHandleIndex(oldIndex, newIndex);\n\n    if (lockIndex === -1) {\n      fillValues(newValues, oldIndex, newIndex, newValue);\n    } else {\n      // If pushing past a locked handle, discard the new value and only make the updates to clamp values against the lock.\n      var lockValue = oldValues[lockIndex];\n      fillValues(oldValues, oldIndex, lockIndex, lockValue);\n      return oldValues;\n    }\n\n    return newValues;\n  };\n\n  MultiSlider.prototype.findFirstLockedHandleIndex = function (startIndex, endIndex) {\n    var inc = startIndex < endIndex ? 1 : -1;\n\n    for (var index = startIndex + inc; index !== endIndex + inc; index += inc) {\n      if (this.handleProps[index].interactionKind !== HandleInteractionKind.PUSH) {\n        return index;\n      }\n    }\n\n    return -1;\n  };\n\n  MultiSlider.prototype.getLabelPrecision = function (_a) {\n    var labelPrecision = _a.labelPrecision,\n        stepSize = _a.stepSize; // infer default label precision from stepSize because that's how much the handle moves.\n\n    return labelPrecision == null ? Utils.countDecimalPlaces(stepSize) : labelPrecision;\n  };\n\n  MultiSlider.prototype.getOffsetRatio = function (value) {\n    return Utils.clamp((value - this.props.min) * this.state.tickSizeRatio, 0, 1);\n  };\n\n  MultiSlider.prototype.getTrackIntent = function (start, end) {\n    if (!this.props.showTrackFill) {\n      return Intent.NONE;\n    }\n\n    if (start.intentAfter !== undefined) {\n      return start.intentAfter;\n    } else if (end !== undefined && end.intentBefore !== undefined) {\n      return end.intentBefore;\n    }\n\n    return this.props.defaultTrackIntent;\n  };\n\n  MultiSlider.prototype.updateTickSize = function () {\n    if (this.trackElement != null) {\n      var trackSize = this.props.vertical ? this.trackElement.clientHeight : this.trackElement.clientWidth;\n      var tickSizeRatio = 1 / (this.props.max - this.props.min);\n      var tickSize = trackSize * tickSizeRatio;\n      this.setState({\n        tickSize: tickSize,\n        tickSizeRatio: tickSizeRatio\n      });\n    }\n  };\n\n  MultiSlider.defaultSliderProps = {\n    disabled: false,\n    labelStepSize: 1,\n    max: 10,\n    min: 0,\n    showTrackFill: true,\n    stepSize: 1,\n    vertical: false\n  };\n  MultiSlider.defaultProps = tslib_1.__assign({}, MultiSlider.defaultSliderProps, {\n    defaultTrackIntent: Intent.NONE\n  });\n  MultiSlider.displayName = DISPLAYNAME_PREFIX + \".MultiSlider\";\n  MultiSlider.Handle = MultiSliderHandle;\n  return MultiSlider;\n}(AbstractPureComponent);\n\nexport { MultiSlider };\n\nfunction getLabelPrecision(_a) {\n  var labelPrecision = _a.labelPrecision,\n      stepSize = _a.stepSize; // infer default label precision from stepSize because that's how much the handle moves.\n\n  return labelPrecision == null ? Utils.countDecimalPlaces(stepSize) : labelPrecision;\n}\n\nfunction getSortedInteractiveHandleProps(props) {\n  return getSortedHandleProps(props, function (childProps) {\n    return childProps.interactionKind !== HandleInteractionKind.NONE;\n  });\n}\n\nfunction getSortedHandleProps(_a, predicate) {\n  var children = _a.children;\n\n  if (predicate === void 0) {\n    predicate = function predicate() {\n      return true;\n    };\n  }\n\n  var maybeHandles = React.Children.map(children, function (child) {\n    return Utils.isElementOfType(child, MultiSlider.Handle) && predicate(child.props) ? child.props : null;\n  });\n  var handles = maybeHandles != null ? maybeHandles : [];\n  handles = handles.filter(function (handle) {\n    return handle !== null;\n  });\n  handles.sort(function (left, right) {\n    return left.value - right.value;\n  });\n  return handles;\n}","map":null,"metadata":{},"sourceType":"module"}