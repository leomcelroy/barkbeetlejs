{"ast":null,"code":"import _classCallCheck from \"/Users/leomcelroy/Desktop/barkBeetleEverything/barkbeetle_js_real/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/leomcelroy/Desktop/barkBeetleEverything/barkbeetle_js_real/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/leomcelroy/Desktop/barkBeetleEverything/barkbeetle_js_real/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/leomcelroy/Desktop/barkBeetleEverything/barkbeetle_js_real/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/leomcelroy/Desktop/barkBeetleEverything/barkbeetle_js_real/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _toConsumableArray from \"/Users/leomcelroy/Desktop/barkBeetleEverything/barkbeetle_js_real/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nvar _jsxFileName = \"/Users/leomcelroy/Desktop/barkBeetleEverything/barkbeetle_js_real/src/App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport * as utils from './utils.js';\nimport * as s2p from 'shape2path';\nimport * as mjs from 'makerjs';\nimport { Workplane } from './Workplane.js';\nimport Button from '@material-ui/core/Button'; //import svg and turn into paths\n\nvar t = s2p.rect({\n  x: 0,\n  y: 120,\n  width: 200,\n  height: 200,\n  rx: 20,\n  ry: 20\n});\nvar m = mjs.importer.fromSVGPathData(t); //generate gcode data\n\nvar cutDepth = 13;\nvar passDepth = 5;\nvar toolDiameter = 10;\nvar numberOfOffsets = 3;\nvar stepover = 1.25;\nvar tolerance = 3;\nvar climbDirection = false;\nvar insideCutting = false;\nvar millOuterFirst = false;\nvar jogHeight = 1;\nvar jogRate = 40;\nvar feedRate = 20;\nvar toolRadius = toolDiameter / 2;\nvar nSeries = toolDiameter * stepover;\nvar compensatedRadius = toolRadius + tolerance;\nvar tempFloor = Math.floor(cutDepth / passDepth);\nvar actualPassDepth = cutDepth / tempFloor;\nvar depthOfPasses = utils.makeSeries(actualPassDepth, actualPassDepth, tempFloor).map(function (n) {\n  return -n;\n}); //should this be changed right now it occasionally exceeds max stepsize\n// console.log(depthOfPasses)\n\nvar c1 = mjs.model.expandPaths(m, compensatedRadius, 1);\nvar c2 = mjs.model.findChains(c1); // console.log(c2)\n\nvar chain = mjs.model.findSingleChain(c1); // console.log(chain)\n\nvar minimumSpacing = 5;\nvar divisions = Math.floor(chain.pathLength / minimumSpacing);\nvar spacing = chain.pathLength / divisions;\nvar keyPoints = mjs.chain.toPoints(chain, spacing);\nvar scaleFactor = 100;\nvar scaleXY = keyPoints.map(function (p) {\n  return [p[0] / scaleFactor, p[1] / scaleFactor];\n});\nvar gcodePoints = scaleXY.map(function (p) {\n  return \"G1 X\".concat(p[0], \" Y\").concat(p[1], \" F\").concat(feedRate);\n});\nvar gcode = JSON.parse(JSON.stringify(gcodePoints));\nvar firstPoint = scaleXY[0];\nvar paths = depthOfPasses.map(function (p, i) {\n  return [\"G1 Z\".concat(depthOfPasses[i], \" F12.0\")].concat(_toConsumableArray(gcode), [\"G1 X\".concat(firstPoint[0], \" Y\").concat(firstPoint[1], \" F\").concat(feedRate)]);\n});\npaths = paths.flat(1);\ngcode = [\"G20\", \"G90\", \"G1 Z\".concat(jogHeight, \" F9.0\"), \"G0 X\".concat(firstPoint[0], \" Y\").concat(firstPoint[1])].concat(_toConsumableArray(paths)); // write to a new file named\n\nvar filename = 'testGcode.nc';\nvar text = gcode.join('\\n'); // utils.download(filename, text);\n\nvar svg = mjs.exporter.toSVG(c1);\nsvg = utils.editSVG(svg); //<div dangerouslySetInnerHTML={{__html: svg}}/>\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this));\n    _this.state = {\n      shapes: []\n    };\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"uploadSVG\",\n    value: function uploadSVG() {}\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(\"div\", {\n        style: {\n          margin: 0,\n          height: \"100%\",\n          overflow: \"hidden\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      }, React.createElement(Workplane, {\n        group: svg,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }), React.createElement(\"input\", {\n        type: \"file\",\n        name: \"uploadedSVG\",\n        onChange: function onChange(e) {\n          return handleUpload(_this2, e);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      }), React.createElement(Button, {\n        variant: \"contained\",\n        color: \"primary\",\n        onClick: function onClick() {\n          return console.log(\"upload\");\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }, \"Upload SVG\"));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/leomcelroy/Desktop/barkBeetleEverything/barkbeetle_js_real/src/App.js"],"names":["React","Component","utils","s2p","mjs","Workplane","Button","t","rect","x","y","width","height","rx","ry","m","importer","fromSVGPathData","cutDepth","passDepth","toolDiameter","numberOfOffsets","stepover","tolerance","climbDirection","insideCutting","millOuterFirst","jogHeight","jogRate","feedRate","toolRadius","nSeries","compensatedRadius","tempFloor","Math","floor","actualPassDepth","depthOfPasses","makeSeries","map","n","c1","model","expandPaths","c2","findChains","chain","findSingleChain","minimumSpacing","divisions","pathLength","spacing","keyPoints","toPoints","scaleFactor","scaleXY","p","gcodePoints","gcode","JSON","parse","stringify","firstPoint","paths","i","flat","filename","text","join","svg","exporter","toSVG","editSVG","App","state","shapes","margin","overflow","e","handleUpload","console","log"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nimport * as utils from './utils.js';\n\nimport * as s2p from 'shape2path';\nimport * as mjs from 'makerjs';\n\nimport {Workplane} from './Workplane.js'\n\nimport Button from '@material-ui/core/Button';\n\n//import svg and turn into paths\nlet t = s2p.rect({x: 0, y: 120, width: 200, height: 200, rx: 20, ry: 20});\nlet m = mjs.importer.fromSVGPathData(t);\n\n//generate gcode data\nlet cutDepth = 13;\nlet passDepth = 5;\nlet toolDiameter = 10;\nlet numberOfOffsets = 3;\nlet stepover = 1.25;\nlet tolerance = 3;\nlet climbDirection = false;\nlet insideCutting = false;\nlet millOuterFirst = false;\nlet jogHeight = 1;\nlet jogRate = 40;\nlet feedRate = 20;\n\nlet toolRadius = toolDiameter/2;\n\nlet nSeries = toolDiameter * stepover;\nlet compensatedRadius = toolRadius + tolerance;\n\nlet tempFloor = Math.floor(cutDepth/passDepth);\nlet actualPassDepth = cutDepth/tempFloor;\n\nlet depthOfPasses = utils.makeSeries(actualPassDepth, actualPassDepth, tempFloor).map(n => -n); //should this be changed right now it occasionally exceeds max stepsize\n// console.log(depthOfPasses)\n\nlet c1 = mjs.model.expandPaths(m, compensatedRadius, 1);\n\nlet c2 = mjs.model.findChains(c1);\n// console.log(c2)\n\nlet chain = mjs.model.findSingleChain(c1);\n// console.log(chain)\n\nvar minimumSpacing = 5;\nvar divisions = Math.floor(chain.pathLength / minimumSpacing);\nvar spacing = chain.pathLength / divisions;\n\nlet keyPoints = mjs.chain.toPoints(chain, spacing);\n\nlet scaleFactor = 100;\nlet scaleXY = keyPoints.map(p => [p[0]/scaleFactor, p[1]/scaleFactor]);\n\nlet gcodePoints = scaleXY.map(p => `G1 X${p[0]} Y${p[1]} F${feedRate}`)\nlet gcode = JSON.parse(JSON.stringify(gcodePoints));\n\nlet firstPoint = scaleXY[0];\n\nlet paths = depthOfPasses.map((p,i) => [`G1 Z${depthOfPasses[i]} F12.0`, ...gcode, `G1 X${firstPoint[0]} Y${firstPoint[1]} F${feedRate}`])\npaths = paths.flat(1);\n\ngcode = [\n  \"G20\",\n  \"G90\",\n  `G1 Z${jogHeight} F9.0`,\n  `G0 X${firstPoint[0]} Y${firstPoint[1]}`,\n  ...paths\n]\n\n// write to a new file named\nlet filename = 'testGcode.nc';\n\nlet text = gcode.join('\\n');\n\n// utils.download(filename, text);\n\nlet svg = mjs.exporter.toSVG(c1);\n\nsvg = utils.editSVG(svg);\n\n//<div dangerouslySetInnerHTML={{__html: svg}}/>\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      shapes: [],\n    }\n  };\n\n  uploadSVG() {\n\n  }\n\n  render() {\n    return (\n      <div style={{\n                    margin: 0,\n                    height: \"100%\",\n                    overflow: \"hidden\"\n                  }}>\n        <Workplane group={svg}/>\n        <input type=\"file\" name=\"uploadedSVG\" onChange={(e) => handleUpload(this, e)}/>\n        <Button variant=\"contained\" color=\"primary\" onClick={() => console.log(\"upload\")}>Upload SVG</Button>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}