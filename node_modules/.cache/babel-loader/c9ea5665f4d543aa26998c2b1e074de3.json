{"ast":null,"code":"import React, { Component } from 'react';\nimport * as utils from './utils.js'; // class Workplane extends Component {\n//\n//   state = {\n//       width: 500,\n//       height: 500,\n//       v0: 0,\n//       v1: 0,\n//       v2: 500,\n//       v3: 500,\n//       mousedown: false,\n//       //zoomDelta: 0,\n//     };\n//\n//   wheel(e) {\n//     e.preventDefault();\n//     let loc = utils.getSVGpoint(e, this.state.v0, this.state.v1, this.state.v2, this.state.v3 ,this.state.width, this.state.height);\n//\n//     if (e.ctrlKey) {\n//\n//       let zoomRate = 10;\n//       //zooms to center now\n//\n//       if (e.deltaY < 0) {\n//         //console.log('zoom in');\n//\n//         let v2 = (e.deltaY * zoomRate + this.state.v2 > 1) ? e.deltaY * zoomRate + this.state.v2 : this.state.v2;\n//         let v3 = (e.deltaY * zoomRate + this.state.v3 > 1) ? e.deltaY * zoomRate + this.state.v3 : this.state.v3;\n//\n//         let v0 = this.state.v0 - e.deltaY * zoomRate/2;\n//         let v1 = this.state.v1 - e.deltaY * zoomRate/2;\n//         // console.log(\"e.deltaY * zoomRate\", e.deltaY * zoomRate)\n//         // console.log(\"v0\", e.deltaY * zoomRate, v0)\n//         // console.log(\"v1\", this.state.v1, v1)\n//\n//         this.setState({v0, v1, v2, v3})\n//       }\n//\n//       if (e.deltaY > 0) {\n//         //console.log('zoom out');\n//\n//         let v2 = e.deltaY * zoomRate + this.state.v2;\n//         let v3 = e.deltaY * zoomRate + this.state.v3;\n//\n//         let v0 = this.state.v0 - e.deltaY * zoomRate/2;\n//         let v1 = this.state.v1 - e.deltaY * zoomRate/2;\n//\n//         this.setState({v0,v1, v2, v3})\n//       }\n//\n//       return\n//     }\n//\n//     if (e.deltaY < 0) {\n//       //console.log('scrolling up');\n//\n//       let v1 = this.state.v1 + e.deltaY;\n//       this.setState({v1});\n//     }\n//     if (e.deltaY > 0) {\n//       //console.log('scrolling down');\n//\n//       let v1 = this.state.v1 + e.deltaY;\n//       this.setState({v1});\n//     }\n//     if (e.deltaX < 0) {\n//       //console.log('scrolling left');\n//\n//       let v0 = this.state.v0 + e.deltaX;\n//       this.setState({v0});\n//     }\n//     if (e.deltaX > 0) {\n//       //console.log('scrolling right');\n//\n//       let v0 = this.state.v0 + e.deltaX;\n//       this.setState({v0});\n//     }\n//   }\n//\n// //   // Find your root SVG element\n// // var svg = document.querySelector('svg');\n// //\n// // // Create an SVGPoint for future math\n// // var pt = svg.createSVGPoint();\n// //\n// // // Get point in global SVG space\n// // function cursorPoint(evt){\n// //   pt.x = evt.clientX; pt.y = evt.clientY;\n// //   return pt.matrixTransform(svg.getScreenCTM().inverse());\n// // }\n// //\n// // svg.addEventListener('mousemove',function(evt){\n// //   var loc = cursorPoint(evt);\n// //   // Use loc.x and loc.y here\n// // },false);\n//\n//   mouseDown(e) {\n//     this.setState({\n//       mousedown: true\n//     });\n//\n//   }\n//\n//   mouseMove(e) {\n//     let loc = utils.getSVGpoint(e, this.state.v0, this.state.v1, this.state.v2, this.state.v3 ,this.state.width, this.state.height);\n//\n//     // console.log(loc.x, loc.y)\n//   }\n//\n//   mouseUp(e) {\n//     this.setState({\n//       mousedown: false\n//     });\n//   }\n//\n//   render() {\n//\n//     return (\n//       <svg\n//         width={this.state.width}\n//         height={this.state.height}\n//         viewBox={`${this.state.v0} ${this.state.v1} ${this.state.v2} ${this.state.v3}`}\n//         xmlns={\"http://www.w3.org/2000/svg\"}\n//         onWheel={(e) => this.wheel(e)}\n//         onMouseDown={(e) => this.mouseDown(e)}\n//         onMouseMove={(e) => this.mouseMove(e)}\n//         onMouseUp={(e) => this.mouseUp(e)}\n//         style={{border: \"1px solid #cccccc\"}}>\n//\n//           {this.props.groups}\n//       </svg>\n//     );\n//   }\n// }\n//\n// export {Workplane}\n//\n// import React, { Component, useState} from 'react';\n// import * as utils from './utils.js';\n//\n//\n// const Workplane = ({groups}) => {\n//\n//   const [state, setState] = useState({\n//       width: 500,\n//       height: 500,\n//       v0: 0,\n//       v1: 0,\n//       v2: 500,\n//       v3: 500,\n//       mousedown: false,\n//       //zoomDelta: 0,\n//     });\n//\n//   const wheel = (e) => {\n//     e.preventDefault();\n//     let loc = utils.getSVGpoint(e, state.v0, state.v1, state.v2, state.v3 ,state.width, state.height);\n//\n//     if (e.ctrlKey) {\n//\n//       let zoomRate = 10;\n//       //zooms to center now\n//\n//       if (e.deltaY < 0) {\n//         //console.log('zoom in');\n//\n//         let v2 = (e.deltaY * zoomRate + state.v2 > 1) ? e.deltaY * zoomRate + state.v2 : state.v2;\n//         let v3 = (e.deltaY * zoomRate + state.v3 > 1) ? e.deltaY * zoomRate + state.v3 : state.v3;\n//\n//         let v0 = state.v0 - e.deltaY * zoomRate/2;\n//         let v1 = state.v1 - e.deltaY * zoomRate/2;\n//         // console.log(\"e.deltaY * zoomRate\", e.deltaY * zoomRate)\n//         // console.log(\"v0\", e.deltaY * zoomRate, v0)\n//         // console.log(\"v1\", state.v1, v1)\n//\n//         setState({...state, v0, v1, v2, v3})\n//       }\n//\n//       if (e.deltaY > 0) {\n//         //console.log('zoom out');\n//\n//         let v2 = e.deltaY * zoomRate + state.v2;\n//         let v3 = e.deltaY * zoomRate + state.v3;\n//\n//         let v0 = state.v0 - e.deltaY * zoomRate/2;\n//         let v1 = state.v1 - e.deltaY * zoomRate/2;\n//\n//         setState({...state, v0,v1, v2, v3})\n//       }\n//\n//       return\n//     }\n//\n//     if (e.deltaY < 0) {\n//       //console.log('scrolling up');\n//\n//       let v1 = state.v1 + e.deltaY;\n//       setState({...state, v1});\n//     }\n//     if (e.deltaY > 0) {\n//       //console.log('scrolling down');\n//\n//       let v1 = state.v1 + e.deltaY;\n//       setState({...state, v1});\n//     }\n//     if (e.deltaX < 0) {\n//       //console.log('scrolling left');\n//\n//       let v0 = state.v0 + e.deltaX;\n//       setState({...state, v0});\n//     }\n//     if (e.deltaX > 0) {\n//       //console.log('scrolling right');\n//\n//       let v0 = state.v0 + e.deltaX;\n//       setState({...state, v0});\n//     }\n//   }\n//\n// //   // Find your root SVG element\n// // var svg = document.querySelector('svg');\n// //\n// // // Create an SVGPoint for future math\n// // var pt = svg.createSVGPoint();\n// //\n// // // Get point in global SVG space\n// // function cursorPoint(evt){\n// //   pt.x = evt.clientX; pt.y = evt.clientY;\n// //   return pt.matrixTransform(svg.getScreenCTM().inverse());\n// // }\n// //\n// // svg.addEventListener('mousemove',function(evt){\n// //   var loc = cursorPoint(evt);\n// //   // Use loc.x and loc.y here\n// // },false);\n//\n//   const mouseDown = (e) => {\n//     setState({\n//       ...state,\n//       mousedown: true\n//     });\n//\n//   }\n//\n//   const mouseMove = (e) => {\n//     let loc = utils.getSVGpoint(e, state.v0, state.v1, state.v2, state.v3 ,state.width, state.height);\n//\n//     // console.log(loc.x, loc.y)\n//   }\n//\n//   const mouseUp = (e) => {\n//     setState({\n//       ...state,\n//       mousedown: false\n//     });\n//   }\n//\n//   return (\n//       <svg\n//         width={state.width}\n//         height={state.height}\n//         viewBox={`${state.v0} ${state.v1} ${state.v2} ${state.v3}`}\n//         xmlns={\"http://www.w3.org/2000/svg\"}\n//         onWheel={(e) => wheel(e)}\n//         onMouseDown={(e) => mouseDown(e)}\n//         onMouseMove={(e) => mouseMove(e)}\n//         onMouseUp={(e) => mouseUp(e)}\n//         style={{border: \"1px solid #cccccc\"}}>\n//\n//           {groups}\n//       </svg>\n//   );\n//\n// }\n//\n// export {Workplane}","map":{"version":3,"sources":["/Users/leomcelroy/Desktop/barkbeetle_js/src/Workplane.js"],"names":["React","Component","utils"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,KAAKC,KAAZ,MAAuB,YAAvsourcesContent":["import React, { Component } from 'react';\nimport * as utils from './utils.js';\n\n\n// class Workplane extends Component {\n//\n//   state = {\n//       width: 500,\n//       height: 500,\n//       v0: 0,\n//       v1: 0,\n//       v2: 500,\n//       v3: 500,\n//       mousedown: false,\n//       //zoomDelta: 0,\n//     };\n//\n//   wheel(e) {\n//     e.preventDefault();\n//     let loc = utils.getSVGpoint(e, this.state.v0, this.state.v1, this.state.v2, this.state.v3 ,this.state.width, this.state.height);\n//\n//     if (e.ctrlKey) {\n//\n//       let zoomRate = 10;\n//       //zooms to center now\n//\n//       if (e.deltaY < 0) {\n//         //console.log('zoom in');\n//\n//         let v2 = (e.deltaY * zoomRate + this.state.v2 > 1) ? e.deltaY * zoomRate + this.state.v2 : this.state.v2;\n//         let v3 = (e.deltaY * zoomRate + this.state.v3 > 1) ? e.deltaY * zoomRate + this.state.v3 : this.state.v3;\n//\n//         let v0 = this.state.v0 - e.deltaY * zoomRate/2;\n//         let v1 = this.state.v1 - e.deltaY * zoomRate/2;\n//         // console.log(\"e.deltaY * zoomRate\", e.deltaY * zoomRate)\n//         // console.log(\"v0\", e.deltaY * zoomRate, v0)\n//         // console.log(\"v1\", this.state.v1, v1)\n//\n//         this.setState({v0, v1, v2, v3})\n//       }\n//\n//       if (e.deltaY > 0) {\n//         //console.log('zoom out');\n//\n//         let v2 = e.deltaY * zoomRate + this.state.v2;\n//         let v3 = e.deltaY * zoomRate + this.state.v3;\n//\n//         let v0 = this.state.v0 - e.deltaY * zoomRate/2;\n//         let v1 = this.state.v1 - e.deltaY * zoomRate/2;\n//\n//         this.setState({v0,v1, v2, v3})\n//       }\n//\n//       return\n//     }\n//\n//     if (e.deltaY < 0) {\n//       //console.log('scrolling up');\n//\n//       let v1 = this.state.v1 + e.deltaY;\n//       this.setState({v1});\n//     }\n//     if (e.deltaY > 0) {\n//       //console.log('scrolling down');\n//\n//       let v1 = this.state.v1 + e.deltaY;\n//       this.setState({v1});\n//     }\n//     if (e.deltaX < 0) {\n//       //console.log('scrolling left');\n//\n//       let v0 = this.state.v0 + e.deltaX;\n//       this.setState({v0});\n//     }\n//     if (e.deltaX > 0) {\n//       //console.log('scrolling right');\n//\n//       let v0 = this.state.v0 + e.deltaX;\n//       this.setState({v0});\n//     }\n//   }\n//\n// //   // Find your root SVG element\n// // var svg = document.querySelector('svg');\n// //\n// // // Create an SVGPoint for future math\n// // var pt = svg.createSVGPoint();\n// //\n// // // Get point in global SVG space\n// // function cursorPoint(evt){\n// //   pt.x = evt.clientX; pt.y = evt.clientY;\n// //   return pt.matrixTransform(svg.getScreenCTM().inverse());\n// // }\n// //\n// // svg.addEventListener('mousemove',function(evt){\n// //   var loc = cursorPoint(evt);\n// //   // Use loc.x and loc.y here\n// // },false);\n//\n//   mouseDown(e) {\n//     this.setState({\n//       mousedown: true\n//     });\n//\n//   }\n//\n//   mouseMove(e) {\n//     let loc = utils.getSVGpoint(e, this.state.v0, this.state.v1, this.state.v2, this.state.v3 ,this.state.width, this.state.height);\n//\n//     // console.log(loc.x, loc.y)\n//   }\n//\n//   mouseUp(e) {\n//     this.setState({\n//       mousedown: false\n//     });\n//   }\n//\n//   render() {\n//\n//     return (\n//       <svg\n//         width={this.state.width}\n//         height={this.state.height}\n//         viewBox={`${this.state.v0} ${this.state.v1} ${this.state.v2} ${this.state.v3}`}\n//         xmlns={\"http://www.w3.org/2000/svg\"}\n//         onWheel={(e) => this.wheel(e)}\n//         onMouseDown={(e) => this.mouseDown(e)}\n//         onMouseMove={(e) => this.mouseMove(e)}\n//         onMouseUp={(e) => this.mouseUp(e)}\n//         style={{border: \"1px solid #cccccc\"}}>\n//\n//           {this.props.groups}\n//       </svg>\n//     );\n//   }\n// }\n//\n// export {Workplane}\n//\n// import React, { Component, useState} from 'react';\n// import * as utils from './utils.js';\n//\n//\n// const Workplane = ({groups}) => {\n//\n//   const [state, setState] = useState({\n//       width: 500,\n//       height: 500,\n//       v0: 0,\n//       v1: 0,\n//       v2: 500,\n//       v3: 500,\n//       mousedown: false,\n//       //zoomDelta: 0,\n//     });\n//\n//   const wheel = (e) => {\n//     e.preventDefault();\n//     let loc = utils.getSVGpoint(e, state.v0, state.v1, state.v2, state.v3 ,state.width, state.height);\n//\n//     if (e.ctrlKey) {\n//\n//       let zoomRate = 10;\n//       //zooms to center now\n//\n//       if (e.deltaY < 0) {\n//         //console.log('zoom in');\n//\n//         let v2 = (e.deltaY * zoomRate + state.v2 > 1) ? e.deltaY * zoomRate + state.v2 : state.v2;\n//         let v3 = (e.deltaY * zoomRate + state.v3 > 1) ? e.deltaY * zoomRate + state.v3 : state.v3;\n//\n//         let v0 = state.v0 - e.deltaY * zoomRate/2;\n//         let v1 = state.v1 - e.deltaY * zoomRate/2;\n//         // console.log(\"e.deltaY * zoomRate\", e.deltaY * zoomRate)\n//         // console.log(\"v0\", e.deltaY * zoomRate, v0)\n//         // console.log(\"v1\", state.v1, v1)\n//\n//         setState({...state, v0, v1, v2, v3})\n//       }\n//\n//       if (e.deltaY > 0) {\n//         //console.log('zoom out');\n//\n//         let v2 = e.deltaY * zoomRate + state.v2;\n//         let v3 = e.deltaY * zoomRate + state.v3;\n//\n//         let v0 = state.v0 - e.deltaY * zoomRate/2;\n//         let v1 = state.v1 - e.deltaY * zoomRate/2;\n//\n//         setState({...state, v0,v1, v2, v3})\n//       }\n//\n//       return\n//     }\n//\n//     if (e.deltaY < 0) {\n//       //console.log('scrolling up');\n//\n//       let v1 = state.v1 + e.deltaY;\n//       setState({...state, v1});\n//     }\n//     if (e.deltaY > 0) {\n//       //console.log('scrolling down');\n//\n//       let v1 = state.v1 + e.deltaY;\n//       setState({...state, v1});\n//     }\n//     if (e.deltaX < 0) {\n//       //console.log('scrolling left');\n//\n//       let v0 = state.v0 + e.deltaX;\n//       setState({...state, v0});\n//     }\n//     if (e.deltaX > 0) {\n//       //console.log('scrolling right');\n//\n//       let v0 = state.v0 + e.deltaX;\n//       setState({...state, v0});\n//     }\n//   }\n//\n// //   // Find your root SVG element\n// // var svg = document.querySelector('svg');\n// //\n// // // Create an SVGPoint for future math\n// // var pt = svg.createSVGPoint();\n// //\n// // // Get point in global SVG space\n// // function cursorPoint(evt){\n// //   pt.x = evt.clientX; pt.y = evt.clientY;\n// //   return pt.matrixTransform(svg.getScreenCTM().inverse());\n// // }\n// //\n// // svg.addEventListener('mousemove',function(evt){\n// //   var loc = cursorPoint(evt);\n// //   // Use loc.x and loc.y here\n// // },false);\n//\n//   const mouseDown = (e) => {\n//     setState({\n//       ...state,\n//       mousedown: true\n//     });\n//\n//   }\n//\n//   const mouseMove = (e) => {\n//     let loc = utils.getSVGpoint(e, state.v0, state.v1, state.v2, state.v3 ,state.width, state.height);\n//\n//     // console.log(loc.x, loc.y)\n//   }\n//\n//   const mouseUp = (e) => {\n//     setState({\n//       ...state,\n//       mousedown: false\n//     });\n//   }\n//\n//   return (\n//       <svg\n//         width={state.width}\n//         height={state.height}\n//         viewBox={`${state.v0} ${state.v1} ${state.v2} ${state.v3}`}\n//         xmlns={\"http://www.w3.org/2000/svg\"}\n//         onWheel={(e) => wheel(e)}\n//         onMouseDown={(e) => mouseDown(e)}\n//         onMouseMove={(e) => mouseMove(e)}\n//         onMouseUp={(e) => mouseUp(e)}\n//         style={{border: \"1px solid #cccccc\"}}>\n//\n//           {groups}\n//       </svg>\n//   );\n//\n// }\n//\n// export {Workplane}\n"]},"metadata":{},"sourceType":"module"}