{"ast":null,"code":"import _classCallCheck from \"/Users/leomcelroy/Desktop/barkBeetleEverything/barkbeetle_js_real/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/leomcelroy/Desktop/barkBeetleEverything/barkbeetle_js_real/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/leomcelroy/Desktop/barkBeetleEverything/barkbeetle_js_real/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/leomcelroy/Desktop/barkBeetleEverything/barkbeetle_js_real/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/leomcelroy/Desktop/barkBeetleEverything/barkbeetle_js_real/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/leomcelroy/Desktop/barkBeetleEverything/barkbeetle_js_real/src/App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport * as utils from './utils.js';\nimport * as s2p from 'shape2path';\nimport * as mjs from 'makerjs';\nimport * as svgson from 'svgson';\nimport * as params from './parameters.js';\nimport { Workplane } from './Workplane.js';\nimport Button from '@material-ui/core/Button';\nimport { kk } from './joints/koshikake.js';\nimport { profile } from './toolpaths/profile.js'; // utils.download(filename, text);\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this));\n    _this.state = {\n      shapes: []\n    };\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"uploadSVG\",\n    value: function uploadSVG(e) {\n      var replaceWithPath = function replaceWithPath(child) {\n        if (child.name === \"g\") {\n          return child.children.map(function (grandchild) {\n            return replaceWithPath(grandchild);\n          });\n        }\n\n        if (child.name === \"rectangle\") {\n          var temp = s2p.rect({\n            x: 0,\n            y: 120,\n            width: 200,\n            height: 200,\n            rx: 20,\n            ry: 20\n          });\n          return mjs.importer.fromSVGPathData(temp);\n        }\n\n        if (child.name === \"path\") {\n          var makerjsPath = mjs.importer.fromSVGPathData(child.attributes.d);\n          return makerjsPath;\n        }\n      };\n\n      var files = e.target.files;\n      var file = files[0];\n      var reader = new FileReader();\n\n      reader.onload = function (event) {\n        var text = event.target.result; // let regexPaths = /<path[\\s\\S]*\\/>/g;\n        // let foundPaths = file2.match(regexPaths);\n\n        svgson.parse(text).then(function (json) {\n          var svg = json.children.map(function (child) {\n            return replaceWithPath(child);\n          });\n          svg = svg.flat(1); //TODO: what does the argument do again?\n          //TODO: update state to have makerjs models\n\n          console.log(svg);\n        });\n      };\n\n      reader.readAsText(file);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      //should I put everying in a list or all to one model, there seem to be some issues with origins if I mjs.exporter.toSVG() seperately\n      var test = kk;\n      testProfile = test.models.profile; // let drawings = [test, profile(test)];\n      // drawings = drawings.map(d => mjs.exporter.toSVG(d));\n\n      var model = {\n        models: {\n          1: test,\n          2: profile(test)\n        }\n      };\n      model = [mjs.exporter.toSVG(model)];\n      return React.createElement(\"div\", {\n        style: {\n          margin: 0,\n          height: \"100%\",\n          overflow: \"hidden\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }, React.createElement(Workplane, {\n        groups: model,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        id: \"myInput\",\n        type: \"file\",\n        ref: function ref(_ref) {\n          return _this2.upload = _ref;\n        },\n        style: {\n          display: 'none'\n        },\n        onChange: function onChange(e) {\n          return _this2.uploadSVG(e);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }), React.createElement(Button, {\n        variant: \"contained\",\n        color: \"primary\",\n        onClick: function onClick(e) {\n          return _this2.upload.click();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      }, \"Upload SVG\")));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/leomcelroy/Desktop/barkBeetleEverything/barkbeetle_js_real/src/App.js"],"names":["React","Component","utils","s2p","mjs","svgson","params","Workplane","Button","kk","profile","App","state","shapes","e","replaceWithPath","child","name","children","map","grandchild","temp","rect","x","y","width","height","rx","ry","importer","fromSVGPathData","makerjsPath","attributes","d","files","target","file","reader","FileReader","onload","event","text","result","parse","then","json","svg","flat","console","log","readAsText","test","testProfile","models","model","exporter","toSVG","margin","overflow","ref","upload","display","uploadSVG","click"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nimport * as utils from './utils.js';\n\nimport * as s2p from 'shape2path';\nimport * as mjs from 'makerjs';\nimport * as svgson from 'svgson';\nimport * as params from './parameters.js'\n\nimport {Workplane} from './Workplane.js'\n\nimport Button from '@material-ui/core/Button';\n\nimport {kk} from './joints/koshikake.js';\nimport {profile} from './toolpaths/profile.js';\n\n// utils.download(filename, text);\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      shapes: [],\n    }\n  };\n\n  uploadSVG(e) {\n    const replaceWithPath = (child) => {\n      if (child.name === \"g\") {\n        return child.children.map(grandchild => replaceWithPath(grandchild));\n      }\n\n      if (child.name === \"rectangle\") {\n        let temp = s2p.rect({x: 0, y: 120, width: 200, height: 200, rx: 20, ry: 20});\n        return mjs.importer.fromSVGPathData(temp);\n      }\n\n      if (child.name === \"path\") {\n        let makerjsPath = mjs.importer.fromSVGPathData(child.attributes.d);\n        return makerjsPath;\n      }\n    }\n\n    let files = e.target.files;\n    let file = files[0];\n\n    var reader = new FileReader();\n\n    reader.onload = (event) => {\n        let text = event.target.result;\n\n        // let regexPaths = /<path[\\s\\S]*\\/>/g;\n        // let foundPaths = file2.match(regexPaths);\n\n        svgson.parse(text).then((json) => {\n          let svg = json.children.map(child => {\n            return replaceWithPath(child);\n          });\n\n          svg = svg.flat(1); //TODO: what does the argument do again?\n\n          //TODO: update state to have makerjs models\n          console.log(svg);\n        });\n\n    }\n\n    reader.readAsText(file);\n  }\n\n  render() {\n    //should I put everying in a list or all to one model, there seem to be some issues with origins if I mjs.exporter.toSVG() seperately\n    let test = kk;\n    testProfile = test.models.profile;\n\n    // let drawings = [test, profile(test)];\n    // drawings = drawings.map(d => mjs.exporter.toSVG(d));\n\n    let model = {\n      models: {\n        1: test,\n        2: profile(test)\n      }\n    }\n\n    model = [mjs.exporter.toSVG(model)];\n\n    return (\n      <div style={{\n                    margin: 0,\n                    height: \"100%\",\n                    overflow: \"hidden\"\n                  }}>\n        <Workplane groups={model}/>\n\n        <div>\n          <input\n            id=\"myInput\"\n            type=\"file\"\n            ref={(ref) => this.upload = ref}\n            style={{ display: 'none' }}\n            onChange={(e) => this.uploadSVG(e)}/>\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            onClick={(e) => this.upload.click()}\n            >\n              Upload SVG\n          </Button>\n        </div>\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}