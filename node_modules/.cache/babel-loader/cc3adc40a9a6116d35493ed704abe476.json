{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || Object.assign || function (t) {\n  for (var s, i = 1, n = arguments.length; i < n; i++) {\n    s = arguments[i];\n\n    for (var p in s) {\n      if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n  }\n\n  return t;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar devTools;\n\nif (typeof window !== 'undefined' && process.env.NODE_ENV !== 'production') {\n  console.log(\"You're currently using a development version of Laco\");\n\n  if (window.__REDUX_DEVTOOLS_EXTENSION__) {\n    devTools = window.__REDUX_DEVTOOLS_EXTENSION__.connect();\n    devTools.init({});\n  }\n}\n\nvar STORE = {};\nvar COUNTER = 0;\n\nvar Store =\n/** @class */\nfunction () {\n  function Store(initialState, name) {\n    var _this = this;\n\n    this.name = '';\n    this._listeners = [];\n    if (name) this.name = name;\n    this.idx = COUNTER++;\n    STORE[this.idx] = initialState;\n    this.initialState = initialState;\n\n    if (typeof window !== 'undefined' && process.env.NODE_ENV !== 'production') {\n      if (devTools) {\n        devTools.subscribe(function (message) {\n          switch (message.payload && message.payload.type) {\n            case 'JUMP_TO_STATE':\n            case 'JUMP_TO_ACTION':\n              STORE[_this.idx] = JSON.parse(message.state)[_this.idx];\n\n              _this._listeners.forEach(function (fn) {\n                return fn();\n              });\n\n          }\n        });\n      }\n    }\n  }\n\n  Store.prototype.get = function () {\n    return STORE[this.idx];\n  };\n\n  Store.prototype.set = function (state, info) {\n    if (this.condition) {\n      var newState = this.condition(__assign({}, STORE[this.idx], state(STORE[this.idx])), info);\n      if (newState) STORE[this.idx] = newState;\n    } else {\n      STORE[this.idx] = __assign({}, STORE[this.idx], state(STORE[this.idx]));\n    }\n\n    if (typeof window !== 'undefined' && process.env.NODE_ENV !== 'production') {\n      if (devTools) {\n        devTools.send(this.name ? this.name + ' - ' + info : info, STORE);\n      }\n    }\n\n    this._listeners.forEach(function (fn) {\n      return fn();\n    });\n  };\n\n  Store.prototype.replace = function (state, info) {\n    if (this.condition) {\n      var newState = this.condition(state(STORE[this.idx]), info);\n      if (newState) STORE[this.idx] = newState;\n    } else {\n      STORE[this.idx] = state(STORE[this.idx]);\n    }\n\n    if (typeof window !== 'undefined' && process.env.NODE_ENV !== 'production') {\n      if (devTools) {\n        devTools.send(this.name ? this.name + ' - ' + info : info, STORE);\n      }\n    }\n\n    this._listeners.forEach(function (fn) {\n      return fn();\n    });\n  };\n\n  Store.prototype.setCondition = function (func) {\n    this.condition = func;\n  };\n\n  Store.prototype.reset = function () {\n    STORE[this.idx] = this.initialState;\n  };\n\n  Store.prototype.subscribe = function (fn) {\n    this._listeners.push(fn);\n  };\n\n  Store.prototype.unsubscribe = function (fn) {\n    this._listeners = this._listeners.filter(function (f) {\n      return f !== fn;\n    });\n  };\n\n  Store.prototype.dispatch = function (value, info) {\n    if (typeof window !== 'undefined' && process.env.NODE_ENV !== 'production') {\n      if (devTools) {\n        devTools.send(this.name ? this.name + ' - ' + info : info, STORE);\n      }\n    }\n\n    return value;\n  };\n\n  return Store;\n}();\n\nexports.Store = Store;\n\nfunction dispatch(value, info) {\n  if (typeof window !== 'undefined' && process.env.NODE_ENV !== 'production') {\n    if (devTools) {\n      devTools.send(info, STORE);\n    }\n  }\n\n  return value;\n}\n\nexports.dispatch = dispatch;\n\nfunction getGlobalState() {\n  return STORE;\n}\n\nexports.getGlobalState = getGlobalState;\n\nfunction resetGlobalState() {\n  STORE = {};\n}\n\nexports.resetGlobalState = resetGlobalState;\n\nfunction replaceGlobalState(state) {\n  STORE = state;\n}\n\nexports.replaceGlobalState = replaceGlobalState;","map":null,"metadata":{},"sourceType":"script"}