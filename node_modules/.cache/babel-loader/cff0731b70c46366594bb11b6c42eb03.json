{"ast":null,"code":"var extend = function extend() {\n  var modules, methods, key, i; // Get list of modules\n\n  modules = [].slice.call(arguments); // Get object with extensions\n\n  methods = modules.pop();\n\n  for (i = modules.length - 1; i >= 0; i--) {\n    for (key in methods) {\n      modules[i].prototype[key] = methods[key];\n    }\n  }\n};\n\nvar extendClass = function extendClass() {\n  var modules, methods, key, i; // Get list of modules\n\n  modules = [].slice.call(arguments); // Get object with extensions\n\n  methods = modules.pop();\n\n  for (i = modules.length - 1; i >= 0; i--) {\n    for (key in methods) {\n      modules[i][key] = methods[key];\n    }\n  }\n};\n\nvar invent = function invent(config) {\n  var initializer = config.create || function () {};\n\n  if (config.name) {\n    Object.defineProperty(initializer, 'name', {\n      value: config.name\n    });\n  } // Inherit prototype\n\n\n  if (config.inherit) {\n    initializer.prototype = Object.create(config.inherit.prototype);\n  }\n\n  initializer.prototype.constructor = initializer; // Extend with methods\n\n  if (config.extend) {\n    extend(initializer, config.extend);\n  }\n\n  if (config.props) {\n    for (var i in config.props) {\n      Object.defineProperty(initializer.prototype, i, config.props[i]);\n    }\n  }\n\n  return initializer;\n};\n\nmodule.exports = {\n  invent: invent,\n  extend: extend,\n  extendClass: extendClass\n};","map":null,"metadata":{},"sourceType":"script"}