{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _reactDom = require('react-dom');\n\nvar _reactDom2 = _interopRequireDefault(_reactDom);\n\nvar _reactClickOutside = require('react-click-outside');\n\nvar _reactClickOutside2 = _interopRequireDefault(_reactClickOutside);\n\nvar _debounce = require('throttle-debounce/debounce');\n\nvar _debounce2 = _interopRequireDefault(_debounce);\n\nvar _popper = require('popper.js');\n\nvar _popper2 = _interopRequireDefault(_popper);\n\nvar _style = require('../../libs/utils/style');\n\nvar _style2 = _interopRequireDefault(_style);\n\nvar _libs = require('../../libs');\n\nvar _resizeEvent = require('../../libs/utils/resize-event');\n\nvar _scrollbar = require('../scrollbar');\n\nvar _tag = require('../tag');\n\nvar _tag2 = _interopRequireDefault(_tag);\n\nvar _input = require('../input');\n\nvar _input2 = _interopRequireDefault(_input);\n\nvar _locale = require('../locale');\n\nvar _locale2 = _interopRequireDefault(_locale);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\n_style2.default.reset('\\n  .el-select-dropdown {\\n    position: absolute !important;\\n  }\\n');\n\nvar sizeMap = {\n  'large': 42,\n  'small': 30,\n  'mini': 22\n};\n\nvar Select = function (_Component) {\n  (0, _inherits3.default)(Select, _Component);\n\n  function Select(props) {\n    (0, _classCallCheck3.default)(this, Select);\n\n    var _this = (0, _possibleConstructorReturn3.default)(this, (Select.__proto__ || Object.getPrototypeOf(Select)).call(this, props));\n\n    _this.state = {\n      options: [],\n      isSelect: true,\n      inputLength: 20,\n      inputWidth: 0,\n      inputHovering: false,\n      filteredOptionsCount: 0,\n      optionsCount: 0,\n      hoverIndex: -1,\n      bottomOverflowBeforeHidden: 0,\n      cachedPlaceHolder: props.placeholder || _locale2.default.t('el.select.placeholder'),\n      currentPlaceholder: props.placeholder || _locale2.default.t('el.select.placeholder'),\n      selectedLabel: '',\n      selectedInit: false,\n      visible: false,\n      selected: undefined,\n      value: props.value,\n      valueChangeBySelected: false,\n      voidRemoteQuery: false,\n      query: ''\n    };\n\n    if (props.multiple) {\n      _this.state.selectedInit = true;\n      _this.state.selected = [];\n    }\n\n    if (props.remote) {\n      _this.state.voidRemoteQuery = true;\n    }\n\n    _this.debouncedOnInputChange = (0, _debounce2.default)(_this.debounce(), function () {\n      _this.onInputChange();\n    });\n    _this.resetInputWidth = _this._resetInputWidth.bind(_this);\n    return _this;\n  }\n\n  (0, _createClass3.default)(Select, [{\n    key: 'getChildContext',\n    value: function getChildContext() {\n      return {\n        component: this\n      };\n    }\n  }, {\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      this.reference = _reactDom2.default.findDOMNode(this.refs.reference);\n      this.popper = _reactDom2.default.findDOMNode(this.refs.popper);\n      this.handleValueChange();\n      (0, _resizeEvent.addResizeListener)(this.refs.root, this.resetInputWidth);\n    }\n  }, {\n    key: 'componentWillReceiveProps',\n    value: function componentWillReceiveProps(props) {\n      var _this2 = this;\n\n      if (props.placeholder != this.props.placeholder) {\n        this.setState({\n          currentPlaceholder: props.placeholder\n        });\n      }\n\n      if (props.value != this.props.value) {\n        this.setState({\n          value: props.value\n        }, function () {\n          _this2.handleValueChange();\n        });\n      }\n    }\n  }, {\n    key: 'componentWillUpdate',\n    value: function componentWillUpdate(props, state) {\n      if (state.value != this.state.value) {\n        this.onValueChange(state.value);\n      }\n\n      if (state.visible != this.state.visible) {\n        if (this.props.onVisibleChange) {\n          this.props.onVisibleChange(state.visible);\n        }\n\n        this.onVisibleChange(state.visible);\n      }\n\n      if (state.query != this.state.query) {\n        this.onQueryChange(state.query);\n      }\n\n      if (Array.isArray(state.selected)) {\n        if (state.selected.length != this.state.selected.length) {\n          this.onSelectedChange(state.selected);\n        }\n      }\n    }\n  }, {\n    key: 'componentDidUpdate',\n    value: function componentDidUpdate() {\n      this.state.inputWidth = this.reference.getBoundingClientRect().width;\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      (0, _resizeEvent.removeResizeListener)(this.refs.root, this.resetInputWidth);\n    }\n  }, {\n    key: 'debounce',\n    value: function debounce() {\n      return this.props.remote ? 300 : 0;\n    }\n  }, {\n    key: 'handleClickOutside',\n    value: function handleClickOutside() {\n      if (this.state.visible) {\n        this.setState({\n          visible: false\n        });\n      }\n    }\n  }, {\n    key: 'handleValueChange',\n    value: function handleValueChange() {\n      var _this3 = this;\n\n      var multiple = this.props.multiple;\n      var _state = this.state,\n          value = _state.value,\n          options = _state.options;\n\n      if (multiple && Array.isArray(value)) {\n        this.setState({\n          selected: options.reduce(function (prev, curr) {\n            return value.indexOf(curr.props.value) > -1 ? prev.concat(curr) : prev;\n          }, [])\n        }, function () {\n          _this3.onSelectedChange(_this3.state.selected, false);\n        });\n      } else {\n        var _selected = options.filter(function (option) {\n          return option.props.value === value;\n        })[0];\n\n        if (_selected) {\n          this.state.selectedLabel = _selected.props.label || _selected.props.value;\n        }\n      }\n    }\n  }, {\n    key: 'onVisibleChange',\n    value: function onVisibleChange(visible) {\n      var _props = this.props,\n          multiple = _props.multiple,\n          filterable = _props.filterable;\n      var _state2 = this.state,\n          query = _state2.query,\n          dropdownUl = _state2.dropdownUl,\n          selected = _state2.selected,\n          selectedLabel = _state2.selectedLabel,\n          bottomOverflowBeforeHidden = _state2.bottomOverflowBeforeHidden;\n\n      if (!visible) {\n        this.reference.querySelector('input').blur();\n\n        if (this.refs.root.querySelector('.el-input__icon')) {\n          var elements = this.refs.root.querySelector('.el-input__icon');\n\n          for (var i = 0; i < elements.length; i++) {\n            elements[i].classList.remove('is-reverse');\n          }\n        }\n\n        if (this.refs.input) {\n          this.refs.input.blur();\n        }\n\n        this.resetHoverIndex();\n\n        if (!multiple) {\n          if (dropdownUl && selected) {\n            var element = _reactDom2.default.findDOMNode(selected);\n\n            bottomOverflowBeforeHidden = element.getBoundingClientRect().bottom - this.popper.getBoundingClientRect().bottom;\n          }\n\n          if (selected && selected.props) {\n            if (selected.props.value) {\n              selectedLabel = selected.currentLabel();\n            }\n          } else if (filterable) {\n            selectedLabel = '';\n          }\n\n          this.setState({\n            bottomOverflowBeforeHidden: bottomOverflowBeforeHidden,\n            selectedLabel: selectedLabel\n          });\n        }\n      } else {\n        var icon = this.refs.root.querySelector('.el-input__icon');\n\n        if (icon && !icon.classList.contains('el-icon-circle-close')) {\n          var _elements = this.refs.root.querySelector('.el-input__icon');\n\n          for (var _i = 0; _i < _elements.length; _i++) {\n            _elements[_i].classList.add('is-reverse');\n          }\n        }\n\n        if (this.popperJS) {\n          this.popperJS.update();\n        }\n\n        if (filterable) {\n          query = selectedLabel;\n\n          if (multiple) {\n            this.refs.input.focus();\n          } else {\n            this.refs.reference.focus();\n          }\n        }\n\n        if (!dropdownUl) {\n          var dropdownChildNodes = this.popper.childNodes;\n          dropdownUl = [].filter.call(dropdownChildNodes, function (item) {\n            return item.tagName === 'UL';\n          })[0];\n        }\n\n        if (!multiple && dropdownUl) {\n          if (bottomOverflowBeforeHidden > 0) {\n            dropdownUl.scrollTop += bottomOverflowBeforeHidden;\n          }\n        }\n\n        this.setState({\n          query: query || '',\n          dropdownUl: dropdownUl\n        });\n      }\n    }\n  }, {\n    key: 'onValueChange',\n    value: function onValueChange(val) {\n      var _this4 = this;\n\n      var multiple = this.props.multiple;\n      var _state3 = this.state,\n          options = _state3.options,\n          valueChangeBySelected = _state3.valueChangeBySelected,\n          selectedInit = _state3.selectedInit,\n          selected = _state3.selected,\n          selectedLabel = _state3.selectedLabel,\n          currentPlaceholder = _state3.currentPlaceholder,\n          cachedPlaceHolder = _state3.cachedPlaceHolder;\n\n      if (valueChangeBySelected) {\n        return this.setState({\n          valueChangeBySelected: false\n        });\n      }\n\n      if (multiple && Array.isArray(val)) {\n        this.resetInputHeight();\n        selectedInit = true;\n        selected = [];\n        currentPlaceholder = cachedPlaceHolder;\n        val.forEach(function (item) {\n          var option = options.filter(function (option) {\n            return option.props.value === item;\n          })[0];\n\n          if (option) {\n            _this4.addOptionToValue(option);\n          }\n        });\n        this.forceUpdate();\n      }\n\n      if (!multiple) {\n        var option = options.filter(function (option) {\n          return option.props.value === val;\n        })[0];\n\n        if (option) {\n          this.addOptionToValue(option);\n          this.setState({\n            selectedInit: selectedInit,\n            currentPlaceholder: currentPlaceholder\n          });\n        } else {\n          selected = {};\n          selectedLabel = '';\n          this.setState({\n            selectedInit: selectedInit,\n            selected: selected,\n            currentPlaceholder: currentPlaceholder,\n            selectedLabel: selectedLabel\n          }, function () {\n            _this4.resetHoverIndex();\n          });\n        }\n      }\n    }\n  }, {\n    key: 'onSelectedChange',\n    value: function onSelectedChange(val) {\n      var _this5 = this;\n\n      var bubble = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      var form = this.context.form;\n      var _props2 = this.props,\n          multiple = _props2.multiple,\n          filterable = _props2.filterable,\n          onChange = _props2.onChange;\n      var _state4 = this.state,\n          query = _state4.query,\n          hoverIndex = _state4.hoverIndex,\n          inputLength = _state4.inputLength,\n          selectedInit = _state4.selectedInit,\n          currentPlaceholder = _state4.currentPlaceholder,\n          cachedPlaceHolder = _state4.cachedPlaceHolder,\n          valueChangeBySelected = _state4.valueChangeBySelected;\n\n      if (multiple) {\n        if (val.length > 0) {\n          currentPlaceholder = '';\n        } else {\n          currentPlaceholder = cachedPlaceHolder;\n        }\n\n        this.setState({\n          currentPlaceholder: currentPlaceholder\n        }, function () {\n          _this5.resetInputHeight();\n        });\n        valueChangeBySelected = true;\n\n        if (bubble) {\n          onChange && onChange(val.map(function (item) {\n            return item.props.value;\n          }), val);\n          form && form.onFieldChange();\n        }\n\n        if (filterable) {\n          query = '';\n          hoverIndex = -1;\n          inputLength = 20;\n          this.refs.input.focus();\n        }\n\n        this.setState({\n          valueChangeBySelected: valueChangeBySelected,\n          query: query,\n          hoverIndex: hoverIndex,\n          inputLength: inputLength\n        }, function () {\n          if (_this5.refs.input) {\n            _this5.refs.input.value = '';\n          }\n        });\n      } else {\n        if (selectedInit) {\n          return this.setState({\n            selectedInit: false\n          });\n        }\n\n        if (bubble) {\n          onChange && onChange(val.props.value, val);\n          form && form.onFieldChange();\n        }\n      }\n    }\n  }, {\n    key: 'onQueryChange',\n    value: function onQueryChange(query) {\n      var _props3 = this.props,\n          multiple = _props3.multiple,\n          filterable = _props3.filterable,\n          remote = _props3.remote,\n          remoteMethod = _props3.remoteMethod,\n          filterMethod = _props3.filterMethod;\n      var _state5 = this.state,\n          voidRemoteQuery = _state5.voidRemoteQuery,\n          hoverIndex = _state5.hoverIndex,\n          options = _state5.options,\n          optionsCount = _state5.optionsCount;\n\n      if (this.popperJS) {\n        this.popperJS.update();\n      }\n\n      if (multiple && filterable) {\n        this.resetInputHeight();\n      }\n\n      if (remote && typeof remoteMethod === 'function') {\n        hoverIndex = -1;\n        voidRemoteQuery = query === '';\n        remoteMethod(query);\n        options.forEach(function (option) {\n          option.resetIndex();\n        });\n      } else if (typeof filterMethod === 'function') {\n        filterMethod(query);\n      } else {\n        this.setState({\n          filteredOptionsCount: optionsCount\n        }, function () {\n          options.forEach(function (option) {\n            option.queryChange(query);\n          });\n        });\n      }\n\n      this.setState({\n        hoverIndex: hoverIndex,\n        voidRemoteQuery: voidRemoteQuery\n      });\n    }\n  }, {\n    key: 'onEnter',\n    value: function onEnter() {\n      this.popperJS = new _popper2.default(this.reference, this.popper, {\n        modifiers: {\n          computeStyle: {\n            gpuAcceleration: false\n          }\n        }\n      });\n    }\n  }, {\n    key: 'onAfterLeave',\n    value: function onAfterLeave() {\n      this.popperJS.destroy();\n    }\n  }, {\n    key: 'iconClass',\n    value: function iconClass() {\n      return this.showCloseIcon() ? 'circle-close' : this.props.remote && this.props.filterable ? '' : 'caret-top ' + (this.state.visible ? 'is-reverse' : '');\n    }\n  }, {\n    key: 'showCloseIcon',\n    value: function showCloseIcon() {\n      var criteria = this.props.clearable && this.state.inputHovering && !this.props.multiple && this.state.options.indexOf(this.state.selected) > -1;\n      if (!this.refs.root) return false;\n      var icon = this.refs.root.querySelector('.el-input__icon');\n\n      if (icon) {\n        if (criteria) {\n          icon.addEventListener('click', this.deleteSelected.bind(this));\n          icon.classList.add('is-show-close');\n        } else {\n          icon.removeEventListener('click', this.deleteSelected.bind(this));\n          icon.classList.remove('is-show-close');\n        }\n      }\n\n      return criteria;\n    }\n  }, {\n    key: 'emptyText',\n    value: function emptyText() {\n      var _props4 = this.props,\n          loading = _props4.loading,\n          filterable = _props4.filterable;\n      var _state6 = this.state,\n          voidRemoteQuery = _state6.voidRemoteQuery,\n          options = _state6.options,\n          filteredOptionsCount = _state6.filteredOptionsCount;\n\n      if (loading) {\n        return _locale2.default.t('el.select.loading');\n      } else {\n        if (voidRemoteQuery) {\n          this.state.voidRemoteQuery = false;\n          return false;\n        }\n\n        if (filterable && filteredOptionsCount === 0) {\n          return _locale2.default.t('el.select.noMatch');\n        }\n\n        if (options.length === 0) {\n          return _locale2.default.t('el.select.noData');\n        }\n      }\n\n      return null;\n    }\n  }, {\n    key: 'handleClose',\n    value: function handleClose() {\n      this.setState({\n        visible: false\n      });\n    }\n  }, {\n    key: 'toggleLastOptionHitState',\n    value: function toggleLastOptionHitState(hit) {\n      var selected = this.state.selected;\n      if (!Array.isArray(selected)) return;\n      var option = selected[selected.length - 1];\n      if (!option) return;\n\n      if (hit === true || hit === false) {\n        return option.hitState = hit;\n      }\n\n      option.hitState = !option.hitState;\n      return option.hitState;\n    }\n  }, {\n    key: 'deletePrevTag',\n    value: function deletePrevTag(e) {\n      if (e.target.value.length <= 0 && !this.toggleLastOptionHitState()) {\n        var _selected2 = this.state.selected;\n\n        _selected2.pop();\n\n        this.setState({\n          selected: _selected2\n        });\n      }\n    }\n  }, {\n    key: 'addOptionToValue',\n    value: function addOptionToValue(option, init) {\n      var _props5 = this.props,\n          multiple = _props5.multiple,\n          remote = _props5.remote;\n      var _state7 = this.state,\n          selected = _state7.selected,\n          selectedLabel = _state7.selectedLabel,\n          hoverIndex = _state7.hoverIndex,\n          value = _state7.value;\n\n      if (multiple) {\n        if (selected.indexOf(option) === -1 && (remote ? value.indexOf(option.props.value) === -1 : true)) {\n          this.selectedInit = !!init;\n          selected.push(option);\n          this.resetHoverIndex();\n        }\n      } else {\n        this.selectedInit = !!init;\n        selected = option;\n        selectedLabel = option.currentLabel();\n        hoverIndex = option.index;\n        this.setState({\n          selected: selected,\n          selectedLabel: selectedLabel,\n          hoverIndex: hoverIndex\n        });\n      }\n    }\n  }, {\n    key: 'managePlaceholder',\n    value: function managePlaceholder() {\n      var _state8 = this.state,\n          currentPlaceholder = _state8.currentPlaceholder,\n          cachedPlaceHolder = _state8.cachedPlaceHolder;\n\n      if (currentPlaceholder !== '') {\n        currentPlaceholder = this.refs.input.value ? '' : cachedPlaceHolder;\n      }\n\n      this.setState({\n        currentPlaceholder: currentPlaceholder\n      });\n    }\n  }, {\n    key: 'resetInputState',\n    value: function resetInputState(e) {\n      if (e.keyCode !== 8) {\n        this.toggleLastOptionHitState(false);\n      }\n\n      this.setState({\n        inputLength: this.refs.input.value.length * 15 + 20\n      });\n    }\n  }, {\n    key: '_resetInputWidth',\n    value: function _resetInputWidth() {\n      this.setState({\n        inputWidth: this.reference.getBoundingClientRect().width\n      });\n    }\n  }, {\n    key: 'resetInputHeight',\n    value: function resetInputHeight() {\n      var inputChildNodes = this.reference.childNodes;\n      var input = [].filter.call(inputChildNodes, function (item) {\n        return item.tagName === 'INPUT';\n      })[0];\n      input.style.height = Math.max(this.refs.tags.clientHeight + 6, sizeMap[this.props.size] || 36) + 'px';\n\n      if (this.popperJS) {\n        this.popperJS.update();\n      }\n    }\n  }, {\n    key: 'resetHoverIndex',\n    value: function resetHoverIndex() {\n      var _this6 = this;\n\n      var multiple = this.props.multiple;\n      var _state9 = this.state,\n          hoverIndex = _state9.hoverIndex,\n          options = _state9.options,\n          selected = _state9.selected;\n      setTimeout(function () {\n        if (!multiple) {\n          hoverIndex = options.indexOf(selected);\n        } else {\n          if (selected.length > 0) {\n            hoverIndex = Math.min.apply(null, selected.map(function (item) {\n              return options.indexOf(item);\n            }));\n          } else {\n            hoverIndex = -1;\n          }\n        }\n\n        _this6.setState({\n          hoverIndex: hoverIndex\n        });\n      }, 300);\n    }\n  }, {\n    key: 'toggleMenu',\n    value: function toggleMenu() {\n      var _props6 = this.props,\n          filterable = _props6.filterable,\n          disabled = _props6.disabled;\n      var _state10 = this.state,\n          query = _state10.query,\n          visible = _state10.visible;\n\n      if (filterable && query === '' && visible) {\n        return;\n      }\n\n      if (!disabled) {\n        this.setState({\n          visible: !visible\n        });\n      }\n    }\n  }, {\n    key: 'navigateOptions',\n    value: function navigateOptions(direction) {\n      var _this7 = this;\n\n      var _state11 = this.state,\n          visible = _state11.visible,\n          hoverIndex = _state11.hoverIndex,\n          options = _state11.options;\n\n      if (!visible) {\n        return this.setState({\n          visible: true\n        });\n      }\n\n      var skip = void 0;\n\n      if (options.length != options.filter(function (item) {\n        return item.props.disabled === true;\n      }).length) {\n        if (direction === 'next') {\n          hoverIndex++;\n\n          if (hoverIndex === options.length) {\n            hoverIndex = 0;\n          }\n\n          if (options[hoverIndex].props.disabled === true || options[hoverIndex].props.groupDisabled === true || !options[hoverIndex].state.visible) {\n            skip = 'next';\n          }\n        }\n\n        if (direction === 'prev') {\n          hoverIndex--;\n\n          if (hoverIndex < 0) {\n            hoverIndex = options.length - 1;\n          }\n\n          if (options[hoverIndex].props.disabled === true || options[hoverIndex].props.groupDisabled === true || !options[hoverIndex].state.visible) {\n            skip = 'prev';\n          }\n        }\n      }\n\n      this.setState({\n        hoverIndex: hoverIndex,\n        options: options\n      }, function () {\n        if (skip) {\n          _this7.navigateOptions(skip);\n        }\n\n        _this7.resetScrollTop();\n      });\n    }\n  }, {\n    key: 'resetScrollTop',\n    value: function resetScrollTop() {\n      var element = _reactDom2.default.findDOMNode(this.state.options[this.state.hoverIndex]);\n\n      var bottomOverflowDistance = element.getBoundingClientRect().bottom - this.popper.getBoundingClientRect().bottom;\n      var topOverflowDistance = element.getBoundingClientRect().top - this.popper.getBoundingClientRect().top;\n\n      if (this.state.dropdownUl) {\n        if (bottomOverflowDistance > 0) {\n          this.state.dropdownUl.scrollTop += bottomOverflowDistance;\n        }\n\n        if (topOverflowDistance < 0) {\n          this.state.dropdownUl.scrollTop += topOverflowDistance;\n        }\n      }\n    }\n  }, {\n    key: 'selectOption',\n    value: function selectOption() {\n      var _state12 = this.state,\n          hoverIndex = _state12.hoverIndex,\n          options = _state12.options;\n\n      if (options[hoverIndex]) {\n        this.onOptionClick(options[hoverIndex]);\n      }\n    }\n  }, {\n    key: 'deleteSelected',\n    value: function deleteSelected(e) {\n      e.stopPropagation();\n\n      if (this.state.selectedLabel != '') {\n        this.setState({\n          selected: {},\n          selectedLabel: '',\n          visible: false\n        });\n        this.context.form && this.context.form.onFieldChange();\n\n        if (this.props.onChange) {\n          this.props.onChange('');\n        }\n\n        if (this.props.onClear) {\n          this.props.onClear();\n        }\n      }\n    }\n  }, {\n    key: 'deleteTag',\n    value: function deleteTag(tag) {\n      var _this8 = this;\n\n      var index = this.state.selected.indexOf(tag);\n\n      if (index > -1 && !this.props.disabled) {\n        var _selected3 = this.state.selected.slice(0);\n\n        _selected3.splice(index, 1);\n\n        this.setState({\n          selected: _selected3\n        }, function () {\n          if (_this8.props.onRemoveTag) {\n            _this8.props.onRemoveTag(tag.props.value);\n          }\n        });\n      }\n    }\n  }, {\n    key: 'handleIconClick',\n    value: function handleIconClick(event) {\n      if (this.iconClass().indexOf('circle-close') > -1) {\n        this.deleteSelected(event);\n      } else {\n        this.toggleMenu();\n      }\n    }\n  }, {\n    key: 'onInputChange',\n    value: function onInputChange() {\n      if (this.props.filterable && this.state.selectedLabel !== this.state.value) {\n        this.setState({\n          query: this.state.selectedLabel\n        });\n      }\n    }\n  }, {\n    key: 'onOptionCreate',\n    value: function onOptionCreate(option) {\n      this.state.options.push(option);\n      this.state.optionsCount++;\n      this.state.filteredOptionsCount++;\n      this.forceUpdate();\n      this.handleValueChange();\n    }\n  }, {\n    key: 'onOptionDestroy',\n    value: function onOptionDestroy(option) {\n      this.state.optionsCount--;\n      this.state.filteredOptionsCount--;\n      var index = this.state.options.indexOf(option);\n\n      if (index > -1) {\n        this.state.options.splice(index, 1);\n      }\n\n      this.state.options.forEach(function (el) {\n        if (el != option) {\n          el.resetIndex();\n        }\n      });\n      this.forceUpdate();\n      this.handleValueChange();\n    }\n  }, {\n    key: 'onOptionClick',\n    value: function onOptionClick(option) {\n      var _this9 = this;\n\n      var multiple = this.props.multiple;\n      var _state13 = this.state,\n          visible = _state13.visible,\n          selected = _state13.selected,\n          selectedLabel = _state13.selectedLabel;\n\n      if (!multiple) {\n        selected = option;\n        selectedLabel = option.currentLabel();\n        visible = false;\n      } else {\n        var optionIndex = -1;\n        selected = selected.slice(0);\n        selected.forEach(function (item, index) {\n          if (item === option || item.props.value === option.props.value) {\n            optionIndex = index;\n          }\n        });\n\n        if (optionIndex > -1) {\n          selected.splice(optionIndex, 1);\n        } else {\n          selected.push(option);\n        }\n      }\n\n      this.setState({\n        selected: selected,\n        selectedLabel: selectedLabel\n      }, function () {\n        if (!multiple) {\n          _this9.onSelectedChange(_this9.state.selected);\n        }\n\n        _this9.setState({\n          visible: visible\n        });\n      });\n    }\n  }, {\n    key: 'onMouseDown',\n    value: function onMouseDown(event) {\n      event.preventDefault();\n\n      if (this.refs.input) {\n        this.refs.input.focus();\n      }\n\n      this.toggleMenu();\n    }\n  }, {\n    key: 'onMouseEnter',\n    value: function onMouseEnter() {\n      this.setState({\n        inputHovering: true\n      });\n    }\n  }, {\n    key: 'onMouseLeave',\n    value: function onMouseLeave() {\n      this.setState({\n        inputHovering: false\n      });\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this10 = this;\n\n      var _props7 = this.props,\n          multiple = _props7.multiple,\n          size = _props7.size,\n          disabled = _props7.disabled,\n          filterable = _props7.filterable,\n          loading = _props7.loading;\n      var _state14 = this.state,\n          selected = _state14.selected,\n          inputWidth = _state14.inputWidth,\n          inputLength = _state14.inputLength,\n          query = _state14.query,\n          selectedLabel = _state14.selectedLabel,\n          visible = _state14.visible,\n          options = _state14.options,\n          filteredOptionsCount = _state14.filteredOptionsCount,\n          currentPlaceholder = _state14.currentPlaceholder;\n      return _react2.default.createElement('div', {\n        ref: 'root',\n        style: this.style(),\n        className: this.className('el-select')\n      }, multiple && _react2.default.createElement('div', {\n        ref: 'tags',\n        className: 'el-select__tags',\n        onClick: this.toggleMenu.bind(this),\n        style: {\n          maxWidth: inputWidth - 32\n        }\n      }, selected.map(function (el) {\n        return _react2.default.createElement(_tag2.default, {\n          type: 'primary',\n          key: el.props.value,\n          hit: el.hitState,\n          closable: !disabled,\n          closeTransition: true,\n          onClose: _this10.deleteTag.bind(_this10, el)\n        }, _react2.default.createElement('span', {\n          className: 'el-select__tags-text'\n        }, el.currentLabel()));\n      }), filterable && _react2.default.createElement('input', {\n        ref: 'input',\n        type: 'text',\n        className: this.classNames('el-select__input', size && 'is-' + size),\n        style: {\n          width: inputLength,\n          maxWidth: inputWidth - 42\n        },\n        disabled: disabled,\n        defaultValue: query,\n        onKeyUp: this.managePlaceholder.bind(this),\n        onKeyDown: function onKeyDown(e) {\n          _this10.resetInputState(e);\n\n          switch (e.keyCode) {\n            case 27:\n              _this10.setState({\n                visible: false\n              });\n\n              e.preventDefault();\n              break;\n\n            case 8:\n              _this10.deletePrevTag(e);\n\n              break;\n\n            case 13:\n              _this10.selectOption();\n\n              e.preventDefault();\n              break;\n\n            case 38:\n              _this10.navigateOptions('prev');\n\n              e.preventDefault();\n              break;\n\n            case 40:\n              _this10.navigateOptions('next');\n\n              e.preventDefault();\n              break;\n\n            default:\n              break;\n          }\n        },\n        onChange: function onChange(e) {\n          clearTimeout(_this10.timeout);\n          _this10.timeout = setTimeout(function () {\n            _this10.setState({\n              query: _this10.state.value\n            });\n          }, _this10.debounce());\n          _this10.state.value = e.target.value;\n        }\n      })), _react2.default.createElement(_input2.default, {\n        ref: 'reference',\n        value: selectedLabel,\n        type: 'text',\n        placeholder: currentPlaceholder,\n        name: 'name',\n        size: size,\n        disabled: disabled,\n        readOnly: !filterable || multiple,\n        icon: this.iconClass() || undefined,\n        onChange: function onChange(value) {\n          return _this10.setState({\n            selectedLabel: value\n          });\n        },\n        onIconClick: this.handleIconClick.bind(this),\n        onMouseDown: this.onMouseDown.bind(this),\n        onMouseEnter: this.onMouseEnter.bind(this),\n        onMouseLeave: this.onMouseLeave.bind(this),\n        onKeyUp: this.debouncedOnInputChange.bind(this),\n        onKeyDown: function onKeyDown(e) {\n          switch (e.keyCode) {\n            case 9:\n            case 27:\n              _this10.setState({\n                visible: false\n              });\n\n              e.preventDefault();\n              break;\n\n            case 13:\n              _this10.selectOption();\n\n              e.preventDefault();\n              break;\n\n            case 38:\n              _this10.navigateOptions('prev');\n\n              e.preventDefault();\n              break;\n\n            case 40:\n              _this10.navigateOptions('next');\n\n              e.preventDefault();\n              break;\n\n            default:\n              break;\n          }\n        }\n      }), _react2.default.createElement(_libs.Transition, {\n        name: 'el-zoom-in-top',\n        onEnter: this.onEnter.bind(this),\n        onAfterLeave: this.onAfterLeave.bind(this)\n      }, _react2.default.createElement(_libs.View, {\n        show: visible && this.emptyText() !== false\n      }, _react2.default.createElement('div', {\n        ref: 'popper',\n        className: this.classNames('el-select-dropdown', {\n          'is-multiple': multiple\n        }),\n        style: {\n          minWidth: inputWidth\n        }\n      }, _react2.default.createElement(_libs.View, {\n        show: options.length > 0 && filteredOptionsCount > 0 && !loading\n      }, _react2.default.createElement(_scrollbar.Scrollbar, {\n        viewComponent: 'ul',\n        wrapClass: 'el-select-dropdown__wrap',\n        viewClass: 'el-select-dropdown__list'\n      }, this.props.children)), this.emptyText() && _react2.default.createElement('p', {\n        className: 'el-select-dropdown__empty'\n      }, this.emptyText())))));\n    }\n  }]);\n  return Select;\n}(_libs.Component);\n\nSelect.childContextTypes = {\n  component: _libs.PropTypes.any\n};\nSelect.contextTypes = {\n  form: _libs.PropTypes.any\n};\nSelect.propTypes = {\n  value: _libs.PropTypes.any,\n  size: _libs.PropTypes.string,\n  disabled: _libs.PropTypes.bool,\n  clearable: _libs.PropTypes.bool,\n  filterable: _libs.PropTypes.bool,\n  loading: _libs.PropTypes.bool,\n  remote: _libs.PropTypes.bool,\n  remoteMethod: _libs.PropTypes.func,\n  filterMethod: _libs.PropTypes.func,\n  multiple: _libs.PropTypes.bool,\n  placeholder: _libs.PropTypes.string,\n  onChange: _libs.PropTypes.func,\n  onVisibleChange: _libs.PropTypes.func,\n  onRemoveTag: _libs.PropTypes.func,\n  onClear: _libs.PropTypes.func\n};\n\nvar _default = (0, _reactClickOutside2.default)(Select);\n\nexports.default = _default;\n;\n\nvar _temp = function () {\n  if (typeof __REACT_HOT_LOADER__ === 'undefined') {\n    return;\n  }\n\n  __REACT_HOT_LOADER__.register(sizeMap, 'sizeMap', 'src/select/Select.jsx');\n\n  __REACT_HOT_LOADER__.register(Select, 'Select', 'src/select/Select.jsx');\n\n  __REACT_HOT_LOADER__.register(_default, 'default', 'src/select/Select.jsx');\n}();\n\n;","map":null,"metadata":{},"sourceType":"script"}