{"ast":null,"code":"var _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nimport React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport cn from 'classnames';\nimport deprecated from 'react-prop-types/lib/deprecated';\nimport requiredForA11yIfNot from '../utils/PropTypes/requiredForA11yIfNot';\nimport invalidIf from '../utils/PropTypes/invalidIf';\nimport FontIcon from '../FontIcons/FontIcon';\nimport getDeprecatedIcon from '../FontIcons/getDeprecatedIcon';\nimport contextTypes from './contextTypes';\n/**\n * The `DataTable` component is used to manage the state of all rows.\n * This can either be a __plain__ table or a __data__ table.\n *\n * A __data__ table will include checkboxes on each row while a __plain__ table\n * will not.\n */\n\nvar DataTable = function (_PureComponent) {\n  _inherits(DataTable, _PureComponent);\n\n  function DataTable(props) {\n    _classCallCheck(this, DataTable);\n\n    var _this = _possibleConstructorReturn(this, _PureComponent.call(this));\n\n    _initialiseProps.call(_this);\n\n    var rows = props.defaultSelectedRows;\n    _this.state = {\n      header: false,\n      indeterminate: props.indeterminate ? false : undefined,\n      allSelected: _this._allSelected(rows),\n      selectedRows: rows\n    };\n    _this._removed = 0;\n    _this._initial = true;\n    return _this;\n  }\n\n  DataTable.prototype.getChildContext = function getChildContext() {\n    var _props = this.props,\n        checkedIcon = _props.checkedIcon,\n        uncheckedIcon = _props.uncheckedIcon,\n        indeterminateIcon = _props.indeterminateIcon,\n        plain = _props.plain,\n        baseId = _props.baseId,\n        selectableRows = _props.selectableRows,\n        checkboxHeaderLabel = _props.checkboxHeaderLabel,\n        checkboxLabelTemplate = _props.checkboxLabelTemplate,\n        fixedHeader = _props.fixedHeader,\n        fixedFooter = _props.fixedFooter,\n        checkedIconChildren = _props.checkedIconChildren,\n        checkedIconClassName = _props.checkedIconClassName,\n        uncheckedIconChildren = _props.uncheckedIconChildren,\n        uncheckedIconClassName = _props.uncheckedIconClassName,\n        indeterminateIconChildren = _props.indeterminateIconChildren,\n        indeterminateIconClassName = _props.indeterminateIconClassName;\n    return {\n      checkedIcon: getDeprecatedIcon(checkedIconClassName, checkedIconChildren, checkedIcon),\n      uncheckedIcon: getDeprecatedIcon(uncheckedIconClassName, uncheckedIconChildren, uncheckedIcon),\n      indeterminateIcon: getDeprecatedIcon(indeterminateIconClassName, indeterminateIconChildren, indeterminateIcon),\n      indeterminate: this.state.indeterminate,\n      plain: plain,\n      allSelected: this.state.allSelected,\n      selectedRows: this.state.selectedRows,\n      toggleSelectedRow: this._toggleSelectedRow,\n      createCheckbox: this._createCheckbox,\n      removeCheckbox: this._removeCheckbox,\n      baseId: baseId,\n      baseName: baseId + '-control',\n      selectableRows: selectableRows,\n      checkboxHeaderLabel: checkboxHeaderLabel,\n      checkboxLabelTemplate: checkboxLabelTemplate,\n      fixedHeader: fixedHeader,\n      fixedFooter: fixedFooter\n    };\n  };\n\n  DataTable.prototype.componentDidUpdate = function componentDidUpdate() {\n    this._removed = 0;\n    this._initial = false;\n  };\n\n  DataTable.prototype._allSelected = function _allSelected(rows) {\n    var all = rows.length !== 0;\n    rows.some(function (checked) {\n      if (!checked) {\n        all = false;\n      }\n\n      return !all;\n    });\n    return all;\n  };\n\n  DataTable.prototype.render = function render() {\n    var _cn;\n\n    var _props2 = this.props,\n        style = _props2.style,\n        className = _props2.className,\n        tableStyle = _props2.tableStyle,\n        tableClassName = _props2.tableClassName,\n        fixedWrapperStyle = _props2.fixedWrapperStyle,\n        fixedWrapperClassName = _props2.fixedWrapperClassName,\n        fixedScrollWrapperStyle = _props2.fixedScrollWrapperStyle,\n        fixedScrollWrapperClassName = _props2.fixedScrollWrapperClassName,\n        children = _props2.children,\n        plain = _props2.plain,\n        responsive = _props2.responsive,\n        fixedHeader = _props2.fixedHeader,\n        fixedFooter = _props2.fixedFooter,\n        fixedDividers = _props2.fixedDividers,\n        fixedHeight = _props2.fixedHeight,\n        fixedWidth = _props2.fixedWidth,\n        headerHeight = _props2.headerHeight,\n        footerHeight = _props2.footerHeight,\n        fullWidth = _props2.fullWidth,\n        indeterminate = _props2.indeterminate,\n        indeterminateIcon = _props2.indeterminateIcon,\n        checkedIcon = _props2.checkedIcon,\n        uncheckedIcon = _props2.uncheckedIcon,\n        defaultSelectedRows = _props2.defaultSelectedRows,\n        baseId = _props2.baseId,\n        onRowToggle = _props2.onRowToggle,\n        selectableRows = _props2.selectableRows,\n        checkboxHeaderLabel = _props2.checkboxHeaderLabel,\n        checkboxLabelTemplate = _props2.checkboxLabelTemplate,\n        checkedIconChildren = _props2.checkedIconChildren,\n        checkedIconClassName = _props2.checkedIconClassName,\n        uncheckedIconChildren = _props2.uncheckedIconChildren,\n        uncheckedIconClassName = _props2.uncheckedIconClassName,\n        indeterminateIconChildren = _props2.indeterminateIconChildren,\n        indeterminateIconClassName = _props2.indeterminateIconClassName,\n        props = _objectWithoutProperties(_props2, ['style', 'className', 'tableStyle', 'tableClassName', 'fixedWrapperStyle', 'fixedWrapperClassName', 'fixedScrollWrapperStyle', 'fixedScrollWrapperClassName', 'children', 'plain', 'responsive', 'fixedHeader', 'fixedFooter', 'fixedDividers', 'fixedHeight', 'fixedWidth', 'headerHeight', 'footerHeight', 'fullWidth', 'indeterminate', 'indeterminateIcon', 'checkedIcon', 'uncheckedIcon', 'defaultSelectedRows', 'baseId', 'onRowToggle', 'selectableRows', 'checkboxHeaderLabel', 'checkboxLabelTemplate', 'checkedIconChildren', 'checkedIconClassName', 'uncheckedIconChildren', 'uncheckedIconClassName', 'indeterminateIconChildren', 'indeterminateIconClassName']);\n\n    var table = React.createElement('table', _extends({}, props, {\n      ref: this._setTable,\n      style: responsive ? tableStyle : style,\n      className: cn('md-data-table', (_cn = {\n        'md-data-table--plain': plain,\n        'md-data-table--full-width': fullWidth\n      }, _cn[className] = !responsive && className, _cn[tableClassName] = responsive && tableClassName, _cn))\n    }), children);\n\n    if (!responsive) {\n      return table;\n    }\n\n    var content = table;\n\n    if (fixedHeader || fixedFooter) {\n      var height = fixedHeight;\n\n      if (fixedHeight) {\n        if (fixedHeader) {\n          height -= headerHeight;\n        }\n\n        if (fixedFooter) {\n          height -= footerHeight;\n        }\n      }\n\n      var borderTop = fixedHeader;\n      var borderBot = fixedFooter;\n\n      if (typeof fixedDividers === 'boolean') {\n        borderTop = borderTop && fixedDividers;\n        borderBot = borderBot && fixedDividers;\n      } else {\n        borderTop = borderTop && (typeof fixedDividers.header === 'undefined' || fixedDividers.header);\n        borderBot = borderBot && (typeof fixedDividers.footer === 'undefined' || fixedDividers.footer);\n      }\n\n      content = React.createElement('div', {\n        style: fixedWrapperStyle,\n        className: cn('md-data-table__fixed-wrapper', {\n          'md-data-table__fixed-wrapper--header': fixedHeader,\n          'md-data-table__fixed-wrapper--footer': fixedFooter\n        }, fixedWrapperClassName)\n      }, React.createElement('div', {\n        style: _extends({\n          height: height\n        }, fixedScrollWrapperStyle),\n        className: cn('md-data-table__scroll-wrapper', {\n          'md-divider-border': fixedDividers,\n          'md-divider-border--top': borderTop,\n          'md-divider-border--bottom': borderBot\n        }, fixedScrollWrapperClassName)\n      }, table));\n    }\n\n    return React.createElement('div', {\n      style: _extends({\n        width: fixedWidth\n      }, style),\n      className: cn('md-data-table--responsive', {\n        'md-data-table--fixed': fixedHeader || fixedFooter\n      }, className)\n    }, content);\n  };\n\n  return DataTable;\n}(PureComponent);\n\nDataTable.propTypes = {\n  /**\n   * A base id to use for every checkbox or `EditDialogColumn` in the data table. This is\n   * required for a11y if the data table is not plain. It is recommended to always provide\n   * this prop if you are using any of the advanced table components to auto-generate unique\n   * ids for each element.\n   *\n   * @see {@link DataTables/EditDialogColumn}\n   * @see {@link DataTables/SelectFieldColumn}\n   * @see {@link DataTables/DropdownMenuColumn}\n   * @see {@link DataTables/MenuButtonColumn}\n   * @see {@link DataTables/TablePagination}\n   */\n  baseId: requiredForA11yIfNot(PropTypes.oneOfType([PropTypes.number, PropTypes.string]), 'plain'),\n\n  /**\n   * Optional style to apply to the table. If the table is `responsive`, this will be applied to the surrounding `div`\n   * instead of the table itself. Use the `tableStyle` in this case.\n   *\n   * @see {@link #tableStyle}\n   * @see {@link #responsive}\n   */\n  style: PropTypes.object,\n\n  /**\n   * An optional className to apply to the table. If the table is `responsive`, this will be applied to the\n   * surrounding `div` instead of the table itself. Use the `tableClassName` in this case.\n   *\n   * @see {@link #tableClassName}\n   * @see {@link #responsive}\n   */\n  className: PropTypes.string,\n\n  /**\n   * An optional style to apply to the `table` itself when the `responsive` prop is enabled. If the table is not\n   * `responsive`, use the `style` prop.\n   *\n   * @see {@link #style}\n   * @see {@link #responsive}\n   */\n  tableStyle: PropTypes.object,\n\n  /**\n   * An optional className to apply to the `table` itself when the `responsive` prop is enabled. If the table is not\n   * `responsive`, use the `className` prop.\n   *\n   * @see {@link #className}\n   * @see {@link #responsive}\n   */\n  tableClassName: PropTypes.string,\n\n  /**\n   * An optional style to apply to the fixed table wrapper that appears when there is a fixed\n   * header or a fixed footer.\n   *\n   * @see {@link #fixedHeader}\n   * @see {@link #fixedFooter}\n   * @see {@link #fixedWrapperClassName}\n   * @see {@link #fixedScrollWrapperStyle}\n   * @see {@link #fixedScrollWrapperClassName}\n   */\n  fixedWrapperStyle: PropTypes.object,\n\n  /**\n   * An optional className to apply to the fixed table wrapper that appears when there is a fixed\n   * header or a fixed footer.\n   *\n   * @see {@link #fixedHeader}\n   * @see {@link #fixedFooter}\n   * @see {@link #fixedWrapperStyle}\n   * @see {@link #fixedScrollWrapperStyle}\n   * @see {@link #fixedScrollWrapperClassName}\n   */\n  fixedWrapperClassName: PropTypes.string,\n\n  /**\n   * An optional style to apply to the fixed table wrapper's scroll container that appears when there is a fixed\n   * header or a fixed footer.\n   *\n   * @see {@link #fixedHeader}\n   * @see {@link #fixedFooter}\n   * @see {@link #fixedWrapperStyle}\n   * @see {@link #fixedWrapperClassName}\n   * @see {@link #fixedScrollWrapperStyle}\n   */\n  fixedScrollWrapperStyle: PropTypes.object,\n\n  /**\n   * An optional className to apply to the fixed table wrapper's scroll container that appears when there is a fixed\n   * header or a fixed footer.\n   *\n   * @see {@link #fixedHeader}\n   * @see {@link #fixedFooter}\n   * @see {@link #fixedWrapperStyle}\n   * @see {@link #fixedWrapperClassName}\n   * @see {@link #fixedScrollWrapperStyle}\n   */\n  fixedScrollWrapperClassName: PropTypes.string,\n\n  /**\n   * The table contents to display. This *should* be a list of `TableHeader` and `TableBody`\n   * components.\n   */\n  children: PropTypes.node.isRequired,\n\n  /**\n   * An optional array of booleans denoting if a row is selected.\n   * This is an associative array so the index must match the row\n   * number in the `TableBody` component.\n   */\n  defaultSelectedRows: PropTypes.arrayOf(PropTypes.bool).isRequired,\n\n  /**\n   * Boolean if the table is responsive. This will wrap the table in a container\n   * that allows scrolling to the right if overflow exists.\n   */\n  responsive: PropTypes.bool.isRequired,\n\n  /**\n   * Boolean if this table should not include the checkboxes on each row.\n   * This really means that the entire table is unselectable and you wish\n   * to display as a normal table.\n   */\n  plain: PropTypes.bool,\n\n  /**\n   * The checked checkbox icon to display when a row is selected. This really defaults\n   * to the `checkedCheckboxIcon` prop from the `SelectionControl`.\n   *\n   * @see {@link SelectionControls/SelectionControl#checkedCheckboxIcon}\n   */\n  checkedIcon: PropTypes.element,\n\n  /**\n   * The unchecked checkbox icon to display when a row is selected. This really defaults\n   * to the `uncheckedCheckboxIcon` prop from the `SelectionControl`.\n   *\n   * @see {@link SelectionControls/SelectionControl#uncheckedCheckboxIcon}\n   */\n  uncheckedIcon: PropTypes.element,\n\n  /**\n   * An optional function to call when a non-plain data table has a row toggled. The callback\n   * will include:\n   * - the row id\n   * - boolean if the row is now checked\n   * - the total count of rows selected\n   * - the change event\n   *\n   * All rows will be toggled on or off when the row id is 0 and a `thead` exists in the table.\n   */\n  onRowToggle: invalidIf(PropTypes.func, 'plain'),\n\n  /**\n   * Boolean if the `DataTable` should inject checkboxes at the start of each row.\n   */\n  selectableRows: PropTypes.bool,\n\n  /**\n   * Boolean if the checkboxes in the table should also include an _indeterminate_ state.\n   * It will use the `indeterminateIconChildren` and `indeterminateIconClassName` when at least\n   * 1 row has been checked, but not all rows.\n   */\n  indeterminate: PropTypes.bool,\n\n  /**\n   * An optional icon to display when the selected state is indeterminate.\n   *\n   * @see {@link #indeterminate}\n   */\n  indeterminateIcon: PropTypes.element,\n\n  /**\n   * This is the aria-label to apply to the checkbox in the table's header. This\n   * is just used for accessibility since the checkboxes have no visible label.\n   */\n  checkboxHeaderLabel: PropTypes.string.isRequired,\n\n  /**\n   * This is the aria-label to apply to a checkbox in the table's body. This can either\n   * be a constant string that will replace `{{row}}` with the current row index, or\n   * a function that takes the row index and returns a string.\n   *\n   * ```js\n   * checkboxLabelTemplate={rowIndex => `Toggle row ${row}`}\n   * ```\n   */\n  checkboxLabelTemplate: PropTypes.oneOfType([PropTypes.func, PropTypes.string]).isRequired,\n\n  /**\n   * Boolean if the table should include a fixed header. This will allow the `TableHeader` component\n   * to stay fixed to the top of the table while the `TableBody` scrolls horizontally.\n   *\n   * @see {@link #fixedFooter}\n   * @see [react-md-make-fixed-table](/components/data-tables?tab=2#mixin-react-md-make-fixed-table)\n   */\n  fixedHeader: PropTypes.bool,\n\n  /**\n   * Boolean if the table should include a fixed footer. This will allow the `TableFooter` component\n   * to stay fixed to the bottom of the table while the `TableBody` scrolls horizontally.\n   *\n   * @see {@link #fixedHeader}\n   * @see [react-md-make-fixed-table](/components/data-tables?tab=2#mixin-react-md-make-fixed-table)\n   */\n  fixedFooter: PropTypes.bool,\n\n  /**\n   * Either a boolean or a shape of booleans for if a divider should appear at the top or bottom of the table\n   * when there is a fixed header/footer. By default, this will automatically create dividers.\n   *\n   * @see {@link #fixedHeader}\n   * @see {@link #fixedFooter}\n   */\n  fixedDividers: PropTypes.oneOfType([PropTypes.bool, PropTypes.shape({\n    header: PropTypes.bool,\n    footer: PropTypes.bool\n  })]),\n\n  /**\n   * An optional height to set for a table with a fixed header and/or a fixed footer. It is recommended to use\n   * the related `react-md-make-fixed-table` mixin instead.\n   *\n   * @see {@link #headerHeight}\n   * @see {@link #footerHeight}\n   */\n  fixedHeight: PropTypes.number,\n\n  /**\n   * An optional width to set for a table with a fixed header and/or a fixed footer. It is recommended to use\n   * the related `react-md-make-fixed-table` mixin instead.\n   */\n  fixedWidth: PropTypes.number,\n\n  /**\n   * This is the height of the table's header columns. This should be equal to the `md-data-table-header-height`\n   * variable.\n   *\n   * @see [md-data-table-header-height](/components/data-tables?tab=2#variable-md-data-table-header-height)\n   * @see {@link #fixedHeight}\n   */\n  headerHeight: PropTypes.number.isRequired,\n\n  /**\n   * This is the height of the table's header columns. This should be equal to the `md-data-table-header-height`\n   * variable.\n   *\n   * @see [md-data-table-column-height](/components/data-tables?tab=2#variable-md-data-table-column-height)\n   * @see {@link #fixedHeight}\n   */\n  footerHeight: PropTypes.number.isRequired,\n\n  /**\n   * Boolean if the `<table>` element should always span the entire width of its container.\n   */\n  fullWidth: PropTypes.bool,\n  indeterminateIconChildren: deprecated(PropTypes.node, 'Use the `indeterminateIcon` prop instead'),\n  indeterminateIconClassName: deprecated(PropTypes.string, 'Use the `indeterminateIcon` prop instead'),\n  checkedIconClassName: deprecated(PropTypes.string, 'Use the `checkedIcon` prop instead'),\n  checkedIconChildren: deprecated(PropTypes.node, 'Use the `checkedIcon` prop instead'),\n  uncheckedIconClassName: deprecated(PropTypes.string, 'Use the `uncheckedIcon` prop instead'),\n  uncheckedIconChildren: deprecated(PropTypes.node, 'Use the `uncheckedIcon` prop instead')\n};\nDataTable.defaultProps = {\n  indeterminateIcon: React.createElement(FontIcon, null, 'indeterminate_check_box'),\n  defaultSelectedRows: [],\n  responsive: true,\n  selectableRows: true,\n  checkboxHeaderLabel: 'Toggle All Rows',\n  checkboxLabelTemplate: 'Toggle row {{row}}',\n  fixedHeader: false,\n  fixedFooter: false,\n  fixedDividers: true,\n  headerHeight: 56,\n  footerHeight: 48,\n  fullWidth: true\n};\nDataTable.childContextTypes = contextTypes;\n\nvar _initialiseProps = function _initialiseProps() {\n  var _this2 = this;\n\n  this._setTable = function (table) {\n    _this2._table = table;\n  };\n\n  this._createCheckbox = function (index) {\n    _this2.setState(function (state, props) {\n      var selectedRows = state.selectedRows.slice(); // Only use the default selected rows prop on first mount. If other changes occur after,\n      // default to false.\n\n      var selected = _this2._initial && props.defaultSelectedRows[index] || false;\n      selectedRows.splice(index, 0, selected);\n      return {\n        selectedRows: selectedRows,\n        allSelected: _this2._allSelected(selectedRows)\n      };\n    });\n  };\n\n  this._removeCheckbox = function (index) {\n    _this2.setState(function (state) {\n      // When multiple checkboxes are removed in a render cycle, they are removed in list order.\n      // So to keep the index correct while removing, need to keep subtract the provided index by\n      // the current number of removed elements. This value gets reset to 0 after a finished cycle.\n      var selectedRows = state.selectedRows.slice(); // This is really ugly. React 16 doesn't need to track all this while React 15 does\n\n      if (React.version && React.version.match(/^16\\./)) {\n        selectedRows.splice(index, 1);\n      } else {\n        selectedRows.splice(index - _this2._removed, 1);\n        _this2._removed += 1;\n      }\n\n      return {\n        selectedRows: selectedRows,\n        allSelected: _this2._allSelected(selectedRows)\n      };\n    });\n  };\n\n  this._toggleSelectedRow = function (row, header, e) {\n    var selectedRows = void 0;\n    var allSelected = _this2.state.allSelected;\n    var selectedCount = 0;\n    var i = _this2._table && _this2._table.querySelector('.md-table-header') ? row - 1 : row;\n    var checked = e.target.checked;\n\n    if (header) {\n      selectedRows = _this2.state.selectedRows.map(function () {\n        return checked;\n      });\n      allSelected = checked;\n      selectedCount = !checked ? 0 : selectedRows.length;\n    } else {\n      selectedRows = _this2.state.selectedRows.slice();\n      selectedRows[i] = !selectedRows[i];\n      selectedCount = selectedRows.filter(function (b) {\n        return b;\n      }).length;\n      allSelected = selectedCount === selectedRows.length;\n    }\n\n    if (_this2.props.onRowToggle) {\n      _this2.props.onRowToggle(row, checked, selectedCount, e);\n    }\n\n    var indeterminate = _this2.props.indeterminate && !allSelected && selectedCount > 0;\n\n    _this2.setState({\n      selectedRows: selectedRows,\n      allSelected: allSelected,\n      indeterminate: indeterminate\n    });\n  };\n};\n\nexport default DataTable;","map":null,"metadata":{},"sourceType":"module"}