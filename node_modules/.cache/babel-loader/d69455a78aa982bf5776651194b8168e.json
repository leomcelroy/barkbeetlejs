{"ast":null,"code":"var _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nimport React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport cn from 'classnames';\nimport deprecated from 'react-prop-types/lib/deprecated';\nimport fixedToShape from '../Helpers/fixedToShape';\nimport positionShape from '../Helpers/positionShape';\nimport SelectField from '../SelectFields/SelectField';\nimport withTableFixes from './withTableFixes';\nimport TableColumn from './TableColumn';\n/**\n * The `SelectFieldColumn` component is just a simple wrapper between a `SelectField` and\n * the `TableColumn` components.\n *\n * All props that are on the `SelectField` are also available here (except the naming of style or className).\n * See the [SelectField](/components/select-fields?tab=1#select-field-proptypes) for remaining prop descriptions.\n */\n\nvar SelectFieldColumn = function (_PureComponent) {\n  _inherits(SelectFieldColumn, _PureComponent);\n\n  function SelectFieldColumn() {\n    _classCallCheck(this, SelectFieldColumn);\n\n    return _possibleConstructorReturn(this, _PureComponent.apply(this, arguments));\n  }\n\n  SelectFieldColumn.prototype.render = function render() {\n    var _props = this.props,\n        style = _props.style,\n        className = _props.className,\n        menuStyle = _props.menuStyle,\n        menuClassName = _props.menuClassName,\n        header = _props.header,\n        tooltipLabel = _props.tooltipLabel,\n        tooltipDelay = _props.tooltipDelay,\n        tooltipPosition = _props.tooltipPosition,\n        adjusted = _props.adjusted,\n        wrapperStyle = _props.wrapperStyle,\n        wrapperClassName = _props.wrapperClassName,\n        props = _objectWithoutProperties(_props, ['style', 'className', 'menuStyle', 'menuClassName', 'header', 'tooltipLabel', 'tooltipDelay', 'tooltipPosition', 'adjusted', 'wrapperStyle', 'wrapperClassName']);\n\n    return React.createElement(TableColumn, {\n      header: header,\n      style: style,\n      className: cn('md-select-field-column', className),\n      adjusted: false,\n      tooltipLabel: tooltipLabel,\n      tooltipDelay: tooltipDelay,\n      tooltipPosition: tooltipPosition\n    }, React.createElement(SelectField, _extends({}, props, {\n      style: menuStyle,\n      className: menuClassName\n    })));\n  };\n\n  return SelectFieldColumn;\n}(PureComponent);\n\nSelectFieldColumn.VerticalAnchors = SelectField.VerticalAnchors;\nSelectFieldColumn.HorizontalAnchors = SelectField.HorizontalAnchors;\nSelectFieldColumn.Positions = SelectField.Positions;\nSelectFieldColumn.propTypes = {\n  /**\n   * An optional id to use for the select field in the column. If this is omitted, it's value will be\n   * `${rowId}-${cellIndex}-select-field`\n   */\n  id: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n\n  /**\n   * This is the optional style to apply to the `TableColumn`.\n   */\n  style: PropTypes.object,\n\n  /**\n   * This is the optional className to apply to the `TableColumn`.\n   */\n  className: PropTypes.string,\n\n  /**\n   * The is the optional style to apply to the select field's menu container.\n   *\n   * @see {@link SelectFields/SelectField#style}\n   */\n  menuStyle: PropTypes.object,\n\n  /**\n   * The is the optional class name to apply to the select field's menu container.\n   *\n   * @see {@link SelectFields/SelectField#className}\n   */\n  menuClassName: PropTypes.string,\n\n  /**\n   * This is how the select field should be fixed within the table. When this is omitted,\n   * it will automatically use the responsive table as the fixture so that the select field\n   * will close/adjust itself to the scrolling of the table.\n   *\n   * @see {@link Helpers/Layover#fixedTo}\n   */\n  fixedTo: fixedToShape,\n\n  /**\n   * Boolean if the select field should span the entire width of the column.\n   */\n  fullWidth: PropTypes.bool,\n\n  /**\n   * The position for the select field.\n   *\n   * @see {@link SelectFields/SelectField#position}\n   */\n  position: positionShape,\n\n  /**\n   * This is injected by the `TableRow` component.\n   * @access private\n   */\n  header: PropTypes.bool,\n\n  /**\n   * @access private\n   */\n  adjusted: PropTypes.bool,\n\n  /**\n   * The optional tooltip to render on hover.\n   *\n   * @see {@link DataTables/TableColumn#tooltipLabel}\n   */\n  tooltipLabel: PropTypes.string,\n\n  /**\n   * An optional delay to apply to the tooltip before it appears.\n   *\n   * @see {@link DataTables/TableColumn#tooltipDelay}\n   */\n  tooltipDelay: PropTypes.number,\n\n  /**\n   * The position of the tooltip.\n   *\n   * @see {@link DataTables/TableColumn#tooltipPosition}\n   */\n  tooltipPosition: PropTypes.oneOf(['top', 'right', 'bottom', 'left']),\n\n  /**\n   * Boolean if the menu should automatically try to reposition itself to stay within\n   * the viewport when the `fixedTo` element scrolls.\n   *\n   * @see {@link Helpers/Layover#repositionOnScroll}\n   */\n  repositionOnScroll: PropTypes.bool,\n\n  /**\n   * Boolean if the menu should automatically try to reposition itself to stay within\n   * the viewport when the window resizes.\n   *\n   * @see {@link Helpers/Layover#repositionOnResize}\n   */\n  repositionOnResize: PropTypes.bool,\n\n  /**\n   * Boolean if the menu logic should be simplified without any viewport logic and position\n   * based on the relative position of the menu. This will most like require some additional\n   * styles applied to the menu.\n   *\n   * @see {@link Helpers/Layover#simplified}\n   */\n  simplifiedMenu: PropTypes.bool,\n  wrapperStyle: deprecated(PropTypes.object, 'There is no longer a wrapper'),\n  wrapperClassName: deprecated(PropTypes.string, 'There is no longer a wrapper')\n};\nSelectFieldColumn.defaultProps = {\n  position: SelectFieldColumn.Positions.BELOW,\n  fullWidth: true,\n  repositionOnScroll: true,\n  repositionOnResize: false,\n  simplifiedMenu: false\n};\nexport default withTableFixes(SelectFieldColumn, 'select-field');","map":null,"metadata":{},"sourceType":"module"}