{"ast":null,"code":"var makeSeries = function makeSeries(s, n, c) {\n  var l = [];\n  l.push(s);\n\n  for (var i = 0; i < c - 1; i++) {\n    l.push(l[i] + n);\n  }\n\n  return l;\n}; //const editSVG  = (svg) => `<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" ${svg.slice(4)}`;\n\n\nvar editSVG = function editSVG(svg) {\n  console.log(svg);\n  var path = \"\".concat(svg.slice(226, svg.length - 10));\n  var group = \"\".concat(svg.slice(50, svg.length - 7));\n  console.log(group);\n  return \"\".concat(svg.slice(226, svg.length - 10));\n};\n\nvar download = function download(filename, text) {\n  var pom = document.createElement('a');\n  pom.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(text));\n  pom.setAttribute('download', filename);\n\n  if (document.createEvent) {\n    var event = document.createEvent('MouseEvents');\n    event.initEvent('click', true, true);\n    pom.dispatchEvent(event);\n  } else {\n    pom.click();\n  }\n};\n\nvar getSVGpoint = function getSVGpoint(evt, v0, v1, v2, v3) {\n  var svg = document.querySelector('svg');\n  var pt = svg.createSVGPoint();\n  var svgBox = svg.getBoundingClientRect();\n  var width = svgBox.width;\n  var height = svgBox.height;\n  var xOffset = svgBox.x;\n  var yOffset = svgBox.y;\n  pt.x = (evt.clientX - xOffset) / width * v2 + v0;\n  pt.y = (evt.clientY - yOffset) / height * v3 + v1; //+ v1;\n\n  return pt; //return pt.matrixTransform(svg.getScreenCTM().inverse());\n};\n\nexport { makeSeries, editSVG, download, getSVGpoint };","map":{"version":3,"sources":["/Users/leomcelroy/Desktop/barkBeetleEverything/barkbeetle_js_real/src/utils.js"],"names":["makeSeries","s","n","c","l","push","i","editSVG","svg","console","log","path","slice","length","group","download","filename","text","pom","document","createElement","setAttribute","encodeURIComponent","createEvent","event","initEvent","dispatchEvent","click","getSVGpoint","evt","v0","v1","v2","v3","querySelector","pt","createSVGPoint","svgBox","getBoundingClientRect","width","height","xOffset","x","yOffset","y","clientX","clientY"],"mappings":"AAAA,IAAMA,UAAU,GAAG,SAAbA,UAAa,CAACC,CAAD,EAAIC,CAAJ,EAAOC,CAAP,EAAa;AAC9B,MAAIC,CAAC,GAAG,EAAR;AACAA,EAAAA,CAAC,CAACC,IAAF,CAAOJ,CAAP;;AAEA,OAAK,IAAIK,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,CAAC,GAAG,CAAxB,EAA2BG,CAAC,EAA5B,EAAgC;AAC9BF,IAAAA,CAAC,CAACC,IAAF,CAAOD,CAAC,CAACE,CAAD,CAAD,GAAOJ,CAAd;AACD;;AAED,SAAOE,CAAP;AACD,CATD,C,CAWA;;;AACA,IAAMG,OAAO,GAAI,SAAXA,OAAW,CAACC,GAAD,EAAS;AACxBC,EAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACA,MAAIG,IAAI,aAAMH,GAAG,CAACI,KAAJ,CAAU,GAAV,EAAeJ,GAAG,CAACK,MAAJ,GAAW,EAA1B,CAAN,CAAR;AACA,MAAIC,KAAK,aAAMN,GAAG,CAACI,KAAJ,CAAU,EAAV,EAAcJ,GAAG,CAACK,MAAJ,GAAW,CAAzB,CAAN,CAAT;AACAJ,EAAAA,OAAO,CAACC,GAAR,CAAYI,KAAZ;AACA,mBAAUN,GAAG,CAACI,KAAJ,CAAU,GAAV,EAAeJ,GAAG,CAACK,MAAJ,GAAW,EAA1B,CAAV;AACD,CAND;;AAQA,IAAME,QAAQ,GAAG,SAAXA,QAAW,CAACC,QAAD,EAAWC,IAAX,EAAoB;AACnC,MAAIC,GAAG,GAAGC,QAAQ,CAACC,aAAT,CAAuB,GAAvB,CAAV;AAEAF,EAAAA,GAAG,CAACG,YAAJ,CAAiB,MAAjB,EAAyB,mCAAmCC,kBAAkB,CAACL,IAAD,CAA9E;AACAC,EAAAA,GAAG,CAACG,YAAJ,CAAiB,UAAjB,EAA6BL,QAA7B;;AAEA,MAAIG,QAAQ,CAACI,WAAb,EAA0B;AACtB,QAAIC,KAAK,GAAGL,QAAQ,CAACI,WAAT,CAAqB,aAArB,CAAZ;AACAC,IAAAA,KAAK,CAACC,SAAN,CAAgB,OAAhB,EAAyB,IAAzB,EAA+B,IAA/B;AACAP,IAAAA,GAAG,CAACQ,aAAJ,CAAkBF,KAAlB;AACH,GAJD,MAKK;AACDN,IAAAA,GAAG,CAACS,KAAJ;AACH;AACF,CAdD;;AAgBA,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,GAAD,EAAMC,EAAN,EAAUC,EAAV,EAAcC,EAAd,EAAkBC,EAAlB,EAAyB;AAC3C,MAAIzB,GAAG,GAAGW,QAAQ,CAACe,aAAT,CAAuB,KAAvB,CAAV;AACA,MAAIC,EAAE,GAAG3B,GAAG,CAAC4B,cAAJ,EAAT;AAEA,MAAIC,MAAM,GAAG7B,GAAG,CAAC8B,qBAAJ,EAAb;AACA,MAAIC,KAAK,GAAGF,MAAM,CAACE,KAAnB;AACA,MAAIC,MAAM,GAAGH,MAAM,CAACG,MAApB;AACA,MAAIC,OAAO,GAAGJ,MAAM,CAACK,CAArB;AACA,MAAIC,OAAO,GAAGN,MAAM,CAACO,CAArB;AAEAT,EAAAA,EAAE,CAACO,CAAH,GAAO,CAACb,GAAG,CAACgB,OAAJ,GAAcJ,OAAf,IAAwBF,KAAxB,GAAgCP,EAAhC,GAAqCF,EAA5C;AACAK,EAAAA,EAAE,CAACS,CAAH,GAAO,CAACf,GAAG,CAACiB,OAAJ,GAAcH,OAAf,IAAwBH,MAAxB,GAAiCP,EAAjC,GAAsCF,EAA7C,CAX2C,CAWM;;AAEjD,SAAOI,EAAP,CAb2C,CAc3C;AACD,CAfD;;AAiBA,SACEnC,UADF,EAEEO,OAFF,EAGEQ,QAHF,EAIEa,WAJF","sourcesContent":["const makeSeries = (s, n, c) => {\n  let l = [];\n  l.push(s);\n\n  for (let i = 0; i < c - 1; i++) {\n    l.push(l[i] + n);\n  }\n\n  return l;\n}\n\n//const editSVG  = (svg) => `<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" ${svg.slice(4)}`;\nconst editSVG  = (svg) => {\n  console.log(svg);\n  let path = `${svg.slice(226, svg.length-10)}`;\n  let group = `${svg.slice(50, svg.length-7)}`;\n  console.log(group);\n  return `${svg.slice(226, svg.length-10)}`;\n}\n\nconst download = (filename, text) => {\n  var pom = document.createElement('a');\n\n  pom.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(text));\n  pom.setAttribute('download', filename);\n\n  if (document.createEvent) {\n      var event = document.createEvent('MouseEvents');\n      event.initEvent('click', true, true);\n      pom.dispatchEvent(event);\n  }\n  else {\n      pom.click();\n  }\n}\n\nconst getSVGpoint = (evt, v0, v1, v2, v3) => {\n  var svg = document.querySelector('svg');\n  var pt = svg.createSVGPoint();\n\n  let svgBox = svg.getBoundingClientRect();\n  let width = svgBox.width;\n  let height = svgBox.height;\n  let xOffset = svgBox.x;\n  let yOffset = svgBox.y;\n\n  pt.x = (evt.clientX - xOffset)/width * v2 + v0;\n  pt.y = (evt.clientY - yOffset)/height * v3 + v1; //+ v1;\n\n  return pt;\n  //return pt.matrixTransform(svg.getScreenCTM().inverse());\n}\n\nexport {\n  makeSeries,\n  editSVG,\n  download,\n  getSVGpoint\n}\n"]},"metadata":{},"sourceType":"module"}