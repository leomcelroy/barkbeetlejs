{"ast":null,"code":"var _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nimport React, { PureComponent, Children, cloneElement, isValidElement } from 'react';\nimport PropTypes from 'prop-types';\nimport cn from 'classnames';\nimport oneRequired from '../utils/PropTypes/oneRequired';\nimport AccessibleFakeInkedButton from '../Helpers/AccessibleFakeInkedButton';\n/**\n * The `Tab` component is used for rendering a single tab in the `Tabs` component.\n * It can optionally have either a `label`, an `icon` or both.\n */\n\nvar Tab = function (_PureComponent) {\n  _inherits(Tab, _PureComponent);\n\n  function Tab() {\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, Tab);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _PureComponent.call.apply(_PureComponent, [this].concat(args))), _this), _this._handleClick = function (e) {\n      if (_this.props.onClick) {\n        _this.props.onClick(_this.props.index, _this.props.id, _this.props.controlsId, _this.props.children, e);\n      }\n    }, _temp), _possibleConstructorReturn(_this, _ret);\n  }\n\n  Tab.prototype.render = function render() {\n    var _cn;\n\n    var _props = this.props,\n        id = _props.id,\n        controlsId = _props.controlsId,\n        className = _props.className,\n        activeClassName = _props.activeClassName,\n        inactiveClassName = _props.inactiveClassName,\n        active = _props.active,\n        propIcon = _props.icon,\n        propLabel = _props.label,\n        index = _props.index,\n        props = _objectWithoutProperties(_props, ['id', 'controlsId', 'className', 'activeClassName', 'inactiveClassName', 'active', 'icon', 'label', 'index']);\n\n    var _props2 = this.props,\n        icon = _props2.icon,\n        label = _props2.label;\n\n    if (icon) {\n      var iconEl = Children.only(icon);\n      icon = cloneElement(icon, {\n        className: cn('md-icon--tab', iconEl.props.className)\n      });\n    }\n\n    if (isValidElement(label)) {\n      var labelEl = Children.only(label);\n      label = cloneElement(label, {\n        className: cn('md-tab-label', labelEl.props.className)\n      });\n    } else {\n      label = React.createElement('div', {\n        className: 'md-tab-label'\n      }, label);\n    }\n\n    return React.createElement(AccessibleFakeInkedButton, _extends({}, props, {\n      id: id,\n      role: 'tab',\n      onClick: this._handleClick,\n      className: cn('md-tab', (_cn = {\n        'md-tab--icon': label && icon\n      }, _cn[activeClassName] = activeClassName && active, _cn[inactiveClassName] = inactiveClassName && !active, _cn), className),\n      'aria-controls': controlsId,\n      'aria-selected': active\n    }), icon, label);\n  };\n\n  return Tab;\n}(PureComponent);\n\nTab.propTypes = {\n  /**\n   * An id for the tab. This is required for a11y. If you use the `Tabs` component, this\n   * will automatically be generated for you and injected into this component.\n   */\n  id: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n\n  /**\n   * An id for a `TabPanel` that holds the children from this tab. This is required for a11y.\n   * If you use the `Tabs` component, this will automatically be generated for you and injected\n   * into this component.\n   */\n  controlsId: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n\n  /**\n   * An optional style to apply.\n   */\n  style: PropTypes.object,\n\n  /**\n   * An optional className to apply.\n   */\n  className: PropTypes.string,\n\n  /**\n   * The className to use when the tab is currently active. The default className does\n   * not actually apply any styles.\n   *\n   * @see {@link Tabs/Tabs#activeTabClassName}\n   */\n  activeClassName: PropTypes.string,\n\n  /**\n   * The className to use when the tab is not active. By default, this will set inactive\n   * tabs' color to `$md-white-base`. This works great if the tabs are placed on a\n   * colored toolbar but fails when the tabs are not colored or on a white background.\n   * In these cases, it is recommended to change this value to `md-text--secondary`\n   * or some other class name.\n   *\n   * @see {@link Tabs/Tabs#inactiveTabClassName}\n   */\n  inactiveClassName: PropTypes.string,\n\n  /**\n   * The component to render as.\n   */\n  component: PropTypes.oneOfType([PropTypes.func, PropTypes.string, PropTypes.object]).isRequired,\n\n  /**\n   * Any children to display once the tab has been selected.\n   */\n  children: PropTypes.node,\n\n  /**\n   * An optional icon to display in the tab. This can either be used alone, or it\n   * will be placed above the `label` if both are given.\n   */\n  icon: PropTypes.element,\n\n  /**\n   * An optional label to display in the tab. This can either be used alone, or it\n   * will be placed below the `icon` if both are given.\n   */\n  label: oneRequired(PropTypes.node, 'icon'),\n\n  /**\n   * An optional function to call when the tab is clicked. The callback includes this tab's index,\n   * id, controlsId, children, and finally click event. All the additional parameters are included\n   * if you are not using the `TabsContainer` component. The `id` and `controlsId` are mainly passed\n   * for accessibility.\n   *\n   * ```js\n   * onClick(index, id, controlsId, children, event);\n   * ```\n   */\n  onClick: PropTypes.func,\n\n  /**\n   * Boolean if the tab is currently active. If you use the `Tabs` component, this is automatically\n   * injected.\n   */\n  active: PropTypes.bool,\n\n  /**\n   * Tab's index. If you use the `Tabs` component, this is automatically injected.\n   */\n  index: PropTypes.number\n};\nTab.defaultProps = {\n  component: 'li',\n  activeClassName: 'md-tab--active',\n  inactiveClassName: 'md-tab--inactive'\n};\nexport default Tab;","map":null,"metadata":{},"sourceType":"module"}