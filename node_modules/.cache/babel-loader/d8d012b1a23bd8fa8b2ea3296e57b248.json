{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n/**\n * @overview TagInput accepts multiple values that can be individually removed\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Badge } from '../../badges';\nimport { Icon } from '../../icon';\nimport { minorScale } from '../../scales';\n\nvar Tag =\n/*#__PURE__*/\nfunction (_React$PureComponent) {\n  _inherits(Tag, _React$PureComponent);\n\n  function Tag() {\n    _classCallCheck(this, Tag);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Tag).apply(this, arguments));\n  }\n\n  _createClass(Tag, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          children = _this$props.children,\n          onRemove = _this$props.onRemove,\n          isRemovable = _this$props.isRemovable,\n          props = _objectWithoutProperties(_this$props, [\"children\", \"onRemove\", \"isRemovable\"]);\n\n      var badgeStyles = {\n        alignItems: 'center',\n        display: 'inline-flex',\n        fontWeight: 400,\n        textTransform: 'none'\n      };\n\n      if (isRemovable) {\n        badgeStyles.paddingRight = minorScale(1);\n      }\n\n      return React.createElement(Badge, _extends({\n        isInteractive: true\n      }, badgeStyles, props), children, isRemovable && React.createElement(Icon, {\n        icon: \"cross\",\n        marginLeft: minorScale(1),\n        onClick: onRemove,\n        size: minorScale(3)\n      }));\n    }\n  }]);\n\n  return Tag;\n}(React.PureComponent);\n\nTag.displayName = \"Tag\";\n\n_defineProperty(Tag, \"propTypes\", {\n  /**\n   * Callback invoked when the removal icon is clicked.\n   * (event) => void\n   */\n  onRemove: PropTypes.func,\n\n  /** Whether or not the tag can be removed. */\n  isRemovable: PropTypes.bool\n});\n\nexport default Tag;","map":null,"metadata":{},"sourceType":"module"}