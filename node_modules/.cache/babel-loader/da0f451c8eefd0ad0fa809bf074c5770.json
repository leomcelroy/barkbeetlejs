{"ast":null,"code":"import { Themer } from '../../../../themer';\nimport memoizeClassName from '../utils/memoizeClassName';\nimport scales from '../foundational-styles/scales';\nimport palette from '../foundational-styles/palette';\nvar InputAppearances = {};\nInputAppearances.default = Themer.createInputAppearance({\n  base: {\n    backgroundColor: 'white',\n    boxShadow: \"inset 0 0 0 1px \".concat(scales.neutral.N5A, \", inset 0 1px 2px \").concat(scales.neutral.N4A)\n  },\n  invalid: {\n    boxShadow: \"inset 0 0 0 1px \".concat(palette.red.base, \", inset 0 1px 2px \").concat(scales.neutral.N4A)\n  },\n  placeholder: {\n    color: scales.neutral.N6A\n  },\n  focus: {\n    outline: 'none',\n    boxShadow: \"inset 0 0 2px \".concat(scales.neutral.N4A, \", inset 0 0 0 1px \").concat(scales.blue.B7, \", 0 0 0 3px \").concat(scales.blue.B4A)\n  },\n  disabled: {\n    boxShadow: \"inset 0 0 0 1px \".concat(scales.neutral.N4A),\n    backgroundColor: scales.neutral.N2\n  }\n});\nInputAppearances.neutral = Themer.createInputAppearance({\n  base: {\n    backgroundColor: scales.neutral.N2A\n  },\n  invalid: {\n    boxShadow: \"inset 0 0 0 1px \".concat(palette.red.base)\n  },\n  placeholder: {\n    color: scales.neutral.N6A\n  },\n  focus: {\n    outline: 'none',\n    backgroundColor: 'white',\n    boxShadow: \"0 0 0 2px \".concat(scales.blue.B6A)\n  },\n  disabled: {\n    boxShadow: \"inset 0 0 0 1px \".concat(scales.neutral.N4A),\n    backgroundColor: scales.neutral.N2\n  }\n});\nInputAppearances.none = Themer.createInputAppearance({\n  base: {\n    backgroundColor: 'white'\n  },\n  invalid: {},\n  placeholder: {\n    color: scales.neutral.N6A\n  },\n  focus: {\n    outline: 'none'\n  },\n  disabled: {\n    backgroundColor: scales.neutral.N2\n  }\n});\n/**\n * Get the appearance of a `TextInput`.\n * @param {string} appearance - the appearance name\n * @return {Object} the appearance object.\n */\n\nvar getTextInputAppearance = function getTextInputAppearance(appearance) {\n  switch (appearance) {\n    case 'neutral':\n      return InputAppearances.neutral;\n\n    case 'none':\n      return InputAppearances.none;\n\n    default:\n      return InputAppearances.default;\n  }\n};\n/**\n * Get the className of a `TextInput`.\n * @param {string} appearance - the appearance name\n * @return {string} the appearance class name.\n */\n\n\nexport default memoizeClassName(getTextInputAppearance);","map":null,"metadata":{},"sourceType":"module"}