{"ast":null,"code":"var _toConsumableArray = require(\"/Users/leomcelroy/Desktop/barkbeetle_js/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nvar _classCallCheck = require(\"/Users/leomcelroy/Desktop/barkbeetle_js/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/leomcelroy/Desktop/barkbeetle_js/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/Users/leomcelroy/Desktop/barkbeetle_js/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/Users/leomcelroy/Desktop/barkbeetle_js/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/Users/leomcelroy/Desktop/barkbeetle_js/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _assertThisInitialized = require(\"/Users/leomcelroy/Desktop/barkbeetle_js/node_modules/@babel/runtime/helpers/assertThisInitialized\");\n\nvar _wrapNativeSuper = require(\"/Users/leomcelroy/Desktop/barkbeetle_js/node_modules/@babel/runtime/helpers/wrapNativeSuper\");\n\nvar Box = require('../class/Box.js');\n\nvar NoBox = Box.NoBox;\n\nvar PointCloud =\n/*#__PURE__*/\nfunction (_Array) {\n  \"use strict\";\n\n  _inherits(PointCloud, _Array);\n\n  function PointCloud() {\n    var _this;\n\n    _classCallCheck(this, PointCloud);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    if (args.length === 1 && typeof args[0] === 'number') {\n      _this = _possibleConstructorReturn(this, _getPrototypeOf(PointCloud).call(this, args.shift()));\n    } else {\n      _this = _possibleConstructorReturn(this, _getPrototypeOf(PointCloud).call(this));\n    } // except multiple point arrays as input and merge them into one\n\n\n    args.reduce(function (last, curr) {\n      last.push.apply(last, _toConsumableArray(curr));\n      return _assertThisInitialized(_assertThisInitialized(_this));\n    }, _assertThisInitialized(_assertThisInitialized(_this)));\n    return _possibleConstructorReturn(_this);\n  }\n\n  _createClass(PointCloud, [{\n    key: \"transform\",\n    value: function transform(m) {\n      return new PointCloud(this.map(function (p) {\n        return p.transform(m);\n      }));\n    }\n  }, {\n    key: \"bbox\",\n    value: function bbox() {\n      if (!this.length) {\n        return new NoBox();\n      }\n\n      var xMin = Infinity;\n      var xMax = -Infinity;\n      var yMin = Infinity;\n      var yMax = -Infinity;\n      this.forEach(function (p) {\n        xMin = Math.min(xMin, p.x);\n        xMax = Math.max(xMax, p.x);\n        yMin = Math.min(yMin, p.y);\n        yMax = Math.max(yMax, p.y);\n      });\n      return new Box(xMin, yMin, xMax - xMin, yMax - yMin);\n    }\n  }, {\n    key: \"merge\",\n    value: function merge(cloud) {\n      return new PointCloud(this, cloud);\n    }\n  }]);\n\n  return PointCloud;\n}(_wrapNativeSuper(Array));\n\nmodule.exports = PointCloud;","map":null,"metadata":{},"sourceType":"script"}