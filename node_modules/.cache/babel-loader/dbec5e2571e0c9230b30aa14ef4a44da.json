{"ast":null,"code":"import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport Box, { dimensions, spacing, position, layout } from 'ui-box';\nimport { Text } from '../../typography';\nimport { Icon } from '../../icon';\nimport { withTheme } from '../../theme';\n\nvar Select =\n/*#__PURE__*/\nfunction (_PureComponent) {\n  _inherits(Select, _PureComponent);\n\n  function Select() {\n    _classCallCheck(this, Select);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Select).apply(this, arguments));\n  }\n\n  _createClass(Select, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          theme = _this$props.theme,\n          id = _this$props.id,\n          name = _this$props.name,\n          height = _this$props.height,\n          children = _this$props.children,\n          defaultValue = _this$props.defaultValue,\n          disabled = _this$props.disabled,\n          onChange = _this$props.onChange,\n          value = _this$props.value,\n          required = _this$props.required,\n          autoFocus = _this$props.autoFocus,\n          isInvalid = _this$props.isInvalid,\n          appearance = _this$props.appearance,\n          props = _objectWithoutProperties(_this$props, [\"theme\", \"id\", \"name\", \"height\", \"children\", \"defaultValue\", \"disabled\", \"onChange\", \"value\", \"required\", \"autoFocus\", \"isInvalid\", \"appearance\"]);\n\n      var themedClassName = theme.getSelectClassName(appearance);\n      var textSize = theme.getTextSizeForControlHeight(height);\n      var borderRadius = theme.getBorderRadiusForControlHeight(height);\n      var iconSize = theme.getIconSizeForSelect(height);\n      var iconMargin = height >= 36 ? 12 : 8;\n      return React.createElement(Box, _extends({\n        display: \"inline-flex\",\n        flex: 1,\n        position: \"relative\",\n        width: \"auto\",\n        height: height\n      }, props), React.createElement(Text, {\n        is: \"select\",\n        className: themedClassName,\n        id: id,\n        name: name,\n        onChange: onChange,\n        defaultValue: defaultValue,\n        value: value,\n        required: required,\n        autoFocus: autoFocus,\n        disabled: disabled,\n        \"aria-invalid\": isInvalid,\n        size: textSize,\n        borderRadius: borderRadius,\n        textTransform: \"default\",\n        paddingLeft: Math.round(height / 3.2) // Provide enough space for auto-sizing select including the icon\n        ,\n        paddingRight: iconMargin * 2 + iconSize\n      }, children), React.createElement(Icon, {\n        icon: \"caret-down\",\n        color: \"default\",\n        size: iconSize,\n        position: \"absolute\",\n        top: \"50%\",\n        marginTop: -iconSize / 2,\n        right: iconMargin,\n        pointerEvents: \"none\"\n      }));\n    }\n  }]);\n\n  return Select;\n}(PureComponent);\n\nSelect.displayName = \"Select\";\n\n_defineProperty(Select, \"propTypes\", _objectSpread({}, dimensions.propTypes, spacing.propTypes, position.propTypes, layout.propTypes, {\n  /**\n   * The id attribute for the select.\n   */\n  id: PropTypes.string,\n\n  /**\n   * The name attribute for the select.\n   */\n  name: PropTypes.string,\n\n  /**\n   * The options that are passed to the select.\n   */\n  children: PropTypes.node,\n\n  /**\n   * The initial value of an uncontrolled select\n   */\n  defaultValue: PropTypes.any,\n\n  /**\n   * Function called when value changes.\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * The value of the select.\n   */\n  value: PropTypes.any,\n\n  /**\n   * When true, the select is required.\n   */\n  required: PropTypes.bool,\n\n  /**\n   * When true, the select should auto focus.\n   */\n  autoFocus: PropTypes.bool,\n\n  /**\n   * When true, the select is invalid.\n   */\n  isInvalid: PropTypes.bool,\n\n  /**\n   * The appearance of the select. The default theme only supports default.\n   */\n  appearance: PropTypes.string.isRequired,\n\n  /**\n   * Theme provided by ThemeProvider.\n   */\n  theme: PropTypes.object.isRequired\n}));\n\n_defineProperty(Select, \"defaultProps\", {\n  appearance: 'default',\n  height: 32\n});\n\nexport default withTheme(Select);","map":null,"metadata":{},"sourceType":"module"}