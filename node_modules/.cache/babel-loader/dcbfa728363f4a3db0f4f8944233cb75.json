{"ast":null,"code":"/*\n * Copyright 2015 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the terms of the LICENSE file distributed with this project.\n */\nimport * as tslib_1 from \"tslib\";\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport { Boundary } from \"../../common/boundary\";\nimport * as Classes from \"../../common/classes\";\nimport * as Errors from \"../../common/errors\";\nimport { Position } from \"../../common/position\";\nimport { DISPLAYNAME_PREFIX } from \"../../common/props\";\nimport { isElementOfType } from \"../../common/utils\";\nimport { Menu } from \"../menu/menu\";\nimport { MenuItem } from \"../menu/menuItem\";\nimport { Popover } from \"../popover/popover\";\n/** @deprecated use `<OverflowList>` for automatic overflow based on available space. */\n\nvar CollapsibleList =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(CollapsibleList, _super);\n\n  function CollapsibleList() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  CollapsibleList.prototype.render = function () {\n    var _this = this;\n\n    var collapseFrom = this.props.collapseFrom;\n    var childrenLength = React.Children.count(this.props.children);\n\n    var _a = this.partitionChildren(),\n        visibleChildren = _a[0],\n        collapsedChildren = _a[1];\n\n    var visibleItems = visibleChildren.map(function (child, index) {\n      var absoluteIndex = collapseFrom === Boundary.START ? childrenLength - 1 - index : index;\n      return React.createElement(\"li\", {\n        className: _this.props.visibleItemClassName,\n        key: absoluteIndex\n      }, _this.props.visibleItemRenderer(child.props, absoluteIndex));\n    });\n\n    if (collapseFrom === Boundary.START) {\n      // reverse START list so separators appear before items\n      visibleItems.reverse();\n    } // construct dropdown menu for collapsed items\n\n\n    var collapsedPopover;\n\n    if (collapsedChildren.length > 0) {\n      var position = collapseFrom === Boundary.END ? Position.BOTTOM_RIGHT : Position.BOTTOM_LEFT;\n      collapsedPopover = React.createElement(\"li\", {\n        className: this.props.visibleItemClassName\n      }, React.createElement(Popover, tslib_1.__assign({\n        content: React.createElement(Menu, null, collapsedChildren),\n        position: position\n      }, this.props.dropdownProps), this.props.dropdownTarget));\n    }\n\n    return React.createElement(\"ul\", {\n      className: classNames(Classes.COLLAPSIBLE_LIST, this.props.className)\n    }, collapseFrom === Boundary.START ? collapsedPopover : null, visibleItems, collapseFrom === Boundary.END ? collapsedPopover : null);\n  }; // splits the list of children into two arrays: visible and collapsed\n\n\n  CollapsibleList.prototype.partitionChildren = function () {\n    if (this.props.children == null) {\n      return [[], []];\n    }\n\n    var childrenArray = React.Children.map(this.props.children, function (child, index) {\n      if (!isElementOfType(child, MenuItem)) {\n        throw new Error(Errors.COLLAPSIBLE_LIST_INVALID_CHILD);\n      }\n\n      return React.cloneElement(child, {\n        key: \"visible-\" + index\n      });\n    });\n\n    if (this.props.collapseFrom === Boundary.START) {\n      // reverse START list so we can always slice visible items from the front of the list\n      childrenArray.reverse();\n    }\n\n    var visibleItemCount = this.props.visibleItemCount;\n    return [childrenArray.slice(0, visibleItemCount), childrenArray.slice(visibleItemCount)];\n  };\n\n  CollapsibleList.displayName = DISPLAYNAME_PREFIX + \".CollapsibleList\";\n  CollapsibleList.defaultProps = {\n    collapseFrom: Boundary.START,\n    dropdownTarget: null,\n    visibleItemCount: 3,\n    visibleItemRenderer: null\n  };\n  return CollapsibleList;\n}(React.Component);\n\nexport { CollapsibleList };","map":null,"metadata":{},"sourceType":"module"}