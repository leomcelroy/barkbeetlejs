{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport fuzzaldrin from 'fuzzaldrin-plus';\nimport VirtualList from 'react-tiny-virtual-list';\nimport { Pane } from '../../layers';\nimport { TableHead, SearchTableHeaderCell } from '../../table';\nimport OptionShapePropType from './OptionShapePropType';\nimport Option from './Option';\n/**\n * Fuzzaldrin-plus is the default filter, but you can use your own\n * as long as they follow the following signature:\n * @param options <Array[String]> - ['label', 'label2', ...]\n * @param input <String>\n */\n\nvar fuzzyFilter = function fuzzyFilter(options, input) {\n  return fuzzaldrin.filter(options, input);\n};\n/**\n * This is the default item renderer of options\n * you can pass custom renderers as long as they work the same as the Option\n */\n\n\nvar itemRenderer = function itemRenderer(props) {\n  return React.createElement(Option, props);\n};\n\nitemRenderer.displayName = \"itemRenderer\";\n\nvar OptionsList =\n/*#__PURE__*/\nfunction (_PureComponent) {\n  _inherits(OptionsList, _PureComponent);\n\n  function OptionsList(props, context) {\n    var _this;\n\n    _classCallCheck(this, OptionsList);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(OptionsList).call(this, props, context));\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"isSelected\", function (item) {\n      var selected = _this.state.selected;\n      return Boolean(selected.find(function (selectedItem) {\n        return selectedItem === item.value;\n      }));\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"search\", function (options) {\n      var optionsFilter = _this.props.optionsFilter;\n      var searchValue = _this.state.searchValue;\n      return searchValue.trim() === '' ? options // Return if no search query\n      : optionsFilter(options.map(function (item) {\n        return item.labelInList || item.label;\n      }), searchValue).map(function (name) {\n        return options.find(function (item) {\n          return item.labelInList === name || item.label === name;\n        });\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"getCurrentIndex\", function () {\n      var selected = _this.props.selected;\n\n      var options = _this.getFilteredOptions();\n\n      return options.findIndex(function (option) {\n        return option.value === selected[selected.length - 1];\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"handleKeyDown\", function (e) {\n      if (e.keyCode === 38) {\n        _this.handleArrowUp();\n      }\n\n      if (e.keyCode === 40) {\n        _this.handleArrowDown();\n      }\n\n      if (e.keyCode === 13) {\n        _this.handleEnter();\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"handleArrowUp\", function () {\n      var onSelect = _this.props.onSelect;\n\n      var options = _this.getFilteredOptions();\n\n      var nextIndex = _this.getCurrentIndex() - 1;\n\n      if (nextIndex < 0) {\n        nextIndex = options.length - 1;\n      }\n\n      onSelect(options[nextIndex]);\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"handleArrowDown\", function () {\n      var onSelect = _this.props.onSelect;\n\n      var options = _this.getFilteredOptions();\n\n      var nextIndex = _this.getCurrentIndex() + 1;\n\n      if (nextIndex === options.length) {\n        nextIndex = 0;\n      }\n\n      onSelect(options[nextIndex]);\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"handleEnter\", function () {\n      var isSelected = _this.getCurrentIndex() !== -1;\n\n      if (isSelected) {\n        _this.props.close();\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"handleChange\", function (searchValue) {\n      _this.setState({\n        searchValue: searchValue\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"handleSelect\", function (item) {\n      _this.props.onSelect(item);\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"handleDeselect\", function (item) {\n      _this.props.onDeselect(item);\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"assignSearchRef\", function (ref) {\n      _this.searchRef = ref;\n    });\n\n    _this.state = {\n      searchValue: props.defaultSearchValue,\n      selected: props.selected\n    };\n    return _this;\n  }\n\n  _createClass(OptionsList, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      var hasFilter = this.props.hasFilter;\n      if (!hasFilter) return;\n      /**\n       * Hacky solution for broken autoFocus\n       * https://github.com/segmentio/evergreen/issues/90\n       */\n\n      requestAnimationFrame(function () {\n        _this2.searchRef.querySelector('input').focus();\n      });\n      window.addEventListener('keydown', this.handleKeyDown);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      window.removeEventListener('keydown', this.handleKeyDown);\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (prevProps.selected !== this.props.selected) {\n        // eslint-disable-next-line react/no-did-update-set-state\n        this.setState({\n          selected: this.props.selected\n        });\n      }\n    }\n  }, {\n    key: \"getFilteredOptions\",\n    value: function getFilteredOptions() {\n      var options = this.props.options;\n      return this.search(options);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var _this$props = this.props,\n          originalOptions = _this$props.options,\n          close = _this$props.close,\n          width = _this$props.width,\n          height = _this$props.height,\n          onSelect = _this$props.onSelect,\n          onDeselect = _this$props.onDeselect,\n          selected = _this$props.selected,\n          hasFilter = _this$props.hasFilter,\n          optionSize = _this$props.optionSize,\n          _renderItem = _this$props.renderItem,\n          placeholder = _this$props.placeholder,\n          optionsFilter = _this$props.optionsFilter,\n          isMultiSelect = _this$props.isMultiSelect,\n          defaultSearchValue = _this$props.defaultSearchValue,\n          props = _objectWithoutProperties(_this$props, [\"options\", \"close\", \"width\", \"height\", \"onSelect\", \"onDeselect\", \"selected\", \"hasFilter\", \"optionSize\", \"renderItem\", \"placeholder\", \"optionsFilter\", \"isMultiSelect\", \"defaultSearchValue\"]);\n\n      var options = this.search(originalOptions);\n      var listHeight = height - (hasFilter ? 32 : 0);\n      var currentIndex = this.getCurrentIndex();\n      var scrollToIndex = currentIndex === -1 ? 0 : currentIndex;\n      return React.createElement(Pane, _extends({\n        height: height,\n        width: width,\n        display: \"flex\",\n        flexDirection: \"column\"\n      }, props), hasFilter && React.createElement(TableHead, null, React.createElement(SearchTableHeaderCell, {\n        onChange: this.handleChange,\n        innerRef: this.assignSearchRef,\n        borderRight: null,\n        height: 32\n      })), React.createElement(Pane, {\n        flex: 1\n      }, React.createElement(VirtualList, _extends({\n        height: listHeight,\n        width: \"100%\",\n        itemSize: optionSize,\n        itemCount: options.length,\n        overscanCount: 20,\n        scrollToAlignment: \"auto\"\n      }, scrollToIndex ? {\n        scrollToIndex: scrollToIndex\n      } : {}, {\n        renderItem: function renderItem(_ref) {\n          var index = _ref.index,\n              style = _ref.style;\n          var item = options[index];\n\n          var isSelected = _this3.isSelected(item);\n\n          return _renderItem({\n            key: item.value,\n            label: item.label,\n            style: style,\n            height: optionSize,\n            onSelect: function onSelect() {\n              return _this3.handleSelect(item);\n            },\n            onDeselect: function onDeselect() {\n              return _this3.handleDeselect(item);\n            },\n            isSelectable: !isSelected || isMultiSelect,\n            isSelected: isSelected\n          });\n        }\n      }))));\n    }\n  }]);\n\n  return OptionsList;\n}(PureComponent);\n\nOptionsList.displayName = \"OptionsList\";\n\n_defineProperty(OptionsList, \"propTypes\", {\n  options: PropTypes.arrayOf(OptionShapePropType),\n  close: PropTypes.func,\n  height: PropTypes.number,\n  width: PropTypes.number,\n\n  /**\n   * When true, multi select is accounted for.\n   */\n  isMultiSelect: PropTypes.bool,\n\n  /**\n   * This holds the values of the options\n   */\n  selected: PropTypes.arrayOf(PropTypes.string),\n  onSelect: PropTypes.func,\n  onDeselect: PropTypes.func,\n  hasFilter: PropTypes.bool,\n  optionSize: PropTypes.number,\n  renderItem: PropTypes.func,\n  placeholder: PropTypes.string,\n  optionsFilter: PropTypes.func,\n  defaultSearchValue: PropTypes.string\n});\n\n_defineProperty(OptionsList, \"defaultProps\", {\n  options: [],\n\n  /**\n   * Including border bottom\n   * For some reason passing height to TableRow doesn't work\n   * TODO: fix hacky solution\n   */\n  optionSize: 33,\n  onSelect: function onSelect() {},\n  onDeselect: function onDeselect() {},\n  selected: [],\n  renderItem: itemRenderer,\n  optionsFilter: fuzzyFilter,\n  placeholder: 'Filter...',\n  defaultSearchValue: ''\n});\n\nexport { OptionsList as default };","map":null,"metadata":{},"sourceType":"module"}