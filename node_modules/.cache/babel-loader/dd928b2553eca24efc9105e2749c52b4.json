{"ast":null,"code":"/*\n * Copyright 2018 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the terms of the LICENSE file distributed with this project.\n */\nimport * as tslib_1 from \"tslib\";\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport { DISABLED, FILL, HTML_SELECT, LARGE, MINIMAL } from \"../../common/classes\";\nimport { Icon } from \"../icon/icon\"; // this component is simple enough that tests would be purely tautological.\n\n/* istanbul ignore next */\n\nvar HTMLSelect =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(HTMLSelect, _super);\n\n  function HTMLSelect() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  HTMLSelect.prototype.render = function () {\n    var _a = this.props,\n        className = _a.className,\n        disabled = _a.disabled,\n        elementRef = _a.elementRef,\n        fill = _a.fill,\n        iconProps = _a.iconProps,\n        large = _a.large,\n        minimal = _a.minimal,\n        _b = _a.options,\n        options = _b === void 0 ? [] : _b,\n        htmlProps = tslib_1.__rest(_a, [\"className\", \"disabled\", \"elementRef\", \"fill\", \"iconProps\", \"large\", \"minimal\", \"options\"]);\n\n    var classes = classNames(HTML_SELECT, (_c = {}, _c[DISABLED] = disabled, _c[FILL] = fill, _c[LARGE] = large, _c[MINIMAL] = minimal, _c), className);\n    var optionChildren = options.map(function (option) {\n      var props = typeof option === \"object\" ? option : {\n        value: option\n      };\n      return React.createElement(\"option\", tslib_1.__assign({}, props, {\n        key: props.value,\n        children: props.label || props.value\n      }));\n    });\n    return React.createElement(\"div\", {\n      className: classes\n    }, React.createElement(\"select\", tslib_1.__assign({\n      disabled: disabled,\n      ref: elementRef\n    }, htmlProps, {\n      multiple: false\n    }), optionChildren, htmlProps.children), React.createElement(Icon, tslib_1.__assign({\n      icon: \"double-caret-vertical\"\n    }, iconProps)));\n\n    var _c;\n  };\n\n  return HTMLSelect;\n}(React.PureComponent);\n\nexport { HTMLSelect };","map":null,"metadata":{},"sourceType":"module"}