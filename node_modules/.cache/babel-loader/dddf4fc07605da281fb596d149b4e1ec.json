{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { css } from 'ui-box';\nimport { Pane } from '../../layers';\nimport { Paragraph, Heading } from '../../typography';\nimport { Overlay } from '../../overlay';\nimport { Button, IconButton } from '../../buttons';\nimport { withTheme } from '../../theme';\nvar animationEasing = {\n  deceleration: \"cubic-bezier(0.0, 0.0, 0.2, 1)\",\n  acceleration: \"cubic-bezier(0.4, 0.0, 1, 1)\"\n};\nvar ANIMATION_DURATION = 200;\nvar openAnimation = css.keyframes('openAnimation', {\n  from: {\n    transform: 'scale(0.8)',\n    opacity: 0\n  },\n  to: {\n    transform: 'scale(1)',\n    opacity: 1\n  }\n});\nvar closeAnimation = css.keyframes('closeAnimation', {\n  from: {\n    transform: 'scale(1)',\n    opacity: 1\n  },\n  to: {\n    transform: 'scale(0.8)',\n    opacity: 0\n  }\n});\nvar animationStyles = {\n  '&[data-state=\"entering\"], &[data-state=\"entered\"]': {\n    animation: \"\".concat(openAnimation, \" \").concat(ANIMATION_DURATION, \"ms \").concat(animationEasing.deceleration, \" both\")\n  },\n  '&[data-state=\"exiting\"]': {\n    animation: \"\".concat(closeAnimation, \" \").concat(ANIMATION_DURATION, \"ms \").concat(animationEasing.acceleration, \" both\")\n  }\n};\n\nvar Dialog =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Dialog, _React$Component);\n\n  function Dialog() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Dialog);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Dialog)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"renderChildren\", function (close) {\n      var children = _this.props.children;\n\n      if (typeof children === 'function') {\n        return children({\n          close: close\n        });\n      }\n\n      if (typeof children === 'string') {\n        return React.createElement(Paragraph, null, children);\n      }\n\n      return children;\n    });\n\n    return _this;\n  }\n\n  _createClass(Dialog, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          title = _this$props.title,\n          width = _this$props.width,\n          intent = _this$props.intent,\n          isShown = _this$props.isShown,\n          topOffset = _this$props.topOffset,\n          sideOffset = _this$props.sideOffset,\n          hasHeader = _this$props.hasHeader,\n          hasFooter = _this$props.hasFooter,\n          hasCancel = _this$props.hasCancel,\n          onCloseComplete = _this$props.onCloseComplete,\n          onOpenComplete = _this$props.onOpenComplete,\n          onCancel = _this$props.onCancel,\n          onConfirm = _this$props.onConfirm,\n          confirmLabel = _this$props.confirmLabel,\n          isConfirmLoading = _this$props.isConfirmLoading,\n          isConfirmDisabled = _this$props.isConfirmDisabled,\n          cancelLabel = _this$props.cancelLabel,\n          shouldCloseOnOverlayClick = _this$props.shouldCloseOnOverlayClick,\n          shouldCloseOnEscapePress = _this$props.shouldCloseOnEscapePress,\n          containerProps = _this$props.containerProps,\n          contentContainerProps = _this$props.contentContainerProps,\n          minHeightContent = _this$props.minHeightContent;\n      var sideOffsetWithUnit = Number.isInteger(sideOffset) ? \"\".concat(sideOffset, \"px\") : sideOffset;\n      var maxWidth = \"calc(100% - \".concat(sideOffsetWithUnit, \" * 2)\");\n      var topOffsetWithUnit = Number.isInteger(topOffset) ? \"\".concat(topOffset, \"px\") : topOffset;\n      var maxHeight = \"calc(100% - \".concat(topOffsetWithUnit, \" * 2)\");\n      return React.createElement(Overlay, {\n        isShown: isShown,\n        shouldCloseOnClick: shouldCloseOnOverlayClick,\n        shouldCloseOnEscapePress: shouldCloseOnEscapePress,\n        onExited: onCloseComplete,\n        onEntered: onOpenComplete,\n        containerProps: {\n          display: 'flex',\n          alignItems: 'flex-start',\n          justifyContent: 'center'\n        }\n      }, function (_ref) {\n        var state = _ref.state,\n            close = _ref.close;\n        return React.createElement(Pane, _extends({\n          role: \"dialog\",\n          backgroundColor: \"white\",\n          elevation: 4,\n          borderRadius: 8,\n          width: width,\n          maxWidth: maxWidth,\n          maxHeight: maxHeight,\n          marginX: sideOffsetWithUnit,\n          marginY: topOffsetWithUnit,\n          display: \"flex\",\n          flexDirection: \"column\",\n          css: animationStyles,\n          \"data-state\": state\n        }, containerProps), hasHeader && React.createElement(Pane, {\n          padding: 16,\n          flexShrink: 0,\n          borderBottom: \"muted\",\n          display: \"flex\",\n          alignItems: \"center\"\n        }, React.createElement(Heading, {\n          is: \"h4\",\n          size: 600,\n          flex: \"1\"\n        }, title), React.createElement(IconButton, {\n          appearance: \"minimal\",\n          icon: \"cross\",\n          onClick: function onClick() {\n            return onCancel(close);\n          }\n        })), React.createElement(Pane, _extends({\n          \"data-state\": state,\n          display: \"flex\",\n          overflow: \"auto\",\n          padding: 16,\n          flexDirection: \"column\",\n          minHeight: minHeightContent\n        }, contentContainerProps), React.createElement(Pane, null, _this2.renderChildren(close))), hasFooter && React.createElement(Pane, {\n          borderTop: \"muted\",\n          clearfix: true\n        }, React.createElement(Pane, {\n          padding: 16,\n          float: \"right\"\n        }, hasCancel && React.createElement(Button, {\n          tabIndex: 0,\n          onClick: function onClick() {\n            return onCancel(close);\n          }\n        }, cancelLabel), React.createElement(Button, {\n          tabIndex: 0,\n          marginLeft: 8,\n          appearance: \"primary\",\n          isLoading: isConfirmLoading,\n          disabled: isConfirmDisabled,\n          onClick: function onClick() {\n            return onConfirm(close);\n          },\n          intent: intent\n        }, confirmLabel))));\n      });\n    }\n  }]);\n\n  return Dialog;\n}(React.Component);\n\nDialog.displayName = \"Dialog\";\n\n_defineProperty(Dialog, \"propTypes\", {\n  /**\n   * Children can be a string, node or a function accepting `({ close })`.\n   * When passing a string, <Paragraph /> is used to wrap the string.\n   */\n  children: PropTypes.oneOfType([PropTypes.node, PropTypes.func]).isRequired,\n\n  /**\n   * The intent of the Dialog. Used for the button.\n   */\n  intent: PropTypes.oneOf(['none', 'success', 'warning', 'danger']).isRequired,\n\n  /**\n   * When true, the dialog is shown.\n   */\n  isShown: PropTypes.bool,\n\n  /**\n   * Title of the Dialog. Titles should use Title Case.\n   */\n  title: PropTypes.node,\n\n  /**\n   * When true, the header with the title and close icon button is shown.\n   */\n  hasHeader: PropTypes.bool,\n\n  /**\n   * When true, the footer with the cancel and confirm button is shown.\n   */\n  hasFooter: PropTypes.bool,\n\n  /**\n   * When true, the cancel button is shown.\n   */\n  hasCancel: PropTypes.bool,\n\n  /**\n   * Function that will be called when the exit transition is complete.\n   */\n  onCloseComplete: PropTypes.func,\n\n  /**\n   * Function that will be called when the enter transition is complete.\n   */\n  onOpenComplete: PropTypes.func,\n\n  /**\n   * Function that will be called when the confirm button is clicked.\n   * This does not close the Dialog. A close function will be passed\n   * as a paramater you can use to close the dialog.\n   *\n   * `onConfirm={(close) => close()}`\n   */\n  onConfirm: PropTypes.func,\n\n  /**\n   * Label of the confirm button.\n   */\n  confirmLabel: PropTypes.string,\n\n  /**\n   * When true, the confirm button is set to loading.\n   */\n  isConfirmLoading: PropTypes.bool,\n\n  /**\n   * When true, the confirm button is set to disabled.\n   */\n  isConfirmDisabled: PropTypes.bool,\n\n  /**\n   * Function that will be called when the cancel button is clicked.\n   * This closes the Dialog by default.\n   *\n   * `onCancel={(close) => close()}`\n   */\n  onCancel: PropTypes.func,\n\n  /**\n   * Label of the cancel button.\n   */\n  cancelLabel: PropTypes.string,\n\n  /**\n   * Boolean indicating if clicking the overlay should close the overlay.\n   */\n  shouldCloseOnOverlayClick: PropTypes.bool,\n\n  /**\n   * Boolean indicating if pressing the esc key should close the overlay.\n   */\n  shouldCloseOnEscapePress: PropTypes.bool,\n\n  /**\n   * Width of the Dialog.\n   */\n  width: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n\n  /**\n   * The space above the dialog.\n   * This offset is also used at the bottom when there is not enough vertical\n   * space available on screen â€” and the dialog scrolls internally.\n   */\n  topOffset: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n\n  /**\n   * The space on the left/right sides of the dialog when there isn't enough\n   * horizontal space available on screen.\n   */\n  sideOffset: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n\n  /**\n   * The min height of the body content.\n   * Makes it less weird when only showing little content.\n   */\n  minHeightContent: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n\n  /**\n   * Props that are passed to the dialog container.\n   */\n  containerProps: PropTypes.object,\n\n  /**\n   * Props that are passed to the content container.\n   */\n  contentContainerProps: PropTypes.object\n});\n\n_defineProperty(Dialog, \"defaultProps\", {\n  isShown: false,\n  hasHeader: true,\n  hasFooter: true,\n  hasCancel: true,\n  intent: 'none',\n  width: 560,\n  topOffset: '12vmin',\n  sideOffset: '16px',\n  minHeightContent: 80,\n  confirmLabel: 'Confirm',\n  isConfirmLoading: false,\n  isConfirmDisabled: false,\n  cancelLabel: 'Cancel',\n  shouldCloseOnOverlayClick: true,\n  shouldCloseOnEscapePress: true,\n  onCancel: function onCancel(close) {\n    return close();\n  },\n  onConfirm: function onConfirm(close) {\n    return close();\n  }\n});\n\nexport default withTheme(Dialog);","map":null,"metadata":{},"sourceType":"module"}