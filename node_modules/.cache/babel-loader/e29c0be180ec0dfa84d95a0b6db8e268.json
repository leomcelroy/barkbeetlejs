{"ast":null,"code":"import _toConsumableArray from \"/Users/leomcelroy/Desktop/barkBeetleEverything/barkbeetle_js_real/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\n// makerjs model, params -> profile toolpath\nimport * as params from '../parameters.js';\nimport * as mjs from 'makerjs';\n\nvar profile = function profile(model) {\n  //let p = model.models.profile;\n  var p = model;\n  var expansion = mjs.model.expandPaths(p, params.compensatedRadius, 1); //third parameter is what type of corners, 0 (rounded) by default\n  //let chains = mjs.model.findChains(expansion);\n\n  var chain = mjs.model.findSingleChain(expansion);\n  console.log(expansion);\n  console.log(\"chain\", chain);\n  var divisions = Math.floor(chain.pathLength / params.minimumSpacing);\n  var spacing = chain.pathLength / divisions;\n  var keyPoints = mjs.chain.toPoints(chain, spacing);\n  var scaleFactor = 100;\n  var scaleXY = keyPoints.map(function (p) {\n    return [p[0] / scaleFactor, p[1] / scaleFactor];\n  });\n  var gcodePoints = scaleXY.map(function (p) {\n    return \"G1 X\".concat(p[0], \" Y\").concat(p[1], \" F\").concat(params.feedRate);\n  });\n  var gcode = JSON.parse(JSON.stringify(gcodePoints));\n  var firstPoint = scaleXY[0];\n  var paths = params.depthOfPasses.map(function (p, i) {\n    return [\"G1 Z\".concat(params.depthOfPasses[i], \" F12.0\")].concat(_toConsumableArray(gcode), [\"G1 X\".concat(firstPoint[0], \" Y\").concat(firstPoint[1], \" F\").concat(params.feedRate)]);\n  });\n  paths = paths.flat(1);\n  gcode = [\"G20\", \"G90\", \"G1 Z\".concat(params.jogHeight, \" F9.0\"), \"G0 X\".concat(firstPoint[0], \" Y\").concat(firstPoint[1])].concat(_toConsumableArray(paths)); // write to a new file named\n\n  var filename = 'testGcode.nc';\n  var text = gcode.join('\\n');\n  return expansion;\n};\n\nexport { profile };","map":{"version":3,"sources":["/Users/leomcelroy/Desktop/barkBeetleEverything/barkbeetle_js_real/src/toolpaths/profile.js"],"names":["params","mjs","profile","model","p","expansion","expandPaths","compensatedRadius","chain","findSingleChain","console","log","divisions","Math","floor","pathLength","minimumSpacing","spacing","keyPoints","toPoints","scaleFactor","scaleXY","map","gcodePoints","feedRate","gcode","JSON","parse","stringify","firstPoint","paths","depthOfPasses","i","flat","jogHeight","filename","text","join"],"mappings":";AAAA;AAEA,OAAO,KAAKA,MAAZ,MAAwB,kBAAxB;AACA,OAAO,KAAKC,GAAZ,MAAqB,SAArB;;AAEA,IAAMC,OAAO,GAAG,SAAVA,OAAU,CAACC,KAAD,EAAW;AACzB;AACA,MAAIC,CAAC,GAAGD,KAAR;AAEA,MAAIE,SAAS,GAAGJ,GAAG,CAACE,KAAJ,CAAUG,WAAV,CAAsBF,CAAtB,EAAyBJ,MAAM,CAACO,iBAAhC,EAAmD,CAAnD,CAAhB,CAJyB,CAI8C;AACvE;;AACA,MAAIC,KAAK,GAAGP,GAAG,CAACE,KAAJ,CAAUM,eAAV,CAA0BJ,SAA1B,CAAZ;AAEAK,EAAAA,OAAO,CAACC,GAAR,CAAYN,SAAZ;AACAK,EAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBH,KAArB;AAEA,MAAII,SAAS,GAAGC,IAAI,CAACC,KAAL,CAAWN,KAAK,CAACO,UAAN,GAAmBf,MAAM,CAACgB,cAArC,CAAhB;AACA,MAAIC,OAAO,GAAGT,KAAK,CAACO,UAAN,GAAmBH,SAAjC;AAEA,MAAIM,SAAS,GAAGjB,GAAG,CAACO,KAAJ,CAAUW,QAAV,CAAmBX,KAAnB,EAA0BS,OAA1B,CAAhB;AAEA,MAAIG,WAAW,GAAG,GAAlB;AACA,MAAIC,OAAO,GAAGH,SAAS,CAACI,GAAV,CAAc,UAAAlB,CAAC;AAAA,WAAI,CAACA,CAAC,CAAC,CAAD,CAAD,GAAKgB,WAAN,EAAmBhB,CAAC,CAAC,CAAD,CAAD,GAAKgB,WAAxB,CAAJ;AAAA,GAAf,CAAd;AAEA,MAAIG,WAAW,GAAGF,OAAO,CAACC,GAAR,CAAY,UAAAlB,CAAC;AAAA,yBAAWA,CAAC,CAAC,CAAD,CAAZ,eAAoBA,CAAC,CAAC,CAAD,CAArB,eAA6BJ,MAAM,CAACwB,QAApC;AAAA,GAAb,CAAlB;AACA,MAAIC,KAAK,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAeL,WAAf,CAAX,CAAZ;AAEA,MAAIM,UAAU,GAAGR,OAAO,CAAC,CAAD,CAAxB;AAEA,MAAIS,KAAK,GAAG9B,MAAM,CAAC+B,aAAP,CAAqBT,GAArB,CAAyB,UAAClB,CAAD,EAAG4B,CAAH;AAAA,0BAAiBhC,MAAM,CAAC+B,aAAP,CAAqBC,CAArB,CAAjB,uCAAqDP,KAArD,kBAAmEI,UAAU,CAAC,CAAD,CAA7E,eAAqFA,UAAU,CAAC,CAAD,CAA/F,eAAuG7B,MAAM,CAACwB,QAA9G;AAAA,GAAzB,CAAZ;AACAM,EAAAA,KAAK,GAAGA,KAAK,CAACG,IAAN,CAAW,CAAX,CAAR;AAEAR,EAAAA,KAAK,IACH,KADG,EAEH,KAFG,gBAGIzB,MAAM,CAACkC,SAHX,0BAIIL,UAAU,CAAC,CAAD,CAJd,eAIsBA,UAAU,CAAC,CAAD,CAJhC,6BAKAC,KALA,EAAL,CA3ByB,CAmCzB;;AACA,MAAIK,QAAQ,GAAG,cAAf;AAEA,MAAIC,IAAI,GAAGX,KAAK,CAACY,IAAN,CAAW,IAAX,CAAX;AAGA,SAAOhC,SAAP;AACD,CA1CD;;AA6CA,SAAQH,OAAR","sourcesContent":["// makerjs model, params -> profile toolpath\n\nimport * as params from '../parameters.js'\nimport * as mjs from 'makerjs';\n\nconst profile = (model) => {\n  //let p = model.models.profile;\n  let p = model;\n\n  let expansion = mjs.model.expandPaths(p, params.compensatedRadius, 1); //third parameter is what type of corners, 0 (rounded) by default\n  //let chains = mjs.model.findChains(expansion);\n  let chain = mjs.model.findSingleChain(expansion);\n\n  console.log(expansion)\n  console.log(\"chain\", chain)\n\n  var divisions = Math.floor(chain.pathLength / params.minimumSpacing);\n  var spacing = chain.pathLength / divisions;\n\n  let keyPoints = mjs.chain.toPoints(chain, spacing);\n\n  let scaleFactor = 100;\n  let scaleXY = keyPoints.map(p => [p[0]/scaleFactor, p[1]/scaleFactor]);\n\n  let gcodePoints = scaleXY.map(p => `G1 X${p[0]} Y${p[1]} F${params.feedRate}`)\n  let gcode = JSON.parse(JSON.stringify(gcodePoints));\n\n  let firstPoint = scaleXY[0];\n\n  let paths = params.depthOfPasses.map((p,i) => [`G1 Z${params.depthOfPasses[i]} F12.0`, ...gcode, `G1 X${firstPoint[0]} Y${firstPoint[1]} F${params.feedRate}`])\n  paths = paths.flat(1);\n\n  gcode = [\n    \"G20\",\n    \"G90\",\n    `G1 Z${params.jogHeight} F9.0`,\n    `G0 X${firstPoint[0]} Y${firstPoint[1]}`,\n    ...paths\n  ]\n\n  // write to a new file named\n  let filename = 'testGcode.nc';\n\n  let text = gcode.join('\\n');\n\n\n  return expansion;\n};\n\n\nexport {profile};\n"]},"metadata":{},"sourceType":"module"}