{"ast":null,"code":"/*\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the terms of the LICENSE file distributed with this project.\n */\nimport * as tslib_1 from \"tslib\";\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport { Classes } from \"../../common\";\nimport { Dialog } from \"../../components\";\nimport { Hotkey } from \"./hotkey\";\nimport { Hotkeys } from \"./hotkeys\";\n/**\n * The delay before showing or hiding the dialog. Should be long enough to\n * allow all registered hotkey listeners to execute first.\n */\n\nvar DELAY_IN_MS = 10;\n\nvar HotkeysDialog =\n/** @class */\nfunction () {\n  function HotkeysDialog() {\n    var _this = this;\n\n    this.componentProps = {\n      globalHotkeysGroup: \"Global hotkeys\"\n    };\n    this.hotkeysQueue = [];\n    this.isDialogShowing = false;\n\n    this.show = function () {\n      _this.isDialogShowing = true;\n\n      _this.render();\n    };\n\n    this.hide = function () {\n      _this.isDialogShowing = false;\n\n      _this.render();\n    };\n  }\n\n  HotkeysDialog.prototype.render = function () {\n    if (this.container == null) {\n      this.container = this.getContainer();\n    }\n\n    ReactDOM.render(this.renderComponent(), this.container);\n  };\n\n  HotkeysDialog.prototype.unmount = function () {\n    if (this.container != null) {\n      ReactDOM.unmountComponentAtNode(this.container);\n      this.container.remove();\n      delete this.container;\n    }\n  };\n  /**\n   * Because hotkeys can be registered globally and locally and because\n   * event ordering cannot be guaranteed, we use this debouncing method to\n   * allow all hotkey listeners to fire and add their hotkeys to the dialog.\n   *\n   * 10msec after the last listener adds their hotkeys, we render the dialog\n   * and clear the queue.\n   */\n\n\n  HotkeysDialog.prototype.enqueueHotkeysForDisplay = function (hotkeys) {\n    this.hotkeysQueue.push(hotkeys); // reset timeout for debounce\n\n    window.clearTimeout(this.showTimeoutToken);\n    this.showTimeoutToken = window.setTimeout(this.show, DELAY_IN_MS);\n  };\n\n  HotkeysDialog.prototype.hideAfterDelay = function () {\n    window.clearTimeout(this.hideTimeoutToken);\n    this.hideTimeoutToken = window.setTimeout(this.hide, DELAY_IN_MS);\n  };\n\n  HotkeysDialog.prototype.isShowing = function () {\n    return this.isDialogShowing;\n  };\n\n  HotkeysDialog.prototype.getContainer = function () {\n    if (this.container == null) {\n      this.container = document.createElement(\"div\");\n      this.container.classList.add(Classes.PORTAL);\n      document.body.appendChild(this.container);\n    }\n\n    return this.container;\n  };\n\n  HotkeysDialog.prototype.renderComponent = function () {\n    return React.createElement(Dialog, tslib_1.__assign({}, this.componentProps, {\n      className: classNames(Classes.HOTKEY_DIALOG, this.componentProps.className),\n      isOpen: this.isDialogShowing,\n      onClose: this.hide\n    }), React.createElement(\"div\", {\n      className: Classes.DIALOG_BODY\n    }, this.renderHotkeys()));\n  };\n\n  HotkeysDialog.prototype.renderHotkeys = function () {\n    var _this = this;\n\n    var hotkeys = this.emptyHotkeyQueue();\n    var elements = hotkeys.map(function (hotkey, index) {\n      var group = hotkey.global === true && hotkey.group == null ? _this.componentProps.globalHotkeysGroup : hotkey.group;\n      return React.createElement(Hotkey, tslib_1.__assign({\n        key: index\n      }, hotkey, {\n        group: group\n      }));\n    });\n    return React.createElement(Hotkeys, null, elements);\n  };\n\n  HotkeysDialog.prototype.emptyHotkeyQueue = function () {\n    // flatten then empty the hotkeys queue\n    var hotkeys = this.hotkeysQueue.reduce(function (arr, queued) {\n      return arr.concat(queued);\n    }, []);\n    this.hotkeysQueue.length = 0;\n    return hotkeys;\n  };\n\n  return HotkeysDialog;\n}(); // singleton instance\n\n\nvar HOTKEYS_DIALOG = new HotkeysDialog();\nexport function isHotkeysDialogShowing() {\n  return HOTKEYS_DIALOG.isShowing();\n}\nexport function setHotkeysDialogProps(props) {\n  for (var key in props) {\n    if (props.hasOwnProperty(key)) {\n      HOTKEYS_DIALOG.componentProps[key] = props[key];\n    }\n  }\n}\nexport function showHotkeysDialog(hotkeys) {\n  HOTKEYS_DIALOG.enqueueHotkeysForDisplay(hotkeys);\n}\nexport function hideHotkeysDialog() {\n  HOTKEYS_DIALOG.hide();\n}\n/**\n * Use this function instead of `hideHotkeysDialog` if you need to ensure that all hotkey listeners\n * have time to execute with the dialog in a consistent open state. This can avoid flickering the\n * dialog between open and closedÂ states as successive listeners fire.\n */\n\nexport function hideHotkeysDialogAfterDelay() {\n  HOTKEYS_DIALOG.hideAfterDelay();\n}","map":null,"metadata":{},"sourceType":"module"}