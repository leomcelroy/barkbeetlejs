{"ast":null,"code":"import _classCallCheck from \"/Users/leomcelroy/Desktop/barkBeetleEverything/barkbeetle_js_real/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/leomcelroy/Desktop/barkBeetleEverything/barkbeetle_js_real/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/leomcelroy/Desktop/barkBeetleEverything/barkbeetle_js_real/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/leomcelroy/Desktop/barkBeetleEverything/barkbeetle_js_real/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/leomcelroy/Desktop/barkBeetleEverything/barkbeetle_js_real/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/leomcelroy/Desktop/barkBeetleEverything/barkbeetle_js_real/src/components/AdvancedOptions.js\";\nimport React, { Component, PureComponent } from 'react';\nimport { Button, Dialog, TextInputField, SegmentedControl, Heading, Link, Strong, Text } from 'evergreen-ui';\nimport * as utils from '../utils.js';\nimport store from '../store.js';\n\nvar AdvancedOptions =\n/*#__PURE__*/\nfunction (_PureComponent) {\n  _inherits(AdvancedOptions, _PureComponent);\n\n  function AdvancedOptions() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, AdvancedOptions);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(AdvancedOptions)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      isShown: false,\n      cutDepthValid: true,\n      toolDiameterValid: true,\n      stepoverPercentageValid: true,\n      toleranceValid: true,\n      jogHeightValid: true,\n      jogRateValid: true,\n      feedRateValid: true,\n      tabThicknessValid: true,\n      insideCuttingOptions: [{\n        label: 'true',\n        value: true\n      }, {\n        label: 'false',\n        value: false\n      }],\n      tabOptions: [{\n        label: 'true',\n        value: true\n      }, {\n        label: 'false',\n        value: false\n      }],\n      dogboneOptions: [{\n        label: 'true',\n        value: true\n      }, {\n        label: 'false',\n        value: false\n      }],\n      insideCuttingTemp: _this.props.params.insideCutting,\n      tabsTemp: _this.props.params.tabs,\n      dogboneTemp: _this.props.params.dogbone\n    };\n    return _this;\n  }\n\n  _createClass(AdvancedOptions, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      // console.log(this.props.params);\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40\n        },\n        __self: this\n      }, React.createElement(Dialog, {\n        isShown: this.state.isShown,\n        title: this.props.default ? \"Advanced Default Settings\" : \"Specific Toolpath Settings\",\n        onCloseComplete: function onCloseComplete() {\n          _this2.setState({\n            isShown: false,\n            dogboneTemp: _this2.props.params.dogbone,\n            tabsTemp: _this2.props.params.tabs,\n            insideCuttingTemp: _this2.props.params.insideCutting\n          });\n        },\n        onConfirm: function onConfirm() {\n          var valid = _this2.state.cutDepthValid && _this2.state.toolDiameterValid && _this2.state.stepoverPercentageValid && _this2.state.toleranceValid && _this2.state.jogHeightValid && _this2.state.jogRateValid && _this2.state.feedRateValid;\n\n          if (valid) {\n            var cutDepth = Number(document.getElementsByName(\"cutDepth\")[0].value);\n            var toolDiameter = Number(document.getElementsByName(\"toolDiameter\")[0].value);\n            var stepoverPercentage = Number(document.getElementsByName(\"stepoverPercentage\")[0].value); //must be between 1 and 100%\n\n            var tolerance = Number(document.getElementsByName(\"tolerance\")[0].value);\n            var jogHeight = Number(document.getElementsByName(\"jogHeight\")[0].value);\n            var jogRate = Number(document.getElementsByName(\"jogRate\")[0].value);\n            var feedRate = Number(document.getElementsByName(\"feedRate\")[0].value);\n            var tabThickness = Number(document.getElementsByName(\"tabThickness\")[0].value);\n            var dogbone = _this2.state.dogboneTemp;\n            var tabs = _this2.state.tabsTemp;\n            var insideCutting = _this2.state.insideCuttingTemp; //derived parameters\n\n            var passDepth = cutDepth / 2;\n            var toolRadius = toolDiameter / 2;\n            var compensatedRadius = toolRadius + tolerance;\n            var tempFloor = Math.ceil(cutDepth / passDepth); //should this be ceiling or floor, I think ceil\n\n            var actualPassDepth = cutDepth / tempFloor;\n            var depthOfPasses = utils.makeSeries(actualPassDepth, actualPassDepth, tempFloor).map(function (n) {\n              return -n;\n            }); //settings will be compiled to a single object here\n\n            var parameters = utils.deepcopy(_this2.props.params);\n            parameters[\"dogbone\"] = dogbone;\n            parameters[\"tabs\"] = tabs;\n            parameters[\"insideCutting\"] = insideCutting;\n\n            if (!isNaN(tolerance)) {\n              parameters[\"tolerance\"] = tolerance;\n            }\n\n            if (!isNaN(tabThickness)) {\n              parameters[\"tabThickness\"] = tabThickness;\n            }\n\n            if (!isNaN(toolDiameter)) {\n              parameters[\"toolDiameter\"] = toolDiameter;\n              parameters[\"compensatedRadius\"] = compensatedRadius;\n            }\n\n            if (!isNaN(cutDepth)) {\n              parameters[\"cutDepth\"] = cutDepth;\n              parameters[\"depthOfPasses\"] = depthOfPasses;\n            }\n\n            if (!isNaN(feedRate)) {\n              parameters[\"feedRate\"] = feedRate;\n            }\n\n            if (!isNaN(jogHeight)) {\n              parameters[\"jogHeight\"] = jogHeight;\n            }\n\n            if (!isNaN(jogRate)) {\n              parameters[\"jogRate\"] = jogRate;\n            }\n\n            parameters[\"insideCutting\"] = insideCutting;\n\n            if (!isNaN(stepoverPercentage)) {\n              stepoverPercentage = stepoverPercentage / 100;\n              parameters[\"stepoverPercentage\"] = stepoverPercentage;\n            }\n\n            console.log(\"parameters\", parameters);\n\n            _this2.setState({\n              isShown: false\n            }); //update app state here\n            // if this.props.default === true then update defaultParameters state, if false then update parameters of toolpath id\n\n\n            if (_this2.props.default) {\n              store.update({\n                defaultParameters: parameters\n              });\n            } else {\n              console.log(_this2.props.params.toolpaths[_this2.props.index]);\n            }\n          }\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41\n        },\n        __self: this\n      }, React.createElement(TextInputField, {\n        onChange: function onChange(e) {\n          var valid = utils.isNum(e.target.value);\n\n          _this2.setState({\n            cutDepthValid: valid\n          });\n        },\n        isInvalid: !this.state.cutDepthValid,\n        name: \"cutDepth\",\n        description: this.state.cutDepthValid ? \"\" : \"please enter a valid number\",\n        label: \"Depth of Cut\",\n        placeholder: String(this.props.params.cutDepth),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      }), React.createElement(TextInputField, {\n        onChange: function onChange(e) {\n          var valid = utils.isNum(e.target.value);\n\n          _this2.setState({\n            toolDiameterValid: valid\n          });\n        },\n        isInvalid: !this.state.toolDiameterValid,\n        name: \"toolDiameter\",\n        description: this.state.toolDiameterValid ? \"\" : \"please enter a valid number\",\n        label: \"Tool Diameter\",\n        placeholder: String(this.props.params.toolDiameter),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135\n        },\n        __self: this\n      }), React.createElement(TextInputField, {\n        onChange: function onChange(e) {\n          var valid = utils.isNum(e.target.value);\n          valid = 0 < Number(e.target.value) && Number(e.target.value) <= 100; //process value here\n\n          _this2.setState({\n            stepoverPercentageValid: valid\n          });\n        },\n        isInvalid: !this.state.stepoverPercentageValid,\n        name: \"stepoverPercentage\",\n        description: this.state.stepoverPercentageValid ? \"\" : \"please enter a valid number\",\n        label: \"Stepover Percentage (this is only relevant for pocket cuts)\",\n        placeholder: String(this.props.params.stepoverPercentage * 100),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146\n        },\n        __self: this\n      }), React.createElement(TextInputField, {\n        onChange: function onChange(e) {\n          var valid = utils.isNum(e.target.value);\n\n          _this2.setState({\n            feedRateValid: valid\n          });\n        },\n        isInvalid: !this.state.feedRateValid,\n        name: \"feedRate\",\n        description: this.state.feedRateValid ? \"\" : \"please enter a valid number\",\n        label: \"Feed Rate\",\n        placeholder: String(this.props.params.feedRate),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 159\n        },\n        __self: this\n      }), React.createElement(TextInputField, {\n        onChange: function onChange(e) {\n          var valid = utils.isNum(e.target.value);\n\n          _this2.setState({\n            toleranceValid: valid\n          });\n        },\n        isInvalid: !this.state.toleranceValid,\n        name: \"tolerance\",\n        description: this.state.toleranceValid ? \"\" : \"please enter a valid number\",\n        label: \"Tolerance\",\n        placeholder: String(this.props.params.tolerance),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 170\n        },\n        __self: this\n      }), React.createElement(TextInputField, {\n        onChange: function onChange(e) {\n          var valid = utils.isNum(e.target.value);\n\n          _this2.setState({\n            jogRateValid: valid\n          });\n        },\n        isInvalid: !this.state.jogRateValid,\n        name: \"jogRate\",\n        description: this.state.jogRateValid ? \"\" : \"please enter a valid number\",\n        label: \"Jog Rate\",\n        placeholder: String(this.props.params.jogRate),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 181\n        },\n        __self: this\n      }), React.createElement(TextInputField, {\n        onChange: function onChange(e) {\n          var valid = utils.isNum(e.target.value);\n\n          _this2.setState({\n            jogHeightValid: valid\n          });\n        },\n        isInvalid: !this.state.jogHeightValid,\n        name: \"jogHeight\",\n        description: this.state.jogHeightValid ? \"\" : \"please enter a valid number\",\n        label: \"Jog Height\",\n        placeholder: String(this.props.params.jogHeight),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 192\n        },\n        __self: this\n      }), React.createElement(Heading, {\n        marginTop: 8,\n        size: 400,\n        color: \"rgba(67, 90, 111, .91)\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 203\n        },\n        __self: this\n      }, \"Inside Cutting (this is only relevant for profile cuts)\"), React.createElement(SegmentedControl, {\n        marginTop: 4,\n        options: this.state.insideCuttingOptions,\n        value: this.state.insideCuttingTemp,\n        onChange: function onChange(value) {\n          var insideCuttingTemp = value;\n\n          _this2.setState({\n            insideCuttingTemp: insideCuttingTemp\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 204\n        },\n        __self: this\n      }), React.createElement(Heading, {\n        marginTop: 20,\n        size: 400,\n        color: \"rgba(67, 90, 111, .91)\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 214\n        },\n        __self: this\n      }, \"Auto Tabs (this is only relevant for profile cuts)\"), React.createElement(SegmentedControl, {\n        marginTop: 4,\n        options: this.state.tabOptions,\n        value: this.state.tabsTemp,\n        onChange: function onChange(value) {\n          var tabsTemp = value;\n\n          _this2.setState({\n            tabsTemp: tabsTemp\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 215\n        },\n        __self: this\n      }), React.createElement(TextInputField, {\n        marginTop: 20,\n        onChange: function onChange(e) {\n          var valid = utils.isNum(e.target.value);\n\n          _this2.setState({\n            tabThicknessValid: valid\n          });\n        },\n        isInvalid: !this.state.tabThicknessValid,\n        name: \"tabThickness\",\n        description: this.state.tabThicknessValid ? \"\" : \"please enter a valid number\",\n        label: \"Tab Thickness\",\n        placeholder: String(this.props.params.tabThickness),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 225\n        },\n        __self: this\n      }), React.createElement(Heading, {\n        marginTop: 20,\n        size: 400,\n        color: \"rgba(67, 90, 111, .91)\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 237\n        },\n        __self: this\n      }, \"Auto Dogbone\"), React.createElement(SegmentedControl, {\n        marginTop: 4,\n        options: this.state.dogboneOptions,\n        value: this.state.dogboneTemp,\n        onChange: function onChange(value) {\n          var dogboneTemp = value;\n\n          _this2.setState({\n            dogboneTemp: dogboneTemp\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 238\n        },\n        __self: this\n      })), React.createElement(Link, {\n        onClick: function onClick() {\n          return _this2.setState({\n            isShown: true\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 249\n        },\n        __self: this\n      }, this.props.default ? \"Advanced Options\" : \"edit\"));\n    }\n  }]);\n\n  return AdvancedOptions;\n}(PureComponent);\n\nexport { AdvancedOptions };","map":{"version":3,"sources":["/Users/leomcelroy/Desktop/barkBeetleEverything/barkbeetle_js_real/src/components/AdvancedOptions.js"],"names":["React","Component","PureComponent","Button","Dialog","TextInputField","SegmentedControl","Heading","Link","Strong","Text","utils","store","AdvancedOptions","state","isShown","cutDepthValid","toolDiameterValid","stepoverPercentageValid","toleranceValid","jogHeightValid","jogRateValid","feedRateValid","tabThicknessValid","insideCuttingOptions","label","value","tabOptions","dogboneOptions","insideCuttingTemp","props","params","insideCutting","tabsTemp","tabs","dogboneTemp","dogbone","default","setState","valid","cutDepth","Number","document","getElementsByName","toolDiameter","stepoverPercentage","tolerance","jogHeight","jogRate","feedRate","tabThickness","passDepth","toolRadius","compensatedRadius","tempFloor","Math","ceil","actualPassDepth","depthOfPasses","makeSeries","map","n","parameters","deepcopy","isNaN","console","log","update","defaultParameters","toolpaths","index","e","isNum","target","String"],"mappings":"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","sourcesContent":["import React, { Component, PureComponent } from 'react';\nimport {Button, Dialog, TextInputField, SegmentedControl, Heading, Link, Strong, Text} from 'evergreen-ui';\nimport * as utils from '../utils.js';\nimport store from '../store.js';\n\nclass AdvancedOptions extends PureComponent {\n\n  state = {\n    isShown: false,\n    cutDepthValid: true,\n    toolDiameterValid: true,\n    stepoverPercentageValid: true,\n    toleranceValid: true,\n    jogHeightValid: true,\n    jogRateValid: true,\n    feedRateValid: true,\n    tabThicknessValid: true,\n    insideCuttingOptions: [\n      { label: 'true', value: true },\n      { label: 'false', value: false },\n    ],\n    tabOptions: [\n      { label: 'true', value: true },\n      { label: 'false', value: false },\n    ],\n    dogboneOptions: [\n      { label: 'true', value: true },\n      { label: 'false', value: false },\n    ],\n    insideCuttingTemp: this.props.params.insideCutting,\n    tabsTemp: this.props.params.tabs,\n    dogboneTemp: this.props.params.dogbone,\n  }\n\n  render() {\n\n    // console.log(this.props.params);\n\n    return (\n      <div>\n        <Dialog\n          isShown={this.state.isShown}\n          title={this.props.default ? \"Advanced Default Settings\" : \"Specific Toolpath Settings\"}\n          onCloseComplete={() => {\n            this.setState({\n              isShown:false,\n              dogboneTemp: this.props.params.dogbone,\n              tabsTemp: this.props.params.tabs,\n              insideCuttingTemp: this.props.params.insideCutting,\n            })\n          }}\n          onConfirm={() => {\n            let valid = this.state.cutDepthValid && this.state.toolDiameterValid &&\n                        this.state.stepoverPercentageValid && this.state.toleranceValid &&\n                        this.state.jogHeightValid && this.state.jogRateValid && this.state.feedRateValid;\n            if (valid) {\n              let cutDepth = Number(document.getElementsByName(\"cutDepth\")[0].value);\n              let toolDiameter = Number(document.getElementsByName(\"toolDiameter\")[0].value);\n              let stepoverPercentage = Number(document.getElementsByName(\"stepoverPercentage\")[0].value); //must be between 1 and 100%\n              let tolerance = Number(document.getElementsByName(\"tolerance\")[0].value);\n              let jogHeight = Number(document.getElementsByName(\"jogHeight\")[0].value);\n              let jogRate = Number(document.getElementsByName(\"jogRate\")[0].value);\n              let feedRate = Number(document.getElementsByName(\"feedRate\")[0].value);\n              let tabThickness = Number(document.getElementsByName(\"tabThickness\")[0].value);\n\n              let dogbone = this.state.dogboneTemp;\n              let tabs = this.state.tabsTemp;\n              let insideCutting = this.state.insideCuttingTemp;\n\n              //derived parameters\n              let passDepth = cutDepth/2;\n              let toolRadius = toolDiameter/2;\n              let compensatedRadius = toolRadius + tolerance;\n              let tempFloor = Math.ceil(cutDepth/passDepth); //should this be ceiling or floor, I think ceil\n              let actualPassDepth = cutDepth/tempFloor;\n              let depthOfPasses = utils.makeSeries(actualPassDepth, actualPassDepth, tempFloor).map(n => -n);\n\n              //settings will be compiled to a single object here\n              let parameters = utils.deepcopy(this.props.params);\n\n              parameters[\"dogbone\"] = dogbone;\n              parameters[\"tabs\"] = tabs;\n              parameters[\"insideCutting\"] = insideCutting;\n\n              if (!isNaN(tolerance)) { parameters[\"tolerance\"] = tolerance; }\n              if (!isNaN(tabThickness)) { parameters[\"tabThickness\"] = tabThickness; }\n\n              if (!isNaN(toolDiameter)) {\n                parameters[\"toolDiameter\"] = toolDiameter;\n                parameters[\"compensatedRadius\"] = compensatedRadius;\n\n              }\n              if (!isNaN(cutDepth)) {\n                parameters[\"cutDepth\"] = cutDepth;\n                parameters[\"depthOfPasses\"] = depthOfPasses;\n              }\n              if (!isNaN(feedRate)) { parameters[\"feedRate\"] = feedRate; }\n              if (!isNaN(jogHeight)) { parameters[\"jogHeight\"] = jogHeight; }\n              if (!isNaN(jogRate)) { parameters[\"jogRate\"] = jogRate; }\n\n              parameters[\"insideCutting\"] = insideCutting;\n\n              if (!isNaN(stepoverPercentage)) {\n                stepoverPercentage = stepoverPercentage/100;\n                parameters[\"stepoverPercentage\"] = stepoverPercentage;\n              }\n\n              console.log(\"parameters\", parameters);\n\n              this.setState({\n                isShown:false,\n              });\n\n              //update app state here\n              // if this.props.default === true then update defaultParameters state, if false then update parameters of toolpath id\n              if (this.props.default) {\n                store.update({defaultParameters:parameters});\n              } else {\n                console.log(this.props.params.toolpaths[this.props.index])\n              }\n            }\n          }}>\n\n          <TextInputField\n            onChange={e => {\n              let valid = utils.isNum(e.target.value);\n              this.setState({cutDepthValid:valid})\n            }}\n            isInvalid={!this.state.cutDepthValid}\n            name=\"cutDepth\"\n            description={(this.state.cutDepthValid) ? \"\" : \"please enter a valid number\"}\n            label=\"Depth of Cut\"\n            placeholder={String(this.props.params.cutDepth)}/>\n\n          <TextInputField\n            onChange={e => {\n              let valid = utils.isNum(e.target.value);\n              this.setState({toolDiameterValid:valid})\n            }}\n            isInvalid={!this.state.toolDiameterValid}\n            name=\"toolDiameter\"\n            description={(this.state.toolDiameterValid) ? \"\" : \"please enter a valid number\"}\n            label=\"Tool Diameter\"\n            placeholder={String(this.props.params.toolDiameter)}/>\n\n          <TextInputField\n            onChange={e => {\n              let valid = utils.isNum(e.target.value);\n              valid = 0 < Number(e.target.value) && Number(e.target.value) <= 100;\n              //process value here\n              this.setState({stepoverPercentageValid:valid})\n            }}\n            isInvalid={!this.state.stepoverPercentageValid}\n            name=\"stepoverPercentage\"\n            description={(this.state.stepoverPercentageValid) ? \"\" : \"please enter a valid number\"}\n            label=\"Stepover Percentage (this is only relevant for pocket cuts)\"\n            placeholder={String(this.props.params.stepoverPercentage * 100)}/>\n\n            <TextInputField\n              onChange={e => {\n                let valid = utils.isNum(e.target.value);\n                this.setState({feedRateValid:valid})\n              }}\n              isInvalid={!this.state.feedRateValid}\n              name=\"feedRate\"\n              description={(this.state.feedRateValid) ? \"\" : \"please enter a valid number\"}\n              label=\"Feed Rate\"\n              placeholder={String(this.props.params.feedRate)}/>\n\n              <TextInputField\n                onChange={e => {\n                  let valid = utils.isNum(e.target.value);\n                  this.setState({toleranceValid:valid})\n                }}\n                isInvalid={!this.state.toleranceValid}\n                name=\"tolerance\"\n                description={(this.state.toleranceValid) ? \"\" : \"please enter a valid number\"}\n                label=\"Tolerance\"\n                placeholder={String(this.props.params.tolerance)}/>\n\n            <TextInputField\n              onChange={e => {\n                let valid = utils.isNum(e.target.value);\n                this.setState({jogRateValid:valid})\n              }}\n              isInvalid={!this.state.jogRateValid}\n              name=\"jogRate\"\n              description={(this.state.jogRateValid) ? \"\" : \"please enter a valid number\"}\n              label=\"Jog Rate\"\n              placeholder={String(this.props.params.jogRate)}/>\n\n              <TextInputField\n                onChange={e => {\n                  let valid = utils.isNum(e.target.value);\n                  this.setState({jogHeightValid:valid})\n                }}\n                isInvalid={!this.state.jogHeightValid}\n                name=\"jogHeight\"\n                description={(this.state.jogHeightValid) ? \"\" : \"please enter a valid number\"}\n                label=\"Jog Height\"\n                placeholder={String(this.props.params.jogHeight)}/>\n\n              <Heading marginTop={8} size={400} color={\"rgba(67, 90, 111, .91)\"}>Inside Cutting (this is only relevant for profile cuts)</Heading>\n              <SegmentedControl\n                marginTop={4}\n                options={this.state.insideCuttingOptions}\n                value={this.state.insideCuttingTemp}\n                onChange={value => {\n                  let insideCuttingTemp = value;\n                  this.setState({ insideCuttingTemp });\n                }}\n              />\n\n              <Heading marginTop={20} size={400} color={\"rgba(67, 90, 111, .91)\"}>Auto Tabs (this is only relevant for profile cuts)</Heading>\n              <SegmentedControl\n                marginTop={4}\n                options={this.state.tabOptions}\n                value={this.state.tabsTemp}\n                onChange={value => {\n                  let tabsTemp = value;\n                  this.setState({ tabsTemp });\n                }}\n              />\n\n              <TextInputField\n                marginTop={20}\n                onChange={e => {\n                  let valid = utils.isNum(e.target.value);\n                  this.setState({tabThicknessValid:valid})\n                }}\n                isInvalid={!this.state.tabThicknessValid}\n                name=\"tabThickness\"\n                description={(this.state.tabThicknessValid) ? \"\" : \"please enter a valid number\"}\n                label=\"Tab Thickness\"\n                placeholder={String(this.props.params.tabThickness)}/>\n\n              <Heading marginTop={20} size={400} color={\"rgba(67, 90, 111, .91)\"}>Auto Dogbone</Heading>\n              <SegmentedControl\n                marginTop={4}\n                options={this.state.dogboneOptions}\n                value={this.state.dogboneTemp}\n                onChange={value => {\n                  let dogboneTemp = value;\n                  this.setState({ dogboneTemp });\n                }}\n              />\n\n        </Dialog>\n        <Link onClick={() => this.setState({isShown:true})}>{this.props.default ? \"Advanced Options\" : \"edit\"}</Link>\n      </div>\n    );\n  }\n}\n\nexport {AdvancedOptions};\n"]},"metadata":{},"sourceType":"module"}