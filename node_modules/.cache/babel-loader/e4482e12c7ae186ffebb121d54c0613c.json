{"ast":null,"code":"var normalise = require(\"./normalise-svg.js\");\n\nvar M = {\n  x: false,\n  y: false\n};\n\nfunction makeBezier(Bezier, term, values) {\n  if (term === 'Z') return;\n\n  if (term === 'M') {\n    M = {\n      x: values[0],\n      y: values[1]\n    };\n    return;\n  } // ES7: new Bezier(M.x, M.y, ...values)\n\n\n  var cvalues = [false, M.x, M.y].concat(values);\n  var PreboundConstructor = Bezier.bind.apply(Bezier, cvalues);\n  var curve = new PreboundConstructor();\n  var last = values.slice(-2);\n  M = {\n    x: last[0],\n    y: last[1]\n  };\n  return curve;\n}\n\nfunction convertPath(Bezier, d) {\n  var terms = normalise(d).split(\" \"),\n      term,\n      matcher = new RegExp(\"[MLCQZ]\", \"\"),\n      segment,\n      values,\n      segments = [],\n      ARGS = {\n    \"C\": 6,\n    \"Q\": 4,\n    \"L\": 2,\n    \"M\": 2\n  };\n\n  while (terms.length) {\n    term = terms.splice(0, 1)[0];\n\n    if (matcher.test(term)) {\n      values = terms.splice(0, ARGS[term]).map(parseFloat);\n      segment = makeBezier(Bezier, term, values);\n      if (segment) segments.push(segment);\n    }\n  }\n\n  return new Bezier.PolyBezier(segments);\n}\n\nmodule.exports = convertPath;","map":null,"metadata":{},"sourceType":"script"}