{"ast":null,"code":"import _classCallCheck from \"/Users/leomcelroy/Desktop/barkBeetleEverything/barkbeetle_js_real/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/leomcelroy/Desktop/barkBeetleEverything/barkbeetle_js_real/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/leomcelroy/Desktop/barkBeetleEverything/barkbeetle_js_real/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/leomcelroy/Desktop/barkBeetleEverything/barkbeetle_js_real/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/leomcelroy/Desktop/barkBeetleEverything/barkbeetle_js_real/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/leomcelroy/Desktop/barkBeetleEverything/barkbeetle_js_real/src/components/AdvancedOptions.js\";\nimport React, { Component } from 'react';\nimport { Button, Dialog, TextInputField } from 'evergreen-ui';\nimport * as utils from '../utils.js';\nimport store from '../store.js';\n\nvar AdvancedOptions =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(AdvancedOptions, _Component);\n\n  function AdvancedOptions() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, AdvancedOptions);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(AdvancedOptions)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      isShown: false,\n      cutDepthValid: true,\n      toolDiameterValid: true,\n      stepoverPercentageValid: true,\n      toleranceValid: true,\n      jogHeightValid: true,\n      jogRateValid: true,\n      feedRateValid: true\n    };\n    return _this;\n  }\n\n  _createClass(AdvancedOptions, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 22\n        },\n        __self: this\n      }, React.createElement(Dialog, {\n        isShown: this.state.isShown,\n        title: \"Advanced Default Settings\",\n        onCloseComplete: function onCloseComplete() {\n          return _this2.setState({\n            isShown: false\n          });\n        },\n        onConfirm: function onConfirm() {\n          if (_this2.state.valid) {\n            var cutDepth = document.getElementsByName(\"cutDepth\")[0].value;\n            var toolDiameter = document.getElementsByName(\"toolDiameter\")[0].value;\n            var stepoverPercentage = document.getElementsByName(\"stepoverPercentage\")[0].value; //must be between 1 and 100%\n\n            var tolerance = document.getElementsByName(\"tolerance\")[0].value;\n            var insideCutting = false;\n            var jogHeight = document.getElementsByName(\"jogHeight\")[0].value;\n            var jogRate = document.getElementsByName(\"jogRate\")[0].value;\n            var feedRate = document.getElementsByName(\"feedrate\")[0].value; //derived parameters\n\n            stepoverPercentage = stepoverPercentage / 100;\n            var passDepth = cutDepth / 2;\n            var toolRadius = toolDiameter / 2;\n            var compensatedRadius = toolRadius + tolerance;\n            var tempFloor = Math.ceil(cutDepth / passDepth); //should this be ceiling or floor, I think ceil\n\n            var actualPassDepth = cutDepth / tempFloor;\n            var depthOfPasses = utils.makeSeries(actualPassDepth, actualPassDepth, tempFloor).map(function (n) {\n              return -n;\n            }); //settings will be compiled to a single object here\n            // {\n            //   compensatedRadius,\n            //   feedRate,\n            //   depthOfPasses,\n            //   jogHeight,\n            //   insideCutting,\n            //   stepoverPercentage,\n            //   jogRate\n            // }\n\n            _this2.setState({\n              isShown: false\n            }); //update app state here\n            //this.props.updateparent()\n            //store.update({})\n\n          }\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 23\n        },\n        __self: this\n      }, React.createElement(TextInputField, {\n        onChange: function onChange(e) {\n          var valid = utils.isNum(e.target.value);\n\n          _this2.setState({\n            cutDepthValid: valid\n          });\n        },\n        isInvalid: !this.state.valid,\n        name: \"cutDepth\",\n        description: this.state.valid ? \"\" : \"please enter a valid number\",\n        label: \"Depth of Cut\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }), React.createElement(TextInputField, {\n        onChange: function onChange(e) {\n          var valid = utils.isNum(e.target.value);\n\n          _this2.setState({\n            toolDiameterValid: valid\n          });\n        },\n        isInvalid: !this.state.valid,\n        name: \"toolDiameter\",\n        description: this.state.valid ? \"\" : \"please enter a valid number\",\n        label: \"Tool Diameter\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }), React.createElement(TextInputField, {\n        onChange: function onChange(e) {\n          var valid = utils.isNum(e.target.value);\n          valid = 0 < parseFloat(e.target.value) && parseFloat(e.target.value) <= 100;\n\n          _this2.setState({\n            stepoverPercentageValid: valid\n          });\n        },\n        isInvalid: !this.state.valid,\n        name: \"stepoverPercentage\",\n        description: this.state.valid ? \"\" : \"please enter a valid number\",\n        label: \"Stepover Percentage\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }), React.createElement(TextInputField, {\n        onChange: function onChange(e) {\n          var valid = utils.isNum(e.target.value);\n\n          _this2.setState({\n            feedRateValid: valid\n          });\n        },\n        isInvalid: !this.state.valid,\n        name: \"feedrate\",\n        description: this.state.valid ? \"\" : \"please enter a valid number\",\n        label: \"Feedrate\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }), React.createElement(TextInputField, {\n        onChange: function onChange(e) {\n          var valid = utils.isNum(e.target.value);\n\n          _this2.setState({\n            toleranceValid: valid\n          });\n        },\n        isInvalid: !this.state.valid,\n        name: \"tolerance\",\n        description: this.state.valid ? \"\" : \"please enter a valid number\",\n        label: \"Tolerance\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }), React.createElement(TextInputField, {\n        onChange: function onChange(e) {\n          var valid = utils.isNum(e.target.value);\n\n          _this2.setState({\n            valid: valid\n          });\n        },\n        isInvalid: !this.state.valid,\n        name: \"jogRate\",\n        description: this.state.valid ? \"\" : \"please enter a valid number\",\n        label: \"Jog Rate\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      }), React.createElement(TextInputField, {\n        onChange: function onChange(e) {\n          var valid = utils.isNum(e.target.value);\n\n          _this2.setState({\n            valid: valid\n          });\n        },\n        isInvalid: !this.state.valid,\n        name: \"jogHeight\",\n        description: this.state.valid ? \"\" : \"please enter a valid number\",\n        label: \"Jog Height\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        },\n        __self: this\n      })), React.createElement(Button, {\n        onClick: function onClick() {\n          return _this2.setState({\n            isShown: true\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141\n        },\n        __self: this\n      }, \"Advanced Options\"));\n    }\n  }]);\n\n  return AdvancedOptions;\n}(Component);\n\nexport { AdvancedOptions };","map":{"version":3,"sources":["/Users/leomcelroy/Desktop/barkBeetleEverything/barkbeetle_js_real/src/components/AdvancedOptions.js"],"names":["React","Component","Button","Dialog","TextInputField","utils","store","AdvancedOptions","state","isShown","cutDepthValid","toolDiameterValid","stepoverPercentageValid","toleranceValid","jogHeightValid","jogRateValid","feedRateValid","setState","valid","cutDepth","document","getElementsByName","value","toolDiameter","stepoverPercentage","tolerance","insideCutting","jogHeight","jogRate","feedRate","passDepth","toolRadius","compensatedRadius","tempFloor","Math","ceil","actualPassDepth","depthOfPasses","makeSeries","map","n","e","isNum","target","parseFloat"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport {Button, Dialog, TextInputField} from 'evergreen-ui';\nimport * as utils from '../utils.js';\nimport store from '../store.js';\n\nclass AdvancedOptions extends Component {\n\n  state = {\n    isShown: false,\n    cutDepthValid: true,\n    toolDiameterValid: true,\n    stepoverPercentageValid: true,\n    toleranceValid: true,\n    jogHeightValid: true,\n    jogRateValid: true,\n    feedRateValid: true,\n  }\n\n  render() {\n\n    return (\n      <div>\n        <Dialog\n          isShown={this.state.isShown}\n          title=\"Advanced Default Settings\"\n          onCloseComplete={() => this.setState({isShown:false})}\n          onConfirm={() => {\n            if (this.state.valid) {\n              let cutDepth = document.getElementsByName(\"cutDepth\")[0].value;\n              let toolDiameter = document.getElementsByName(\"toolDiameter\")[0].value;\n              let stepoverPercentage = document.getElementsByName(\"stepoverPercentage\")[0].value; //must be between 1 and 100%\n              let tolerance = document.getElementsByName(\"tolerance\")[0].value;\n              let insideCutting = false;\n              let jogHeight = document.getElementsByName(\"jogHeight\")[0].value;\n              let jogRate = document.getElementsByName(\"jogRate\")[0].value;\n              let feedRate = document.getElementsByName(\"feedrate\")[0].value;\n\n              //derived parameters\n              stepoverPercentage = stepoverPercentage/100;\n              let passDepth = cutDepth/2;\n              let toolRadius = toolDiameter/2;\n              let compensatedRadius = toolRadius + tolerance;\n              let tempFloor = Math.ceil(cutDepth/passDepth); //should this be ceiling or floor, I think ceil\n              let actualPassDepth = cutDepth/tempFloor;\n              let depthOfPasses = utils.makeSeries(actualPassDepth, actualPassDepth, tempFloor).map(n => -n);\n\n              //settings will be compiled to a single object here\n              // {\n              //   compensatedRadius,\n              //   feedRate,\n              //   depthOfPasses,\n              //   jogHeight,\n              //   insideCutting,\n              //   stepoverPercentage,\n              //   jogRate\n              // }\n\n              this.setState({\n                isShown:false,\n              });\n\n              //update app state here\n              //this.props.updateparent()\n              //store.update({})\n            }\n          }}>\n\n          <TextInputField\n            onChange={e => {\n              let valid = utils.isNum(e.target.value);\n              this.setState({cutDepthValid:valid})\n            }}\n            isInvalid={!this.state.valid}\n            name=\"cutDepth\"\n            description={(this.state.valid) ? \"\" : \"please enter a valid number\"}\n            label=\"Depth of Cut\"\n          />\n\n          <TextInputField\n            onChange={e => {\n              let valid = utils.isNum(e.target.value);\n              this.setState({toolDiameterValid:valid})\n            }}\n            isInvalid={!this.state.valid}\n            name=\"toolDiameter\"\n            description={(this.state.valid) ? \"\" : \"please enter a valid number\"}\n            label=\"Tool Diameter\"/>\n\n          <TextInputField\n            onChange={e => {\n              let valid = utils.isNum(e.target.value);\n              valid = 0 < parseFloat(e.target.value) && parseFloat(e.target.value) <= 100;\n              this.setState({stepoverPercentageValid:valid})\n            }}\n            isInvalid={!this.state.valid}\n            name=\"stepoverPercentage\"\n            description={(this.state.valid) ? \"\" : \"please enter a valid number\"}\n            label=\"Stepover Percentage\"/>\n\n            <TextInputField\n              onChange={e => {\n                let valid = utils.isNum(e.target.value);\n                this.setState({feedRateValid:valid})\n              }}\n              isInvalid={!this.state.valid}\n              name=\"feedrate\"\n              description={(this.state.valid) ? \"\" : \"please enter a valid number\"}\n              label=\"Feedrate\"/>\n\n              <TextInputField\n                onChange={e => {\n                  let valid = utils.isNum(e.target.value);\n                  this.setState({toleranceValid:valid})\n                }}\n                isInvalid={!this.state.valid}\n                name=\"tolerance\"\n                description={(this.state.valid) ? \"\" : \"please enter a valid number\"}\n                label=\"Tolerance\"/>\n\n            <TextInputField\n              onChange={e => {\n                let valid = utils.isNum(e.target.value);\n                this.setState({valid:valid})\n              }}\n              isInvalid={!this.state.valid}\n              name=\"jogRate\"\n              description={(this.state.valid) ? \"\" : \"please enter a valid number\"}\n              label=\"Jog Rate\"/>\n\n              <TextInputField\n                onChange={e => {\n                  let valid = utils.isNum(e.target.value);\n                  this.setState({valid:valid})\n                }}\n                isInvalid={!this.state.valid}\n                name=\"jogHeight\"\n                description={(this.state.valid) ? \"\" : \"please enter a valid number\"}\n                label=\"Jog Height\"/>\n\n        </Dialog>\n        <Button onClick={() => this.setState({isShown:true})}>Advanced Options</Button>\n      </div>\n    );\n  }\n}\n\nexport {AdvancedOptions};\n"]},"metadata":{},"sourceType":"module"}