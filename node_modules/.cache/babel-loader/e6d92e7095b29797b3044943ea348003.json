{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n/* eslint react/no-array-index-key: 0, eqeqeq: 0, no-eq-null: 0 */\n\nimport React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport Box from 'ui-box';\nimport { IconNames, IconSvgPaths16, IconSvgPaths20 } from '@blueprintjs/icons';\nimport { withTheme } from '../../theme';\nexport { IconNames };\n/**\n * This implementation is a remix of the Icon component in Blueprintjs:\n * https://github.com/palantir/blueprint/blob/813e93f2/packages/core/src/components/icon/icon.tsx#L15\n * Refer to the LICENSE for BlueprintJS here: https://github.com/palantir/blueprint/blob/develop/LICENSE\n */\n\nvar Icon =\n/*#__PURE__*/\nfunction (_PureComponent) {\n  _inherits(Icon, _PureComponent);\n\n  function Icon() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Icon);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Icon)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"renderSvgPaths\", function (pathsSize, iconName) {\n      var svgPathsRecord = pathsSize === Icon.SIZE_STANDARD ? IconSvgPaths16 : IconSvgPaths20;\n      var pathStrings = svgPathsRecord[iconName];\n\n      if (pathStrings == null) {\n        return null;\n      }\n\n      return pathStrings.map(function (d, i) {\n        return React.createElement(\"path\", {\n          key: i,\n          d: d,\n          fillRule: \"evenodd\"\n        });\n      });\n    });\n\n    return _this;\n  }\n\n  _createClass(Icon, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          theme = _this$props.theme,\n          color = _this$props.color,\n          icon = _this$props.icon,\n          size = _this$props.size,\n          _this$props$title = _this$props.title,\n          title = _this$props$title === void 0 ? icon : _this$props$title,\n          svgProps = _objectWithoutProperties(_this$props, [\"theme\", \"color\", \"icon\", \"size\", \"title\"]);\n\n      var _this$props$style = this.props.style,\n          style = _this$props$style === void 0 ? {} : _this$props$style;\n\n      if (icon == null) {\n        return null;\n      }\n\n      if (typeof icon !== 'string') {\n        return icon;\n      } // Choose which pixel grid is most appropriate for given icon size\n\n\n      var pixelGridSize = size >= Icon.SIZE_LARGE ? Icon.SIZE_LARGE : Icon.SIZE_STANDARD;\n      var paths = this.renderSvgPaths(pixelGridSize, icon);\n\n      if (paths == null) {\n        return null;\n      }\n\n      var viewBox = \"0 0 \".concat(pixelGridSize, \" \").concat(pixelGridSize);\n\n      if (color != null) {\n        style = _objectSpread({}, style, {\n          fill: theme.getIconColor(color)\n        });\n      }\n\n      return React.createElement(Box, _extends({\n        is: \"svg\"\n      }, svgProps, {\n        style: style,\n        \"data-icon\": icon,\n        width: size,\n        height: size,\n        viewBox: viewBox\n      }), title ? React.createElement(\"title\", null, title) : null, paths);\n    }\n  }]);\n\n  return Icon;\n}(PureComponent);\n\nIcon.displayName = \"Icon\";\n\n_defineProperty(Icon, \"SIZE_STANDARD\", 16);\n\n_defineProperty(Icon, \"SIZE_LARGE\", 20);\n\n_defineProperty(Icon, \"propTypes\", {\n  /**\n   * Color of icon. Equivalent to setting CSS `fill` property.\n   */\n  color: PropTypes.string,\n\n  /**\n   * Name of a Blueprint UI icon, or an icon element, to render.\n   * This prop is required because it determines the content of the component, but it can\n   * be explicitly set to falsy values to render nothing.\n   *\n   * - If `null` or `undefined` or `false`, this component will render nothing.\n   * - If given an `IconName` (a string literal union of all icon names),\n   *   that icon will be rendered as an `<svg>` with `<path>` tags.\n   * - If given a `JSX.Element`, that element will be rendered and _all other props on this component are ignored._\n   *   This type is supported to simplify usage of this component in other Blueprint components.\n   *   As a consumer, you should never use `<Icon icon={<element />}` directly; simply render `<element />` instead.\n   */\n  icon: PropTypes.string.isRequired,\n\n  /**\n   * Size of the icon, in pixels.\n   * Blueprint contains 16px and 20px SVG icon images,\n   * and chooses the appropriate resolution based on this prop.\n   */\n  size: PropTypes.number.isRequired,\n\n  /**\n   * Description string.\n   * Browsers usually render this as a tooltip on hover, whereas screen\n   * readers will use it for aural feedback.\n   * By default, this is set to the icon's name for accessibility.\n   */\n  title: PropTypes.string,\n\n  /**\n   * CSS style properties.\n   */\n  style: PropTypes.object,\n\n  /**\n   * Theme provided by ThemeProvider.\n   */\n  theme: PropTypes.object.isRequired\n});\n\n_defineProperty(Icon, \"defaultProps\", {\n  size: 16,\n  color: 'currentColor'\n});\n\nexport default withTheme(Icon);","map":null,"metadata":{},"sourceType":"module"}