{"ast":null,"code":"import _classCallCheck from \"/Users/leomcelroy/Desktop/barkBeetleEverything/barkbeetle_js_real/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/leomcelroy/Desktop/barkBeetleEverything/barkbeetle_js_real/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/leomcelroy/Desktop/barkBeetleEverything/barkbeetle_js_real/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/leomcelroy/Desktop/barkBeetleEverything/barkbeetle_js_real/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/leomcelroy/Desktop/barkBeetleEverything/barkbeetle_js_real/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/leomcelroy/Desktop/barkBeetleEverything/barkbeetle_js_real/src/App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport * as utils from './utils.js';\nimport * as mjs from 'makerjs';\nimport { Workplane } from './Workplane.js';\nimport Button from '@material-ui/core/Button';\nimport { kk } from './joints/koshikake.js';\nimport { profile } from './toolpaths/profile.js';\nimport { pocket } from './toolpaths/pocket.js';\nimport * as params from './parameters.js'; // utils.download(filename, text);\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this));\n    _this.state = {\n      shapes: {},\n      toolpaths: [],\n      selected: [],\n      material: \"wood\",\n      thickness: 34,\n      units: \"mm\",\n      zero: \"bottomleft\"\n    };\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      //should I put everying in a list or all to one model, there seem to be some issues with origins if I mjs.exporter.toSVG() seperately\n      var test = kk; //test = mjs.model.originate(test);\n\n      var testProfile = test.models.profile;\n      var testPocket = test.models.pocket;\n      var profileCut = profile(testProfile, params);\n      var pocketCut = pocket(testPocket, params); // let drawings = [test, profile(test)];\n      // drawings = drawings.map(d => mjs.exporter.toSVG(d));\n      //testing if internal outlines will make acceptable pocket paths, appears so\n      //let p2 = pocket(testPocket, params).drawing;\n\n      var t1 = new mjs.models.Oval(20, 20);\n      var t2 = mjs.model.move(new mjs.models.Oval(20, 20), [15, 0]);\n      var test0 = mjs.model.combineUnion(t1, t2);\n      var test1 = mjs.model.outline(test0, 5, 1, true); // console.log(test0)\n      // test0 = mjs.model.move(test0, [50, 0]);\n\n      var model = {\n        models: {\n          shapes: {\n            models: {\n              profileSource: testProfile,\n              profileCut: profileCut.drawing\n            }\n          },\n          cuts: {\n            pocketSource: testPocket,\n            pocketCut: pocketCut.drawing //pocketCut2: pocket(p2, params).drawing,\n            // test0,\n            // test1,\n\n          }\n        } //model.cuts.layer = \"red\";\n        // model = mjs.model.originate(model);\n        // model = mjs.model.zero(model);\n\n      };\n      model['paths'] = {\n        origin: new mjs.paths.Circle(params.compensatedRadius)\n      };\n      var modelToView = mjs.model.scale(utils.deepcopy(model), 10); //TODO: make drawing easier to see, but this ruins toolpaths\n\n      var viewModel = mjs.exporter.toSVG(modelToView, {\n        useSvgPathOnly: false,\n        strokeWidth: \".5mm\" // layerOptions:{\n        //   models: {\n        //     stroke: \"red\"\n        //   }\n        // },\n\n      }); //viewModel = viewModel.concat(Object.values(modelToView.models).map(m => mjs.exporter.toSVG(m)));\n\n      viewModel = [viewModel];\n      return React.createElement(\"div\", {\n        onMouseDown: function onMouseDown(e) {\n          return console.log(\"div target\", e.target.getAttribute(\"data-route\"));\n        },\n        style: {\n          margin: 0,\n          height: \"100%\",\n          overflow: \"hidden\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }, React.createElement(Workplane, {\n        groups: viewModel,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        id: \"myInput\",\n        type: \"file\",\n        ref: function ref(_ref) {\n          return _this2.upload = _ref;\n        },\n        style: {\n          display: 'none'\n        },\n        onChange: function onChange(e) {\n          return _this2.uploadSVG(e);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      }), React.createElement(Button, {\n        variant: \"contained\",\n        color: \"primary\",\n        onClick: function onClick(e) {\n          return _this2.upload.click();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115\n        },\n        __self: this\n      }, \"Upload SVG\"), \"\\xA0\", React.createElement(Button, {\n        variant: \"contained\",\n        color: \"primary\",\n        onClick: function onClick() {\n          utils.download(profileCut.filename, profileCut.gcode);\n          utils.download(pocketCut.filename, pocketCut.gcode);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      }, \"download gcode\")));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/leomcelroy/Desktop/barkBeetleEverything/barkbeetle_js_real/src/App.js"],"names":["React","Component","utils","mjs","Workplane","Button","kk","profile","pocket","params","App","state","shapes","toolpaths","selected","material","thickness","units","zero","test","testProfile","models","testPocket","profileCut","pocketCut","t1","Oval","t2","model","move","test0","combineUnion","test1","outline","profileSource","drawing","cuts","pocketSource","origin","paths","Circle","compensatedRadius","modelToView","scale","deepcopy","viewModel","exporter","toSVG","useSvgPathOnly","strokeWidth","e","console","log","target","getAttribute","margin","height","overflow","ref","upload","display","uploadSVG","click","download","filename","gcode"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nimport * as utils from './utils.js';\n\nimport * as mjs from 'makerjs';\n\nimport {Workplane} from './Workplane.js'\n\nimport Button from '@material-ui/core/Button';\n\nimport {kk} from './joints/koshikake.js';\nimport {profile} from './toolpaths/profile.js';\nimport {pocket} from './toolpaths/pocket.js';\n\nimport * as params from './parameters.js';\n\n// utils.download(filename, text);\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      shapes: {},\n      toolpaths:[],\n      selected: [],\n      material: \"wood\",\n      thickness: 34,\n      units: \"mm\",\n      zero: \"bottomleft\"\n    }\n  };\n\n  render() {\n    //should I put everying in a list or all to one model, there seem to be some issues with origins if I mjs.exporter.toSVG() seperately\n    let test = kk;\n    //test = mjs.model.originate(test);\n    let testProfile = test.models.profile;\n    let testPocket = test.models.pocket;\n    let profileCut = profile(testProfile, params);\n    let pocketCut = pocket(testPocket, params);\n\n    // let drawings = [test, profile(test)];\n    // drawings = drawings.map(d => mjs.exporter.toSVG(d));\n\n    //testing if internal outlines will make acceptable pocket paths, appears so\n    //let p2 = pocket(testPocket, params).drawing;\n    let t1 = new mjs.models.Oval(20,20)\n    let t2 = mjs.model.move(new mjs.models.Oval(20,20), [15,0])\n    let test0 = mjs.model.combineUnion(t1, t2);\n    let test1 = mjs.model.outline(test0, 5, 1, true)\n    // console.log(test0)\n    // test0 = mjs.model.move(test0, [50, 0]);\n\n    let model = {\n      models: {\n        shapes: {\n          models: {\n            profileSource: testProfile,\n            profileCut: profileCut.drawing,\n          }\n        },\n        cuts: {\n          pocketSource: testPocket,\n          pocketCut: pocketCut.drawing,\n        }\n        //pocketCut2: pocket(p2, params).drawing,\n        // test0,\n        // test1,\n      }\n    }\n\n    //model.cuts.layer = \"red\";\n\n    // model = mjs.model.originate(model);\n    // model = mjs.model.zero(model);\n\n    model['paths'] = {\n      origin: new mjs.paths.Circle(params.compensatedRadius)\n    }\n\n    let modelToView = mjs.model.scale(utils.deepcopy(model), 10); //TODO: make drawing easier to see, but this ruins toolpaths\n\n    let viewModel = mjs.exporter.toSVG(modelToView, {\n      useSvgPathOnly:false,\n      strokeWidth:\".5mm\",\n      // layerOptions:{\n      //   models: {\n      //     stroke: \"red\"\n      //   }\n      // },\n    });\n    //viewModel = viewModel.concat(Object.values(modelToView.models).map(m => mjs.exporter.toSVG(m)));\n    viewModel = [viewModel];\n\n    return (\n      <div\n        onMouseDown={(e) => console.log(\"div target\", e.target.getAttribute(\"data-route\"))}\n        style={{\n          margin: 0,\n          height: \"100%\",\n          overflow: \"hidden\"\n        }}>\n\n          <Workplane groups={viewModel}/>\n\n        <div>\n          <input\n            id=\"myInput\"\n            type=\"file\"\n            ref={(ref) => this.upload = ref}\n            style={{ display: 'none' }}\n            onChange={(e) => this.uploadSVG(e)}/>\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            onClick={(e) => this.upload.click()}\n            >\n              Upload SVG\n          </Button>\n          &nbsp;\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            onClick={() => {\n              utils.download(profileCut.filename, profileCut.gcode);\n              utils.download(pocketCut.filename, pocketCut.gcode);\n            }}\n            >\n              download gcode\n          </Button>\n        </div>\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}