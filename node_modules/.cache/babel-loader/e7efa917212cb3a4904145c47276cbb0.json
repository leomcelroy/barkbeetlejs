{"ast":null,"code":"/*\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the terms of the LICENSE file distributed with this project.\n */\nimport * as tslib_1 from \"tslib\";\nimport * as React from \"react\";\nimport { HOTKEYS_WARN_DECORATOR_NEEDS_REACT_ELEMENT, HOTKEYS_WARN_DECORATOR_NO_METHOD } from \"../../common/errors\";\nimport { getDisplayName, isFunction, safeInvoke } from \"../../common/utils\";\nimport { HotkeyScope, HotkeysEvents } from \"./hotkeysEvents\";\nexport function HotkeysTarget(WrappedComponent) {\n  if (!isFunction(WrappedComponent.prototype.renderHotkeys)) {\n    console.warn(HOTKEYS_WARN_DECORATOR_NO_METHOD);\n  }\n\n  return _a =\n  /** @class */\n  function (_super) {\n    tslib_1.__extends(HotkeysTargetClass, _super);\n\n    function HotkeysTargetClass() {\n      return _super !== null && _super.apply(this, arguments) || this;\n    }\n\n    HotkeysTargetClass.prototype.componentWillMount = function () {\n      if (_super.prototype.componentWillMount != null) {\n        _super.prototype.componentWillMount.call(this);\n      }\n\n      this.localHotkeysEvents = new HotkeysEvents(HotkeyScope.LOCAL);\n      this.globalHotkeysEvents = new HotkeysEvents(HotkeyScope.GLOBAL);\n    };\n\n    HotkeysTargetClass.prototype.componentDidMount = function () {\n      if (_super.prototype.componentDidMount != null) {\n        _super.prototype.componentDidMount.call(this);\n      } // attach global key event listeners\n\n\n      document.addEventListener(\"keydown\", this.globalHotkeysEvents.handleKeyDown);\n      document.addEventListener(\"keyup\", this.globalHotkeysEvents.handleKeyUp);\n    };\n\n    HotkeysTargetClass.prototype.componentWillUnmount = function () {\n      if (_super.prototype.componentWillUnmount != null) {\n        _super.prototype.componentWillUnmount.call(this);\n      }\n\n      document.removeEventListener(\"keydown\", this.globalHotkeysEvents.handleKeyDown);\n      document.removeEventListener(\"keyup\", this.globalHotkeysEvents.handleKeyUp);\n      this.globalHotkeysEvents.clear();\n      this.localHotkeysEvents.clear();\n    };\n\n    HotkeysTargetClass.prototype.render = function () {\n      var _this = this;\n\n      var element = _super.prototype.render.call(this);\n\n      if (element == null) {\n        // always return `element` in case caller is distinguishing between `null` and `undefined`\n        return element;\n      }\n\n      if (!React.isValidElement(element)) {\n        console.warn(HOTKEYS_WARN_DECORATOR_NEEDS_REACT_ELEMENT);\n        return element;\n      }\n\n      if (isFunction(this.renderHotkeys)) {\n        var hotkeys = this.renderHotkeys();\n        this.localHotkeysEvents.setHotkeys(hotkeys.props);\n        this.globalHotkeysEvents.setHotkeys(hotkeys.props);\n\n        if (this.localHotkeysEvents.count() > 0) {\n          var tabIndex = hotkeys.props.tabIndex === undefined ? 0 : hotkeys.props.tabIndex;\n          var _a = element.props,\n              existingKeyDown_1 = _a.keyDown,\n              existingKeyUp_1 = _a.keyUp;\n\n          var onKeyDown = function onKeyDown(e) {\n            _this.localHotkeysEvents.handleKeyDown(e.nativeEvent);\n\n            safeInvoke(existingKeyDown_1, e);\n          };\n\n          var onKeyUp = function onKeyUp(e) {\n            _this.localHotkeysEvents.handleKeyUp(e.nativeEvent);\n\n            safeInvoke(existingKeyUp_1, e);\n          };\n\n          return React.cloneElement(element, {\n            tabIndex: tabIndex,\n            onKeyDown: onKeyDown,\n            onKeyUp: onKeyUp\n          });\n        }\n      }\n\n      return element;\n    };\n\n    return HotkeysTargetClass;\n  }(WrappedComponent), _a.displayName = \"HotkeysTarget(\" + getDisplayName(WrappedComponent) + \")\", _a;\n\n  var _a;\n}","map":null,"metadata":{},"sourceType":"module"}