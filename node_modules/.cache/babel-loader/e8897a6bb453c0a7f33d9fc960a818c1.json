{"ast":null,"code":"import _classCallCheck from \"/Users/leomcelroy/Desktop/barkBeetleEverything/barkbeetle_js_real/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/leomcelroy/Desktop/barkBeetleEverything/barkbeetle_js_real/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/leomcelroy/Desktop/barkBeetleEverything/barkbeetle_js_real/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/leomcelroy/Desktop/barkBeetleEverything/barkbeetle_js_real/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/leomcelroy/Desktop/barkBeetleEverything/barkbeetle_js_real/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/leomcelroy/Desktop/barkBeetleEverything/barkbeetle_js_real/src/components/ToolpathList.js\";\nimport React, { Component, PureComponent } from 'react';\nimport { Table, Checkbox } from 'evergreen-ui';\nimport { AdvancedOptions } from './AdvancedOptions.js';\nimport store from '../store.js';\n\nvar ToolpathList =\n/*#__PURE__*/\nfunction (_PureComponent) {\n  _inherits(ToolpathList, _PureComponent);\n\n  function ToolpathList() {\n    _classCallCheck(this, ToolpathList);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(ToolpathList).apply(this, arguments));\n  }\n\n  _createClass(ToolpathList, [{\n    key: \"render\",\n    value: function render() {\n      var state = this.props.state;\n      return React.createElement(Table, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 11\n        },\n        __self: this\n      }, React.createElement(Table.Head, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 12\n        },\n        __self: this\n      }, React.createElement(Table.TextHeaderCell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 13\n        },\n        __self: this\n      }, \"name\"), React.createElement(Table.TextHeaderCell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 14\n        },\n        __self: this\n      }, \"type\"), React.createElement(Table.TextHeaderCell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 15\n        },\n        __self: this\n      }, \"modify\"), React.createElement(Table.TextHeaderCell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 16\n        },\n        __self: this\n      }, \"reorder\"), React.createElement(Table.TextHeaderCell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 17\n        },\n        __self: this\n      }, \"select/view\")), React.createElement(Table.Body, {\n        height: 240,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 19\n        },\n        __self: this\n      }, state.toolpaths.map(function (path, i) {\n        return React.createElement(Table.Row, {\n          key: path.id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 21\n          },\n          __self: this\n        }, React.createElement(Table.TextCell, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 22\n          },\n          __self: this\n        }, path.name), React.createElement(Table.TextCell, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 23\n          },\n          __self: this\n        }, path.type), React.createElement(Table.TextCell, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 24\n          },\n          __self: this\n        }, React.createElement(AdvancedOptions, {\n          params: path.parameters,\n          default: false,\n          toolpathID: path.id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 24\n          },\n          __self: this\n        })), React.createElement(Table.TextCell, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 25\n          },\n          __self: this\n        }, \"^ v\"), React.createElement(Table.TextCell, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 26\n          },\n          __self: this\n        }, React.createElement(Checkbox, {\n          checked: path.selected,\n          onChange: function onChange(e) {\n            var toolpaths = state.toolpaths;\n            var toolpath = toolpaths[i];\n            toolpath.selected = e.target.checked;\n            store.update({\n              toolpaths: toolpaths\n            });\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 27\n          },\n          __self: this\n        })));\n      })));\n    }\n  }]);\n\n  return ToolpathList;\n}(PureComponent);\n\nexport { ToolpathList };","map":{"version":3,"sources":["/Users/leomcelroy/Desktop/barkBeetleEverything/barkbeetle_js_real/src/components/ToolpathList.js"],"names":["React","Component","PureComponent","Table","Checkbox","AdvancedOptions","store","ToolpathList","state","props","toolpaths","map","path","i","id","name","type","parameters","selected","e","toolpath","target","checked","update"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,aAA3B,QAAgD,OAAhD;AACA,SAAQC,KAAR,EAAeC,QAAf,QAA8B,cAA9B;AACA,SAAQC,eAAR,QAA8B,sBAA9B;AACA,OAAOC,KAAP,MAAkB,aAAlB;;IAEMC,Y;;;;;;;;;;;;;6BAEG;AACP,UAAIC,KAAK,GAAG,KAAKC,KAAL,CAAWD,KAAvB;AACA,aACE,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,KAAD,CAAO,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,KAAD,CAAO,cAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,EAEE,oBAAC,KAAD,CAAO,cAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFF,EAGE,oBAAC,KAAD,CAAO,cAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAHF,EAIE,oBAAC,KAAD,CAAO,cAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAJF,EAKE,oBAAC,KAAD,CAAO,cAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBALF,CADF,EAQE,oBAAC,KAAD,CAAO,IAAP;AAAY,QAAA,MAAM,EAAE,GAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGA,KAAK,CAACE,SAAN,CAAgBC,GAAhB,CAAoB,UAACC,IAAD,EAAOC,CAAP;AAAA,eACnB,oBAAC,KAAD,CAAO,GAAP;AAAW,UAAA,GAAG,EAAED,IAAI,CAACE,EAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAiBF,IAAI,CAACG,IAAtB,CADF,EAEE,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAiBH,IAAI,CAACI,IAAtB,CAFF,EAGE,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAgB,oBAAC,eAAD;AAAiB,UAAA,MAAM,EAAEJ,IAAI,CAACK,UAA9B;AAA0C,UAAA,OAAO,EAAE,KAAnD;AAA0D,UAAA,UAAU,EAAEL,IAAI,CAACE,EAA3E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAhB,CAHF,EAIE,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAJF,EAKE,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE,oBAAC,QAAD;AACE,UAAA,OAAO,EAAEF,IAAI,CAACM,QADhB;AAEE,UAAA,QAAQ,EAAE,kBAAAC,CAAC,EAAI;AACb,gBAAIT,SAAS,GAAGF,KAAK,CAACE,SAAtB;AACA,gBAAIU,QAAQ,GAAGV,SAAS,CAACG,CAAD,CAAxB;AAEAO,YAAAA,QAAQ,CAACF,QAAT,GAAoBC,CAAC,CAACE,MAAF,CAASC,OAA7B;AAEAhB,YAAAA,KAAK,CAACiB,MAAN,CAAa;AAAEb,cAAAA,SAAS,EAATA;AAAF,aAAb;AACD,WATH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF,CALF,CADmB;AAAA,OAApB,CADH,CARF,CADF;AAiCE;;;;EArCuBR,a;;AAwC3B,SAAQK,YAAR","sourcesContent":["import React, { Component, PureComponent } from 'react';\nimport {Table, Checkbox} from 'evergreen-ui';\nimport {AdvancedOptions} from './AdvancedOptions.js';\nimport store from '../store.js';\n\nclass ToolpathList extends PureComponent {\n\nrender() {\n  let state = this.props.state;\n  return (\n    <Table>\n      <Table.Head>\n        <Table.TextHeaderCell>name</Table.TextHeaderCell>\n        <Table.TextHeaderCell>type</Table.TextHeaderCell>\n        <Table.TextHeaderCell>modify</Table.TextHeaderCell>\n        <Table.TextHeaderCell>reorder</Table.TextHeaderCell>\n        <Table.TextHeaderCell>select/view</Table.TextHeaderCell>\n      </Table.Head>\n      <Table.Body height={240}>\n        {state.toolpaths.map((path, i) => (\n          <Table.Row key={path.id}>\n            <Table.TextCell>{path.name}</Table.TextCell>\n            <Table.TextCell>{path.type}</Table.TextCell>\n            <Table.TextCell><AdvancedOptions params={path.parameters} default={false} toolpathID={path.id}/></Table.TextCell>\n            <Table.TextCell>^ v</Table.TextCell>\n            <Table.TextCell>\n              <Checkbox\n                checked={path.selected}\n                onChange={e => {\n                  let toolpaths = state.toolpaths;\n                  let toolpath = toolpaths[i];\n\n                  toolpath.selected = e.target.checked;\n\n                  store.update({ toolpaths })\n                }}\n              />\n            </Table.TextCell>\n          </Table.Row>\n        ))}\n      </Table.Body>\n    </Table>\n  )}\n}\n\nexport {ToolpathList}\n"]},"metadata":{},"sourceType":"module"}