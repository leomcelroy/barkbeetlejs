{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FileUpload = undefined;\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _Button = require('../button/Button');\n\nvar _Messages = require('../messages/Messages');\n\nvar _ProgressBar = require('../progressbar/ProgressBar');\n\nvar _DomHandler = require('../utils/DomHandler');\n\nvar _DomHandler2 = _interopRequireDefault(_DomHandler);\n\nvar _classnames = require('classnames');\n\nvar _classnames2 = _interopRequireDefault(_classnames);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _toConsumableArray(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar FileUpload = exports.FileUpload = function (_Component) {\n  _inherits(FileUpload, _Component);\n\n  function FileUpload(props) {\n    _classCallCheck(this, FileUpload);\n\n    var _this = _possibleConstructorReturn(this, (FileUpload.__proto__ || Object.getPrototypeOf(FileUpload)).call(this, props));\n\n    _this.state = {\n      files: [],\n      msgs: []\n    };\n    _this.upload = _this.upload.bind(_this);\n    _this.clear = _this.clear.bind(_this);\n    _this.onFileSelect = _this.onFileSelect.bind(_this);\n    _this.onDragEnter = _this.onDragEnter.bind(_this);\n    _this.onDragOver = _this.onDragOver.bind(_this);\n    _this.onDragLeave = _this.onDragLeave.bind(_this);\n    _this.onDrop = _this.onDrop.bind(_this);\n    _this.onFocus = _this.onFocus.bind(_this);\n    _this.onBlur = _this.onBlur.bind(_this);\n    _this.onSimpleUploaderClick = _this.onSimpleUploaderClick.bind(_this);\n    return _this;\n  }\n\n  _createClass(FileUpload, [{\n    key: 'hasFiles',\n    value: function hasFiles() {\n      return this.state.files && this.state.files.length > 0;\n    }\n  }, {\n    key: 'isImage',\n    value: function isImage(file) {\n      return /^image\\//.test(file.type);\n    }\n  }, {\n    key: 'remove',\n    value: function remove(index) {\n      this.clearInputElement();\n      var currentFiles = [].concat(_toConsumableArray(this.state.files));\n      currentFiles.splice(index, 1);\n      this.setState({\n        files: currentFiles\n      });\n    }\n  }, {\n    key: 'clearInputElement',\n    value: function clearInputElement() {\n      this.fileInput.value = '';\n\n      if (this.props.mode === 'basic') {\n        this.fileInput.style.display = 'inline';\n      }\n    }\n  }, {\n    key: 'formatSize',\n    value: function formatSize(bytes) {\n      if (bytes === 0) {\n        return '0 B';\n      }\n\n      var k = 1000,\n          dm = 3,\n          sizes = ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'],\n          i = Math.floor(Math.log(bytes) / Math.log(k));\n      return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];\n    }\n  }, {\n    key: 'onFileSelect',\n    value: function onFileSelect(event) {\n      var _this2 = this;\n\n      this.setState({\n        msgs: []\n      });\n      this.files = this.state.files || [];\n      var files = event.dataTransfer ? event.dataTransfer.files : event.target.files;\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = files[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var file = _step.value;\n\n          if (!this.isFileSelected(file)) {\n            if (this.validate(file)) {\n              if (this.isImage(file)) {\n                file.objectURL = window.URL.createObjectURL(file);\n              }\n\n              this.files.push(file);\n            }\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      this.setState({\n        files: this.files\n      }, function () {\n        if (_this2.hasFiles() && _this2.props.auto) {\n          _this2.upload();\n        }\n      });\n\n      if (this.props.onSelect) {\n        this.props.onSelect({\n          originalEvent: event,\n          files: files\n        });\n      }\n\n      this.clearInputElement();\n\n      if (this.props.mode === 'basic') {\n        this.fileInput.style.display = 'none';\n      }\n    }\n  }, {\n    key: 'isFileSelected',\n    value: function isFileSelected(file) {\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = this.state.files[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var sFile = _step2.value;\n          if (sFile.name + sFile.type + sFile.size === file.name + file.type + file.size) return true;\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2.return) {\n            _iterator2.return();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n\n      return false;\n    }\n  }, {\n    key: 'validate',\n    value: function validate(file) {\n      if (this.props.maxFileSize && file.size > this.props.maxFileSize) {\n        this.messagesUI.show({\n          severity: 'error',\n          summary: this.props.invalidFileSizeMessageSummary.replace('{0}', file.name),\n          detail: this.props.invalidFileSizeMessageDetail.replace('{0}', this.formatSize(this.props.maxFileSize))\n        });\n        return false;\n      }\n\n      return true;\n    }\n  }, {\n    key: 'upload',\n    value: function upload() {\n      var _this3 = this;\n\n      this.setState({\n        msgs: []\n      });\n      var xhr = new XMLHttpRequest();\n      var formData = new FormData();\n\n      if (this.props.onBeforeUpload) {\n        this.props.onBeforeUpload({\n          'xhr': xhr,\n          'formData': formData\n        });\n      }\n\n      var _iteratorNormalCompletion3 = true;\n      var _didIteratorError3 = false;\n      var _iteratorError3 = undefined;\n\n      try {\n        for (var _iterator3 = this.state.files[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n          var file = _step3.value;\n          formData.append(this.props.name, file, file.name);\n        }\n      } catch (err) {\n        _didIteratorError3 = true;\n        _iteratorError3 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion3 && _iterator3.return) {\n            _iterator3.return();\n          }\n        } finally {\n          if (_didIteratorError3) {\n            throw _iteratorError3;\n          }\n        }\n      }\n\n      xhr.upload.addEventListener('progress', function (event) {\n        if (event.lengthComputable) {\n          _this3.setState({\n            progress: Math.round(event.loaded * 100 / event.total)\n          });\n        }\n\n        if (_this3.props.onProgress) {\n          _this3.props.onProgress({\n            originalEvent: event,\n            progress: _this3.progress\n          });\n        }\n\n        ;\n      });\n\n      xhr.onreadystatechange = function () {\n        if (xhr.readyState === 4) {\n          _this3.setState({\n            progress: 0\n          });\n\n          if (xhr.status >= 200 && xhr.status < 300) {\n            if (_this3.props.onUpload) {\n              _this3.props.onUpload({\n                xhr: xhr,\n                files: _this3.files\n              });\n            }\n          } else {\n            if (_this3.props.onError) {\n              _this3.props.onError({\n                xhr: xhr,\n                files: _this3.files\n              });\n            }\n          }\n\n          _this3.clear();\n        }\n      };\n\n      xhr.open('POST', this.props.url, true);\n\n      if (this.props.onBeforeSend) {\n        this.props.onBeforeSend({\n          'xhr': xhr,\n          'formData': formData\n        });\n      }\n\n      xhr.withCredentials = this.props.withCredentials;\n      xhr.send(formData);\n    }\n  }, {\n    key: 'clear',\n    value: function clear() {\n      this.setState({\n        files: []\n      });\n\n      if (this.props.onClear) {\n        this.props.onClear();\n      }\n\n      this.clearInputElement();\n    }\n  }, {\n    key: 'onFocus',\n    value: function onFocus(event) {\n      _DomHandler2.default.addClass(event.currentTarget.parentElement, 'p-focus');\n    }\n  }, {\n    key: 'onBlur',\n    value: function onBlur(event) {\n      _DomHandler2.default.removeClass(event.currentTarget.parentElement, 'p-focus');\n    }\n  }, {\n    key: 'onDragEnter',\n    value: function onDragEnter(event) {\n      if (!this.props.disabled) {\n        event.stopPropagation();\n        event.preventDefault();\n      }\n    }\n  }, {\n    key: 'onDragOver',\n    value: function onDragOver(event) {\n      if (!this.props.disabled) {\n        _DomHandler2.default.addClass(this.content, 'p-fileupload-highlight');\n\n        event.stopPropagation();\n        event.preventDefault();\n      }\n    }\n  }, {\n    key: 'onDragLeave',\n    value: function onDragLeave(event) {\n      if (!this.props.disabled) {\n        _DomHandler2.default.removeClass(this.content, 'p-fileupload-highlight');\n      }\n    }\n  }, {\n    key: 'onDrop',\n    value: function onDrop(event) {\n      if (!this.props.disabled) {\n        _DomHandler2.default.removeClass(this.content, 'p-fileupload-highlight');\n\n        event.stopPropagation();\n        event.preventDefault();\n        var files = event.dataTransfer ? event.dataTransfer.files : event.target.files;\n        var allowDrop = this.props.multiple || files && files.length === 1;\n\n        if (allowDrop) {\n          this.onFileSelect(event);\n        }\n      }\n    }\n  }, {\n    key: 'onSimpleUploaderClick',\n    value: function onSimpleUploaderClick() {\n      if (this.hasFiles()) {\n        this.upload();\n      }\n    }\n  }, {\n    key: 'renderChooseButton',\n    value: function renderChooseButton() {\n      var _this4 = this;\n\n      var className = (0, _classnames2.default)('p-button p-fileupload-choose p-component p-button-text-icon-left');\n      return _react2.default.createElement('span', {\n        icon: 'pi pi-plus',\n        className: className\n      }, _react2.default.createElement('input', {\n        ref: function ref(el) {\n          return _this4.fileInput = el;\n        },\n        type: 'file',\n        onChange: this.onFileSelect,\n        onFocus: this.onFocus,\n        onBlur: this.onBlur,\n        multiple: this.props.multiple,\n        accept: this.props.accept,\n        disabled: this.props.disabled\n      }), _react2.default.createElement('span', {\n        className: 'p-button-icon p-button-icon-left p-clickable pi pi-fw pi-plus'\n      }), _react2.default.createElement('span', {\n        className: 'p-button-text p-clickable'\n      }, this.props.chooseLabel));\n    }\n  }, {\n    key: 'renderFiles',\n    value: function renderFiles() {\n      var _this5 = this;\n\n      return _react2.default.createElement('div', {\n        className: 'p-fileupload-files'\n      }, this.state.files.map(function (file, index) {\n        var preview = _this5.isImage(file) ? _react2.default.createElement('div', null, _react2.default.createElement('img', {\n          alt: file.name,\n          role: 'presentation',\n          src: file.objectURL,\n          width: _this5.props.previewWidth\n        })) : null;\n\n        var fileName = _react2.default.createElement('div', null, file.name);\n\n        var size = _react2.default.createElement('div', null, _this5.formatSize(file.size));\n\n        var removeButton = _react2.default.createElement('div', null, _react2.default.createElement(_Button.Button, {\n          type: 'button',\n          icon: 'pi pi-times',\n          onClick: function onClick() {\n            return _this5.remove(index);\n          }\n        }));\n\n        return _react2.default.createElement('div', {\n          className: 'p-fileupload-row',\n          key: file.name + file.type + file.size\n        }, preview, fileName, size, removeButton);\n      }));\n    }\n  }, {\n    key: 'renderAdvanced',\n    value: function renderAdvanced() {\n      var _this6 = this;\n\n      var className = (0, _classnames2.default)('p-fileupload p-component', this.props.className);\n      var uploadButton = void 0,\n          cancelButton = void 0,\n          filesList = void 0,\n          progressBar = void 0;\n      var chooseButton = this.renderChooseButton();\n\n      if (!this.props.auto) {\n        uploadButton = _react2.default.createElement(_Button.Button, {\n          label: this.props.uploadLabel,\n          icon: 'pi pi-upload',\n          onClick: this.upload,\n          disabled: this.props.disabled || !this.hasFiles()\n        });\n        cancelButton = _react2.default.createElement(_Button.Button, {\n          label: this.props.cancelLabel,\n          icon: 'pi pi-times',\n          onClick: this.clear,\n          disabled: this.props.disabled || !this.hasFiles()\n        });\n      }\n\n      if (this.hasFiles()) {\n        filesList = this.renderFiles();\n        progressBar = _react2.default.createElement(_ProgressBar.ProgressBar, {\n          value: this.state.progress,\n          showValue: false\n        });\n      }\n\n      return _react2.default.createElement('div', {\n        id: this.props.id,\n        className: className,\n        style: this.props.style\n      }, _react2.default.createElement('div', {\n        className: 'p-fileupload-buttonbar'\n      }, chooseButton, uploadButton, cancelButton), _react2.default.createElement('div', {\n        ref: function ref(el) {\n          _this6.content = el;\n        },\n        className: 'p-fileupload-content',\n        onDragEnter: this.onDragEnter,\n        onDragOver: this.onDragOver,\n        onDragLeave: this.onDragLeave,\n        onDrop: this.onDrop\n      }, progressBar, _react2.default.createElement(_Messages.Messages, {\n        ref: function ref(el) {\n          return _this6.messagesUI = el;\n        }\n      }), filesList));\n    }\n  }, {\n    key: 'renderBasic',\n    value: function renderBasic() {\n      var _this7 = this;\n\n      var buttonClassName = (0, _classnames2.default)('p-button p-fileupload-choose p-component p-button-text-icon-left', {\n        'p-fileupload-choose-selected': this.hasFiles()\n      });\n      var iconClassName = (0, _classnames2.default)('p-button-icon-left pi', {\n        'pi-plus': !this.hasFiles() || this.props.auto,\n        'pi-upload': this.hasFiles() && !this.props.auto\n      });\n      return _react2.default.createElement('span', {\n        className: buttonClassName,\n        onMouseUp: this.onSimpleUploaderClick\n      }, _react2.default.createElement('span', {\n        className: iconClassName\n      }), _react2.default.createElement('span', {\n        className: 'p-button-text p-clickable'\n      }, this.props.auto ? this.props.chooseLabel : this.hasFiles() ? this.state.files[0].name : this.props.chooseLabel), _react2.default.createElement('input', {\n        ref: function ref(el) {\n          return _this7.fileInput = el;\n        },\n        type: 'file',\n        multiple: this.props.multiple,\n        accept: this.props.accept,\n        disabled: this.props.disabled,\n        onChange: this.onFileSelect,\n        onFocus: this.onFocus,\n        onBlur: this.onBlur\n      }));\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      if (this.props.mode === 'advanced') return this.renderAdvanced();else if (this.props.mode === 'basic') return this.renderBasic();\n    }\n  }]);\n\n  return FileUpload;\n}(_react.Component);\n\nFileUpload.defaultProps = {\n  id: null,\n  name: null,\n  url: null,\n  mode: 'advanced',\n  multiple: false,\n  accept: null,\n  disabled: false,\n  auto: false,\n  maxFileSize: null,\n  invalidFileSizeMessageSummary: '{0}: Invalid file size, ',\n  invalidFileSizeMessageDetail: 'maximum upload size is {0}.',\n  style: null,\n  className: null,\n  widthCredentials: false,\n  previewWidth: 50,\n  chooseLabel: 'Choose',\n  uploadLabel: 'Upload',\n  cancelLabel: 'Cancel',\n  onBeforeUpload: null,\n  onBeforeSend: null,\n  onUpload: null,\n  onError: null,\n  onClear: null,\n  onSelect: null,\n  onProgress: null\n};\nFileUpload.propTypes = {\n  id: _propTypes2.default.string,\n  name: _propTypes2.default.string,\n  url: _propTypes2.default.string,\n  mode: _propTypes2.default.string,\n  multiple: _propTypes2.default.bool,\n  accept: _propTypes2.default.string,\n  disabled: _propTypes2.default.bool,\n  auto: _propTypes2.default.bool,\n  maxFileSize: _propTypes2.default.number,\n  invalidFileSizeMessageSummary: _propTypes2.default.string,\n  invalidFileSizeMessageDetail: _propTypes2.default.string,\n  style: _propTypes2.default.object,\n  className: _propTypes2.default.string,\n  widthCredentials: _propTypes2.default.bool,\n  previewWidth: _propTypes2.default.number,\n  chooseLabel: _propTypes2.default.string,\n  uploadLabel: _propTypes2.default.string,\n  cancelLabel: _propTypes2.default.string,\n  onBeforeUpload: _propTypes2.default.func,\n  onBeforeSend: _propTypes2.default.func,\n  onUpload: _propTypes2.default.func,\n  onError: _propTypes2.default.func,\n  onClear: _propTypes2.default.func,\n  onSelect: _propTypes2.default.func,\n  onProgress: _propTypes2.default.func\n};","map":null,"metadata":{},"sourceType":"script"}