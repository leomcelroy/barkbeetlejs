{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Transition from 'react-transition-group/Transition';\nimport Box, { css } from 'ui-box';\nimport { Portal } from '../../portal';\nimport { Stack } from '../../stack';\nimport { StackingOrder } from '../../constants';\nimport { withTheme } from '../../theme';\nimport safeInvoke from '../../lib/safe-invoke';\nvar animationEasing = {\n  standard: \"cubic-bezier(0.4, 0.0, 0.2, 1)\",\n  deceleration: \"cubic-bezier(0.0, 0.0, 0.2, 1)\",\n  acceleration: \"cubic-bezier(0.4, 0.0, 1, 1)\",\n  sharp: \"cubic-bezier(0.4, 0.0, 0.6, 1)\",\n  spring: \"cubic-bezier(0.175, 0.885, 0.320, 1.175)\"\n};\nvar ANIMATION_DURATION = 240;\nvar fadeInAnimation = css.keyframes('fadeInAnimation', {\n  from: {\n    opacity: 0\n  },\n  to: {\n    opacity: 1\n  }\n});\nvar fadeOutAnimation = css.keyframes('fadeOutAnimation', {\n  from: {\n    opacity: 1\n  },\n  to: {\n    opacity: 0\n  }\n});\n\nvar animationStyles = function animationStyles(backgroundColor) {\n  return {\n    '&::before': {\n      backgroundColor: backgroundColor,\n      left: 0,\n      top: 0,\n      position: 'fixed',\n      display: 'block',\n      width: '100%',\n      height: '100%',\n      content: '\" \"'\n    },\n    '&[data-state=\"entering\"]::before, &[data-state=\"entered\"]::before': {\n      animation: \"\".concat(fadeInAnimation, \" \").concat(ANIMATION_DURATION, \"ms \").concat(animationEasing.deceleration, \" both\")\n    },\n    '&[data-state=\"exiting\"]::before, &[data-state=\"exited\"]::before': {\n      animation: \"\".concat(fadeOutAnimation, \" \").concat(ANIMATION_DURATION, \"ms \").concat(animationEasing.acceleration, \" both\")\n    }\n  };\n};\n/**\n * Overlay is essentially a wrapper around react-transition-group/Transition\n * Learn more: https://reactcommunity.org/react-transition-group/\n */\n\n\nvar Overlay =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Overlay, _React$Component);\n\n  function Overlay(props) {\n    var _this;\n\n    _classCallCheck(this, Overlay);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Overlay).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"bringFocusInsideOverlay\", function () {\n      // Always delay focus manipulation to just before repaint to prevent scroll jumping\n      return requestAnimationFrame(function () {\n        // Container ref may be undefined between component mounting and Portal rendering\n        // activeElement may be undefined in some rare cases in IE\n        if (_this.containerElement == null || // eslint-disable-line eqeqeq, no-eq-null\n        document.activeElement == null || // eslint-disable-line eqeqeq, no-eq-null\n        !_this.props.isShown) {\n          return;\n        }\n\n        var isFocusOutsideModal = !_this.containerElement.contains(document.activeElement);\n\n        if (isFocusOutsideModal) {\n          // Element marked autofocus has higher priority than the other clowns\n          var autofocusElement = _this.containerElement.querySelector('[autofocus]');\n\n          var wrapperElement = _this.containerElement.querySelector('[tabindex]');\n\n          var buttonElement = _this.containerElement.querySelector('button');\n\n          if (autofocusElement) {\n            autofocusElement.focus();\n          } else if (wrapperElement) {\n            wrapperElement.focus();\n          } else if (buttonElement) {\n            buttonElement.focus();\n          }\n        }\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"bringFocusBackToTarget\", function () {\n      return requestAnimationFrame(function () {\n        if (_this.containerElement == null || // eslint-disable-line eqeqeq, no-eq-null\n        document.activeElement == null // eslint-disable-line eqeqeq, no-eq-null\n        ) {\n            return;\n          }\n\n        var isFocusInsideModal = _this.containerElement.contains(document.activeElement); // Bring back focus on the target.\n\n\n        if (_this.previousActiveElement && (document.activeElement === document.body || isFocusInsideModal)) {\n          _this.previousActiveElement.focus();\n        }\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"onEsc\", function (e) {\n      // Esc key\n      if (e.keyCode === 27 && _this.props.shouldCloseOnEscapePress) {\n        _this.close();\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"close\", function () {\n      var shouldClose = safeInvoke(_this.props.onBeforeClose);\n\n      if (shouldClose !== false) {\n        _this.setState({\n          exiting: true\n        });\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"handleEntering\", function (node) {\n      document.body.addEventListener('keydown', _this.onEsc, false);\n\n      _this.props.onEntering(node);\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"handleEntered\", function (node) {\n      _this.previousActiveElement = document.activeElement;\n\n      _this.bringFocusInsideOverlay();\n\n      _this.props.onEntered(node);\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"handleExiting\", function (node) {\n      document.body.removeEventListener('keydown', _this.onEsc, false);\n\n      _this.bringFocusBackToTarget();\n\n      _this.props.onExiting(node);\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"handleExited\", function (node) {\n      _this.setState({\n        exiting: false,\n        exited: true\n      });\n\n      _this.props.onExited(node);\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"handleBackdropClick\", function (e) {\n      if (e.target !== e.currentTarget || !_this.props.shouldCloseOnClick) {\n        return;\n      }\n\n      _this.close();\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"onContainerRef\", function (ref) {\n      _this.containerElement = ref;\n    });\n\n    _this.state = {\n      exiting: false,\n      exited: !props.isShown\n    };\n    return _this;\n  }\n\n  _createClass(Overlay, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (!prevProps.isShown && this.props.isShown) {\n        // eslint-disable-next-line react/no-did-update-set-state\n        this.setState({\n          exited: false\n        });\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      document.body.removeEventListener('keydown', this.onEsc, false);\n    }\n    /**\n     * Methods borrowed from BlueprintJS\n     * https://github.com/palantir/blueprint/blob/release/2.0.0/packages/core/src/components/overlay/overlay.tsx\n     */\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          theme = _this$props.theme,\n          _this$props$container = _this$props.containerProps,\n          containerProps = _this$props$container === void 0 ? {} : _this$props$container,\n          isShown = _this$props.isShown,\n          children = _this$props.children,\n          onExit = _this$props.onExit,\n          onEnter = _this$props.onEnter;\n      var _this$state = this.state,\n          exiting = _this$state.exiting,\n          exited = _this$state.exited;\n      if (exited) return null;\n      return React.createElement(Stack, {\n        value: StackingOrder.OVERLAY\n      }, function (zIndex) {\n        return React.createElement(Portal, null, React.createElement(Transition, {\n          appear: true,\n          unmountOnExit: true,\n          timeout: ANIMATION_DURATION,\n          in: isShown && !exiting,\n          onExit: onExit,\n          onExiting: _this2.handleExiting,\n          onExited: _this2.handleExited,\n          onEnter: onEnter,\n          onEntering: _this2.handleEntering,\n          onEntered: _this2.handleEntered\n        }, function (state) {\n          return React.createElement(Box, _extends({\n            onClick: _this2.handleBackdropClick,\n            innerRef: _this2.onContainerRef,\n            position: \"fixed\",\n            top: 0,\n            left: 0,\n            right: 0,\n            bottom: 0,\n            zIndex: zIndex,\n            css: animationStyles(theme.overlayBackgroundColor),\n            \"data-state\": state\n          }, containerProps), typeof children === 'function' ? children({\n            state: state,\n            close: _this2.close\n          }) : children);\n        }));\n      });\n    }\n  }]);\n\n  return Overlay;\n}(React.Component);\n\nOverlay.displayName = \"Overlay\";\n\n_defineProperty(Overlay, \"propTypes\", {\n  /**\n   * Children can be a node or a function accepting `close: func`\n   * and `state: ENTERING | ENTERED | EXITING | EXITED`.\n   */\n  children: PropTypes.oneOfType([PropTypes.node, PropTypes.func]).isRequired,\n\n  /**\n   * Show the component; triggers the enter or exit states.\n   */\n  isShown: PropTypes.bool,\n\n  /**\n   * Props to be passed through on the inner Box.\n   */\n  containerProps: PropTypes.object,\n\n  /**\n   * Boolean indicating if clicking the overlay should close the overlay.\n   */\n  shouldCloseOnClick: PropTypes.bool,\n\n  /**\n   * Boolean indicating if pressing the esc key should close the overlay.\n   */\n  shouldCloseOnEscapePress: PropTypes.bool,\n\n  /**\n   * Function called when overlay is about to close.\n   * Return `false` to prevent the sheet from closing.\n   * type: `Function -> Boolean`\n   */\n  onBeforeClose: PropTypes.func,\n\n  /**\n   * Callback fired before the \"exiting\" status is applied.\n   * type: `Function(node: HtmlElement) -> void`\n   */\n  onExit: PropTypes.func,\n\n  /**\n   * Callback fired after the \"exiting\" status is applied.\n   * type: `Function(node: HtmlElement) -> void`\n   */\n  onExiting: PropTypes.func,\n\n  /**\n   * Callback fired after the \"exited\" status is applied.\n   * type: `Function(exitState: Any?, node: HtmlElement) -> void`\n   */\n  onExited: PropTypes.func,\n\n  /**\n   * Callback fired before the \"entering\" status is applied.\n   * An extra parameter isAppearing is supplied to indicate if the enter stage\n   * is occurring on the initial mount.\n   *\n   * type: `Function(node: HtmlElement, isAppearing: bool) -> void`\n   */\n  onEnter: PropTypes.func,\n\n  /**\n   * Callback fired after the \"entering\" status is applied.\n   * An extra parameter isAppearing is supplied to indicate if the enter stage\n   * is occurring on the initial mount.\n   *\n   * type: `Function(node: HtmlElement, isAppearing: bool) -> void`\n   */\n  onEntering: PropTypes.func,\n\n  /**\n   * Callback fired after the \"entered\" status is applied.\n   * An extra parameter isAppearing is supplied to indicate if the enter stage\n   * is occurring on the initial mount.\n   *\n   * type: `Function(node: HtmlElement, isAppearing: bool) -> void`\n   */\n  onEntered: PropTypes.func,\n\n  /**\n   * Theme provided by ThemeProvider.\n   */\n  theme: PropTypes.object.isRequired\n});\n\n_defineProperty(Overlay, \"defaultProps\", {\n  onHide: function onHide() {},\n  shouldCloseOnClick: true,\n  shouldCloseOnEscapePress: true,\n  onExit: function onExit() {},\n  onExiting: function onExiting() {},\n  onExited: function onExited() {},\n  onEnter: function onEnter() {},\n  onEntering: function onEntering() {},\n  onEntered: function onEntered() {}\n});\n\nexport default withTheme(Overlay);","map":null,"metadata":{},"sourceType":"module"}