{"ast":null,"code":"import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport Transition from 'react-transition-group/Transition';\nimport { Portal } from '../../portal';\nimport { Stack } from '../../stack';\nimport { StackingOrder, Position } from '../../constants';\nimport getPosition from './getPosition';\nvar animationEasing = {\n  spring: \"cubic-bezier(0.175, 0.885, 0.320, 1.175)\"\n};\n\nvar initialState = function initialState() {\n  return {\n    top: null,\n    left: null,\n    transformOrigin: null\n  };\n};\n\nvar getCSS = function getCSS(_ref) {\n  var initialScale = _ref.initialScale,\n      animationDuration = _ref.animationDuration;\n  return {\n    position: 'fixed',\n    opacity: 0,\n    transitionTimingFunction: animationEasing.spring,\n    transitionDuration: \"\".concat(animationDuration, \"ms\"),\n    transitionProperty: 'opacity, transform',\n    transform: \"scale(\".concat(initialScale, \") translateY(-1px)\"),\n    '&[data-state=\"entering\"], &[data-state=\"entered\"]': {\n      opacity: 1,\n      visibility: 'visible',\n      transform: \"scale(1)\"\n    },\n    '&[data-state=\"exiting\"]': {\n      opacity: 0,\n      transform: 'scale(1)'\n    }\n  };\n};\n\nvar Positioner =\n/*#__PURE__*/\nfunction (_PureComponent) {\n  _inherits(Positioner, _PureComponent);\n\n  function Positioner(props, context) {\n    var _this;\n\n    _classCallCheck(this, Positioner);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Positioner).call(this, props, context));\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"getTargetRef\", function (ref) {\n      _this.targetRef = ref;\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"getRef\", function (ref) {\n      _this.positionerRef = ref;\n\n      _this.props.innerRef(ref);\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"handleEnter\", function () {\n      _this.update();\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"update\", function () {\n      var prevHeight = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      var prevWidth = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      if (!_this.props.isShown || !_this.targetRef || !_this.positionerRef) return;\n\n      var targetRect = _this.targetRef.getBoundingClientRect();\n\n      var hasEntered = _this.positionerRef.getAttribute('data-state') === 'entered';\n      var viewportHeight = document.documentElement.clientHeight;\n      var viewportWidth = document.documentElement.clientWidth;\n      var height;\n      var width;\n\n      if (hasEntered) {\n        // Only when the animation is done should we opt-in to `getBoundingClientRect`\n        var positionerRect = _this.positionerRef.getBoundingClientRect(); // https://github.com/segmentio/evergreen/issues/255\n        // We need to ceil the width and height to prevent jitter when\n        // the window is zoomed (when `window.devicePixelRatio` is not an integer)\n\n\n        height = Math.round(positionerRect.height);\n        width = Math.round(positionerRect.width);\n      } else {\n        // When the animation is in flight use `offsetWidth/Height` which\n        // does not calculate the `transform` property as part of its result.\n        // There is still change on jitter during the animation (although unoticable)\n        // When the browser is zoomed in â€” we fix this with `Math.max`.\n        height = Math.max(_this.positionerRef.offsetHeight, prevHeight);\n        width = Math.max(_this.positionerRef.offsetWidth, prevWidth);\n      }\n\n      var _getPosition = getPosition({\n        position: _this.props.position,\n        targetRect: targetRect,\n        targetOffset: _this.props.targetOffset,\n        dimensions: {\n          height: height,\n          width: width\n        },\n        viewport: {\n          width: viewportWidth,\n          height: viewportHeight\n        },\n        viewportOffset: _this.props.bodyOffset\n      }),\n          rect = _getPosition.rect,\n          transformOrigin = _getPosition.transformOrigin;\n\n      _this.setState({\n        left: rect.left,\n        top: rect.top,\n        transformOrigin: transformOrigin\n      }, function () {\n        _this.latestAnimationFrame = requestAnimationFrame(function () {\n          _this.update(height, width);\n        });\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"handleExited\", function () {\n      _this.setState(function () {\n        return _objectSpread({}, initialState());\n      }, function () {\n        _this.props.onCloseComplete();\n      });\n    });\n\n    _this.state = initialState();\n    return _this;\n  }\n\n  _createClass(Positioner, [{\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (this.latestAnimationFrame) {\n        cancelAnimationFrame(this.latestAnimationFrame);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          target = _this$props.target,\n          isShown = _this$props.isShown,\n          children = _this$props.children,\n          initialScale = _this$props.initialScale,\n          targetOffset = _this$props.targetOffset,\n          animationDuration = _this$props.animationDuration;\n      var _this$state = this.state,\n          left = _this$state.left,\n          top = _this$state.top,\n          transformOrigin = _this$state.transformOrigin;\n      return React.createElement(Stack, {\n        value: StackingOrder.POSITIONER\n      }, function (zIndex) {\n        return React.createElement(React.Fragment, null, target({\n          getRef: _this2.getTargetRef,\n          isShown: isShown\n        }), React.createElement(Transition, {\n          appear: true,\n          in: isShown,\n          timeout: animationDuration,\n          onEnter: _this2.handleEnter,\n          onEntered: _this2.props.onOpenComplete,\n          onExited: _this2.handleExited,\n          unmountOnExit: true\n        }, function (state) {\n          return React.createElement(Portal, null, children({\n            top: top,\n            left: left,\n            state: state,\n            zIndex: zIndex,\n            css: getCSS({\n              targetOffset: targetOffset,\n              initialScale: initialScale,\n              animationDuration: animationDuration\n            }),\n            style: {\n              transformOrigin: transformOrigin,\n              left: left,\n              top: top,\n              zIndex: zIndex\n            },\n            getRef: _this2.getRef,\n            animationDuration: animationDuration\n          }));\n        }));\n      });\n    }\n  }]);\n\n  return Positioner;\n}(PureComponent);\n\nPositioner.displayName = \"Positioner\";\n\n_defineProperty(Positioner, \"propTypes\", {\n  /**\n   * The position the element that is being positioned is on.\n   * Smart positioning might override this.\n   */\n  position: PropTypes.oneOf([Position.TOP, Position.TOP_LEFT, Position.TOP_RIGHT, Position.BOTTOM, Position.BOTTOM_LEFT, Position.BOTTOM_RIGHT, Position.LEFT, Position.RIGHT]).isRequired,\n\n  /**\n   * When true, show the element being positioned.\n   */\n  isShown: PropTypes.bool,\n\n  /**\n   * Function that returns the element being positioned.\n   */\n  children: PropTypes.func.isRequired,\n\n  /**\n   * Function that returns the ref of the element being positioned.\n   */\n  innerRef: PropTypes.func.isRequired,\n\n  /**\n   * The minimum distance from the body to the element being positioned.\n   */\n  bodyOffset: PropTypes.number.isRequired,\n\n  /**\n   * The minimum distance from the target to the element being positioned.\n   */\n  targetOffset: PropTypes.number.isRequired,\n\n  /**\n   * Function that should return a node for the target.\n   * ({ getRef: () -> Ref, isShown: Bool }) -> React Node\n   */\n  target: PropTypes.func.isRequired,\n\n  /**\n   * Initial scale of the element being positioned.\n   */\n  initialScale: PropTypes.number.isRequired,\n\n  /**\n   * Duration of the animation.\n   */\n  animationDuration: PropTypes.number.isRequired,\n\n  /**\n   * Function that will be called when the exit transition is complete.\n   */\n  onCloseComplete: PropTypes.func.isRequired,\n\n  /**\n   * Function that will be called when the enter transition is complete.\n   */\n  onOpenComplete: PropTypes.func.isRequired\n});\n\n_defineProperty(Positioner, \"defaultProps\", {\n  position: Position.BOTTOM,\n  bodyOffset: 6,\n  targetOffset: 6,\n  initialScale: 0.9,\n  animationDuration: 300,\n  innerRef: function innerRef() {},\n  onOpenComplete: function onOpenComplete() {},\n  onCloseComplete: function onCloseComplete() {}\n});\n\nexport { Positioner as default };","map":null,"metadata":{},"sourceType":"module"}