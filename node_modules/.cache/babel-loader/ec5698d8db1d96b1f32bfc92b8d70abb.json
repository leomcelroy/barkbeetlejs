{"ast":null,"code":"function _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport { TOOL_NONE, MODE_IDLE } from '../constants';\nimport { identity, fromObject, inverse, applyToPoint, transform, translate, scale } from 'transformation-matrix';\n/**\n * Obtain default value\n * @returns {Object}\n */\n\nexport function getDefaultValue(viewerWidth, viewerHeight, SVGWidth, SVGHeight, scaleFactorMin, scaleFactorMax) {\n  return set({}, _objectSpread({}, identity(), {\n    version: 2,\n    mode: MODE_IDLE,\n    focus: false,\n    pinchPointDistance: null,\n    prePinchMode: null,\n    viewerWidth: viewerWidth,\n    viewerHeight: viewerHeight,\n    SVGWidth: SVGWidth,\n    SVGHeight: SVGHeight,\n    scaleFactorMin: scaleFactorMin,\n    scaleFactorMax: scaleFactorMax,\n    startX: null,\n    startY: null,\n    endX: null,\n    endY: null,\n    miniatureOpen: true,\n    lastAction: null\n  }));\n}\n/**\n * Change value\n * @param value\n * @param change\n * @param action\n * @returns {Object}\n */\n\nexport function set(value, change) {\n  var action = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  value = Object.assign({}, value, change, {\n    lastAction: action\n  });\n  return Object.freeze(value);\n}\n/**\n * value valid check\n * @param value\n */\n\nexport function isValueValid(value) {\n  return value !== null && _typeof(value) === 'object' && value.hasOwnProperty('version');\n}\n/**\n * Export x,y coords relative to SVG\n * @param value\n * @param viewerX\n * @param viewerY\n * @returns {*|{x, y}|{x: number, y: number}}\n */\n\nexport function getSVGPoint(value, viewerX, viewerY) {\n  var matrix = fromObject(value);\n  var inverseMatrix = inverse(matrix);\n  return applyToPoint(inverseMatrix, {\n    x: viewerX,\n    y: viewerY\n  });\n}\n/**\n * Decompose matrix from value\n * @param value\n * @returns {{scaleFactor: number, translationX: number, translationY: number}}\n */\n\nexport function decompose(value) {\n  var matrix = fromObject(value);\n  return {\n    scaleFactor: matrix.a,\n    translationX: matrix.e,\n    translationY: matrix.f\n  };\n}\n/**\n *\n * @param value\n * @param focus\n * @returns {Object}\n */\n\nexport function setFocus(value, focus) {\n  return set(value, {\n    focus: focus\n  });\n}\n/**\n *\n * @param value\n * @param viewerWidth\n * @param viewerHeight\n * @returns {Object}\n */\n\nexport function setViewerSize(value, viewerWidth, viewerHeight) {\n  return set(value, {\n    viewerWidth: viewerWidth,\n    viewerHeight: viewerHeight\n  });\n}\n/**\n *\n * @param value\n * @param SVGWidth\n * @param SVGHeight\n * @returns {Object}\n */\n\nexport function setSVGSize(value, SVGWidth, SVGHeight) {\n  return set(value, {\n    SVGWidth: SVGWidth,\n    SVGHeight: SVGHeight\n  });\n}\n/**\n *\n * @param value\n * @param scaleFactorMin\n * @param scaleFactorMax\n * @returns {Object}\n */\n\nexport function setZoomLevels(value, scaleFactorMin, scaleFactorMax) {\n  return set(value, {\n    scaleFactorMin: scaleFactorMin,\n    scaleFactorMax: scaleFactorMax\n  });\n}\n/**\n *\n * @param value\n * @param SVGPointX\n * @param SVGPointY\n * @param zoomLevel\n * @returns {Object}\n */\n\nexport function setPointOnViewerCenter(value, SVGPointX, SVGPointY, zoomLevel) {\n  var viewerWidth = value.viewerWidth,\n      viewerHeight = value.viewerHeight;\n  var matrix = transform(translate(-SVGPointX + viewerWidth / 2, -SVGPointY + viewerHeight / 2), //4\n  translate(SVGPointX, SVGPointY), //3\n  scale(zoomLevel, zoomLevel), //2\n  translate(-SVGPointX, -SVGPointY) //1\n  );\n  return set(value, _objectSpread({\n    mode: MODE_IDLE\n  }, matrix));\n}\n/**\n *\n * @param value\n * @returns {Object}\n */\n\nexport function reset(value) {\n  return set(value, _objectSpread({\n    mode: MODE_IDLE\n  }, identity()));\n}\n/**\n *\n * @param value\n * @returns {Object}\n */\n\nexport function resetMode(value) {\n  return set(value, {\n    mode: MODE_IDLE,\n    startX: null,\n    startY: null,\n    endX: null,\n    endY: null\n  });\n}","map":null,"metadata":{},"sourceType":"module"}