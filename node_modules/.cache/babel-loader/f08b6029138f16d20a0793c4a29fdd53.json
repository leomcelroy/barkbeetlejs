{"ast":null,"code":"function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nimport React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport cn from 'classnames';\n/**\n * The `TileAddon` component is used to render either a `FontIcon` or an `Avatar`\n * next to the `ListTileText` for a `ListItem`.\n */\n\nvar TileAddon = function (_PureComponent) {\n  _inherits(TileAddon, _PureComponent);\n\n  function TileAddon() {\n    _classCallCheck(this, TileAddon);\n\n    return _possibleConstructorReturn(this, _PureComponent.apply(this, arguments));\n  }\n\n  TileAddon.prototype.render = function render() {\n    var _cn;\n\n    var _props = this.props,\n        icon = _props.icon,\n        avatar = _props.avatar,\n        active = _props.active,\n        activeClassName = _props.activeClassName,\n        style = _props.style,\n        className = _props.className;\n\n    if (!icon && !avatar) {\n      return null;\n    }\n\n    var avatarIcon = false;\n\n    if (avatar) {\n      var avatarChild = React.Children.only(avatar);\n\n      if (avatarChild.props.iconSized) {\n        avatarIcon = true;\n      }\n    }\n\n    return React.createElement('div', {\n      style: style,\n      className: cn('md-tile-addon', (_cn = {\n        'md-tile-addon--icon': icon || avatarIcon,\n        'md-tile-addon--avatar': avatar && !avatarIcon\n      }, _cn[activeClassName] = active, _cn), className)\n    }, icon || avatar);\n  };\n\n  return TileAddon;\n}(PureComponent);\n\nTileAddon.propTypes = {\n  style: PropTypes.object,\n  className: PropTypes.string,\n  active: PropTypes.bool,\n  activeClassName: PropTypes.string,\n  icon: PropTypes.node,\n  avatar: PropTypes.node\n};\nexport default TileAddon;","map":null,"metadata":{},"sourceType":"module"}