{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends2 = require('babel-runtime/helpers/extends');\n\nvar _extends3 = _interopRequireDefault(_extends2);\n\nvar _objectWithoutProperties2 = require('babel-runtime/helpers/objectWithoutProperties');\n\nvar _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _libs = require('../../libs');\n\nvar _calcTextareaHeight = require('./calcTextareaHeight');\n\nvar _calcTextareaHeight2 = _interopRequireDefault(_calcTextareaHeight);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar Input = function (_Component) {\n  (0, _inherits3.default)(Input, _Component);\n\n  function Input(props) {\n    (0, _classCallCheck3.default)(this, Input);\n\n    var _this = (0, _possibleConstructorReturn3.default)(this, (Input.__proto__ || Object.getPrototypeOf(Input)).call(this, props));\n\n    _this.state = {\n      textareaStyle: {\n        resize: props.resize\n      }\n    };\n    return _this;\n  }\n\n  (0, _createClass3.default)(Input, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      this.resizeTextarea();\n    }\n    /* <Instance Methods */\n\n  }, {\n    key: 'focus',\n    value: function focus() {\n      var _this2 = this;\n\n      setTimeout(function () {\n        (_this2.refs.input || _this2.refs.textarea).focus();\n      });\n    }\n  }, {\n    key: 'blur',\n    value: function blur() {\n      var _this3 = this;\n\n      setTimeout(function () {\n        (_this3.refs.input || _this3.refs.textarea).blur();\n      });\n    }\n    /* Instance Methods> */\n\n  }, {\n    key: 'fixControlledValue',\n    value: function fixControlledValue(value) {\n      if (typeof value === 'undefined' || value === null) {\n        return '';\n      }\n\n      return value;\n    }\n  }, {\n    key: 'handleChange',\n    value: function handleChange(e) {\n      var onChange = this.props.onChange;\n\n      if (onChange) {\n        onChange(e.target.value);\n      }\n\n      this.resizeTextarea();\n    }\n  }, {\n    key: 'handleFocus',\n    value: function handleFocus(e) {\n      var onFocus = this.props.onFocus;\n      if (onFocus) onFocus(e);\n    }\n  }, {\n    key: 'handleBlur',\n    value: function handleBlur(e) {\n      var onBlur = this.props.onBlur;\n      if (this.props.trim) this.handleTrim();\n      if (onBlur) onBlur(e);\n    }\n  }, {\n    key: 'handleTrim',\n    value: function handleTrim() {\n      this.refs.input.value = this.refs.input.value.trim();\n\n      if (this.props.onChange) {\n        // this's for controlled components\n        this.props.onChange(this.refs.input.value.trim());\n      }\n    }\n  }, {\n    key: 'handleIconClick',\n    value: function handleIconClick(e) {\n      if (this.props.onIconClick) {\n        this.props.onIconClick(e);\n      }\n    }\n  }, {\n    key: 'resizeTextarea',\n    value: function resizeTextarea() {\n      var _props = this.props,\n          autosize = _props.autosize,\n          type = _props.type;\n\n      if (!autosize || type !== 'textarea') {\n        return;\n      }\n\n      var minRows = autosize.minRows;\n      var maxRows = autosize.maxRows;\n      var textareaCalcStyle = (0, _calcTextareaHeight2.default)(this.refs.textarea, minRows, maxRows);\n      this.setState({\n        textareaStyle: Object.assign({}, this.state.textareaStyle, textareaCalcStyle)\n      });\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _props2 = this.props,\n          type = _props2.type,\n          size = _props2.size,\n          prepend = _props2.prepend,\n          append = _props2.append,\n          icon = _props2.icon,\n          autoComplete = _props2.autoComplete,\n          validating = _props2.validating,\n          rows = _props2.rows,\n          onMouseEnter = _props2.onMouseEnter,\n          onMouseLeave = _props2.onMouseLeave,\n          trim = _props2.trim,\n          otherProps = (0, _objectWithoutProperties3.default)(_props2, ['type', 'size', 'prepend', 'append', 'icon', 'autoComplete', 'validating', 'rows', 'onMouseEnter', 'onMouseLeave', 'trim']);\n      var classname = this.classNames(type === 'textarea' ? 'el-textarea' : 'el-input', size && 'el-input--' + size, {\n        'is-disabled': this.props.disabled,\n        'el-input-group': prepend || append,\n        'el-input-group--append': !!append,\n        'el-input-group--prepend': !!prepend\n      });\n\n      if ('value' in this.props) {\n        otherProps.value = this.fixControlledValue(this.props.value);\n        delete otherProps.defaultValue;\n      }\n\n      delete otherProps.resize;\n      delete otherProps.style;\n      delete otherProps.autosize;\n      delete otherProps.onIconClick;\n\n      if (type === 'textarea') {\n        return _react2.default.createElement('div', {\n          style: this.style(),\n          className: this.className(classname)\n        }, _react2.default.createElement('textarea', (0, _extends3.default)({}, otherProps, {\n          ref: 'textarea',\n          className: 'el-textarea__inner',\n          style: this.state.textareaStyle,\n          rows: rows,\n          onChange: this.handleChange.bind(this),\n          onFocus: this.handleFocus.bind(this),\n          onBlur: this.handleBlur.bind(this)\n        })));\n      } else {\n        return _react2.default.createElement('div', {\n          style: this.style(),\n          className: this.className(classname),\n          onMouseEnter: onMouseEnter,\n          onMouseLeave: onMouseLeave\n        }, prepend && _react2.default.createElement('div', {\n          className: 'el-input-group__prepend'\n        }, prepend), typeof icon === 'string' ? _react2.default.createElement('i', {\n          className: 'el-input__icon el-icon-' + icon,\n          onClick: this.handleIconClick.bind(this)\n        }, prepend) : icon, _react2.default.createElement('input', (0, _extends3.default)({}, otherProps, {\n          ref: 'input',\n          type: type,\n          className: 'el-input__inner',\n          autoComplete: autoComplete,\n          onChange: this.handleChange.bind(this),\n          onFocus: this.handleFocus.bind(this),\n          onBlur: this.handleBlur.bind(this)\n        })), validating && _react2.default.createElement('i', {\n          className: 'el-input__icon el-icon-loading'\n        }), append && _react2.default.createElement('div', {\n          className: 'el-input-group__append'\n        }, append));\n      }\n    }\n  }]);\n  return Input;\n}(_libs.Component);\n\nInput.defaultProps = {\n  type: 'text',\n  autosize: false,\n  rows: 2,\n  trim: false,\n  autoComplete: 'off'\n};\nvar _default = Input;\nexports.default = _default;\nInput.propTypes = {\n  // base\n  type: _libs.PropTypes.string,\n  icon: _libs.PropTypes.oneOfType([_libs.PropTypes.element, _libs.PropTypes.string]),\n  disabled: _libs.PropTypes.bool,\n  name: _libs.PropTypes.string,\n  placeholder: _libs.PropTypes.string,\n  readOnly: _libs.PropTypes.bool,\n  autoFocus: _libs.PropTypes.bool,\n  maxLength: _libs.PropTypes.number,\n  minLength: _libs.PropTypes.number,\n  defaultValue: _libs.PropTypes.any,\n  value: _libs.PropTypes.any,\n  trim: _libs.PropTypes.bool,\n  // type !== 'textarea'\n  size: _libs.PropTypes.oneOf(['large', 'small', 'mini']),\n  prepend: _libs.PropTypes.node,\n  append: _libs.PropTypes.node,\n  // type === 'textarea'\n  autosize: _libs.PropTypes.oneOfType([_libs.PropTypes.bool, _libs.PropTypes.object]),\n  rows: _libs.PropTypes.number,\n  resize: _libs.PropTypes.oneOf(['none', 'both', 'horizontal', 'vertical']),\n  // event\n  onFocus: _libs.PropTypes.func,\n  onBlur: _libs.PropTypes.func,\n  onChange: _libs.PropTypes.func,\n  onIconClick: _libs.PropTypes.func,\n  onMouseEnter: _libs.PropTypes.func,\n  onMouseLeave: _libs.PropTypes.func,\n  // autoComplete\n  autoComplete: _libs.PropTypes.string,\n  inputSelect: _libs.PropTypes.func,\n  // form related\n  form: _libs.PropTypes.string,\n  validating: _libs.PropTypes.bool\n};\n;\n\nvar _temp = function () {\n  if (typeof __REACT_HOT_LOADER__ === 'undefined') {\n    return;\n  }\n\n  __REACT_HOT_LOADER__.register(Input, 'Input', 'src/input/Input.jsx');\n\n  __REACT_HOT_LOADER__.register(_default, 'default', 'src/input/Input.jsx');\n}();\n\n;","map":null,"metadata":{},"sourceType":"script"}