{"ast":null,"code":"'use strict'; // based on http://www.compix.com/fileformattif.htm\n// TO-DO: support big-endian as well\n\nvar fs = require('fs');\n\nvar readUInt = require('../readUInt');\n\nfunction isTIFF(buffer) {\n  var hex4 = buffer.toString('hex', 0, 4);\n  return '49492a00' === hex4 || '4d4d002a' === hex4;\n} // Read IFD (image-file-directory) into a buffer\n\n\nfunction readIFD(buffer, filepath, isBigEndian) {\n  var ifdOffset = readUInt(buffer, 32, 4, isBigEndian); // read only till the end of the file\n\n  var bufferSize = 1024;\n  var fileSize = fs.statSync(filepath).size;\n\n  if (ifdOffset + bufferSize > fileSize) {\n    bufferSize = fileSize - ifdOffset - 10;\n  } // populate the buffer\n\n\n  var endBuffer = new Buffer(bufferSize);\n  var descriptor = fs.openSync(filepath, 'r');\n  fs.readSync(descriptor, endBuffer, 0, bufferSize, ifdOffset); // var ifdLength = readUInt(endBuffer, 16, 0, isBigEndian);\n\n  var ifdBuffer = endBuffer.slice(2); //, 2 + 12 * ifdLength);\n\n  return ifdBuffer;\n} // TIFF values seem to be messed up on Big-Endian, this helps\n\n\nfunction readValue(buffer, isBigEndian) {\n  var low = readUInt(buffer, 16, 8, isBigEndian);\n  var high = readUInt(buffer, 16, 10, isBigEndian);\n  return (high << 16) + low;\n} // move to the next tag\n\n\nfunction nextTag(buffer) {\n  if (buffer.length > 24) {\n    return buffer.slice(12);\n  }\n} // Extract IFD tags from TIFF metadata\n\n\nfunction extractTags(buffer, isBigEndian) {\n  var tags = {};\n  var code, type, length;\n\n  while (buffer && buffer.length) {\n    code = readUInt(buffer, 16, 0, isBigEndian);\n    type = readUInt(buffer, 16, 2, isBigEndian);\n    length = readUInt(buffer, 32, 4, isBigEndian); // 0 means end of IFD\n\n    if (code === 0) {\n      break;\n    } else {\n      // 256 is width, 257 is height\n      // if (code === 256 || code === 257) {\n      if (length === 1 && (type === 3 || type === 4)) {\n        tags[code] = readValue(buffer, isBigEndian);\n      } // move to the next tag\n\n\n      buffer = nextTag(buffer);\n    }\n  }\n\n  return tags;\n} // Test if the TIFF is Big Endian or Little Endian\n\n\nfunction determineEndianness(buffer) {\n  var signature = buffer.toString('ascii', 0, 2);\n\n  if ('II' === signature) {\n    return 'LE';\n  } else if ('MM' === signature) {\n    return 'BE';\n  }\n}\n\nfunction calculate(buffer, filepath) {\n  if (!filepath) {\n    throw new TypeError('Tiff doesn\\'t support buffer');\n  } // Determine BE/LE\n\n\n  var isBigEndian = determineEndianness(buffer) === 'BE'; // read the IFD\n\n  var ifdBuffer = readIFD(buffer, filepath, isBigEndian); // extract the tags from the IFD\n\n  var tags = extractTags(ifdBuffer, isBigEndian);\n  var width = tags[256];\n  var height = tags[257];\n\n  if (!width || !height) {\n    throw new TypeError('Invalid Tiff, missing tags');\n  }\n\n  return {\n    'width': width,\n    'height': height\n  };\n}\n\nmodule.exports = {\n  'detect': isTIFF,\n  'calculate': calculate\n};","map":null,"metadata":{},"sourceType":"script"}