{"ast":null,"code":"import _toConsumableArray from \"/Users/leomcelroy/Desktop/barkBeetleEverything/barkbeetle_js_real/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\n// makerjs model, depth, params -> pocket toolpath\nimport * as params from '../parameters.js';\nimport * as mjs from 'makerjs';\n\nvar pocket = function pocket(model) {\n  //let p = model.models.profile;\n  var p = model;\n  var outline = mjs.model.outline(p, params.compensatedRadius, 1, true); //third parameter is what type of corners, 0 (rounded) by default\n  //let chains = mjs.model.findChains(expansion);\n\n  var chain = mjs.model.findSingleChain(outline);\n  var divisions = Math.floor(chain.pathLength / params.minimumSpacing);\n  var spacing = chain.pathLength / divisions;\n  var keyPoints = mjs.chain.toPoints(chain, spacing); // let scaleFactor = 10;\n  // let scaleXY = keyPoints.map(p => [p[0] * scaleFactor, p[1] * scaleFactor]);\n\n  var gcodePoints = keyPoints.map(function (p) {\n    return \"G1 X\".concat(p[0], \" Y\").concat(p[1], \" F\").concat(params.feedRate);\n  });\n  var gcode = JSON.parse(JSON.stringify(gcodePoints));\n  var firstPoint = scaleXY[0];\n  var paths = params.depthOfPasses.map(function (p, i) {\n    return [\"G1 Z\".concat(params.depthOfPasses[i], \" F12.0\")].concat(_toConsumableArray(gcode), [\"G1 X\".concat(firstPoint[0], \" Y\").concat(firstPoint[1], \" F\").concat(params.feedRate)]);\n  });\n  paths = paths.flat(1);\n  gcode = [params.units, \"G90\", \"G1 Z\".concat(params.jogHeight, \" F9.0\"), \"G0 X\".concat(firstPoint[0], \" Y\").concat(firstPoint[1])].concat(_toConsumableArray(paths)); // write to a new file named\n\n  var filename = 'testGcodePocket.nc';\n  var text = gcode.join('\\n'); // console.log(\"pocket\", outline);\n\n  return {\n    drawing: outline,\n    gcode: text,\n    filename: filename\n  };\n};\n\nexport { pocket };","map":{"version":3,"sources":["/Users/leomcelroy/Desktop/barkBeetleEverything/barkbeetle_js_real/src/toolpaths/pocket.js"],"names":["params","mjs","pocket","model","p","outline","compensatedRadius","chain","findSingleChain","divisions","Math","floor","pathLength","minimumSpacing","spacing","keyPoints","toPoints","gcodePoints","map","feedRate","gcode","JSON","parse","stringify","firstPoint","scaleXY","paths","depthOfPasses","i","flat","units","jogHeight","filename","text","join","drawing"],"mappings":";AAAA;AAEA,OAAO,KAAKA,MAAZ,MAAwB,kBAAxB;AACA,OAAO,KAAKC,GAAZ,MAAqB,SAArB;;AAEA,IAAMC,MAAM,GAAG,SAATA,MAAS,CAACC,KAAD,EAAW;AACxB;AACA,MAAIC,CAAC,GAAGD,KAAR;AAEA,MAAIE,OAAO,GAAGJ,GAAG,CAACE,KAAJ,CAAUE,OAAV,CAAkBD,CAAlB,EAAqBJ,MAAM,CAACM,iBAA5B,EAA+C,CAA/C,EAAkD,IAAlD,CAAd,CAJwB,CAI+C;AACvE;;AACA,MAAIC,KAAK,GAAGN,GAAG,CAACE,KAAJ,CAAUK,eAAV,CAA0BH,OAA1B,CAAZ;AAEA,MAAII,SAAS,GAAGC,IAAI,CAACC,KAAL,CAAWJ,KAAK,CAACK,UAAN,GAAmBZ,MAAM,CAACa,cAArC,CAAhB;AACA,MAAIC,OAAO,GAAGP,KAAK,CAACK,UAAN,GAAmBH,SAAjC;AAEA,MAAIM,SAAS,GAAGd,GAAG,CAACM,KAAJ,CAAUS,QAAV,CAAmBT,KAAnB,EAA0BO,OAA1B,CAAhB,CAXwB,CAaxB;AACA;;AAEA,MAAIG,WAAW,GAAGF,SAAS,CAACG,GAAV,CAAc,UAAAd,CAAC;AAAA,yBAAWA,CAAC,CAAC,CAAD,CAAZ,eAAoBA,CAAC,CAAC,CAAD,CAArB,eAA6BJ,MAAM,CAACmB,QAApC;AAAA,GAAf,CAAlB;AACA,MAAIC,KAAK,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAeN,WAAf,CAAX,CAAZ;AAEA,MAAIO,UAAU,GAAGC,OAAO,CAAC,CAAD,CAAxB;AAEA,MAAIC,KAAK,GAAG1B,MAAM,CAAC2B,aAAP,CAAqBT,GAArB,CAAyB,UAACd,CAAD,EAAGwB,CAAH;AAAA,0BAAiB5B,MAAM,CAAC2B,aAAP,CAAqBC,CAArB,CAAjB,uCAAqDR,KAArD,kBAAmEI,UAAU,CAAC,CAAD,CAA7E,eAAqFA,UAAU,CAAC,CAAD,CAA/F,eAAuGxB,MAAM,CAACmB,QAA9G;AAAA,GAAzB,CAAZ;AACAO,EAAAA,KAAK,GAAGA,KAAK,CAACG,IAAN,CAAW,CAAX,CAAR;AAEAT,EAAAA,KAAK,IACHpB,MAAM,CAAC8B,KADJ,EAEH,KAFG,gBAGI9B,MAAM,CAAC+B,SAHX,0BAIIP,UAAU,CAAC,CAAD,CAJd,eAIsBA,UAAU,CAAC,CAAD,CAJhC,6BAKAE,KALA,EAAL,CAxBwB,CAgCxB;;AACA,MAAIM,QAAQ,GAAG,oBAAf;AAEA,MAAIC,IAAI,GAAGb,KAAK,CAACc,IAAN,CAAW,IAAX,CAAX,CAnCwB,CAqCxB;;AAEA,SAAO;AAACC,IAAAA,OAAO,EAAE9B,OAAV;AAAmBe,IAAAA,KAAK,EAAEa,IAA1B;AAAgCD,IAAAA,QAAQ,EAARA;AAAhC,GAAP;AACD,CAxCD;;AA2CA,SAAQ9B,MAAR","sourcesContent":["// makerjs model, depth, params -> pocket toolpath\n\nimport * as params from '../parameters.js'\nimport * as mjs from 'makerjs';\n\nconst pocket = (model) => {\n  //let p = model.models.profile;\n  let p = model;\n\n  let outline = mjs.model.outline(p, params.compensatedRadius, 1, true); //third parameter is what type of corners, 0 (rounded) by default\n  //let chains = mjs.model.findChains(expansion);\n  let chain = mjs.model.findSingleChain(outline);\n\n  var divisions = Math.floor(chain.pathLength / params.minimumSpacing);\n  var spacing = chain.pathLength / divisions;\n\n  let keyPoints = mjs.chain.toPoints(chain, spacing);\n\n  // let scaleFactor = 10;\n  // let scaleXY = keyPoints.map(p => [p[0] * scaleFactor, p[1] * scaleFactor]);\n\n  let gcodePoints = keyPoints.map(p => `G1 X${p[0]} Y${p[1]} F${params.feedRate}`)\n  let gcode = JSON.parse(JSON.stringify(gcodePoints));\n\n  let firstPoint = scaleXY[0];\n\n  let paths = params.depthOfPasses.map((p,i) => [`G1 Z${params.depthOfPasses[i]} F12.0`, ...gcode, `G1 X${firstPoint[0]} Y${firstPoint[1]} F${params.feedRate}`])\n  paths = paths.flat(1);\n\n  gcode = [\n    params.units,\n    \"G90\",\n    `G1 Z${params.jogHeight} F9.0`,\n    `G0 X${firstPoint[0]} Y${firstPoint[1]}`,\n    ...paths\n  ]\n\n  // write to a new file named\n  let filename = 'testGcodePocket.nc';\n\n  let text = gcode.join('\\n');\n\n  // console.log(\"pocket\", outline);\n\n  return {drawing: outline, gcode: text, filename};\n};\n\n\nexport {pocket};\n"]},"metadata":{},"sourceType":"module"}