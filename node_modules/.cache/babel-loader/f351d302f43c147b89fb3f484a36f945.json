{"ast":null,"code":"function _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { toSVG } from 'transformation-matrix'; //events\n\nimport eventFactory from './events/event-factory'; //features\n\nimport { pan as _pan } from './features/pan';\nimport { getDefaultValue, isValueValid, reset as _reset, setPointOnViewerCenter as _setPointOnViewerCenter, setSVGSize, setViewerSize, setZoomLevels } from './features/common';\nimport { onDoubleClick as _onDoubleClick, onInterval, onMouseDown as _onMouseDown, onMouseEnterOrLeave, onMouseMove as _onMouseMove, onMouseUp as _onMouseUp, onWheel as _onWheel } from './features/interactions';\nimport { onTouchCancel as _onTouchCancel, onTouchEnd as _onTouchEnd, onTouchMove as _onTouchMove, onTouchStart as _onTouchStart } from './features/interactions-touch';\nimport { fitSelection as _fitSelection, fitToViewer as _fitToViewer, zoom as _zoom, zoomOnViewerCenter as _zoomOnViewerCenter } from './features/zoom';\nimport { closeMiniature as _closeMiniature, openMiniature as _openMiniature } from './features/miniature'; //ui\n\nimport cursorPolyfill from './ui/cursor-polyfill';\nimport BorderGradient from './ui/border-gradient';\nimport Selection from './ui/selection';\nimport Toolbar from './ui-toolbar/toolbar';\nimport detectTouch from './ui/detect-touch';\nimport Miniature from './ui-miniature/miniature';\nimport { ACTION_PAN, ACTION_ZOOM, ALIGN_BOTTOM, ALIGN_CENTER, ALIGN_LEFT, ALIGN_RIGHT, ALIGN_TOP, MODE_IDLE, MODE_PANNING, MODE_ZOOMING, POSITION_BOTTOM, POSITION_LEFT, POSITION_NONE, POSITION_RIGHT, POSITION_TOP, TOOL_AUTO, TOOL_NONE, TOOL_PAN, TOOL_ZOOM_IN, TOOL_ZOOM_OUT } from './constants';\nimport { printMigrationTipsRelatedToProps } from \"./migration-tips\";\n\nvar ReactSVGPanZoom =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(ReactSVGPanZoom, _React$Component);\n\n  function ReactSVGPanZoom(props, context) {\n    var _this;\n\n    _classCallCheck(this, ReactSVGPanZoom);\n\n    var value = props.value,\n        viewerWidth = props.width,\n        viewerHeight = props.height,\n        scaleFactorMin = props.scaleFactorMin,\n        scaleFactorMax = props.scaleFactorMax,\n        children = props.children;\n    var _children$props = children.props,\n        SVGWidth = _children$props.width,\n        SVGHeight = _children$props.height;\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ReactSVGPanZoom).call(this, props, context));\n    _this.ViewerDOM = null;\n    _this.state = {\n      pointerX: null,\n      pointerY: null,\n      defaultValue: getDefaultValue(viewerWidth, viewerHeight, SVGWidth, SVGHeight, scaleFactorMin, scaleFactorMax)\n    };\n    _this.autoPanLoop = _this.autoPanLoop.bind(_assertThisInitialized(_this));\n\n    if (process.env.NODE_ENV !== 'production') {\n      printMigrationTipsRelatedToProps(props);\n    }\n\n    return _this;\n  }\n  /** React hooks **/\n\n\n  _createClass(ReactSVGPanZoom, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var value = this.getValue();\n      var props = this.props;\n      var nextValue = value;\n      var needUpdate = false;\n\n      if (process.env.NODE_ENV !== 'production') {\n        printMigrationTipsRelatedToProps(props);\n      }\n\n      if (prevProps.width !== props.width || prevProps.height !== props.height) {\n        nextValue = setViewerSize(nextValue, props.width, props.height);\n        needUpdate = true;\n      }\n\n      var _props$children$props = props.children.props,\n          SVGWidth = _props$children$props.width,\n          SVGHeight = _props$children$props.height;\n      var _prevProps$children$p = prevProps.children.props,\n          prevSVGWidth = _prevProps$children$p.width,\n          prevSVGHeight = _prevProps$children$p.height;\n\n      if (prevSVGWidth !== SVGWidth || prevSVGHeight !== SVGHeight) {\n        nextValue = setSVGSize(nextValue, SVGWidth, SVGHeight);\n        needUpdate = true;\n      }\n\n      if (prevProps.scaleFactorMin !== props.scaleFactorMin || prevProps.scaleFactorMax !== props.scaleFactorMax) {\n        nextValue = setZoomLevels(nextValue, props.scaleFactorMin, props.scaleFactorMax);\n        needUpdate = true;\n      }\n\n      if (needUpdate) {\n        this.setValue(nextValue);\n      }\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.autoPanIsRunning = true;\n      requestAnimationFrame(this.autoPanLoop);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.autoPanIsRunning = false;\n    }\n    /** ReactSVGPanZoom handlers **/\n\n  }, {\n    key: \"getValue\",\n    value: function getValue() {\n      if (isValueValid(this.props.value)) return this.props.value;\n      return this.state.defaultValue;\n    }\n  }, {\n    key: \"getTool\",\n    value: function getTool() {\n      if (this.props.tool) return this.props.tool;\n      return TOOL_NONE;\n    }\n  }, {\n    key: \"setValue\",\n    value: function setValue(nextValue) {\n      var _this$props = this.props,\n          onChangeValue = _this$props.onChangeValue,\n          onZoom = _this$props.onZoom,\n          onPan = _this$props.onPan;\n      if (onChangeValue) onChangeValue(nextValue);\n\n      if (nextValue.lastAction) {\n        if (onZoom && nextValue.lastAction === ACTION_ZOOM) onZoom(nextValue);\n        if (onPan && nextValue.lastAction === ACTION_PAN) onPan(nextValue);\n      }\n    }\n    /** ReactSVGPanZoom methods **/\n\n  }, {\n    key: \"pan\",\n    value: function pan(SVGDeltaX, SVGDeltaY) {\n      var nextValue = _pan(this.getValue(), SVGDeltaX, SVGDeltaY);\n\n      this.setValue(nextValue);\n    }\n  }, {\n    key: \"zoom\",\n    value: function zoom(SVGPointX, SVGPointY, scaleFactor) {\n      var nextValue = _zoom(this.getValue(), SVGPointX, SVGPointY, scaleFactor);\n\n      this.setValue(nextValue);\n    }\n  }, {\n    key: \"fitSelection\",\n    value: function fitSelection(selectionSVGPointX, selectionSVGPointY, selectionWidth, selectionHeight) {\n      var nextValue = _fitSelection(this.getValue(), selectionSVGPointX, selectionSVGPointY, selectionWidth, selectionHeight);\n\n      this.setValue(nextValue);\n    }\n  }, {\n    key: \"fitToViewer\",\n    value: function fitToViewer() {\n      var SVGAlignX = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : ALIGN_LEFT;\n      var SVGAlignY = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ALIGN_TOP;\n\n      var nextValue = _fitToViewer(this.getValue(), SVGAlignX, SVGAlignY);\n\n      this.setValue(nextValue);\n    }\n  }, {\n    key: \"zoomOnViewerCenter\",\n    value: function zoomOnViewerCenter(scaleFactor) {\n      var nextValue = _zoomOnViewerCenter(this.getValue(), scaleFactor);\n\n      this.setValue(nextValue);\n    }\n  }, {\n    key: \"setPointOnViewerCenter\",\n    value: function setPointOnViewerCenter(SVGPointX, SVGPointY, zoomLevel) {\n      var nextValue = _setPointOnViewerCenter(this.getValue(), SVGPointX, SVGPointY, zoomLevel);\n\n      this.setValue(nextValue);\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      var nextValue = _reset(this.getValue());\n\n      this.setValue(nextValue);\n    }\n  }, {\n    key: \"openMiniature\",\n    value: function openMiniature() {\n      var nextValue = _openMiniature(this.getValue());\n\n      this.setValue(nextValue);\n    }\n  }, {\n    key: \"closeMiniature\",\n    value: function closeMiniature() {\n      var nextValue = _closeMiniature(this.getValue());\n\n      this.setValue(nextValue);\n    }\n    /** ReactSVGPanZoom internals **/\n\n  }, {\n    key: \"handleViewerEvent\",\n    value: function handleViewerEvent(event) {\n      var props = this.props,\n          ViewerDOM = this.ViewerDOM;\n      if (!([TOOL_NONE, TOOL_AUTO].indexOf(this.getTool()) >= 0)) return;\n      if (event.target === ViewerDOM) return;\n      var eventsHandler = {\n        click: props.onClick,\n        dblclick: props.onDoubleClick,\n        mousemove: props.onMouseMove,\n        mouseup: props.onMouseUp,\n        mousedown: props.onMouseDown,\n        touchstart: props.onTouchStart,\n        touchmove: props.onTouchMove,\n        touchend: props.onTouchEnd,\n        touchcancel: props.onTouchCancel\n      };\n      var onEventHandler = eventsHandler[event.type];\n      if (!onEventHandler) return;\n      onEventHandler(eventFactory(event, props.value, ViewerDOM));\n    }\n  }, {\n    key: \"autoPanLoop\",\n    value: function autoPanLoop() {\n      var coords = {\n        x: this.state.pointerX,\n        y: this.state.pointerY\n      };\n      var nextValue = onInterval(null, this.ViewerDOM, this.getTool(), this.getValue(), this.props, coords);\n\n      if (this.getValue() !== nextValue) {\n        this.setValue(nextValue);\n      }\n\n      if (this.autoPanIsRunning) {\n        requestAnimationFrame(this.autoPanLoop);\n      }\n    }\n    /** React renderer **/\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var props = this.props,\n          _this$state = this.state,\n          pointerX = _this$state.pointerX,\n          pointerY = _this$state.pointerY;\n      var tool = this.getTool();\n      var value = this.getValue();\n      var CustomToolbar = props.customToolbar,\n          CustomMiniature = props.customMiniature;\n      var panningWithToolAuto = tool === TOOL_AUTO && value.mode === MODE_PANNING && value.startX !== value.endX && value.startY !== value.endY;\n      var cursor;\n      if (tool === TOOL_PAN) cursor = cursorPolyfill(value.mode === MODE_PANNING ? 'grabbing' : 'grab');\n      if (tool === TOOL_ZOOM_IN) cursor = cursorPolyfill('zoom-in');\n      if (tool === TOOL_ZOOM_OUT) cursor = cursorPolyfill('zoom-out');\n      if (panningWithToolAuto) cursor = cursorPolyfill('grabbing');\n      var blockChildEvents = [TOOL_PAN, TOOL_ZOOM_IN, TOOL_ZOOM_OUT].indexOf(tool) >= 0;\n      blockChildEvents = blockChildEvents || panningWithToolAuto;\n      var touchAction = this.props.detectPinchGesture || [TOOL_PAN, TOOL_AUTO].indexOf(this.getTool()) !== -1 ? 'none' : undefined;\n      var style = {\n        display: 'block',\n        cursor: cursor,\n        touchAction: touchAction\n      };\n      return React.createElement(\"div\", {\n        style: _objectSpread({\n          position: \"relative\",\n          width: value.viewerWidth,\n          height: value.viewerHeight\n        }, props.style),\n        className: this.props.className\n      }, React.createElement(\"svg\", {\n        ref: function ref(ViewerDOM) {\n          return _this2.ViewerDOM = ViewerDOM;\n        },\n        width: value.viewerWidth,\n        height: value.viewerHeight,\n        style: style,\n        onMouseDown: function onMouseDown(event) {\n          var nextValue = _onMouseDown(event, _this2.ViewerDOM, _this2.getTool(), _this2.getValue(), _this2.props);\n\n          if (_this2.getValue() !== nextValue) _this2.setValue(nextValue);\n\n          _this2.handleViewerEvent(event);\n        },\n        onMouseMove: function onMouseMove(event) {\n          var _this2$ViewerDOM$getB = _this2.ViewerDOM.getBoundingClientRect(),\n              left = _this2$ViewerDOM$getB.left,\n              top = _this2$ViewerDOM$getB.top;\n\n          var x = event.clientX - Math.round(left);\n          var y = event.clientY - Math.round(top);\n\n          var nextValue = _onMouseMove(event, _this2.ViewerDOM, _this2.getTool(), _this2.getValue(), _this2.props, {\n            x: x,\n            y: y\n          });\n\n          if (_this2.getValue() !== nextValue) _this2.setValue(nextValue);\n\n          _this2.setState({\n            pointerX: x,\n            pointerY: y\n          });\n\n          _this2.handleViewerEvent(event);\n        },\n        onMouseUp: function onMouseUp(event) {\n          var nextValue = _onMouseUp(event, _this2.ViewerDOM, _this2.getTool(), _this2.getValue(), _this2.props);\n\n          if (_this2.getValue() !== nextValue) _this2.setValue(nextValue);\n\n          _this2.handleViewerEvent(event);\n        },\n        onClick: function onClick(event) {\n          _this2.handleViewerEvent(event);\n        },\n        onDoubleClick: function onDoubleClick(event) {\n          var nextValue = _onDoubleClick(event, _this2.ViewerDOM, _this2.getTool(), _this2.getValue(), _this2.props);\n\n          if (_this2.getValue() !== nextValue) _this2.setValue(nextValue);\n\n          _this2.handleViewerEvent(event);\n        },\n        onWheel: function onWheel(event) {\n          var nextValue = _onWheel(event, _this2.ViewerDOM, _this2.getTool(), _this2.getValue(), _this2.props);\n\n          if (_this2.getValue() !== nextValue) _this2.setValue(nextValue);\n        },\n        onMouseEnter: function onMouseEnter(event) {\n          if (detectTouch()) return;\n          var nextValue = onMouseEnterOrLeave(event, _this2.ViewerDOM, _this2.getTool(), _this2.getValue(), _this2.props);\n          if (_this2.getValue() !== nextValue) _this2.setValue(nextValue);\n        },\n        onMouseLeave: function onMouseLeave(event) {\n          var nextValue = onMouseEnterOrLeave(event, _this2.ViewerDOM, _this2.getTool(), _this2.getValue(), _this2.props);\n          if (_this2.getValue() !== nextValue) _this2.setValue(nextValue);\n        },\n        onTouchStart: function onTouchStart(event) {\n          var nextValue = _onTouchStart(event, _this2.ViewerDOM, _this2.getTool(), _this2.getValue(), _this2.props);\n\n          if (_this2.getValue() !== nextValue) _this2.setValue(nextValue);\n\n          _this2.handleViewerEvent(event);\n        },\n        onTouchMove: function onTouchMove(event) {\n          var nextValue = _onTouchMove(event, _this2.ViewerDOM, _this2.getTool(), _this2.getValue(), _this2.props);\n\n          if (_this2.getValue() !== nextValue) _this2.setValue(nextValue);\n\n          _this2.handleViewerEvent(event);\n        },\n        onTouchEnd: function onTouchEnd(event) {\n          var nextValue = _onTouchEnd(event, _this2.ViewerDOM, _this2.getTool(), _this2.getValue(), _this2.props);\n\n          if (_this2.getValue() !== nextValue) _this2.setValue(nextValue);\n\n          _this2.handleViewerEvent(event);\n        },\n        onTouchCancel: function onTouchCancel(event) {\n          var nextValue = _onTouchCancel(event, _this2.ViewerDOM, _this2.getTool(), _this2.getValue(), _this2.props);\n\n          if (_this2.getValue() !== nextValue) _this2.setValue(nextValue);\n\n          _this2.handleViewerEvent(event);\n        }\n      }, React.createElement(\"rect\", {\n        fill: props.background,\n        x: 0,\n        y: 0,\n        width: value.viewerWidth,\n        height: value.viewerHeight,\n        style: {\n          pointerEvents: \"none\"\n        }\n      }), React.createElement(\"g\", {\n        transform: toSVG(value),\n        style: blockChildEvents ? {\n          pointerEvents: \"none\"\n        } : {}\n      }, React.createElement(\"rect\", {\n        fill: this.props.SVGBackground,\n        style: this.props.SVGStyle,\n        x: 0,\n        y: 0,\n        width: value.SVGWidth,\n        height: value.SVGHeight\n      }), React.createElement(\"g\", null, props.children.props.children)), !([TOOL_NONE, TOOL_AUTO].indexOf(tool) >= 0 && props.detectAutoPan && value.focus) ? null : React.createElement(\"g\", {\n        style: {\n          pointerEvents: \"none\"\n        }\n      }, !(pointerY <= 20) ? null : React.createElement(BorderGradient, {\n        direction: POSITION_TOP,\n        width: value.viewerWidth,\n        height: value.viewerHeight\n      }), !(value.viewerWidth - pointerX <= 20) ? null : React.createElement(BorderGradient, {\n        direction: POSITION_RIGHT,\n        width: value.viewerWidth,\n        height: value.viewerHeight\n      }), !(value.viewerHeight - pointerY <= 20) ? null : React.createElement(BorderGradient, {\n        direction: POSITION_BOTTOM,\n        width: value.viewerWidth,\n        height: value.viewerHeight\n      }), !(value.focus && pointerX <= 20) ? null : React.createElement(BorderGradient, {\n        direction: POSITION_LEFT,\n        width: value.viewerWidth,\n        height: value.viewerHeight\n      })), !(value.mode === MODE_ZOOMING) ? null : React.createElement(Selection, {\n        startX: value.startX,\n        startY: value.startY,\n        endX: value.endX,\n        endY: value.endY\n      })), props.toolbarProps.position === POSITION_NONE ? null : React.createElement(CustomToolbar, _extends({}, this.props.toolbarProps, {\n        value: value,\n        onChangeValue: function onChangeValue(value) {\n          return _this2.setValue(value);\n        },\n        tool: tool,\n        onChangeTool: function onChangeTool(tool) {\n          return _this2.props.onChangeTool(tool);\n        }\n      })), props.miniatureProps.position === POSITION_NONE ? null : React.createElement(CustomMiniature, _extends({}, this.props.miniatureProps, {\n        value: value,\n        onChangeValue: function onChangeValue(value) {\n          return _this2.setValue(value);\n        },\n        SVGBackground: this.props.SVGBackground\n      }), props.children.props.children));\n    }\n  }]);\n\n  return ReactSVGPanZoom;\n}(React.Component);\n\nexport { ReactSVGPanZoom as default };\nReactSVGPanZoom.propTypes = {\n  /**************************************************************************/\n\n  /*  Viewer configuration                                                  */\n\n  /**************************************************************************/\n  //width of the viewer displayed on screen\n  width: PropTypes.number.isRequired,\n  //height of the viewer displayed on screen\n  height: PropTypes.number.isRequired,\n  //value of the viewer (current camera view)\n  value: PropTypes.oneOfType([PropTypes.object, PropTypes.shape({\n    version: PropTypes.oneOf([2]).isRequired,\n    mode: PropTypes.oneOf([MODE_IDLE, MODE_PANNING, MODE_ZOOMING]).isRequired,\n    focus: PropTypes.bool.isRequired,\n    a: PropTypes.number.isRequired,\n    b: PropTypes.number.isRequired,\n    c: PropTypes.number.isRequired,\n    d: PropTypes.number.isRequired,\n    e: PropTypes.number.isRequired,\n    f: PropTypes.number.isRequired,\n    viewerWidth: PropTypes.number.isRequired,\n    viewerHeight: PropTypes.number.isRequired,\n    SVGWidth: PropTypes.number.isRequired,\n    SVGHeight: PropTypes.number.isRequired,\n    startX: PropTypes.number,\n    startY: PropTypes.number,\n    endX: PropTypes.number,\n    endY: PropTypes.number,\n    miniatureOpen: PropTypes.bool.isRequired\n  })]).isRequired,\n  //handler something changed\n  onChangeValue: PropTypes.func.isRequired,\n  //current active tool (TOOL_NONE, TOOL_PAN, TOOL_ZOOM_IN, TOOL_ZOOM_OUT)\n  tool: PropTypes.oneOf([TOOL_AUTO, TOOL_NONE, TOOL_PAN, TOOL_ZOOM_IN, TOOL_ZOOM_OUT]).isRequired,\n  //handler tool changed\n  onChangeTool: PropTypes.func.isRequired,\n\n  /**************************************************************************/\n\n  /* Customize style                                                        */\n\n  /**************************************************************************/\n  //background of the viewer\n  background: PropTypes.string,\n  //background of the svg\n  SVGBackground: PropTypes.string,\n  //style of the svg\n  SVGStyle: PropTypes.object,\n  //CSS style of the Viewer\n  style: PropTypes.object,\n  //className of the Viewer\n  className: PropTypes.string,\n\n  /**************************************************************************/\n\n  /* Detect events                                                          */\n\n  /**************************************************************************/\n  //perform zoom operation on mouse scroll\n  detectWheel: PropTypes.bool,\n  //perform PAN if the mouse is on viewer border\n  detectAutoPan: PropTypes.bool,\n  //perform zoom operation on pinch gesture\n  detectPinchGesture: PropTypes.bool,\n  //toolbar position\n  toolbarPosition: PropTypes.oneOf([POSITION_NONE, POSITION_TOP, POSITION_RIGHT, POSITION_BOTTOM, POSITION_LEFT]),\n  //handler zoom level changed\n  onZoom: PropTypes.func,\n  //handler pan action performed\n  onPan: PropTypes.func,\n  //handler click\n  onClick: PropTypes.func,\n  //handler double click\n  onDoubleClick: PropTypes.func,\n  //handler mouseup\n  onMouseUp: PropTypes.func,\n  //handler mousemove\n  onMouseMove: PropTypes.func,\n  //handler mousedown\n  onMouseDown: PropTypes.func,\n\n  /**************************************************************************/\n\n  /* Some advanced configurations                                           */\n\n  /**************************************************************************/\n  //if disabled the user can move the image outside the viewer\n  preventPanOutside: PropTypes.bool,\n  //how much scale in or out\n  scaleFactor: PropTypes.number,\n  //how much scale in or out on mouse wheel (requires detectWheel enabled)\n  scaleFactorOnWheel: PropTypes.number,\n  // maximum amount of scale a user can zoom in to\n  scaleFactorMax: PropTypes.number,\n  // minimum amount of a scale a user can zoom out of\n  scaleFactorMin: PropTypes.number,\n  //modifier keys //https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/getModifierState\n  modifierKeys: PropTypes.array,\n  //Turn off zoom on double click\n  disableDoubleClickZoomWithToolAuto: PropTypes.bool,\n\n  /**************************************************************************/\n\n  /* Miniature configurations                                                 */\n\n  /**************************************************************************/\n  //override miniature component\n  customMiniature: PropTypes.oneOfType([PropTypes.element, PropTypes.func]),\n  //miniature props\n  miniatureProps: PropTypes.shape({\n    position: PropTypes.oneOf([POSITION_NONE, POSITION_RIGHT, POSITION_LEFT]),\n    background: PropTypes.string,\n    width: PropTypes.number,\n    height: PropTypes.number\n  }),\n\n  /**************************************************************************/\n\n  /* Toolbar configurations                                                 */\n\n  /**************************************************************************/\n  //override toolbar component\n  customToolbar: PropTypes.oneOfType([PropTypes.element, PropTypes.func]),\n  //toolbar props\n  toolbarProps: PropTypes.shape({\n    position: PropTypes.oneOf([POSITION_NONE, POSITION_TOP, POSITION_RIGHT, POSITION_BOTTOM, POSITION_LEFT]),\n    SVGAlignX: PropTypes.oneOf([ALIGN_CENTER, ALIGN_LEFT, ALIGN_RIGHT]),\n    SVGAlignY: PropTypes.oneOf([ALIGN_CENTER, ALIGN_TOP, ALIGN_BOTTOM])\n  }),\n\n  /**************************************************************************/\n\n  /* Children Check                                                         */\n\n  /**************************************************************************/\n  //accept only one node SVG\n  children: function children(props, propName, componentName) {\n    // Only accept a single child, of the appropriate type\n    //credits: http://www.mattzabriskie.com/blog/react-validating-children\n    var prop = props[propName];\n    var types = ['svg'];\n\n    if (React.Children.count(prop) !== 1 || types.indexOf(prop.type) === -1) {\n      return new Error('`' + componentName + '` ' + 'should have a single child of the following types: ' + ' `' + types.join('`, `') + '`.');\n    }\n\n    if (!prop.props.hasOwnProperty('width') || !prop.props.hasOwnProperty('height')) {\n      return new Error('SVG should have props `width` and `height`');\n    }\n  }\n};\nReactSVGPanZoom.defaultProps = {\n  style: {},\n  background: \"#616264\",\n  SVGBackground: \"#fff\",\n  SVGStyle: {},\n  detectWheel: true,\n  detectAutoPan: true,\n  detectPinchGesture: true,\n  modifierKeys: [\"Alt\", \"Shift\", \"Control\"],\n  preventPanOutside: true,\n  scaleFactor: 1.1,\n  scaleFactorOnWheel: 1.06,\n  disableZoomWithToolAuto: false,\n  onZoom: null,\n  onPan: null,\n  customToolbar: Toolbar,\n  toolbarProps: {},\n  customMiniature: Miniature,\n  miniatureProps: {}\n};","map":null,"metadata":{},"sourceType":"module"}