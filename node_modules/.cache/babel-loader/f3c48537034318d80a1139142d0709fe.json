{"ast":null,"code":"/*\n * Copyright 2015 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the terms of the LICENSE file distributed with this project.\n */\nimport * as tslib_1 from \"tslib\";\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport * as Classes from \"../../common/classes\";\nimport { DISPLAYNAME_PREFIX } from \"../../common/props\";\nimport { isFunction } from \"../../common/utils\";\nimport { TreeNode } from \"./treeNode\";\n\nvar Tree =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(Tree, _super);\n\n  function Tree() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.nodeRefs = {};\n\n    _this.handleNodeCollapse = function (node, e) {\n      _this.handlerHelper(_this.props.onNodeCollapse, node, e);\n    };\n\n    _this.handleNodeClick = function (node, e) {\n      _this.handlerHelper(_this.props.onNodeClick, node, e);\n    };\n\n    _this.handleContentRef = function (node, element) {\n      if (element != null) {\n        _this.nodeRefs[node.props.id] = element;\n      } else {\n        // don't want our object to get bloated with old keys\n        delete _this.nodeRefs[node.props.id];\n      }\n    };\n\n    _this.handleNodeContextMenu = function (node, e) {\n      _this.handlerHelper(_this.props.onNodeContextMenu, node, e);\n    };\n\n    _this.handleNodeDoubleClick = function (node, e) {\n      _this.handlerHelper(_this.props.onNodeDoubleClick, node, e);\n    };\n\n    _this.handleNodeExpand = function (node, e) {\n      _this.handlerHelper(_this.props.onNodeExpand, node, e);\n    };\n\n    _this.handleNodeMouseEnter = function (node, e) {\n      _this.handlerHelper(_this.props.onNodeMouseEnter, node, e);\n    };\n\n    _this.handleNodeMouseLeave = function (node, e) {\n      _this.handlerHelper(_this.props.onNodeMouseLeave, node, e);\n    };\n\n    return _this;\n  }\n\n  Tree.ofType = function () {\n    return Tree;\n  };\n\n  Tree.nodeFromPath = function (path, treeNodes) {\n    if (path.length === 1) {\n      return treeNodes[path[0]];\n    } else {\n      return Tree.nodeFromPath(path.slice(1), treeNodes[path[0]].childNodes);\n    }\n  };\n\n  Tree.prototype.render = function () {\n    return React.createElement(\"div\", {\n      className: classNames(Classes.TREE, this.props.className)\n    }, this.renderNodes(this.props.contents, [], Classes.TREE_ROOT));\n  };\n  /**\n   * Returns the underlying HTML element of the `Tree` node with an id of `nodeId`.\n   * This element does not contain the children of the node, only its label and controls.\n   * If the node is not currently mounted, `undefined` is returned.\n   */\n\n\n  Tree.prototype.getNodeContentElement = function (nodeId) {\n    return this.nodeRefs[nodeId];\n  };\n\n  Tree.prototype.renderNodes = function (treeNodes, currentPath, className) {\n    var _this = this;\n\n    if (treeNodes == null) {\n      return null;\n    }\n\n    var nodeItems = treeNodes.map(function (node, i) {\n      var elementPath = currentPath.concat(i);\n      var TypedTreeNode = TreeNode.ofType();\n      return React.createElement(TypedTreeNode, tslib_1.__assign({}, node, {\n        key: node.id,\n        contentRef: _this.handleContentRef,\n        depth: elementPath.length - 1,\n        onClick: _this.handleNodeClick,\n        onContextMenu: _this.handleNodeContextMenu,\n        onCollapse: _this.handleNodeCollapse,\n        onDoubleClick: _this.handleNodeDoubleClick,\n        onExpand: _this.handleNodeExpand,\n        onMouseEnter: _this.handleNodeMouseEnter,\n        onMouseLeave: _this.handleNodeMouseLeave,\n        path: elementPath\n      }), _this.renderNodes(node.childNodes, elementPath));\n    });\n    return React.createElement(\"ul\", {\n      className: classNames(Classes.TREE_NODE_LIST, className)\n    }, nodeItems);\n  };\n\n  Tree.prototype.handlerHelper = function (handlerFromProps, node, e) {\n    if (isFunction(handlerFromProps)) {\n      var nodeData = Tree.nodeFromPath(node.props.path, this.props.contents);\n      handlerFromProps(nodeData, node.props.path, e);\n    }\n  };\n\n  Tree.displayName = DISPLAYNAME_PREFIX + \".Tree\";\n  return Tree;\n}(React.Component);\n\nexport { Tree };","map":null,"metadata":{},"sourceType":"module"}