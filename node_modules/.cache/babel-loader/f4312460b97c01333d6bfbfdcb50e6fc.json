{"ast":null,"code":"import _classCallCheck from \"/Users/leomcelroy/Desktop/barkBeetleEverything/barkbeetle_js_real/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/leomcelroy/Desktop/barkBeetleEverything/barkbeetle_js_real/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/leomcelroy/Desktop/barkBeetleEverything/barkbeetle_js_real/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/leomcelroy/Desktop/barkBeetleEverything/barkbeetle_js_real/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/leomcelroy/Desktop/barkBeetleEverything/barkbeetle_js_real/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/leomcelroy/Desktop/barkBeetleEverything/barkbeetle_js_real/src/App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport * as utils from './utils.js';\nimport * as mjs from 'makerjs';\nimport * as params from './parameters.js';\nimport * as s2p from 'shape2path';\nimport * as svgson from 'svgson';\nimport { Workplane } from './Workplane.js';\nimport Button from '@material-ui/core/Button';\nimport { kk } from './joints/koshikake.js';\nimport { profile } from './toolpaths/profile.js';\nimport { pocket } from './toolpaths/pocket.js'; //import {replaceWithPath} from './svg_to_makerjs.js';\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this));\n    _this.state = {\n      shapes: {},\n      toolpaths: [],\n      selected: [],\n      material: \"wood\",\n      thickness: 34,\n      units: \"mm\",\n      zero: \"bottomleft\"\n    };\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"uploadSVG\",\n    value: function uploadSVG(e) {\n      //helper function\n      var replaceWithPath = function replaceWithPath(child) {\n        //why cant I put this in a different file\n        console.log(\"child\", child);\n\n        if (child.name === \"g\") {\n          return child.children.map(function (grandchild) {\n            return replaceWithPath(grandchild);\n          });\n        }\n\n        if (child.name === \"rectangle\") {\n          var x;\n          var y;\n          var width;\n          var height;\n          var rx;\n          var ry;\n          var temp = s2p.rect({\n            x: x,\n            y: y,\n            width: width,\n            height: height,\n            rx: rx,\n            ry: ry\n          });\n          return mjs.importer.fromSVGPathData(temp);\n        }\n\n        if (child.name === \"circle\") {\n          var cx;\n          var cy;\n          var r;\n\n          var _temp = s2p.rect({\n            cx: cx,\n            cy: cy,\n            r: r\n          });\n\n          return mjs.importer.fromSVGPathData(_temp);\n        }\n\n        if (child.name === \"ellipse\") {\n          var _cx;\n\n          var _cy;\n\n          var _rx;\n\n          var _ry;\n\n          var _temp2 = s2p.ellipse({\n            cx: _cx,\n            cy: _cy,\n            rx: _rx,\n            ry: _ry\n          });\n\n          return mjs.importer.fromSVGPathData(_temp2);\n        }\n\n        if (child.name === \"path\") {\n          var makerjsPath = mjs.importer.fromSVGPathData(child.attributes.d);\n          return makerjsPath;\n        }\n      }; //main event\n\n\n      var files = e.target.files;\n      var file = files[0];\n      var reader = new FileReader();\n\n      reader.onload = function (event) {\n        var text = event.target.result;\n        svgson.parse(text).then(function (json) {\n          var svg = json.children.map(function (child) {\n            return replaceWithPath(child);\n          });\n          svg = svg.flat(1); //TODO: what does the argument do again?\n          //TODO: update state to have makerjs models\n\n          console.log(\"svg\", svg);\n        });\n      };\n\n      reader.readAsText(file);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      //should I put everying in a list or all to one model, there seem to be some issues with origins if I mjs.exporter.toSVG() seperately\n      var test = kk; //test = mjs.model.originate(test);\n\n      var testProfile = test.models.profile;\n      var testPocket = test.models.pocket;\n      var profileCut = profile(testProfile, params);\n      var pocketCut = pocket(testPocket, params); // let drawings = [test, profile(test)];\n      // drawings = drawings.map(d => mjs.exporter.toSVG(d));\n      //testing if internal outlines will make acceptable pocket paths, appears so\n      //let p2 = pocket(testPocket, params).drawing;\n\n      var t1 = new mjs.models.Oval(20, 20);\n      var t2 = mjs.model.move(new mjs.models.Oval(20, 20), [15, 0]);\n      var test0 = mjs.model.combineUnion(t1, t2);\n      var test1 = mjs.model.outline(test0, 5, 1, true); // console.log(test0)\n      // test0 = mjs.model.move(test0, [50, 0]);\n\n      var model = {\n        models: {\n          shapes: {\n            models: {\n              profileSource: testProfile,\n              pocketSource: testPocket\n            }\n          },\n          cuts: {\n            models: {\n              profileCut: profileCut.drawing,\n              pocketCut: pocketCut.drawing\n            } //pocketCut2: pocket(p2, params).drawing,\n            // test0,\n            // test1,\n\n          }\n        }\n      };\n      model.models.cuts.layer = \"red\"; // model = mjs.model.originate(model);\n      // model = mjs.model.zero(model);\n\n      model['paths'] = {\n        origin: new mjs.paths.Circle(params.compensatedRadius)\n      };\n      var modelToView = mjs.model.scale(utils.deepcopy(model), 10); //TODO: make drawing easier to see, but this ruins toolpaths\n\n      var viewModel = mjs.exporter.toSVG(modelToView, {\n        useSvgPathOnly: false,\n        strokeWidth: \".5mm\" // layerOptions:{\n        //   cuts: {\n        //     stroke: \"red\"\n        //   }\n        // },\n\n      }); //viewModel = viewModel.concat(Object.values(modelToView.models).map(m => mjs.exporter.toSVG(m)));\n\n      viewModel = [viewModel];\n      return React.createElement(\"div\", {\n        onMouseDown: function onMouseDown(e) {\n          return console.log(\"div target\", e.target.getAttribute(\"data-route\"));\n        },\n        style: {\n          margin: 0,\n          height: \"100%\",\n          overflow: \"hidden\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165\n        },\n        __self: this\n      }, React.createElement(Workplane, {\n        groups: viewModel,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 173\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        id: \"myInput\",\n        type: \"file\",\n        ref: function ref(_ref) {\n          return _this2.upload = _ref;\n        },\n        style: {\n          display: 'none'\n        },\n        onChange: function onChange(e) {\n          return _this2.uploadSVG(e);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176\n        },\n        __self: this\n      }), React.createElement(Button, {\n        variant: \"contained\",\n        color: \"primary\",\n        onClick: function onClick(e) {\n          return _this2.upload.click();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 182\n        },\n        __self: this\n      }, \"Upload SVG\"), \"\\xA0\", React.createElement(Button, {\n        variant: \"contained\",\n        color: \"primary\",\n        onClick: function onClick() {\n          utils.download(profileCut.filename, profileCut.gcode);\n          utils.download(pocketCut.filename, pocketCut.gcode);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 190\n        },\n        __self: this\n      }, \"download gcode\")));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/leomcelroy/Desktop/barkBeetleEverything/barkbeetle_js_real/src/App.js"],"names":["React","Component","utils","mjs","params","s2p","svgson","Workplane","Button","kk","profile","pocket","App","state","shapes","toolpaths","selected","material","thickness","units","zero","e","replaceWithPath","child","console","log","name","children","map","grandchild","x","y","width","height","rx","ry","temp","rect","importer","fromSVGPathData","cx","cy","r","ellipse","makerjsPath","attributes","d","files","target","file","reader","FileReader","onload","event","text","result","parse","then","json","svg","flat","readAsText","test","testProfile","models","testPocket","profileCut","pocketCut","t1","Oval","t2","model","move","test0","combineUnion","test1","outline","profileSource","pocketSource","cuts","drawing","layer","origin","paths","Circle","compensatedRadius","modelToView","scale","deepcopy","viewModel","exporter","toSVG","useSvgPathOnly","strokeWidth","getAttribute","margin","overflow","ref","upload","display","uploadSVG","click","download","filename","gcode"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport * as utils from './utils.js';\nimport * as mjs from 'makerjs';\nimport * as params from './parameters.js';\nimport * as s2p from 'shape2path';\nimport * as svgson from 'svgson';\nimport {Workplane} from './Workplane.js'\nimport Button from '@material-ui/core/Button';\nimport {kk} from './joints/koshikake.js';\nimport {profile} from './toolpaths/profile.js';\nimport {pocket} from './toolpaths/pocket.js';\n//import {replaceWithPath} from './svg_to_makerjs.js';\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      shapes: {},\n      toolpaths:[],\n      selected: [],\n      material: \"wood\",\n      thickness: 34,\n      units: \"mm\",\n      zero: \"bottomleft\"\n    }\n  };\n\n  uploadSVG(e) {\n    //helper function\n    const replaceWithPath = (child) => { //why cant I put this in a different file\n      console.log(\"child\", child);\n\n      if (child.name === \"g\") {\n        return child.children.map(grandchild => replaceWithPath(grandchild));\n      }\n\n      if (child.name === \"rectangle\") {\n        let x;\n        let y;\n        let width;\n        let height;\n        let rx;\n        let ry;\n\n        let temp = s2p.rect({x, y, width, height, rx, ry});\n        return mjs.importer.fromSVGPathData(temp);\n      }\n\n      if (child.name === \"circle\") {\n        let cx;\n        let cy;\n        let r;\n\n        let temp = s2p.rect({cx, cy, r});\n        return mjs.importer.fromSVGPathData(temp);\n      }\n\n      if (child.name === \"ellipse\") {\n        let cx;\n        let cy;\n        let rx;\n        let ry;\n\n        let temp = s2p.ellipse({cx, cy, rx, ry});\n        return mjs.importer.fromSVGPathData(temp);\n      }\n\n      if (child.name === \"path\") {\n        let makerjsPath = mjs.importer.fromSVGPathData(child.attributes.d);\n        return makerjsPath;\n      }\n    }\n\n    //main event\n    let files = e.target.files;\n    let file = files[0];\n\n    var reader = new FileReader();\n\n    reader.onload = (event) => {\n      let text = event.target.result;\n\n      svgson.parse(text).then((json) => {\n        let svg = json.children.map(child => {\n          return replaceWithPath(child);\n        });\n\n        svg = svg.flat(1); //TODO: what does the argument do again?\n\n        //TODO: update state to have makerjs models\n        console.log(\"svg\", svg);\n      });\n    };\n\n    reader.readAsText(file);\n  }\n\n  render() {\n    //should I put everying in a list or all to one model, there seem to be some issues with origins if I mjs.exporter.toSVG() seperately\n    let test = kk;\n    //test = mjs.model.originate(test);\n    let testProfile = test.models.profile;\n    let testPocket = test.models.pocket;\n    let profileCut = profile(testProfile, params);\n    let pocketCut = pocket(testPocket, params);\n\n    // let drawings = [test, profile(test)];\n    // drawings = drawings.map(d => mjs.exporter.toSVG(d));\n\n    //testing if internal outlines will make acceptable pocket paths, appears so\n    //let p2 = pocket(testPocket, params).drawing;\n    let t1 = new mjs.models.Oval(20,20)\n    let t2 = mjs.model.move(new mjs.models.Oval(20,20), [15,0])\n    let test0 = mjs.model.combineUnion(t1, t2);\n    let test1 = mjs.model.outline(test0, 5, 1, true)\n    // console.log(test0)\n    // test0 = mjs.model.move(test0, [50, 0]);\n\n    let model = {\n      models: {\n        shapes: {\n          models: {\n            profileSource: testProfile,\n            pocketSource: testPocket,\n          }\n        },\n        cuts: {\n          models: {\n            profileCut: profileCut.drawing,\n            pocketCut: pocketCut.drawing,\n          }\n        }\n        //pocketCut2: pocket(p2, params).drawing,\n        // test0,\n        // test1,\n      }\n    }\n\n    model.models.cuts.layer = \"red\";\n\n    // model = mjs.model.originate(model);\n    // model = mjs.model.zero(model);\n\n    model['paths'] = {\n      origin: new mjs.paths.Circle(params.compensatedRadius)\n    }\n\n    let modelToView = mjs.model.scale(utils.deepcopy(model), 10); //TODO: make drawing easier to see, but this ruins toolpaths\n\n    let viewModel = mjs.exporter.toSVG(modelToView, {\n      useSvgPathOnly:false,\n      strokeWidth:\".5mm\",\n      // layerOptions:{\n      //   cuts: {\n      //     stroke: \"red\"\n      //   }\n      // },\n    });\n    //viewModel = viewModel.concat(Object.values(modelToView.models).map(m => mjs.exporter.toSVG(m)));\n    viewModel = [viewModel];\n\n    return (\n      <div\n        onMouseDown={(e) => console.log(\"div target\", e.target.getAttribute(\"data-route\"))}\n        style={{\n          margin: 0,\n          height: \"100%\",\n          overflow: \"hidden\"\n        }}>\n\n          <Workplane groups={viewModel}/>\n\n        <div>\n          <input\n            id=\"myInput\"\n            type=\"file\"\n            ref={(ref) => this.upload = ref}\n            style={{ display: 'none' }}\n            onChange={(e) => this.uploadSVG(e)}/>\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            onClick={(e) => this.upload.click()}\n            >\n              Upload SVG\n          </Button>\n          &nbsp;\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            onClick={() => {\n              utils.download(profileCut.filename, profileCut.gcode);\n              utils.download(pocketCut.filename, pocketCut.gcode);\n            }}\n            >\n              download gcode\n          </Button>\n        </div>\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}