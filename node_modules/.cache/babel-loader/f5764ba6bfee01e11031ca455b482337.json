{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _slicedToArray = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"]) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  };\n}();\n\nexports.default = enhanceProps;\n\nvar _enhancers = require('./enhancers');\n\nvar _expandAliases = require('./expand-aliases');\n\nvar _expandAliases2 = _interopRequireDefault(_expandAliases);\n\nvar _styles = require('./styles');\n\nvar styles = _interopRequireWildcard(_styles);\n\nvar _cache = require('./cache');\n\nvar cache = _interopRequireWildcard(_cache);\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n      }\n    }\n\n    newObj.default = obj;\n    return newObj;\n  }\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * Converts the CSS props to class names and inserts the styles.\n */\n\n\nfunction enhanceProps(rawProps) {\n  var propsMap = (0, _expandAliases2.default)(rawProps);\n  var enhancedProps = {};\n  var className = rawProps.className || '';\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = propsMap[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var _ref = _step.value;\n\n      var _ref2 = _slicedToArray(_ref, 2);\n\n      var propName = _ref2[0];\n      var propValue = _ref2[1];\n      var cachedClassName = cache.get(propName, propValue);\n\n      if (cachedClassName) {\n        className = className + ' ' + cachedClassName;\n        continue;\n      }\n\n      var enhancer = _enhancers.propEnhancers[propName]; // Skip false boolean enhancers. e.g: `clearfix={false}`\n      // Also allows omitting props via overriding with `null` (i.e: neutralising props)\n\n      if (enhancer && (propValue === null || propValue === undefined || propValue === false)) {\n        continue;\n      } else if (!enhancer) {\n        // Pass through native props. e.g: disabled, value, type\n        enhancedProps[propName] = propValue;\n        continue;\n      }\n\n      var newCss = enhancer(propValue); // Allow enhancers to return null for invalid values\n\n      if (newCss) {\n        styles.add(newCss.styles);\n        cache.set(propName, propValue, newCss.className);\n        className = className + ' ' + newCss.className;\n      }\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  className = className.trim();\n  return [className, enhancedProps];\n}","map":null,"metadata":{},"sourceType":"script"}