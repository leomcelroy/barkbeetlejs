{"ast":null,"code":"var _jsxFileName = \"/Users/leomcelroy/Desktop/barkbeetle_js/src/components/ToolpathList.js\";\nimport React, { Component } from 'react';\nimport { Table, Checkbox, Button } from 'evergreen-ui';\nimport { AdvancedOptions } from './AdvancedOptions.js';\nimport * as utils from '../utils.js';\nimport store from '../store.js';\n\nvar ToolpathList = function ToolpathList(_ref) {\n  var state = _ref.state;\n  var toolpaths = state.toolpaths;\n  return React.createElement(Table, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13\n    },\n    __self: this\n  }, React.createElement(Table.Head, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14\n    },\n    __self: this\n  }, React.createElement(Table.TextHeaderCell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15\n    },\n    __self: this\n  }, \"name\"), React.createElement(Table.TextHeaderCell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16\n    },\n    __self: this\n  }, \"type\"), React.createElement(Table.TextHeaderCell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17\n    },\n    __self: this\n  }, \"modify\"), React.createElement(Table.TextHeaderCell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18\n    },\n    __self: this\n  }, \"reorder\"), React.createElement(Table.TextHeaderCell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19\n    },\n    __self: this\n  }, \"select/view\")), React.createElement(Table.Body, {\n    height: 240,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21\n    },\n    __self: this\n  }, toolpaths.map(function (path, i) {\n    return React.createElement(Table.Row, {\n      key: path.id,\n      onMouseDown: function onMouseDown() {\n        var toolpath = toolpaths[i];\n        toolpath.cutSelected = !toolpath.cutSelected;\n        store.update({\n          toolpaths: toolpaths\n        });\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23\n      },\n      __self: this\n    }, React.createElement(Table.TextCell, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30\n      },\n      __self: this\n    }, path.name), React.createElement(Table.TextCell, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31\n      },\n      __self: this\n    }, path.type), React.createElement(Table.TextCell, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32\n      },\n      __self: this\n    }, React.createElement(AdvancedOptions, {\n      params: path.parameters,\n      name: path.name,\n      default: false,\n      index: i,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33\n      },\n      __self: this\n    })), React.createElement(Table.TextCell, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }, \"^ v\"), React.createElement(Table.TextCell, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }, React.createElement(Checkbox, {\n      checked: path.visible,\n      onChange: function onChange(e) {\n        // let toolpaths = toolpaths;\n        var toolpath = toolpaths[i];\n        toolpath.visible = e.target.checked;\n        store.update({\n          toolpaths: toolpaths\n        });\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    })));\n  })), React.createElement(Table.Row, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, React.createElement(Table.TextCell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, React.createElement(Button, {\n    onClick: function onClick() {\n      toolpaths.forEach(function (path) {\n        if (path.cutSelected) {\n          utils.download(path.geometry.filename, path.geometry.gcode);\n        }\n      });\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, \"Export\")), React.createElement(Table.TextCell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }, React.createElement(Button, {\n    onClick: function onClick() {\n      var toolpaths = store.state.toolpaths.filter(function (toolpath) {\n        return !toolpath.cutSelected;\n      }); // console.log(toolpaths);\n\n      store.update({\n        toolpaths: toolpaths\n      });\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, \"Delete\")), React.createElement(Table.TextCell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }, React.createElement(Button, {\n    onClick: function onClick() {\n      toolpaths = store.getState().toolpaths; //TODO: fix this hack not sure why I have to do this here\n\n      var allSelected = toolpaths.every(function (path) {\n        return path.cutSelected;\n      });\n      var toolpaths = toolpaths.map(function (path, i) {\n        path.cutSelected = !allSelected;\n        return path;\n      }); //console.log(store.getState())\n\n      store.update({\n        toolpaths: toolpaths\n      });\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }, \"(De)Select All\"), \"&nbsp\")));\n};\n\nexport { ToolpathList };","map":{"version":3,"sources":["/Users/leomcelroy/Desktop/barkbeetle_js/src/components/ToolpathList.js"],"names":["React","Component","Table","Checkbox","Button","AdvancedOptions","utils","store","ToolpathList","state","toolpaths","map","path","i","id","toolpath","cutSelected","update","name","type","parameters","visible","e","target","checked","forEach","download","geometry","filename","gcode","filter","getState","allSelected","every"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport {Table, Checkbox, Button} from 'evergreen-ui';\nimport {AdvancedOptions} from './AdvancedOptions.js';\nimport * as utils from '../utils.js';\nimport store from '../store.js';\n\n\n\nconst ToolpathList = ({state}) => {\n  let toolpaths = state.toolpaths;\n\n  return (\n    <Table>\n      <Table.Head>\n        <Table.TextHeaderCell>name</Table.TextHeaderCell>\n        <Table.TextHeaderCell>type</Table.TextHeaderCell>\n        <Table.TextHeaderCell>modify</Table.TextHeaderCell>\n        <Table.TextHeaderCell>reorder</Table.TextHeaderCell>\n        <Table.TextHeaderCell>select/view</Table.TextHeaderCell>\n      </Table.Head>\n      <Table.Body height={240}>\n        {toolpaths.map((path, i) => (\n          <Table.Row key={path.id} onMouseDown={() => {\n            let toolpath = toolpaths[i];\n\n            toolpath.cutSelected = !toolpath.cutSelected;\n\n            store.update({ toolpaths })\n          }}>\n            <Table.TextCell>{path.name}</Table.TextCell>\n            <Table.TextCell>{path.type}</Table.TextCell>\n            <Table.TextCell>\n              <AdvancedOptions\n                params={path.parameters}\n                name={path.name}\n                default={false}\n                index={i}/>\n            </Table.TextCell>\n            <Table.TextCell>^ v</Table.TextCell>\n            <Table.TextCell>\n              <Checkbox\n                checked={path.visible}\n                onChange={e => {\n                  // let toolpaths = toolpaths;\n                  let toolpath = toolpaths[i];\n\n                  toolpath.visible = e.target.checked;\n\n                  store.update({ toolpaths })\n                }}\n              />\n            </Table.TextCell>\n          </Table.Row>\n        ))}\n      </Table.Body>\n      <Table.Row>\n        <Table.TextCell><Button onClick={() => {\n          toolpaths.forEach(path => {\n            if (path.cutSelected) {\n              utils.download(path.geometry.filename, path.geometry.gcode);\n            }\n          })\n        }}>\n          Export\n        </Button></Table.TextCell>\n        <Table.TextCell>\n          <Button\n            onClick={() => {\n              let toolpaths = store.state.toolpaths.filter(toolpath => !toolpath.cutSelected);\n\n              // console.log(toolpaths);\n\n              store.update({ toolpaths })\n            }}>\n              Delete\n          </Button>\n        </Table.TextCell>\n        <Table.TextCell>\n          <Button onClick={() => {\n            toolpaths = store.getState().toolpaths; //TODO: fix this hack not sure why I have to do this here\n\n            let allSelected = toolpaths.every(path => path.cutSelected);\n\n            let toolpaths = toolpaths.map((path, i) => {\n              path.cutSelected = !allSelected;\n\n              return path;\n            })\n\n            //console.log(store.getState())\n\n            store.update({ toolpaths })\n          }}>\n            (De)Select All\n          </Button>\n          &nbsp\n        </Table.TextCell>\n      </Table.Row>\n    </Table>\n  )\n}\n\nexport {ToolpathList}\n"]},"metadata":{},"sourceType":"module"}