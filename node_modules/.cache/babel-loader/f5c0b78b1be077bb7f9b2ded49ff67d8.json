{"ast":null,"code":"import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport { Text } from '../../typography';\nimport { withTheme } from '../../theme';\n\nvar TextInput =\n/*#__PURE__*/\nfunction (_PureComponent) {\n  _inherits(TextInput, _PureComponent);\n\n  function TextInput() {\n    _classCallCheck(this, TextInput);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(TextInput).apply(this, arguments));\n  }\n\n  _createClass(TextInput, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          theme = _this$props.theme,\n          className = _this$props.className,\n          css = _this$props.css,\n          width = _this$props.width,\n          height = _this$props.height,\n          disabled = _this$props.disabled,\n          required = _this$props.required,\n          isInvalid = _this$props.isInvalid,\n          appearance = _this$props.appearance,\n          placeholder = _this$props.placeholder,\n          spellCheck = _this$props.spellCheck,\n          props = _objectWithoutProperties(_this$props, [\"theme\", \"className\", \"css\", \"width\", \"height\", \"disabled\", \"required\", \"isInvalid\", \"appearance\", \"placeholder\", \"spellCheck\"]);\n\n      var themedClassName = theme.getTextInputClassName(appearance);\n      var textSize = theme.getTextSizeForControlHeight(height);\n      var borderRadius = theme.getBorderRadiusForControlHeight(height);\n      return React.createElement(Text, _extends({\n        is: \"input\",\n        className: cx(themedClassName, className),\n        type: \"text\",\n        size: textSize,\n        width: width,\n        height: height,\n        required: required,\n        disabled: disabled,\n        placeholder: placeholder,\n        paddingLeft: Math.round(height / 3.2),\n        paddingRight: Math.round(height / 3.2),\n        borderRadius: borderRadius,\n        spellCheck: spellCheck,\n        \"aria-invalid\": isInvalid\n      }, disabled ? {\n        color: 'muted'\n      } : {}, {\n        css: css\n      }, props));\n    }\n  }]);\n\n  return TextInput;\n}(PureComponent);\n\nTextInput.displayName = \"TextInput\";\n\n_defineProperty(TextInput, \"propTypes\", _objectSpread({}, Text.propTypes, {\n  /**\n   * Makes the input element required.\n   */\n  required: PropTypes.bool,\n\n  /**\n   * Makes the input element disabled.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * Sets visual styling to be invalid.\n   */\n  isInvalid: PropTypes.bool,\n\n  /**\n   * Use the native spell check functionality of the browser.\n   */\n  spellCheck: PropTypes.bool,\n\n  /**\n   * The placeholder text when there is no value present.\n   */\n  placeholder: PropTypes.string,\n\n  /**\n   * The appearance of the TextInput.\n   */\n  appearance: PropTypes.string,\n\n  /**\n   * The width of the TextInput.\n   */\n  width: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n\n  /**\n   * Theme provided by ThemeProvider.\n   */\n  theme: PropTypes.object.isRequired,\n\n  /**\n   * Class name passed to the button.\n   * Only use if you know what you are doing.\n   */\n  className: PropTypes.string\n}));\n\n_defineProperty(TextInput, \"defaultProps\", {\n  appearance: 'default',\n  height: 32,\n  width: 280,\n  disabled: false,\n  isInvalid: false,\n  spellCheck: true\n});\n\nexport default withTheme(TextInput);","map":null,"metadata":{},"sourceType":"module"}