{"ast":null,"code":"import _classCallCheck from \"/Users/leomcelroy/Desktop/barkBeetleEverything/barkbeetle_js_real/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/leomcelroy/Desktop/barkBeetleEverything/barkbeetle_js_real/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/leomcelroy/Desktop/barkBeetleEverything/barkbeetle_js_real/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/leomcelroy/Desktop/barkBeetleEverything/barkbeetle_js_real/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/leomcelroy/Desktop/barkBeetleEverything/barkbeetle_js_real/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/leomcelroy/Desktop/barkBeetleEverything/barkbeetle_js_real/src/components/AdvancedOptions.js\";\nimport React, { Component } from 'react';\nimport { Button, Dialog, TextInputField, SegmentedControl, Heading, Link, Strong, Text } from 'evergreen-ui';\nimport * as utils from '../utils.js';\nimport store from '../store.js';\nimport * as params from '../parameters.js';\n\nvar AdvancedOptions =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(AdvancedOptions, _Component);\n\n  function AdvancedOptions() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, AdvancedOptions);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(AdvancedOptions)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      isShown: false,\n      cutDepthValid: true,\n      toolDiameterValid: true,\n      stepoverPercentageValid: true,\n      toleranceValid: true,\n      jogHeightValid: true,\n      jogRateValid: true,\n      feedRateValid: true,\n      insideCuttingOptions: [{\n        label: 'true',\n        value: true\n      }, {\n        label: 'false',\n        value: false\n      }],\n      parameters: params\n    };\n    return _this;\n  }\n\n  _createClass(AdvancedOptions, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      // console.log(this.state.parameters);\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30\n        },\n        __self: this\n      }, React.createElement(Dialog, {\n        isShown: this.state.isShown,\n        title: \"Advanced Default Settings\",\n        onCloseComplete: function onCloseComplete() {\n          return _this2.setState({\n            isShown: false\n          });\n        },\n        onConfirm: function onConfirm() {\n          var valid = _this2.state.cutDepthValid && _this2.state.toolDiameterValid && _this2.state.stepoverPercentageValid && _this2.state.toleranceValid && _this2.state.jogHeightValid && _this2.state.jogRateValid && _this2.state.feedRateValid;\n\n          if (valid) {\n            var cutDepth = document.getElementsByName(\"cutDepth\")[0].value;\n            var toolDiameter = document.getElementsByName(\"toolDiameter\")[0].value;\n            var stepoverPercentage = document.getElementsByName(\"stepoverPercentage\")[0].value; //must be between 1 and 100%\n\n            var tolerance = document.getElementsByName(\"tolerance\")[0].value;\n            var insideCutting = false;\n            var jogHeight = document.getElementsByName(\"jogHeight\")[0].value;\n            var jogRate = document.getElementsByName(\"jogRate\")[0].value;\n            var feedRate = document.getElementsByName(\"feedRate\")[0].value; //derived parameters\n\n            stepoverPercentage = stepoverPercentage / 100;\n            var passDepth = cutDepth / 2;\n            var toolRadius = toolDiameter / 2;\n            var compensatedRadius = toolRadius + tolerance;\n            var tempFloor = Math.ceil(cutDepth / passDepth); //should this be ceiling or floor, I think ceil\n\n            var actualPassDepth = cutDepth / tempFloor;\n            var depthOfPasses = utils.makeSeries(actualPassDepth, actualPassDepth, tempFloor).map(function (n) {\n              return -n;\n            }); //settings will be compiled to a single object here\n            // {\n            //   compensatedRadius,\n            //   feedRate,\n            //   depthOfPasses,\n            //   jogHeight,\n            //   insideCutting,\n            //   stepoverPercentage,\n            //   jogRate\n            // }\n\n            _this2.setState({\n              isShown: false\n            }); //update app state here\n            //this.props.updateparent()\n            //store.update({})\n\n          }\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 31\n        },\n        __self: this\n      }, React.createElement(TextInputField, {\n        onChange: function onChange(e) {\n          var valid = utils.isNum(e.target.value);\n\n          _this2.setState({\n            cutDepthValid: valid\n          });\n        },\n        isInvalid: !this.state.cutDepthValid,\n        name: \"cutDepth\",\n        description: this.state.cutDepthValid ? \"\" : \"please enter a valid number\",\n        label: \"Depth of Cut\",\n        placeholder: String(this.state.parameters.cutDepth),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }), React.createElement(TextInputField, {\n        onChange: function onChange(e) {\n          var valid = utils.isNum(e.target.value);\n\n          _this2.setState({\n            toolDiameterValid: valid\n          });\n        },\n        isInvalid: !this.state.toolDiameterValid,\n        name: \"toolDiameter\",\n        description: this.state.toolDiameterValid ? \"\" : \"please enter a valid number\",\n        label: \"Tool Diameter\",\n        placeholder: String(this.state.parameters.toolDiameter),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }), React.createElement(TextInputField, {\n        onChange: function onChange(e) {\n          var valid = utils.isNum(e.target.value);\n          valid = 0 < parseFloat(e.target.value) && parseFloat(e.target.value) <= 100; //process value here\n\n          _this2.setState({\n            stepoverPercentageValid: valid\n          });\n        },\n        isInvalid: !this.state.stepoverPercentageValid,\n        name: \"stepoverPercentage\",\n        description: this.state.stepoverPercentageValid ? \"\" : \"please enter a valid number\",\n        label: \"Stepover Percentage\",\n        placeholder: String(this.state.parameters.stepoverPercentage),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }), React.createElement(TextInputField, {\n        onChange: function onChange(e) {\n          var valid = utils.isNum(e.target.value);\n\n          _this2.setState({\n            feedRateValid: valid\n          });\n        },\n        isInvalid: !this.state.feedRateValid,\n        name: \"feedRate\",\n        description: this.state.feedRateValid ? \"\" : \"please enter a valid number\",\n        label: \"Feed Rate\",\n        placeholder: String(this.state.parameters.feedRate),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      }), React.createElement(TextInputField, {\n        onChange: function onChange(e) {\n          var valid = utils.isNum(e.target.value);\n\n          _this2.setState({\n            toleranceValid: valid\n          });\n        },\n        isInvalid: !this.state.toleranceValid,\n        name: \"tolerance\",\n        description: this.state.toleranceValid ? \"\" : \"please enter a valid number\",\n        label: \"Tolerance\",\n        placeholder: String(this.state.parameters.tolerance),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      }), React.createElement(TextInputField, {\n        onChange: function onChange(e) {\n          var valid = utils.isNum(e.target.value);\n\n          _this2.setState({\n            jogRateValid: valid\n          });\n        },\n        isInvalid: !this.state.jogRateValid,\n        name: \"jogRate\",\n        description: this.state.jogRateValid ? \"\" : \"please enter a valid number\",\n        label: \"Jog Rate\",\n        placeholder: String(this.state.parameters.jogRate),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136\n        },\n        __self: this\n      }), React.createElement(TextInputField, {\n        onChange: function onChange(e) {\n          var valid = utils.isNum(e.target.value);\n\n          _this2.setState({\n            jogHeightValid: valid\n          });\n        },\n        isInvalid: !this.state.jogHeightValid,\n        name: \"jogHeight\",\n        description: this.state.jogHeightValid ? \"\" : \"please enter a valid number\",\n        label: \"Jog Height\",\n        placeholder: String(this.state.parameters.jogHeight),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147\n        },\n        __self: this\n      }), React.createElement(Heading, {\n        size: 400,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158\n        },\n        __self: this\n      }, \"Inside Cutting\"), React.createElement(SegmentedControl, {\n        label: \"Inside Cutting\",\n        options: this.state.insideCuttingOptions,\n        value: this.state.parameters.insideCutting,\n        onChange: function onChange(value) {\n          // update app state here\n          var newState = Object.assign({}, _this2.state.parameters);\n          newState.insideCutting = value;\n\n          _this2.setState({\n            parameters: newState\n          }); //this.props.updateparent(value);\n          // this.props.context.setState({units:value});\n\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 159\n        },\n        __self: this\n      })), React.createElement(Link, {\n        onClick: function onClick() {\n          return _this2.setState({\n            isShown: true\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174\n        },\n        __self: this\n      }, \"Advanced Options\"));\n    }\n  }]);\n\n  return AdvancedOptions;\n}(Component);\n\nexport { AdvancedOptions };","map":{"version":3,"sources":["/Users/leomcelroy/Desktop/barkBeetleEverything/barkbeetle_js_real/src/components/AdvancedOptions.js"],"names":["React","Component","Button","Dialog","TextInputField","SegmentedControl","Heading","Link","Strong","Text","utils","store","params","AdvancedOptions","state","isShown","cutDepthValid","toolDiameterValid","stepoverPercentageValid","toleranceValid","jogHeightValid","jogRateValid","feedRateValid","insideCuttingOptions","label","value","parameters","setState","valid","cutDepth","document","getElementsByName","toolDiameter","stepoverPercentage","tolerance","insideCutting","jogHeight","jogRate","feedRate","passDepth","toolRadius","compensatedRadius","tempFloor","Math","ceil","actualPassDepth","depthOfPasses","makeSeries","map","n","e","isNum","target","String","parseFloat","newState","Object","assign"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport {Button, Dialog, TextInputField, SegmentedControl, Heading, Link, Strong, Text} from 'evergreen-ui';\nimport * as utils from '../utils.js';\nimport store from '../store.js';\nimport * as params from '../parameters.js';\n\nclass AdvancedOptions extends Component {\n\n  state = {\n    isShown: false,\n    cutDepthValid: true,\n    toolDiameterValid: true,\n    stepoverPercentageValid: true,\n    toleranceValid: true,\n    jogHeightValid: true,\n    jogRateValid: true,\n    feedRateValid: true,\n    insideCuttingOptions: [\n      { label: 'true', value: true },\n      { label: 'false', value: false },\n    ],\n    parameters: params,\n  }\n\n  render() {\n\n    // console.log(this.state.parameters);\n\n    return (\n      <div>\n        <Dialog\n          isShown={this.state.isShown}\n          title=\"Advanced Default Settings\"\n          onCloseComplete={() => this.setState({isShown:false})}\n          onConfirm={() => {\n            let valid = this.state.cutDepthValid && this.state.toolDiameterValid &&\n                        this.state.stepoverPercentageValid && this.state.toleranceValid &&\n                        this.state.jogHeightValid && this.state.jogRateValid && this.state.feedRateValid;\n            if (valid) {\n              let cutDepth = document.getElementsByName(\"cutDepth\")[0].value;\n              let toolDiameter = document.getElementsByName(\"toolDiameter\")[0].value;\n              let stepoverPercentage = document.getElementsByName(\"stepoverPercentage\")[0].value; //must be between 1 and 100%\n              let tolerance = document.getElementsByName(\"tolerance\")[0].value;\n              let insideCutting = false;\n              let jogHeight = document.getElementsByName(\"jogHeight\")[0].value;\n              let jogRate = document.getElementsByName(\"jogRate\")[0].value;\n              let feedRate = document.getElementsByName(\"feedRate\")[0].value;\n\n              //derived parameters\n              stepoverPercentage = stepoverPercentage/100;\n              let passDepth = cutDepth/2;\n              let toolRadius = toolDiameter/2;\n              let compensatedRadius = toolRadius + tolerance;\n              let tempFloor = Math.ceil(cutDepth/passDepth); //should this be ceiling or floor, I think ceil\n              let actualPassDepth = cutDepth/tempFloor;\n              let depthOfPasses = utils.makeSeries(actualPassDepth, actualPassDepth, tempFloor).map(n => -n);\n\n              //settings will be compiled to a single object here\n              // {\n              //   compensatedRadius,\n              //   feedRate,\n              //   depthOfPasses,\n              //   jogHeight,\n              //   insideCutting,\n              //   stepoverPercentage,\n              //   jogRate\n              // }\n\n              this.setState({\n                isShown:false,\n              });\n\n              //update app state here\n              //this.props.updateparent()\n              //store.update({})\n            }\n          }}>\n\n          <TextInputField\n            onChange={e => {\n              let valid = utils.isNum(e.target.value);\n              this.setState({cutDepthValid:valid})\n            }}\n            isInvalid={!this.state.cutDepthValid}\n            name=\"cutDepth\"\n            description={(this.state.cutDepthValid) ? \"\" : \"please enter a valid number\"}\n            label=\"Depth of Cut\"\n            placeholder={String(this.state.parameters.cutDepth)}/>\n\n          <TextInputField\n            onChange={e => {\n              let valid = utils.isNum(e.target.value);\n              this.setState({toolDiameterValid:valid})\n            }}\n            isInvalid={!this.state.toolDiameterValid}\n            name=\"toolDiameter\"\n            description={(this.state.toolDiameterValid) ? \"\" : \"please enter a valid number\"}\n            label=\"Tool Diameter\"\n            placeholder={String(this.state.parameters.toolDiameter)}/>\n\n          <TextInputField\n            onChange={e => {\n              let valid = utils.isNum(e.target.value);\n              valid = 0 < parseFloat(e.target.value) && parseFloat(e.target.value) <= 100;\n              //process value here\n              this.setState({stepoverPercentageValid:valid})\n            }}\n            isInvalid={!this.state.stepoverPercentageValid}\n            name=\"stepoverPercentage\"\n            description={(this.state.stepoverPercentageValid) ? \"\" : \"please enter a valid number\"}\n            label=\"Stepover Percentage\"\n            placeholder={String(this.state.parameters.stepoverPercentage)}/>\n\n            <TextInputField\n              onChange={e => {\n                let valid = utils.isNum(e.target.value);\n                this.setState({feedRateValid:valid})\n              }}\n              isInvalid={!this.state.feedRateValid}\n              name=\"feedRate\"\n              description={(this.state.feedRateValid) ? \"\" : \"please enter a valid number\"}\n              label=\"Feed Rate\"\n              placeholder={String(this.state.parameters.feedRate)}/>\n\n              <TextInputField\n                onChange={e => {\n                  let valid = utils.isNum(e.target.value);\n                  this.setState({toleranceValid:valid})\n                }}\n                isInvalid={!this.state.toleranceValid}\n                name=\"tolerance\"\n                description={(this.state.toleranceValid) ? \"\" : \"please enter a valid number\"}\n                label=\"Tolerance\"\n                placeholder={String(this.state.parameters.tolerance)}/>\n\n            <TextInputField\n              onChange={e => {\n                let valid = utils.isNum(e.target.value);\n                this.setState({jogRateValid:valid})\n              }}\n              isInvalid={!this.state.jogRateValid}\n              name=\"jogRate\"\n              description={(this.state.jogRateValid) ? \"\" : \"please enter a valid number\"}\n              label=\"Jog Rate\"\n              placeholder={String(this.state.parameters.jogRate)}/>\n\n              <TextInputField\n                onChange={e => {\n                  let valid = utils.isNum(e.target.value);\n                  this.setState({jogHeightValid:valid})\n                }}\n                isInvalid={!this.state.jogHeightValid}\n                name=\"jogHeight\"\n                description={(this.state.jogHeightValid) ? \"\" : \"please enter a valid number\"}\n                label=\"Jog Height\"\n                placeholder={String(this.state.parameters.jogHeight)}/>\n\n              <Heading size={400}>Inside Cutting</Heading>\n              <SegmentedControl\n                label=\"Inside Cutting\"\n                options={this.state.insideCuttingOptions}\n                value={this.state.parameters.insideCutting}\n                onChange={value => {\n                  // update app state here\n                  let newState = Object.assign({}, this.state.parameters);\n                  newState.insideCutting = value;\n                  this.setState({ parameters:newState });\n                  //this.props.updateparent(value);\n                  // this.props.context.setState({units:value});\n                }}\n              />\n\n        </Dialog>\n        <Link onClick={() => this.setState({isShown:true})}>Advanced Options</Link>\n      </div>\n    );\n  }\n}\n\nexport {AdvancedOptions};\n"]},"metadata":{},"sourceType":"module"}