{"ast":null,"code":"import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport { toaster } from '../../toaster';\nimport { withTheme } from '../../theme';\nimport { Pane } from '../../layers';\nimport safeInvoke from '../../lib/safe-invoke';\nimport { TableRowConsumer } from './TableRowContext';\nimport manageTableCellFocusInteraction from './manageTableCellFocusInteraction';\n\nfunction executeArrowKeyOverride(override) {\n  if (!override) {\n    return;\n  }\n\n  if (typeof override === 'function') {\n    override();\n    return;\n  }\n\n  if (typeof override === 'string') {\n    document.querySelector(override).focus();\n    return;\n  } // This needs to be the node, not a React ref.\n\n\n  override.focus();\n}\n\nvar TableCell =\n/*#__PURE__*/\nfunction (_PureComponent) {\n  _inherits(TableCell, _PureComponent);\n\n  function TableCell() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, TableCell);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(TableCell)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"handleKeyDown\", function (e) {\n      var _this$props$arrowKeys = _this.props.arrowKeysOverrides,\n          arrowKeysOverrides = _this$props$arrowKeys === void 0 ? {} : _this$props$arrowKeys;\n\n      if (_this.props.isSelectable) {\n        var key = e.key;\n\n        if (key === 'ArrowUp' || key === 'ArrowDown' || key === 'ArrowLeft' || key === 'ArrowRight') {\n          e.preventDefault();\n\n          try {\n            // Support arrow key overrides.\n            var override = arrowKeysOverrides[key.substr('Arrow'.length).toLowerCase()];\n            if (override === false) return;\n            if (override) return executeArrowKeyOverride(override);\n            manageTableCellFocusInteraction(key, _this.mainRef);\n          } catch (error) {\n            toaster.danger('Keyboard interaction not possible');\n            console.error('Keyboard interaction not possible', error);\n          }\n        } else if (key === 'Escape') {\n          _this.mainRef.blur();\n        }\n      }\n\n      safeInvoke(_this.props.onKeyDown, e);\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"onRef\", function (ref) {\n      _this.mainRef = ref;\n      safeInvoke(_this.props.innerRef, ref);\n    });\n\n    return _this;\n  }\n\n  _createClass(TableCell, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          innerRef = _this$props.innerRef,\n          theme = _this$props.theme,\n          children = _this$props.children,\n          appearance = _this$props.appearance,\n          onClick = _this$props.onClick,\n          onKeyPress = _this$props.onKeyPress,\n          onKeyDown = _this$props.onKeyDown,\n          isSelectable = _this$props.isSelectable,\n          _this$props$tabIndex = _this$props.tabIndex,\n          tabIndex = _this$props$tabIndex === void 0 ? -1 : _this$props$tabIndex,\n          className = _this$props.className,\n          rightView = _this$props.rightView,\n          arrowKeysOverrides = _this$props.arrowKeysOverrides,\n          props = _objectWithoutProperties(_this$props, [\"innerRef\", \"theme\", \"children\", \"appearance\", \"onClick\", \"onKeyPress\", \"onKeyDown\", \"isSelectable\", \"tabIndex\", \"className\", \"rightView\", \"arrowKeysOverrides\"]);\n\n      var themedClassName = theme.getTableCellClassName(appearance);\n      return React.createElement(TableRowConsumer, null, function (height) {\n        return React.createElement(Pane, _extends({\n          innerRef: _this2.onRef,\n          height: height,\n          className: cx(themedClassName, className),\n          tabIndex: isSelectable ? tabIndex : undefined,\n          \"data-isselectable\": isSelectable,\n          onClick: onClick,\n          onKeyDown: _this2.handleKeyDown\n        }, TableCell.styles, props), children, rightView ? rightView : null);\n      });\n    }\n  }]);\n\n  return TableCell;\n}(PureComponent);\n\nTableCell.displayName = \"TableCell\";\n\n_defineProperty(TableCell, \"propTypes\", _objectSpread({}, Pane.propTypes, {\n  /*\n  * Makes the TableCell focusable. Used by EditableCell.\n  * Will add tabIndex={-1 || this.props.tabIndex}.\n  */\n  isSelectable: PropTypes.bool,\n\n  /**\n   * The appearance of the table row. Default theme only support default.\n   */\n  appearance: PropTypes.string.isRequired,\n\n  /**\n   * Optional node to be placed on the right side of the table cell.\n   * Useful for icons and icon buttons.\n   */\n  rightView: PropTypes.node,\n\n  /**\n   * Theme provided by ThemeProvider.\n   */\n  theme: PropTypes.object.isRequired,\n\n  /**\n   * Advanced arrow keys overrides for selectable cells.\n   * A string will be used as a selector.\n   */\n  arrowKeysOverrides: PropTypes.shape({\n    up: PropTypes.oneOfType([PropTypes.string, PropTypes.func, PropTypes.element, PropTypes.oneOf([false])]),\n    down: PropTypes.oneOfType([PropTypes.string, PropTypes.func, PropTypes.element, PropTypes.oneOf([false])]),\n    left: PropTypes.oneOfType([PropTypes.string, PropTypes.func, PropTypes.element, PropTypes.oneOf([false])]),\n    right: PropTypes.oneOfType([PropTypes.string, PropTypes.func, PropTypes.element, PropTypes.oneOf([false])])\n  }),\n\n  /**\n   * Class name passed to the table cell.\n   * Only use if you know what you are doing.\n   */\n  className: PropTypes.string\n}));\n\n_defineProperty(TableCell, \"defaultProps\", {\n  appearance: 'default'\n});\n\n_defineProperty(TableCell, \"styles\", {\n  paddingX: 12,\n  boxSizing: 'border-box',\n  flex: 1,\n  display: 'flex',\n  alignItems: 'center',\n  flexShrink: 0,\n  overflow: 'hidden'\n});\n\nexport default withTheme(TableCell);","map":null,"metadata":{},"sourceType":"module"}