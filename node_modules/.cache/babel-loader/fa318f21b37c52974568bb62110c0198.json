{"ast":null,"code":"import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport { withTheme } from '../../theme';\nimport Text from './Text';\n\nvar Code =\n/*#__PURE__*/\nfunction (_PureComponent) {\n  _inherits(Code, _PureComponent);\n\n  function Code() {\n    _classCallCheck(this, Code);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Code).apply(this, arguments));\n  }\n\n  _createClass(Code, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          theme = _this$props.theme,\n          className = _this$props.className,\n          appearance = _this$props.appearance,\n          props = _objectWithoutProperties(_this$props, [\"theme\", \"className\", \"appearance\"]);\n\n      var _theme$getCodeProps = theme.getCodeProps(appearance),\n          _theme$getCodeProps$c = _theme$getCodeProps.className,\n          themedClassName = _theme$getCodeProps$c === void 0 ? '' : _theme$getCodeProps$c,\n          themeProps = _objectWithoutProperties(_theme$getCodeProps, [\"className\"]);\n\n      return React.createElement(Text, _extends({\n        is: \"code\",\n        className: cx(className, themedClassName),\n        fontFamily: \"mono\"\n      }, themeProps, props));\n    }\n  }]);\n\n  return Code;\n}(PureComponent);\n\nCode.displayName = \"Code\";\n\n_defineProperty(Code, \"propTypes\", _objectSpread({}, Text.propTypes, {\n  /**\n   * The appearance of the code.\n   */\n  appearance: PropTypes.oneOf(['default', 'minimal']).isRequired,\n\n  /**\n   * Theme provided by ThemeProvider.\n   */\n  theme: PropTypes.object.isRequired,\n\n  /**\n   * Class name passed to the button.\n   * Only use if you know what you are doing.\n   */\n  className: PropTypes.string\n}));\n\n_defineProperty(Code, \"defaultProps\", {\n  appearance: 'default'\n});\n\nexport default withTheme(Code);","map":null,"metadata":{},"sourceType":"module"}