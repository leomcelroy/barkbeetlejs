{"ast":null,"code":"import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport { spacing, dimensions, position, layout } from 'ui-box';\nimport { withTheme } from '../../theme';\nimport { Pane } from '../../layers';\nimport { Text } from '../../typography';\nimport { Icon } from '../../icon';\n\nvar InlineAlert =\n/*#__PURE__*/\nfunction (_PureComponent) {\n  _inherits(InlineAlert, _PureComponent);\n\n  function InlineAlert() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, InlineAlert);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(InlineAlert)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"getIconForIntent\", function (intent) {\n      var theme = _this.props.theme;\n      return React.createElement(Icon, _extends({\n        size: 14,\n        marginTop: 2\n      }, theme.getIconForIntent(intent)));\n    });\n\n    return _this;\n  }\n\n  _createClass(InlineAlert, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          theme = _this$props.theme,\n          children = _this$props.children,\n          intent = _this$props.intent,\n          hasIcon = _this$props.hasIcon,\n          size = _this$props.size,\n          props = _objectWithoutProperties(_this$props, [\"theme\", \"children\", \"intent\", \"hasIcon\", \"size\"]);\n\n      return React.createElement(Pane, _extends({\n        alignItems: \"center\",\n        display: \"flex\"\n      }, props), hasIcon && React.createElement(Pane, {\n        display: \"inline\",\n        marginRight: 8\n      }, this.getIconForIntent(intent)), React.createElement(Text, {\n        size: size,\n        fontWeight: 500\n      }, children));\n    }\n  }]);\n\n  return InlineAlert;\n}(PureComponent);\n\nInlineAlert.displayName = \"InlineAlert\";\n\n_defineProperty(InlineAlert, \"propTypes\", _objectSpread({}, spacing.propTypes, position.propTypes, layout.propTypes, dimensions.propTypes, {\n  /**\n   * The content of the alert.\n   */\n  children: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n\n  /**\n   * The intent of the alert. This should always be set explicitly.\n   */\n  intent: PropTypes.oneOf(['none', 'success', 'warning', 'danger']).isRequired,\n\n  /**\n   * When true, show a icon on the left matching the type.\n   * There is no point not showing this.\n   */\n  hasIcon: PropTypes.bool,\n\n  /**\n   * The size of the Text.\n   */\n  size: PropTypes.number,\n\n  /**\n   * Theme provided by ThemeProvider.\n   */\n  theme: PropTypes.object.isRequired\n}));\n\n_defineProperty(InlineAlert, \"defaultProps\", {\n  intent: 'none',\n  hasIcon: true,\n  size: 400\n});\n\nexport default withTheme(InlineAlert);","map":null,"metadata":{},"sourceType":"module"}