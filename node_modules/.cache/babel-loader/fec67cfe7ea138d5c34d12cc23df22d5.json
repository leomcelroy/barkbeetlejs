{"ast":null,"code":"import _toConsumableArray from \"/Users/leomcelroy/Desktop/barkbeetle_js/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport { clipOffset } from '../unmakerjs/clipper.js';\n\nvar offsetFunc = function offsetFunc(offset) {\n  if (offset === \"outside\") {\n    return false;\n  } else if (offset === \"inside\") {\n    return true;\n  } else if (offset === \"none\") {\n    return \"none\";\n  }\n};\n\nvar profile = function profile(contour, params) {\n  var p = contour;\n  var outline;\n  var offset = offsetFunc(params.offset);\n\n  if (offset === \"none\") {\n    outline = contour;\n  } else {\n    //outline = mjs.model.outline(p, params.compensatedRadius, 0, offset); //third parameter is what type of corners, 0 (rounded) by default\n    offset = offset === true ? -1 : 1;\n    outline = clipOffset(p, offset * params.compensatedRadius);\n  }\n\n  var contourLines = Object.values(outline).flat();\n  var keyPoints = contourLines.map(function (line) {\n    return [line.origin[0], line.origin[1]];\n  });\n  var gcodePoints = keyPoints.map(function (p) {\n    return \"G1 X\".concat(p[0], \" Y\").concat(p[1], \" F\").concat(params.feedRate);\n  }); //let gcode = JSON.parse(JSON.stringify(gcodePoints));\n\n  var firstPoint = keyPoints[0];\n  var paths = params.depthOfPasses.map(function (p, i) {\n    return [\"G1 Z\".concat(params.depthOfPasses[i], \" F12.0\")].concat(_toConsumableArray(gcodePoints), [\"G1 X\".concat(firstPoint[0], \" Y\").concat(firstPoint[1], \" F\").concat(params.feedRate)]);\n  });\n  paths = paths.flat(1);\n  var preamble = [params.units, \"G90\"];\n  var gcode = [].concat(preamble, [\"(end of preamble)\", \"G1 Z\".concat(params.jogHeight, \" F\").concat(params.jogRate), \"G0 X\".concat(firstPoint[0], \" Y\").concat(firstPoint[1])], _toConsumableArray(paths), [\"G1 Z\".concat(params.jogHeight, \" F\").concat(params.jogRate)]); // write to a new file named\n\n  var filename = 'testGcodeProfile.gcode';\n  var text = gcode.join('\\n');\n  return {\n    drawing: contourLines,\n    gcode: text,\n    filename: filename\n  };\n};\n\nexport { profile };","map":{"version":3,"sources":["/Users/leomcelroy/Desktop/barkbeetle_js/src/toolpaths/profile.js"],"names":["clipOffset","offsetFunc","offset","profile","contour","params","p","outline","compensatedRadius","contourLines","Object","values","flat","keyPoints","map","line","origin","gcodePoints","feedRate","firstPoint","paths","depthOfPasses","i","preamble","units","gcode","jogHeight","jogRate","filename","text","join","drawing"],"mappings":";AAAA,SAAQA,UAAR,QAAyB,yBAAzB;;AAGA,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAACC,MAAD,EAAY;AAC7B,MAAIA,MAAM,KAAK,SAAf,EAA0B;AACxB,WAAO,KAAP;AACD,GAFD,MAEO,IAAIA,MAAM,KAAK,QAAf,EAAyB;AAC9B,WAAO,IAAP;AACD,GAFM,MAEA,IAAIA,MAAM,KAAK,MAAf,EAAuB;AAC5B,WAAO,MAAP;AACD;AACF,CARD;;AAUA,IAAMC,OAAO,GAAG,SAAVA,OAAU,CAACC,OAAD,EAAUC,MAAV,EAAqB;AACnC,MAAIC,CAAC,GAAGF,OAAR;AAEA,MAAIG,OAAJ;AACA,MAAIL,MAAM,GAAGD,UAAU,CAACI,MAAM,CAACH,MAAR,CAAvB;;AACA,MAAIA,MAAM,KAAK,MAAf,EAAuB;AACrBK,IAAAA,OAAO,GAAGH,OAAV;AACD,GAFD,MAEO;AACL;AACAF,IAAAA,MAAM,GAAIA,MAAM,KAAK,IAAZ,GAAoB,CAAC,CAArB,GAAyB,CAAlC;AACAK,IAAAA,OAAO,GAAGP,UAAU,CAACM,CAAD,EAAIJ,MAAM,GAAGG,MAAM,CAACG,iBAApB,CAApB;AACD;;AACD,MAAIC,YAAY,GAAGC,MAAM,CAACC,MAAP,CAAcJ,OAAd,EAAuBK,IAAvB,EAAnB;AAEA,MAAIC,SAAS,GAAGJ,YAAY,CAACK,GAAb,CAAiB,UAAAC,IAAI;AAAA,WAAI,CAACA,IAAI,CAACC,MAAL,CAAY,CAAZ,CAAD,EAAiBD,IAAI,CAACC,MAAL,CAAY,CAAZ,CAAjB,CAAJ;AAAA,GAArB,CAAhB;AAEA,MAAIC,WAAW,GAAGJ,SAAS,CAACC,GAAV,CAAc,UAAAR,CAAC;AAAA,yBAAWA,CAAC,CAAC,CAAD,CAAZ,eAAoBA,CAAC,CAAC,CAAD,CAArB,eAA6BD,MAAM,CAACa,QAApC;AAAA,GAAf,CAAlB,CAhBmC,CAiBnC;;AAEA,MAAIC,UAAU,GAAGN,SAAS,CAAC,CAAD,CAA1B;AAEA,MAAIO,KAAK,GAAGf,MAAM,CAACgB,aAAP,CAAqBP,GAArB,CAAyB,UAACR,CAAD,EAAGgB,CAAH;AAAA,0BAC5BjB,MAAM,CAACgB,aAAP,CAAqBC,CAArB,CAD4B,uCAEhCL,WAFgC,kBAG5BE,UAAU,CAAC,CAAD,CAHkB,eAGVA,UAAU,CAAC,CAAD,CAHA,eAGQd,MAAM,CAACa,QAHf;AAAA,GAAzB,CAAZ;AAMAE,EAAAA,KAAK,GAAGA,KAAK,CAACR,IAAN,CAAW,CAAX,CAAR;AAEA,MAAIW,QAAQ,GAAG,CAAClB,MAAM,CAACmB,KAAR,EAAe,KAAf,CAAf;AAEA,MAAIC,KAAK,aACJF,QADI,GAEP,mBAFO,gBAGAlB,MAAM,CAACqB,SAHP,eAGqBrB,MAAM,CAACsB,OAH5B,iBAIAR,UAAU,CAAC,CAAD,CAJV,eAIkBA,UAAU,CAAC,CAAD,CAJ5B,uBAKJC,KALI,kBAMAf,MAAM,CAACqB,SANP,eAMqBrB,MAAM,CAACsB,OAN5B,GAAT,CA/BmC,CAwCnC;;AACA,MAAIC,QAAQ,GAAG,wBAAf;AAEA,MAAIC,IAAI,GAAGJ,KAAK,CAACK,IAAN,CAAW,IAAX,CAAX;AAEA,SAAO;AAACC,IAAAA,OAAO,EAAEtB,YAAV;AAAwBgB,IAAAA,KAAK,EAAEI,IAA/B;AAAqCD,IAAAA,QAAQ,EAARA;AAArC,GAAP;AACD,CA9CD;;AAiDA,SAAQzB,OAAR","sourcesContent":["import {clipOffset} from '../unmakerjs/clipper.js'\n\n\nconst offsetFunc = (offset) => {\n  if (offset === \"outside\") {\n    return false;\n  } else if (offset === \"inside\") {\n    return true;\n  } else if (offset === \"none\") {\n    return \"none\";\n  }\n}\n\nconst profile = (contour, params) => {\n  let p = contour;\n\n  let outline;\n  let offset = offsetFunc(params.offset);\n  if (offset === \"none\") {\n    outline = contour;\n  } else {\n    //outline = mjs.model.outline(p, params.compensatedRadius, 0, offset); //third parameter is what type of corners, 0 (rounded) by default\n    offset = (offset === true) ? -1 : 1;\n    outline = clipOffset(p, offset * params.compensatedRadius);\n  }\n  let contourLines = Object.values(outline).flat();\n\n  let keyPoints = contourLines.map(line => [line.origin[0], line.origin[1]]);\n\n  let gcodePoints = keyPoints.map(p => `G1 X${p[0]} Y${p[1]} F${params.feedRate}`)\n  //let gcode = JSON.parse(JSON.stringify(gcodePoints));\n\n  let firstPoint = keyPoints[0];\n\n  let paths = params.depthOfPasses.map((p,i) => [\n    `G1 Z${params.depthOfPasses[i]} F12.0`,\n    ...gcodePoints,\n    `G1 X${firstPoint[0]} Y${firstPoint[1]} F${params.feedRate}`\n  ])\n\n  paths = paths.flat(1);\n\n  let preamble = [params.units, \"G90\"];\n\n  let gcode = [\n    ...preamble,\n    \"(end of preamble)\",\n    `G1 Z${params.jogHeight} F${params.jogRate}`,\n    `G0 X${firstPoint[0]} Y${firstPoint[1]}`,\n    ...paths,\n    `G1 Z${params.jogHeight} F${params.jogRate}`,\n  ]\n\n  // write to a new file named\n  let filename = 'testGcodeProfile.gcode';\n\n  let text = gcode.join('\\n');\n\n  return {drawing: contourLines, gcode: text, filename};\n};\n\n\nexport {profile};\n"]},"metadata":{},"sourceType":"module"}