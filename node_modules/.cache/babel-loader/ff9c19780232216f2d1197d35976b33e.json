{"ast":null,"code":"import tinycolor from 'tinycolor2';\nimport { Themer } from '../../../../themer';\nimport memoizeClassName from '../utils/memoizeClassName';\nimport palette from '../foundational-styles/palette';\n/**\n * The link appearance unlike the Button is based on the color property.\n * Currently the Link does not support the Intent or the appearance interface.\n * @param {string} color\n * @return {Object} appearance of the link.\n */\n\nvar getLinkAppearance = function getLinkAppearance(color) {\n  switch (color) {\n    case 'neutral':\n      return Themer.createLinkAppearance({\n        base: {\n          color: palette.neutral.base\n        },\n        hover: {\n          color: tinycolor(palette.neutral.base).lighten(10).toString()\n        },\n        active: {\n          color: tinycolor(palette.neutral.base).darken(10).toString()\n        },\n        focus: {\n          boxShadow: \"0 0 0 2px \".concat(tinycolor(palette.neutral.base).setAlpha(0.4).toString())\n        }\n      });\n\n    case 'green':\n      return Themer.createLinkAppearance({\n        base: {\n          color: palette.green.base\n        },\n        hover: {\n          color: tinycolor(palette.green.base).lighten(10).toString()\n        },\n        active: {\n          color: tinycolor(palette.green.base).darken(10).toString()\n        },\n        focus: {\n          boxShadow: \"0 0 0 2px \".concat(tinycolor(palette.green.base).setAlpha(0.4).toString())\n        }\n      });\n\n    case 'default':\n    case 'blue':\n    default:\n      return Themer.createLinkAppearance({\n        base: {\n          color: palette.blue.base\n        },\n        hover: {\n          color: tinycolor(palette.blue.base).lighten(10).toString()\n        },\n        active: {\n          color: tinycolor(palette.blue.base).darken(10).toString()\n        },\n        focus: {\n          boxShadow: \"0 0 0 2px \".concat(tinycolor(palette.blue.base).setAlpha(0.4).toString())\n        }\n      });\n  }\n};\n/**\n * Get the className of a `Link` component.\n * @param {string} color\n * @return {string} the appearance class name.\n */\n\n\nexport default memoizeClassName(getLinkAppearance);","map":null,"metadata":{},"sourceType":"module"}