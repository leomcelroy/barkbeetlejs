"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf3 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _arrify = _interopRequireDefault(require("arrify"));

var _popover = require("../../popover");

var _constants = require("../../constants");

var _SelectMenuContent = _interopRequireDefault(require("./SelectMenuContent"));

var _OptionShapePropType = _interopRequireDefault(require("./OptionShapePropType"));

var _SelectedPropType = _interopRequireDefault(require("./SelectedPropType"));

var SelectMenu =
/*#__PURE__*/
function (_PureComponent) {
  (0, _inherits2.default)(SelectMenu, _PureComponent);

  function SelectMenu() {
    var _getPrototypeOf2;

    var _this;

    (0, _classCallCheck2.default)(this, SelectMenu);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(SelectMenu)).call.apply(_getPrototypeOf2, [this].concat(args)));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getDetailView", function (close, detailView) {
      if (typeof detailView === 'function') {
        return {
          detailView: detailView({
            close: close
          })
        };
      }

      if (detailView) {
        return {
          detailView: detailView
        };
      }

      return {};
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getEmptyView", function (close, emptyView) {
      if (typeof emptyView === 'function') {
        return {
          emptyView: emptyView({
            close: close
          })
        };
      }

      if (emptyView) {
        return {
          emptyView: emptyView
        };
      }

      return {};
    });
    return _this;
  }

  (0, _createClass2.default)(SelectMenu, [{
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props = this.props,
          title = _this$props.title,
          width = _this$props.width,
          height = _this$props.height,
          options = _this$props.options,
          selected = _this$props.selected,
          position = _this$props.position,
          hasTitle = _this$props.hasTitle,
          hasFilter = _this$props.hasFilter,
          filterPlaceholder = _this$props.filterPlaceholder,
          filterIcon = _this$props.filterIcon,
          detailView = _this$props.detailView,
          emptyView = _this$props.emptyView,
          titleView = _this$props.titleView,
          isMultiSelect = _this$props.isMultiSelect,
          props = (0, _objectWithoutProperties2.default)(_this$props, ["title", "width", "height", "options", "selected", "position", "hasTitle", "hasFilter", "filterPlaceholder", "filterIcon", "detailView", "emptyView", "titleView", "isMultiSelect"]);
      return _react.default.createElement(_popover.Popover, (0, _extends2.default)({
        minWidth: width,
        position: position,
        minHeight: height,
        content: function content(_ref) {
          var close = _ref.close;
          return _react.default.createElement(_SelectMenuContent.default, (0, _extends2.default)({
            width: width,
            height: height,
            options: options,
            title: title,
            hasFilter: hasFilter,
            filterPlaceholder: filterPlaceholder,
            filterIcon: filterIcon,
            hasTitle: hasTitle,
            isMultiSelect: isMultiSelect,
            titleView: titleView,
            listProps: {
              onSelect: function onSelect(item) {
                _this2.props.onSelect(item);
              },
              onDeselect: function onDeselect(item) {
                _this2.props.onDeselect(item);
              },
              onFilterChange: _this2.props.onFilterChange,
              selected: (0, _arrify.default)(selected)
            },
            close: close
          }, _this2.getDetailView(close, detailView), _this2.getEmptyView(close, emptyView)));
        }
      }, props));
    }
  }]);
  return SelectMenu;
}(_react.PureComponent);

exports.default = SelectMenu;
SelectMenu.displayName = "SelectMenu";
(0, _defineProperty2.default)(SelectMenu, "propTypes", {
  /**
   * The title of the Select Menu.
   */
  title: _propTypes.default.string,

  /**
   * The width of the Select Menu.
   */
  width: _propTypes.default.number,

  /**
   * The height of the Select Menu.
   */
  height: _propTypes.default.number,

  /**
   * The options to show in the menu.
   * [{ label: String, value: String | Number }]
   */
  options: _propTypes.default.arrayOf(_OptionShapePropType.default),

  /**
   * Function that is called when an option is selected.
   */
  onSelect: _propTypes.default.func,

  /**
   * Function that is called when an option is deselected.
   */
  onDeselect: _propTypes.default.func,

  /**
   * The selected value/values.
   */
  selected: _SelectedPropType.default,

  /**
   * When true, multi select is accounted for.
   */
  isMultiSelect: _propTypes.default.bool,

  /**
   * When true, show the title.
   */
  hasTitle: _propTypes.default.bool,

  /**
   * When true, show the filter.
   */
  hasFilter: _propTypes.default.bool,

  /**
   * The placeholder of the search filter.
   */
  filterPlaceholder: _propTypes.default.string,

  /**
   * The icon of the search filter.
   */
  filterIcon: _propTypes.default.string,

  /**
   * Function that is called as the onChange() event for the filter.
   */
  onFilterChange: _propTypes.default.func,

  /**
   * The position of the Select Menu.
   */
  position: _propTypes.default.oneOf([_constants.Position.TOP, _constants.Position.TOP_LEFT, _constants.Position.TOP_RIGHT, _constants.Position.BOTTOM, _constants.Position.BOTTOM_LEFT, _constants.Position.BOTTOM_RIGHT]),

  /**
   * Can be a function that returns a node, or a node itself, that is
   * rendered on the right side of the Select Menu to give additional
   * information when an option is selected.
   */
  detailView: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.node]),

  /**
   * Can be a function that returns a node, or a node itself, that is
   * rendered in the header section of the Select Menu to customize
   * the header.
   */
  titleView: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.node]),

  /**
   * Can be a function that returns a node, or a node itself, that is
   * rendered instead of the options list when there are no options.
   */
  emptyView: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.node])
});
(0, _defineProperty2.default)(SelectMenu, "defaultProps", {
  onSelect: function onSelect() {},
  onDeselect: function onDeselect() {},
  width: 240,
  height: 248,
  position: _constants.Position.BOTTOM_LEFT,
  isMultiSelect: false,
  filterPlaceholder: 'Filter...',
  filterIcon: 'search'
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zZWxlY3QtbWVudS9zcmMvU2VsZWN0TWVudS5qcyJdLCJuYW1lcyI6WyJTZWxlY3RNZW51IiwiY2xvc2UiLCJkZXRhaWxWaWV3IiwiZW1wdHlWaWV3IiwicHJvcHMiLCJ0aXRsZSIsIndpZHRoIiwiaGVpZ2h0Iiwib3B0aW9ucyIsInNlbGVjdGVkIiwicG9zaXRpb24iLCJoYXNUaXRsZSIsImhhc0ZpbHRlciIsImZpbHRlclBsYWNlaG9sZGVyIiwiZmlsdGVySWNvbiIsInRpdGxlVmlldyIsImlzTXVsdGlTZWxlY3QiLCJvblNlbGVjdCIsIml0ZW0iLCJvbkRlc2VsZWN0Iiwib25GaWx0ZXJDaGFuZ2UiLCJnZXREZXRhaWxWaWV3IiwiZ2V0RW1wdHlWaWV3IiwiUHVyZUNvbXBvbmVudCIsIlByb3BUeXBlcyIsInN0cmluZyIsIm51bWJlciIsImFycmF5T2YiLCJPcHRpb25TaGFwZVByb3BUeXBlIiwiZnVuYyIsIlNlbGVjdGVkUHJvcFR5cGUiLCJib29sIiwib25lT2YiLCJQb3NpdGlvbiIsIlRPUCIsIlRPUF9MRUZUIiwiVE9QX1JJR0hUIiwiQk9UVE9NIiwiQk9UVE9NX0xFRlQiLCJCT1RUT01fUklHSFQiLCJvbmVPZlR5cGUiLCJub2RlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztJQUVxQkEsVTs7Ozs7Ozs7Ozs7Ozs7Ozs7Z0dBZ0hILFVBQUNDLEtBQUQsRUFBUUMsVUFBUixFQUF1QjtBQUNyQyxVQUFJLE9BQU9BLFVBQVAsS0FBc0IsVUFBMUIsRUFBc0M7QUFDcEMsZUFBTztBQUNMQSxVQUFBQSxVQUFVLEVBQUVBLFVBQVUsQ0FBQztBQUFFRCxZQUFBQSxLQUFLLEVBQUxBO0FBQUYsV0FBRDtBQURqQixTQUFQO0FBR0Q7O0FBRUQsVUFBSUMsVUFBSixFQUFnQjtBQUNkLGVBQU87QUFBRUEsVUFBQUEsVUFB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QkwsbUJBQVVpQixJQUEzQixDQUFwQixDQTNGTTs7QUE2RmpCOzs7O0FBSUF0QyxFQUFBQSxTQUFTLEVBQUVxQixtQkFBVWdCLFNBQVYsQ0FBb0IsQ0FBQ2hCLG1CQUFVSyxJQUFYLEVBQWlCTCxtQkFBVWlCLElBQTNCLENBQXBCO0FBakdNLEM7OEJBREF6QyxVLGtCQXFHRztBQUNwQmlCLEVBQUFBLFFBQVEsRUFBRSxvQkFBTSxDQUFFLENBREU7QUFFcEJFLEVBQUFBLFVBQVUsRUFBRSxzQkFBTSxDQUFFLENBRkE7QUFHcEJiLEVBQUFBLEtBQUssRUFBRSxHQUhhO0FBSXBCQyxFQUFBQSxNQUFNLEVBQUUsR0FKWTtBQUtwQkcsRUFBQUEsUUFBUSxFQUFFdUIsb0JBQVNLLFdBTEM7QUFNcEJ0QixFQUFBQSxhQUFhLEVBQUUsS0FOSztBQU9wQkgsRUFBQUEsaUJBQWlCLEVBQUUsV0FQQztBQVFwQkMsRUFBQUEsVUFBVSxFQUFFO0FBUlEsQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwgeyBQdXJlQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnXG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnXG5pbXBvcnQgYXJyaWZ5IGZyb20gJ2FycmlmeSdcbmltcG9ydCB7IFBvcG92ZXIgfSBmcm9tICcuLi8uLi9wb3BvdmVyJ1xuaW1wb3J0IHsgUG9zaXRpb24gfSBmcm9tICcuLi8uLi9jb25zdGFudHMnXG5pbXBvcnQgU2VsZWN0TWVudUNvbnRlbnQgZnJvbSAnLi9TZWxlY3RNZW51Q29udGVudCdcbmltcG9ydCBPcHRpb25TaGFwZVByb3BUeXBlIGZyb20gJy4vT3B0aW9uU2hhcGVQcm9wVHlwZSdcbmltcG9ydCBTZWxlY3RlZFByb3BUeXBlIGZyb20gJy4vU2VsZWN0ZWRQcm9wVHlwZSdcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2VsZWN0TWVudSBleHRlbmRzIFB1cmVDb21wb25lbnQge1xuICBzdGF0aWMgcHJvcFR5cGVzID0ge1xuICAgIC8qKlxuICAgICAqIFRoZSB0aXRsZSBvZiB0aGUgU2VsZWN0IE1lbnUuXG4gICAgICovXG4gICAgdGl0bGU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgICAvKipcbiAgICAgKiBUaGUgd2lkdGggb2YgdGhlIFNlbGVjdCBNZW51LlxuICAgICAqL1xuICAgIHdpZHRoOiBQcm9wVHlwZXMubnVtYmVyLFxuXG4gICAgLyoqXG4gICAgICogVGhlIGhlaWdodCBvZiB0aGUgU2VsZWN0IE1lbnUuXG4gICAgICovXG4gICAgaGVpZ2h0OiBQcm9wVHlwZXMubnVtYmVyLFxuXG4gICAgLyoqXG4gICAgICogVGhlIG9wdGlvbnMgdG8gc2hvdyBpbiB0aGUgbWVudS5cbiAgICAgKiBbeyBsYWJlbDogU3RyaW5nLCB2YWx1ZTogU3RyaW5nIHwgTnVtYmVyIH1dXG4gICAgICovXG4gICAgb3B0aW9uczogUHJvcFR5cGVzLmFycmF5T2YoT3B0aW9uU2hhcGVQcm9wVHlwZSksXG5cbiAgICAvKipcbiAgICAgKiBGdW5jdGlvbiB0aGF0IGlzIGNhbGxlZCB3aGVuIGFuIG9wdGlvbiBpcyBzZWxlY3RlZC5cbiAgICAgKi9cbiAgICBvblNlbGVjdDogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgICAvKipcbiAgICAgKiBGdW5jdGlvbiB0aGF0IGlzIGNhbGxlZCB3aGVuIGFuIG9wdGlvbiBpcyBkZXNlbGVjdGVkLlxuICAgICAqL1xuICAgIG9uRGVzZWxlY3Q6IFByb3BUeXBlcy5mdW5jLFxuXG4gICAgLyoqXG4gICAgICogVGhlIHNlbGVjdGVkIHZhbHVlL3ZhbHVlcy5cbiAgICAgKi9cbiAgICBzZWxlY3RlZDogU2VsZWN0ZWRQcm9wVHlwZSxcblxuICAgIC8qKlxuICAgICAqIFdoZW4gdHJ1ZSwgbXVsdGkgc2VsZWN0IGlzIGFjY291bnRlZCBmb3IuXG4gICAgICovXG4gICAgaXNNdWx0aVNlbGVjdDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgICAvKipcbiAgICAgKiBXaGVuIHRydWUsIHNob3cgdGhlIHRpdGxlLlxuICAgICAqL1xuICAgIGhhc1RpdGxlOiBQcm9wVHlwZXMuYm9vbCxcblxuICAgIC8qKlxuICAgICAqIFdoZW4gdHJ1ZSwgc2hvdyB0aGUgZmlsdGVyLlxuICAgICAqL1xuICAgIGhhc0ZpbHRlcjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgICAvKipcbiAgICAgKiBUaGUgcGxhY2Vob2xkZXIgb2YgdGhlIHNlYXJjaCBmaWx0ZXIuXG4gICAgICovXG4gICAgZmlsdGVyUGxhY2Vob2xkZXI6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgICAvKipcbiAgICAgKiBUaGUgaWNvbiBvZiB0aGUgc2VhcmNoIGZpbHRlci5cbiAgICAgKi9cbiAgICBmaWx0ZXJJY29uOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gICAgLyoqXG4gICAgICogRnVuY3Rpb24gdGhhdCBpcyBjYWxsZWQgYXMgdGhlIG9uQ2hhbmdlKCkgZXZlbnQgZm9yIHRoZSBmaWx0ZXIuXG4gICAgICovXG4gICAgb25GaWx0ZXJDaGFuZ2U6IFByb3BUeXBlcy5mdW5jLFxuXG4gICAgLyoqXG4gICAgICogVGhlIHBvc2l0aW9uIG9mIHRoZSBTZWxlY3QgTWVudS5cbiAgICAgKi9cbiAgICBwb3NpdGlvbjogUHJvcFR5cGVzLm9uZU9mKFtcbiAgICAgIFBvc2l0aW9uLlRPUCxcbiAgICAgIFBvc2l0aW9uLlRPUF9MRUZULFxuICAgICAgUG9zaXRpb24uVE9QX1JJR0hULFxuICAgICAgUG9zaXRpb24uQk9UVE9NLFxuICAgICAgUG9zaXRpb24uQk9UVE9NX0xFRlQsXG4gICAgICBQb3NpdGlvbi5CT1RUT01fUklHSFRcbiAgICBdKSxcblxuICAgIC8qKlxuICAgICAqIENhbiBiZSBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBhIG5vZGUsIG9yIGEgbm9kZSBpdHNlbGYsIHRoYXQgaXNcbiAgICAgKiByZW5kZXJlZCBvbiB0aGUgcmlnaHQgc2lkZSBvZiB0aGUgU2VsZWN0IE1lbnUgdG8gZ2l2ZSBhZGRpdGlvbmFsXG4gICAgICogaW5mb3JtYXRpb24gd2hlbiBhbiBvcHRpb24gaXMgc2VsZWN0ZWQuXG4gICAgICovXG4gICAgZGV0YWlsVmlldzogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5ub2RlXSksXG5cbiAgICAvKipcbiAgICAgKiBDYW4gYmUgYSBmdW5jdGlvbiB0aGF0IHJldHVybnMgYSBub2RlLCBvciBhIG5vZGUgaXRzZWxmLCB0aGF0IGlzXG4gICAgICogcmVuZGVyZWQgaW4gdGhlIGhlYWRlciBzZWN0aW9uIG9mIHRoZSBTZWxlY3QgTWVudSB0byBjdXN0b21pemVcbiAgICAgKiB0aGUgaGVhZGVyLlxuICAgICAqL1xuICAgIHRpdGxlVmlldzogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5ub2RlXSksXG5cbiAgICAvKipcbiAgICAgKiBDYW4gYmUgYSBmdW5jdGlvbiB0aGF0IHJldHVybnMgYSBub2RlLCBvciBhIG5vZGUgaXRzZWxmLCB0aGF0IGlzXG4gICAgICogcmVuZGVyZWQgaW5zdGVhZCBvZiB0aGUgb3B0aW9ucyBsaXN0IHdoZW4gdGhlcmUgYXJlIG5vIG9wdGlvbnMuXG4gICAgICovXG4gICAgZW1wdHlWaWV3OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm5vZGVdKVxuICB9XG5cbiAgc3RhdGljIGRlZmF1bHRQcm9wcyA9IHtcbiAgICBvblNlbGVjdDogKCkgPT4ge30sXG4gICAgb25EZXNlbGVjdDogKCkgPT4ge30sXG4gICAgd2lkdGg6IDI0MCxcbiAgICBoZWlnaHQ6IDI0OCxcbiAgICBwb3NpdGlvbjogUG9zaXRpb24uQk9UVE9NX0xFRlQsXG4gICAgaXNNdWx0aVNlbGVjdDogZmFsc2UsXG4gICAgZmlsdGVyUGxhY2Vob2xkZXI6ICdGaWx0ZXIuLi4nLFxuICAgIGZpbHRlckljb246ICdzZWFyY2gnXG4gIH1cblxuICBnZXREZXRhaWxWaWV3ID0gKGNsb3NlLCBkZXRhaWxWaWV3KSA9PiB7XG4gICAgaWYgKHR5cGVvZiBkZXRhaWxWaWV3ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBkZXRhaWxWaWV3OiBkZXRhaWxWaWV3KHsgY2xvc2UgfSlcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoZGV0YWlsVmlldykge1xuICAgICAgcmV0dXJuIHsgZGV0YWlsVmlldyB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHt9XG4gIH1cblxuICBnZXRFbXB0eVZpZXcgPSAoY2xvc2UsIGVtcHR5VmlldykgPT4ge1xuICAgIGlmICh0eXBlb2YgZW1wdHlWaWV3ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBlbXB0eVZpZXc6IGVtcHR5Vmlldyh7IGNsb3NlIH0pXG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGVtcHR5Vmlldykge1xuICAgICAgcmV0dXJuIHsgZW1wdHlWaWV3IH1cbiAgICB9XG5cbiAgICByZXR1cm4ge31cbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7XG4gICAgICB0aXRsZSxcbiAgICAgIHdpZHRoLFxuICAgICAgaGVpZ2h0LFxuICAgICAgb3B0aW9ucyxcbiAgICAgIHNlbGVjdGVkLFxuICAgICAgcG9zaXRpb24sXG4gICAgICBoYXNUaXRsZSxcbiAgICAgIGhhc0ZpbHRlcixcbiAgICAgIGZpbHRlclBsYWNlaG9sZGVyLFxuICAgICAgZmlsdGVySWNvbixcbiAgICAgIGRldGFpbFZpZXcsXG4gICAgICBlbXB0eVZpZXcsXG4gICAgICB0aXRsZVZpZXcsXG4gICAgICBpc011bHRpU2VsZWN0LFxuICAgICAgLi4ucHJvcHNcbiAgICB9ID0gdGhpcy5wcm9wc1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxQb3BvdmVyXG4gICAgICAgIG1pbldpZHRoPXt3aWR0aH1cbiAgICAgICAgcG9zaXRpb249e3Bvc2l0aW9ufVxuICAgICAgICBtaW5IZWlnaHQ9e2hlaWdodH1cbiAgICAgICAgY29udGVudD17KHsgY2xvc2UgfSkgPT4gKFxuICAgICAgICAgIDxTZWxlY3RNZW51Q29udGVudFxuICAgICAgICAgICAgd2lkdGg9e3dpZHRofVxuICAgICAgICAgICAgaGVpZ2h0PXtoZWlnaHR9XG4gICAgICAgICAgICBvcHRpb25zPXtvcHRpb25zfVxuICAgICAgICAgICAgdGl0bGU9e3RpdGxlfVxuICAgICAgICAgICAgaGFzRmlsdGVyPXtoYXNGaWx0ZXJ9XG4gICAgICAgICAgICBmaWx0ZXJQbGFjZWhvbGRlcj17ZmlsdGVyUGxhY2Vob2xkZXJ9XG4gICAgICAgICAgICBmaWx0ZXJJY29uPXtmaWx0ZXJJY29ufVxuICAgICAgICAgICAgaGFzVGl0bGU9e2hhc1RpdGxlfVxuICAgICAgICAgICAgaXNNdWx0aVNlbGVjdD17aXNNdWx0aVNlbGVjdH1cbiAgICAgICAgICAgIHRpdGxlVmlldz17dGl0bGVWaWV3fVxuICAgICAgICAgICAgbGlzdFByb3BzPXt7XG4gICAgICAgICAgICAgIG9uU2VsZWN0OiBpdGVtID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLnByb3BzLm9uU2VsZWN0KGl0ZW0pXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIG9uRGVzZWxlY3Q6IGl0ZW0gPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMucHJvcHMub25EZXNlbGVjdChpdGVtKVxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBvbkZpbHRlckNoYW5nZTogdGhpcy5wcm9wcy5vbkZpbHRlckNoYW5nZSxcbiAgICAgICAgICAgICAgc2VsZWN0ZWQ6IGFycmlmeShzZWxlY3RlZClcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgICBjbG9zZT17Y2xvc2V9XG4gICAgICAgICAgICB7Li4udGhpcy5nZXREZXRhaWxWaWV3KGNsb3NlLCBkZXRhaWxWaWV3KX1cbiAgICAgICAgICAgIHsuLi50aGlzLmdldEVtcHR5VmlldyhjbG9zZSwgZW1wdHlWaWV3KX1cbiAgICAgICAgICAvPlxuICAgICAgICApfVxuICAgICAgICB7Li4ucHJvcHN9XG4gICAgICAvPlxuICAgIClcbiAgfVxufVxuIl19