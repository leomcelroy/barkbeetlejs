"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _layers = require("../../layers");

var _typography = require("../../typography");

var _buttons = require("../../buttons");

var _OptionsList = _interopRequireDefault(require("./OptionsList"));

var _OptionShapePropType = _interopRequireDefault(require("./OptionShapePropType"));

var DefaultTitleView = function DefaultTitleView(_ref) {
  var close = _ref.close,
      title = _ref.title,
      headerHeight = _ref.headerHeight;
  return _react.default.createElement(_layers.Pane, {
    display: "flex",
    alignItems: "center",
    borderBottom: "default",
    padding: 8,
    height: headerHeight,
    boxSizing: "border-box"
  }, _react.default.createElement(_layers.Pane, {
    flex: "1",
    display: "flex",
    alignItems: "center"
  }, _react.default.createElement(_typography.Heading, {
    size: 400
  }, title)), _react.default.createElement(_buttons.IconButton, {
    icon: "cross",
    appearance: "minimal",
    height: 24,
    onClick: close
  }));
};

DefaultTitleView.displayName = "DefaultTitleView";
DefaultTitleView.propTypes = {
  close: _propTypes.default.func,
  title: _propTypes.default.string,
  headerHeight: _propTypes.default.number
};

var SelectMenuContent =
/*#__PURE__*/
function (_PureComponent) {
  (0, _inherits2.default)(SelectMenuContent, _PureComponent);

  function SelectMenuContent() {
    (0, _classCallCheck2.default)(this, SelectMenuContent);
    return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(SelectMenuContent).apply(this, arguments));
  }

  (0, _createClass2.default)(SelectMenuContent, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          title = _this$props.title,
          width = _this$props.width,
          height = _this$props.height,
          options = _this$props.options,
          hasTitle = _this$props.hasTitle,
          hasFilter = _this$props.hasFilter,
          filterPlaceholder = _this$props.filterPlaceholder,
          filterIcon = _this$props.filterIcon,
          close = _this$props.close,
          listProps = _this$props.listProps,
          titleView = _this$props.titleView,
          detailView = _this$props.detailView,
          emptyView = _this$props.emptyView,
          isMultiSelect = _this$props.isMultiSelect;
      var headerHeight = 40;
      var optionsListHeight = hasTitle ? height - headerHeight : height;
      var hasDetailView = Boolean(detailView);
      var hasEmptyView = Boolean(emptyView);
      return _react.default.createElement(_layers.Pane, {
        display: "flex",
        height: height
      }, _react.default.createElement(_layers.Pane, {
        width: width,
        height: height,
        display: "flex",
        flexDirection: "column",
        borderRight: hasDetailView ? 'muted' : null
      }, hasTitle && titleView({
        close: close,
        title: title,
        headerHeight: headerHeight
      }), options.length === 0 && hasEmptyView ? _react.default.createElement(_layers.Pane, {
        height: optionsListHeight
      }, emptyView) : _react.default.createElement(_OptionsList.default, (0, _extends2.default)({
        height: optionsListHeight,
        hasFilter: hasFilter,
        filterPlaceholder: filterPlaceholder,
        filterIcon: filterIcon,
        options: options,
        isMultiSelect: isMultiSelect,
        close: close
      }, listProps))), hasDetailView && detailView);
    }
  }]);
  return SelectMenuContent;
}(_react.PureComponent);

exports.default = SelectMenuContent;
SelectMenuContent.displayName = "SelectMenuContent";
(0, _defineProperty2.default)(SelectMenuContent, "propTypes", {
  close: _propTypes.default.func,
  title: _propTypes.default.string,
  width: _propTypes.default.number,
  height: _propTypes.default.number,
  headerHeight: _propTypes.default.number,
  options: _propTypes.default.arrayOf(_OptionShapePropType.default),
  hasTitle: _propTypes.default.bool,
  hasFilter: _propTypes.default.bool,
  filterPlaceholder: _propTypes.default.string,
  filterIcon: _propTypes.default.string,
  listProps: _propTypes.default.shape(_OptionsList.default.propTypes),

  /**
   * When true, multi select is accounted for.
   */
  isMultiSelect: _propTypes.default.bool,

  /**
   * Node that is placed in the header section, above the options.
   */
  titleView: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.node]),

  /**
   * Node that is placed right next to the options.
   */
  detailView: _propTypes.default.node,

  /**
   * Node that is displayed instead of options list when there are no options.
   */
  emptyView: _propTypes.default.node
});
(0, _defineProperty2.default)(SelectMenuContent, "defaultProps", {
  options: [],
  hasTitle: true,
  hasFilter: true,
  titleView: DefaultTitleView
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,