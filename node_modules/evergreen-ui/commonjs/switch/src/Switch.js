"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _uiBox = _interopRequireWildcard(require("ui-box"));

var _theme = require("../../theme");

var animationEasing = {
  spring: "cubic-bezier(0.175, 0.885, 0.320, 1.175)"
};
var handleStyle = {
  backgroundColor: '#fff',
  borderRadius: 9999
};
var iconContainerStyle = {
  transition: "all 500ms ".concat(animationEasing.spring),
  opacity: 0,
  transform: 'scale(0.0)',
  display: 'flex',
  position: 'absolute',
  alignItems: 'center',
  justifyContent: 'center',
  paddingLeft: 4,
  '&[data-checked="true"]': {
    opacity: 1,
    transform: 'scale(1)'
  }
};
var handleContainerStyle = {
  transition: 'transform 200ms ease-in-out',
  transform: 'translateX(0%)',
  '&[data-checked="true"]': {
    transform: 'translateX(50%)'
  }
};

var CheckIcon = function CheckIcon(_ref) {
  var size = _ref.size,
      _ref$fill = _ref.fill,
      fill = _ref$fill === void 0 ? 'currentColor' : _ref$fill,
      props = (0, _objectWithoutProperties2.default)(_ref, ["size", "fill"]);
  return _react.default.createElement("svg", (0, _extends2.default)({
    width: 10,
    height: size,
    viewBox: "0 0 10 7"
  }, props), _react.default.createElement("path", {
    fill: fill,
    fillRule: "evenodd",
    d: "M4 4.586L1.707 2.293A1 1 0 1 0 .293 3.707l3 3a.997.997 0 0 0 1.414 0l5-5A1 1 0 1 0 8.293.293L4 4.586z"
  }));
};

CheckIcon.displayName = "CheckIcon";
CheckIcon.propTypes = {
  fill: _propTypes.default.string,
  size: _propTypes.default.number
};

var isControlled = function isControlled(component) {
  return {}.hasOwnProperty.call(component.props, 'checked');
};

var Switch =
/*#__PURE__*/
function (_PureComponent) {
  (0, _inherits2.default)(Switch, _PureComponent);

  function Switch(props, context) {
    var _this;

    (0, _classCallCheck2.default)(this, Switch);
    _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(Switch).call(this, props, context));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleChange", function (value) {
      if (isControlled((0, _assertThisInitialized2.default)(_this))) {
        _this.props.onChange(value);
      } else {
        _this.setState(function (_ref2) {
          var checked = _ref2.checked;
          return {
            checked: !checked
          };
        });

        _this.props.onChange(value);
      }
    });
    _this.state = {
      checked: props.checked || props.defaultChecked || false
    };
    return _this;
  }

  (0, _createClass2.default)(Switch, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          theme = _this$props.theme,
          id = _this$props.id,
          name = _this$props.name,
          height = _this$props.height,
          checkedProps = _this$props.checked,
          onChange = _this$props.onChange,
          disabled = _this$props.disabled,
          appearance = _this$props.appearance,
          hasCheckIcon = _this$props.hasCheckIcon,
          defaultChecked = _this$props.defaultChecked,
          props = (0, _objectWithoutProperties2.default)(_this$props, ["theme", "id", "name", "height", "checked", "onChange", "disabled", "appearance", "hasCheckIcon", "defaultChecked"]);
      var checked = isControlled(this) ? checkedProps : this.state.checked;
      var themedClassName = theme.getSwitchClassName(appearance);
      return _react.default.createElement(_uiBox.default, (0, _extends2.default)({
        is: "label",
        display: "block",
        width: height * 2,
        position: "relative"
      }, props), _react.default.createElement(_uiBox.default, {
        is: "input",
        className: themedClassName,
        id: id,
        name: name,
        type: "checkbox",
        checked: checked,
        disabled: disabled,
        defaultChecked: defaultChecked,
        onChange: this.handleChange
      }), _react.default.createElement(_uiBox.default, {
        onClick: this.handleClick,
        height: height,
        width: height * 2
      }, _react.default.createElement(_uiBox.default, {
        height: height,
        width: height,
        "data-checked": checked,
        css: iconContainerStyle
      }, hasCheckIcon && _react.default.createElement(CheckIcon, {
        size: height / 2 - 3
      })), _react.default.createElement(_uiBox.default, {
        width: height * 2,
        display: "flex",
        "data-checked": checked,
        css: handleContainerStyle
      }, _react.default.createElement(_uiBox.default, {
        flex: 1,
        padding: 2
      }, _react.default.createElement(_uiBox.default, {
        width: height - 4,
        height: height - 4,
        css: handleStyle
      })))));
    }
  }]);
  return Switch;
}(_react.PureComponent);

Switch.displayName = "Switch";
(0, _defineProperty2.default)(Switch, "propTypes", (0, _objectSpread2.default)({}, _uiBox.spacing.propTypes, _uiBox.position.propTypes, _uiBox.layout.propTypes, {
  /**
   * The id attribute of the radio.
   */
  id: _propTypes.default.string,

  /**
   * The name attribute of the radio.
   */
  name: _propTypes.default.string,

  /**
   * The value attribute of the radio.
   */
  value: _propTypes.default.string,

  /**
   * The height of the switch.
   */
  height: _propTypes.default.number,

  /**
   * When true, the switch is checked (on).
   */
  checked: _propTypes.default.bool,

  /**
   * Function called when state changes.
   */
  onChange: _propTypes.default.func,

  /**
   * When true, the switch is disabled.
   */
  disabled: _propTypes.default.bool,

  /**
   * When true, the switch is invalid.
   */
  isInvalid: _propTypes.default.bool,

  /**
   * The appearance of the checkbox.
   * The default theme only comes with a default style.
   */
  appearance: _propTypes.default.string.isRequired,

  /**
   * When true, the switch has a check icon.
   */
  hasCheckIcon: _propTypes.default.bool,

  /**
   * When true, the switch is true by default.
   * This is for uncontrolled usage.
   */
  defaultChecked: _propTypes.default.bool,

  /**
   * Theme provided by ThemeProvider.
   */
  theme: _propTypes.default.object.isRequired
}));
(0, _defineProperty2.default)(Switch, "defaultProps", {
  height: 16,
  onChange: function onChange() {},
  appearance: 'default',
  hasCheckIcon: true,
  disabled: false
});

var _default = (0, _theme.withTheme)(Switch);

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,