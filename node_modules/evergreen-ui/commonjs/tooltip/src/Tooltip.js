"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _lodash = _interopRequireDefault(require("lodash.debounce"));

var _positioner = require("../../positioner");

var _constants = require("../../constants");

var _TooltipStateless = _interopRequireDefault(require("./TooltipStateless"));

var idCounter = 0;

var Tooltip =
/*#__PURE__*/
function (_PureComponent) {
  (0, _inherits2.default)(Tooltip, _PureComponent);

  function Tooltip(props, context) {
    var _this;

    (0, _classCallCheck2.default)(this, Tooltip);
    _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(Tooltip).call(this, props, context));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "show", function () {
      if (_this.state.isShown) return;

      _this.setState({
        isShown: true
      });
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "hide", function () {
      if (!_this.state.isShown) return;

      _this.setState({
        isShown: false
      });
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "renderTarget", function (_ref) {
      var getRef = _ref.getRef;
      var children = _this.props.children;
      var tooltipTargetProps = {
        onMouseEnter: _this.show,
        onMouseLeave: _this.hide,
        'aria-describedby': _this.state.id
        /**
         * Tooltips can be used within a Popover (not the other way around)
         * When a Tooltip is used within a Popover, the Popover passes
         * its props to the Tooltip in a `popoverProps` object.
         */
        // eslint-disable-next-line react/prop-types

      };

      if (_this.props.popoverProps) {
        var _this$props$popoverPr = _this.props.popoverProps,
            getTargetRef = _this$props$popoverPr.getTargetRef,
            isShown = _this$props$popoverPr.isShown,
            popoverTargetProps = (0, _objectWithoutProperties2.default)(_this$props$popoverPr, ["getTargetRef", "isShown"]);
        return _react.default.cloneElement(children, (0, _objectSpread2.default)({}, popoverTargetProps, tooltipTargetProps, {
          innerRef: function innerRef(ref) {
            // Get the ref for the Tooltip.
            getRef(ref); // Pass the ref to the Popover.

            getTargetRef(ref);
          }
        }));
      }
      /**
       * With normal usage only the props for a Tooltip are passed to the target.
       */


      return _react.default.cloneElement(children, (0, _objectSpread2.default)({}, tooltipTargetProps, {
        innerRef: function innerRef(ref) {
          getRef(ref);
        }
      }));
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "isPopoverShown", function () {
      return (// eslint-disable-next-line react/prop-types
        _this.props.popoverProps && _this.props.popoverProps.isShown
      );
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleMouseEnterTarget", function () {
      _this.setState({
        isShownByTarget: true
      });
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleMouseLeaveTarget", function () {
      _this.setState({
        isShownByTarget: false
      });
    });
    _this.state = {
      id: "evergreen-tooltip-".concat(++idCounter),
      isShown: props.isShown,
      isShownByTarget: false
    };
    _this.handleMouseLeaveTarget = (0, _lodash.default)(_this.handleMouseLeaveTarget, _this.props.hideDelay);
    _this.hide = (0, _lodash.default)(_this.hide, _this.props.hideDelay);
    return _this;
  }

  (0, _createClass2.default)(Tooltip, [{
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props = this.props,
          appearance = _this$props.appearance,
          isShown = _this$props.isShown,
          content = _this$props.content,
          position = _this$props.position,
          statelessProps = _this$props.statelessProps;
      var _this$state = this.state,
          stateIsShown = _this$state.isShown,
          isShownByTarget = _this$state.isShownByTarget;
      var shown = (isShown || stateIsShown || isShownByTarget) && !this.isPopoverShown(); // Tooltip was explicitly set to not be shown

      if (isShown === false) {
        shown = false;
      }

      return _react.default.createElement(_positioner.Positioner, {
        target: function target(_ref2) {
          var getRef = _ref2.getRef;
          return _this2.renderTarget({
            getRef: getRef
          });
        },
        isShown: shown,
        position: position,
        animationDuration: 160
      }, function (_ref3) {
        var css = _ref3.css,
            style = _ref3.style,
            state = _ref3.state,
            getRef = _ref3.getRef;
        return _react.default.createElement(_TooltipStateless.default, (0, _extends2.default)({
          id: _this2.state.id,
          appearance: appearance,
          innerRef: function innerRef(ref) {
            return getRef(ref);
          },
          "data-state": state,
          css: css,
          style: style,
          onMouseEnter: _this2.handleMouseEnterTarget,
          onMouseLeave: _this2.handleMouseLeaveTarget
        }, statelessProps), content);
      });
    }
  }]);
  return Tooltip;
}(_react.PureComponent);

exports.default = Tooltip;
Tooltip.displayName = "Tooltip";
(0, _defineProperty2.default)(Tooltip, "propTypes", {
  /**
   * The appearance of the tooltip.
   */
  appearance: _propTypes.default.oneOf(['default', 'card']).isRequired,

  /**
   * The position the Popover is on.
   */
  position: _propTypes.default.oneOf([_constants.Position.TOP, _constants.Position.TOP_LEFT, _constants.Position.TOP_RIGHT, _constants.Position.BOTTOM, _constants.Position.BOTTOM_LEFT, _constants.Position.BOTTOM_RIGHT, _constants.Position.LEFT, _constants.Position.RIGHT]),

  /**
   * The content of the Popover.
   */
  content: _propTypes.default.node.isRequired,

  /**
   * Time in ms before hiding the Tooltip.
   */
  hideDelay: _propTypes.default.number.isRequired,

  /**
   * When True, manually show the Tooltip.
   */
  isShown: _propTypes.default.bool,

  /**
   * The target button of the Tooltip.
   */
  children: _propTypes.default.node.isRequired,

  /**
   * Properties passed through to the Tooltip.
   */
  statelessProps: _propTypes.default.object
});
(0, _defineProperty2.default)(Tooltip, "defaultProps", {
  appearance: 'default',
  position: _constants.Position.BOTTOM,
  hideDelay: 120
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,