import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _assertThisInitialized from "@babel/runtime/helpers/esm/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import React, { PureComponent } from 'react';
import PropTypes from 'prop-types';
import Box from 'ui-box';
import { Image } from '../../image';
import { Text } from '../../typography';
import { withTheme } from '../../theme';
import globalGetInitials from './utils/getInitials';
import globalHash from './utils/hash';
var initialsProps = {
  top: 0,
  position: 'absolute',
  display: 'flex',
  alignItems: 'center',
  justifyContent: 'center',
  lineHeight: 1
};

var Avatar =
/*#__PURE__*/
function (_PureComponent) {
  _inherits(Avatar, _PureComponent);

  function Avatar(props, context) {
    var _this;

    _classCallCheck(this, Avatar);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Avatar).call(this, props, context));

    _defineProperty(_assertThisInitialized(_this), "handleError", function () {
      _this.setState({
        imageHasFailedLoading: true
      });
    });

    _defineProperty(_assertThisInitialized(_this), "getColorProps", function () {
      var _this$props = _this.props,
          isSolid = _this$props.isSolid,
          theme = _this$props.theme,
          color = _this$props.color,
          propsHashValue = _this$props.hashValue,
          name = _this$props.name;

      if (color === 'automatic') {
        var hashValue = globalHash(propsHashValue || name);
        return theme.getAvatarProps({
          isSolid: isSolid,
          color: color,
          hashValue: hashValue
        });
      }

      return theme.getAvatarProps({
        isSolid: isSolid,
        color: color
      });
    });

    _this.state = {
      imageHasFailedLoading: false
    };
    return _this;
  }

  _createClass(Avatar, [{
    key: "render",
    value: function render() {
      var _this$props2 = this.props,
          theme = _this$props2.theme,
          src = _this$props2.src,
          size = _this$props2.size,
          name = _this$props2.name,
          isSolid = _this$props2.isSolid,
          propsHashValue = _this$props2.hashValue,
          getInitials = _this$props2.getInitials,
          propsColor = _this$props2.color,
          forceShowInitials = _this$props2.forceShowInitials,
          sizeLimitOneCharacter = _this$props2.sizeLimitOneCharacter,
          props = _objectWithoutProperties(_this$props2, ["theme", "src", "size", "name", "isSolid", "hashValue", "getInitials", "color", "forceShowInitials", "sizeLimitOneCharacter"]);

      var imageHasFailedLoading = this.state.imageHasFailedLoading;
      var imageUnavailable = !src || imageHasFailedLoading;
      var initialsFontSize = "".concat(theme.getAvatarInitialsFontSize(size, sizeLimitOneCharacter), "px");
      var initials = getInitials(name);

      if (size <= sizeLimitOneCharacter) {
        initials = initials.substring(0, 1);
      }

      var colorProps = this.getColorProps();
      return React.createElement(Box, _extends({
        width: size,
        height: size,
        overflow: "hidden",
        borderRadius: 9999,
        position: "relative",
        display: "inline-flex",
        flexShrink: 0,
        justifyContent: "center",
        backgroundColor: colorProps.backgroundColor,
        title: name
      }, props), (imageUnavailable || forceShowInitials) && React.createElement(Text, {
        css: initialsProps,
        fontSize: initialsFontSize,
        lineHeight: initialsFontSize,
        width: size,
        height: size,
        color: colorProps.color
      }, initials), !imageUnavailable && React.createElement(Image, {
        width: "auto",
        height: "100%",
        src: src,
        onError: this.handleError
      }));
    }
  }]);

  return Avatar;
}(PureComponent);

Avatar.displayName = "Avatar";

_defineProperty(Avatar, "propTypes", {
  /**
   * The src attribute of the image.
   * When it's not available, render initials instead.
   */
  src: PropTypes.string,

  /**
   * The size of the avatar.
   */
  size: PropTypes.number,

  /**
   * The name used for the initials and title attribute.
   */
  name: PropTypes.string,

  /**
   * The value used for the hash function.
   * The name is used as the hashValue by default.
   * When dealing with anonymous users you should use the id instead.
   */
  hashValue: PropTypes.string,

  /**
   * When true, render a solid avatar.
   */
  isSolid: PropTypes.bool,

  /**
   * The color used for the avatar.
   * When the value is `automatic`, use the hash function to determine the color.
   */
  color: PropTypes.string.isRequired,

  /**
   * Function to get the initials based on the name.
   */
  getInitials: PropTypes.func,

  /**
   * When true, force show the initials.
   * This is useful in some cases when using Gravatar and transparent pngs.
   */
  forceShowInitials: PropTypes.bool,

  /**
   * When the size is smaller than this number, use a single initial for the avatar.
   */
  sizeLimitOneCharacter: PropTypes.number,

  /**
   * Theme provided by ThemeProvider.
   */
  theme: PropTypes.object.isRequired
});

_defineProperty(Avatar, "defaultProps", {
  color: 'automatic',
  size: 24,
  isSolid: false,
  getInitials: globalGetInitials,
  forceShowInitials: false,
  sizeLimitOneCharacter: 20
});

export default withTheme(Avatar);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9hdmF0YXIvc3JjL0F2YXRhci5qcyJdLCJuYW1lcyI6WyJSZWFjdCIsIlB1cmVDb21wb25lbnQiLCJQcm9wVHlwZXMiLCJCb3giLCJJbWFnZSIsIlRleHQiLCJ3aXRoVGhlbWUiLCJnbG9iYWxHZXRJbml0aWFscyIsImdsb2JhbEhhc2giLCJpbml0aWFsc1Byb3BzIiwidG9wIiwicG9zaXRpb24iLCJkaXNwbGF5IiwiYWxpZ25JdGVtcyIsImp1c3RpZnlDb250ZW50IiwibGluZUhlaWdodCIsIkF2YXRhciIsInByb3BzIiwiY29udGV4dCIsInNldFN0YXRlIiwiaW1hZ2VIYXNGYWlsZWRMb2FkaW5nIiwiaXNTb2xpZCIsInRoZW1lIiwiY29sb3IiLCJwcm9wc0hhc2hWYWx1ZSIsImhhc2hWYWx1ZSIsIm5hbWUiLCJnZXRBdmF0YXJQcm9wcyIsInN0YXRlIiwic3JjIiwic2l6ZSIsImdldEluaXRpYWxzIiwicHJvcHNDb2xvciIsImZvcmNlU2hvd0luaXRpYWxzIiwic2l6ZUxpbWl0T25lQ2hhcmFjdGVyIiwiaW1hZ2VVbmF2YWlsYWJsZSIsImluaXRpYWxzRm9udFNpemUiLCJnZXRBdmF0YXJJbml0aWFsc0ZvbnRTaXplIiwiaW5pdGlhbHMiLCJzdWJzdHJpbmciLCJjb2xvclByb3BzIiwiZ2V0Q29sb3JQcm9wcyIsImJhY2tncm91bmRDb2xvciIsImhhbmRsZUVycm9yIiwic3RyaW5nIiwibnVtYmVyIiwiYm9vbCIsImlzUmVxdWlyZWQiLCJmdW5jIiwib2JqZWN0Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQSxPQUFPQSxLQUFQLElBQWdCQyxhQUFoQixRQUFxQyxPQUFyQztBQUNBLE9BQU9DLFNBQVAsTUFBc0IsWUFBdEI7QUFDQSxPQUFPQyxHQUFQLE1BQWdCLFFBQWhCO0FBQ0EsU0FBU0MsS0FBVCxRQUFzQixhQUF0QjtBQUNBLFNBQVNDLElBQVQsUUFBcUIsa0JBQXJCO0FBQ0EsU0FBU0MsU0FBVCxRQUEwQixhQUExQjtB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QUFBLE9BQU8sRUFBRW5CLFNBQVMsQ0FBQzRDLElBM0JGOztBQTZCakI7Ozs7QUFJQXZCLEVBQUFBLEtBQUssRUFBRXJCLFNBQVMsQ0FBQzBDLE1BQVYsQ0FBaUJHLFVBakNQOztBQW1DakI7OztBQUdBaEIsRUFBQUEsV0FBVyxFQUFFN0IsU0FBUyxDQUFDOEMsSUF0Q047O0FBd0NqQjs7OztBQUlBZixFQUFBQSxpQkFBaUIsRUFBRS9CLFNBQVMsQ0FBQzRDLElBNUNaOztBQThDakI7OztBQUdBWixFQUFBQSxxQkFBcUIsRUFBRWhDLFNBQVMsQ0FBQzJDLE1BakRoQjs7QUFtRGpCOzs7QUFHQXZCLEVBQUFBLEtBQUssRUFBRXBCLFNBQVMsQ0FBQytDLE1BQVYsQ0FBaUJGO0FBdERQLEM7O2dCQURmL0IsTSxrQkEwRGtCO0FBQ3BCTyxFQUFBQSxLQUFLLEVBQUUsV0FEYTtBQUVwQk8sRUFBQUEsSUFBSSxFQUFFLEVBRmM7QUFHcEJULEVBQUFBLE9BQU8sRUFBRSxLQUhXO0FBSXBCVSxFQUFBQSxXQUFXLEVBQUV4QixpQkFKTztBQUtwQjBCLEVBQUFBLGlCQUFpQixFQUFFLEtBTEM7QUFNcEJDLEVBQUFBLHFCQUFxQixFQUFFO0FBTkgsQzs7QUF3R3hCLGVBQWU1QixTQUFTLENBQUNVLE1BQUQsQ0FBeEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgUHVyZUNvbXBvbmVudCB9IGZyb20gJ3JlYWN0J1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJ1xuaW1wb3J0IEJveCBmcm9tICd1aS1ib3gnXG5pbXBvcnQgeyBJbWFnZSB9IGZyb20gJy4uLy4uL2ltYWdlJ1xuaW1wb3J0IHsgVGV4dCB9IGZyb20gJy4uLy4uL3R5cG9ncmFwaHknXG5pbXBvcnQgeyB3aXRoVGhlbWUgfSBmcm9tICcuLi8uLi90aGVtZSdcbmltcG9ydCBnbG9iYWxHZXRJbml0aWFscyBmcm9tICcuL3V0aWxzL2dldEluaXRpYWxzJ1xuaW1wb3J0IGdsb2JhbEhhc2ggZnJvbSAnLi91dGlscy9oYXNoJ1xuXG5jb25zdCBpbml0aWFsc1Byb3BzID0ge1xuICB0b3A6IDAsXG4gIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICBkaXNwbGF5OiAnZmxleCcsXG4gIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICBqdXN0aWZ5Q29udGVudDogJ2NlbnRlcicsXG4gIGxpbmVIZWlnaHQ6IDFcbn1cblxuY2xhc3MgQXZhdGFyIGV4dGVuZHMgUHVyZUNvbXBvbmVudCB7XG4gIHN0YXRpYyBwcm9wVHlwZXMgPSB7XG4gICAgLyoqXG4gICAgICogVGhlIHNyYyBhdHRyaWJ1dGUgb2YgdGhlIGltYWdlLlxuICAgICAqIFdoZW4gaXQncyBub3QgYXZhaWxhYmxlLCByZW5kZXIgaW5pdGlhbHMgaW5zdGVhZC5cbiAgICAgKi9cbiAgICBzcmM6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgICAvKipcbiAgICAgKiBUaGUgc2l6ZSBvZiB0aGUgYXZhdGFyLlxuICAgICAqL1xuICAgIHNpemU6IFByb3BUeXBlcy5udW1iZXIsXG5cbiAgICAvKipcbiAgICAgKiBUaGUgbmFtZSB1c2VkIGZvciB0aGUgaW5pdGlhbHMgYW5kIHRpdGxlIGF0dHJpYnV0ZS5cbiAgICAgKi9cbiAgICBuYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gICAgLyoqXG4gICAgICogVGhlIHZhbHVlIHVzZWQgZm9yIHRoZSBoYXNoIGZ1bmN0aW9uLlxuICAgICAqIFRoZSBuYW1lIGlzIHVzZWQgYXMgdGhlIGhhc2hWYWx1ZSBieSBkZWZhdWx0LlxuICAgICAqIFdoZW4gZGVhbGluZyB3aXRoIGFub255bW91cyB1c2VycyB5b3Ugc2hvdWxkIHVzZSB0aGUgaWQgaW5zdGVhZC5cbiAgICAgKi9cbiAgICBoYXNoVmFsdWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgICAvKipcbiAgICAgKiBXaGVuIHRydWUsIHJlbmRlciBhIHNvbGlkIGF2YXRhci5cbiAgICAgKi9cbiAgICBpc1NvbGlkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAgIC8qKlxuICAgICAqIFRoZSBjb2xvciB1c2VkIGZvciB0aGUgYXZhdGFyLlxuICAgICAqIFdoZW4gdGhlIHZhbHVlIGlzIGBhdXRvbWF0aWNgLCB1c2UgdGhlIGhhc2ggZnVuY3Rpb24gdG8gZGV0ZXJtaW5lIHRoZSBjb2xvci5cbiAgICAgKi9cbiAgICBjb2xvcjogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuXG4gICAgLyoqXG4gICAgICogRnVuY3Rpb24gdG8gZ2V0IHRoZSBpbml0aWFscyBiYXNlZCBvbiB0aGUgbmFtZS5cbiAgICAgKi9cbiAgICBnZXRJbml0aWFsczogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgICAvKipcbiAgICAgKiBXaGVuIHRydWUsIGZvcmNlIHNob3cgdGhlIGluaXRpYWxzLlxuICAgICAqIFRoaXMgaXMgdXNlZnVsIGluIHNvbWUgY2FzZXMgd2hlbiB1c2luZyBHcmF2YXRhciBhbmQgdHJhbnNwYXJlbnQgcG5ncy5cbiAgICAgKi9cbiAgICBmb3JjZVNob3dJbml0aWFsczogUHJvcFR5cGVzLmJvb2wsXG5cbiAgICAvKipcbiAgICAgKiBXaGVuIHRoZSBzaXplIGlzIHNtYWxsZXIgdGhhbiB0aGlzIG51bWJlciwgdXNlIGEgc2luZ2xlIGluaXRpYWwgZm9yIHRoZSBhdmF0YXIuXG4gICAgICovXG4gICAgc2l6ZUxpbWl0T25lQ2hhcmFjdGVyOiBQcm9wVHlwZXMubnVtYmVyLFxuXG4gICAgLyoqXG4gICAgICogVGhlbWUgcHJvdmlkZWQgYnkgVGhlbWVQcm92aWRlci5cbiAgICAgKi9cbiAgICB0aGVtZTogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkXG4gIH1cblxuICBzdGF0aWMgZGVmYXVsdFByb3BzID0ge1xuICAgIGNvbG9yOiAnYXV0b21hdGljJyxcbiAgICBzaXplOiAyNCxcbiAgICBpc1NvbGlkOiBmYWxzZSxcbiAgICBnZXRJbml0aWFsczogZ2xvYmFsR2V0SW5pdGlhbHMsXG4gICAgZm9yY2VTaG93SW5pdGlhbHM6IGZhbHNlLFxuICAgIHNpemVMaW1pdE9uZUNoYXJhY3RlcjogMjBcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKHByb3BzLCBjb250ZXh0KSB7XG4gICAgc3VwZXIocHJvcHMsIGNvbnRleHQpXG4gICAgdGhpcy5zdGF0ZSA9IHsgaW1hZ2VIYXNGYWlsZWRMb2FkaW5nOiBmYWxzZSB9XG4gIH1cblxuICBoYW5kbGVFcnJvciA9ICgpID0+IHtcbiAgICB0aGlzLnNldFN0YXRlKHsgaW1hZ2VIYXNGYWlsZWRMb2FkaW5nOiB0cnVlIH0pXG4gIH1cblxuICBnZXRDb2xvclByb3BzID0gKCkgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIGlzU29saWQsXG4gICAgICB0aGVtZSxcbiAgICAgIGNvbG9yLFxuICAgICAgaGFzaFZhbHVlOiBwcm9wc0hhc2hWYWx1ZSxcbiAgICAgIG5hbWVcbiAgICB9ID0gdGhpcy5wcm9wc1xuXG4gICAgaWYgKGNvbG9yID09PSAnYXV0b21hdGljJykge1xuICAgICAgY29uc3QgaGFzaFZhbHVlID0gZ2xvYmFsSGFzaChwcm9wc0hhc2hWYWx1ZSB8fCBuYW1lKVxuICAgICAgcmV0dXJuIHRoZW1lLmdldEF2YXRhclByb3BzKHsgaXNTb2xpZCwgY29sb3IsIGhhc2hWYWx1ZSB9KVxuICAgIH1cblxuICAgIHJldHVybiB0aGVtZS5nZXRBdmF0YXJQcm9wcyh7IGlzU29saWQsIGNvbG9yIH0pXG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgY29uc3Qge1xuICAgICAgdGhlbWUsXG5cbiAgICAgIHNyYyxcbiAgICAgIHNpemUsXG4gICAgICBuYW1lLFxuICAgICAgaXNTb2xpZCxcbiAgICAgIGhhc2hWYWx1ZTogcHJvcHNIYXNoVmFsdWUsXG4gICAgICBnZXRJbml0aWFscyxcbiAgICAgIGNvbG9yOiBwcm9wc0NvbG9yLFxuICAgICAgZm9yY2VTaG93SW5pdGlhbHMsXG4gICAgICBzaXplTGltaXRPbmVDaGFyYWN0ZXIsXG4gICAgICAuLi5wcm9wc1xuICAgIH0gPSB0aGlzLnByb3BzXG5cbiAgICBjb25zdCB7IGltYWdlSGFzRmFpbGVkTG9hZGluZyB9ID0gdGhpcy5zdGF0ZVxuICAgIGNvbnN0IGltYWdlVW5hdmFpbGFibGUgPSAhc3JjIHx8IGltYWdlSGFzRmFpbGVkTG9hZGluZ1xuICAgIGNvbnN0IGluaXRpYWxzRm9udFNpemUgPSBgJHt0aGVtZS5nZXRBdmF0YXJJbml0aWFsc0ZvbnRTaXplKFxuICAgICAgc2l6ZSxcbiAgICAgIHNpemVMaW1pdE9uZUNoYXJhY3RlclxuICAgICl9cHhgXG5cbiAgICBsZXQgaW5pdGlhbHMgPSBnZXRJbml0aWFscyhuYW1lKVxuICAgIGlmIChzaXplIDw9IHNpemVMaW1pdE9uZUNoYXJhY3Rlcikge1xuICAgICAgaW5pdGlhbHMgPSBpbml0aWFscy5zdWJzdHJpbmcoMCwgMSlcbiAgICB9XG5cbiAgICBjb25zdCBjb2xvclByb3BzID0gdGhpcy5nZXRDb2xvclByb3BzKClcblxuICAgIHJldHVybiAoXG4gICAgICA8Qm94XG4gICAgICAgIHdpZHRoPXtzaXplfVxuICAgICAgICBoZWlnaHQ9e3NpemV9XG4gICAgICAgIG92ZXJmbG93PVwiaGlkZGVuXCJcbiAgICAgICAgYm9yZGVyUmFkaXVzPXs5OTk5fVxuICAgICAgICBwb3NpdGlvbj1cInJlbGF0aXZlXCJcbiAgICAgICAgZGlzcGxheT1cImlubGluZS1mbGV4XCJcbiAgICAgICAgZmxleFNocmluaz17MH1cbiAgICAgICAganVzdGlmeUNvbnRlbnQ9XCJjZW50ZXJcIlxuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I9e2NvbG9yUHJvcHMuYmFja2dyb3VuZENvbG9yfVxuICAgICAgICB0aXRsZT17bmFtZX1cbiAgICAgICAgey4uLnByb3BzfVxuICAgICAgPlxuICAgICAgICB7KGltYWdlVW5hdmFpbGFibGUgfHwgZm9yY2VTaG93SW5pdGlhbHMpICYmIChcbiAgICAgICAgICA8VGV4dFxuICAgICAgICAgICAgY3NzPXtpbml0aWFsc1Byb3BzfVxuICAgICAgICAgICAgZm9udFNpemU9e2luaXRpYWxzRm9udFNpemV9XG4gICAgICAgICAgICBsaW5lSGVpZ2h0PXtpbml0aWFsc0ZvbnRTaXplfVxuICAgICAgICAgICAgd2lkdGg9e3NpemV9XG4gICAgICAgICAgICBoZWlnaHQ9e3NpemV9XG4gICAgICAgICAgICBjb2xvcj17Y29sb3JQcm9wcy5jb2xvcn1cbiAgICAgICAgICA+XG4gICAgICAgICAgICB7aW5pdGlhbHN9XG4gICAgICAgICAgPC9UZXh0PlxuICAgICAgICApfVxuICAgICAgICB7IWltYWdlVW5hdmFpbGFibGUgJiYgKFxuICAgICAgICAgIDxJbWFnZVxuICAgICAgICAgICAgd2lkdGg9XCJhdXRvXCJcbiAgICAgICAgICAgIGhlaWdodD1cIjEwMCVcIlxuICAgICAgICAgICAgc3JjPXtzcmN9XG4gICAgICAgICAgICBvbkVycm9yPXt0aGlzLmhhbmRsZUVycm9yfVxuICAgICAgICAgIC8+XG4gICAgICAgICl9XG4gICAgICA8L0JveD5cbiAgICApXG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgd2l0aFRoZW1lKEF2YXRhcilcbiJdfQ==