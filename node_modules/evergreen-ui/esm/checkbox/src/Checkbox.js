import _objectSpread from "@babel/runtime/helpers/esm/objectSpread";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _assertThisInitialized from "@babel/runtime/helpers/esm/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import React, { PureComponent } from 'react';
import PropTypes from 'prop-types';
import Box, { spacing, position, layout, dimensions } from 'ui-box';
import { Text } from '../../typography';
import { withTheme } from '../../theme';

var CheckIcon = function CheckIcon(_ref) {
  var _ref$fill = _ref.fill,
      fill = _ref$fill === void 0 ? 'currentColor' : _ref$fill,
      props = _objectWithoutProperties(_ref, ["fill"]);

  return React.createElement("svg", _extends({
    width: 10,
    height: 7,
    viewBox: "0 0 10 7"
  }, props), React.createElement("path", {
    fill: fill,
    fillRule: "evenodd",
    d: "M4 4.586L1.707 2.293A1 1 0 1 0 .293 3.707l3 3a.997.997 0 0 0 1.414 0l5-5A1 1 0 1 0 8.293.293L4 4.586z"
  }));
};

CheckIcon.displayName = "CheckIcon";
CheckIcon.propTypes = {
  fill: PropTypes.string
};

var MinusIcon = function MinusIcon(_ref2) {
  var _ref2$fill = _ref2.fill,
      fill = _ref2$fill === void 0 ? 'currentColor' : _ref2$fill,
      props = _objectWithoutProperties(_ref2, ["fill"]);

  return React.createElement("svg", _extends({
    width: 16,
    height: 16,
    viewBox: "0 0 16 16"
  }, props), React.createElement("path", {
    fill: fill,
    fillRule: "evenodd",
    d: "M11 7H5c-.55 0-1 .45-1 1s.45 1 1 1h6c.55 0 1-.45 1-1s-.45-1-1-1z"
  }));
};

MinusIcon.displayName = "MinusIcon";
MinusIcon.propTypes = {
  fill: PropTypes.string
};

var Checkbox =
/*#__PURE__*/
function (_PureComponent) {
  _inherits(Checkbox, _PureComponent);

  function Checkbox() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, Checkbox);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Checkbox)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_this), "setIndeterminate", function (el) {
      if (!el) return;
      el.indeterminate = _this.props.indeterminate;
    });

    return _this;
  }

  _createClass(Checkbox, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          theme = _this$props.theme,
          id = _this$props.id,
          name = _this$props.name,
          label = _this$props.label,
          appearance = _this$props.appearance,
          disabled = _this$props.disabled,
          isInvalid = _this$props.isInvalid,
          checked = _this$props.checked,
          onChange = _this$props.onChange,
          value = _this$props.value,
          indeterminate = _this$props.indeterminate,
          props = _objectWithoutProperties(_this$props, ["theme", "id", "name", "label", "appearance", "disabled", "isInvalid", "checked", "onChange", "value", "indeterminate"]);

      var themedClassName = theme.getCheckboxClassName(appearance);
      return React.createElement(Box, _extends({
        is: "label",
        cursor: disabled ? 'not-allowed' : 'pointer',
        position: "relative",
        display: "flex",
        marginY: 16
      }, props), React.createElement(Box, {
        className: themedClassName,
        is: "input",
        id: id,
        type: "checkbox",
        name: name,
        value: value,
        checked: checked || indeterminate,
        onChange: onChange,
        disabled: disabled,
        "aria-invalid": isInvalid,
        innerRef: this.setIndeterminate
      }), React.createElement(Box, {
        boxSizing: "border-box",
        borderRadius: 3,
        display: "flex",
        alignItems: "center",
        justifyContent: "center",
        width: 16,
        height: 16
      }, indeterminate ? React.createElement(MinusIcon, null) : React.createElement(CheckIcon, null)), label && React.createElement(Text, {
        marginLeft: 8,
        size: 300,
        color: disabled ? 'muted' : 'default'
      }, label));
    }
  }]);

  return Checkbox;
}(PureComponent);

Checkbox.displayName = "Checkbox";

_defineProperty(Checkbox, "propTypes", _objectSpread({}, spacing.propTypes, position.propTypes, layout.propTypes, dimensions.propTypes, {
  /**
   * The id attribute of the checkbox.
   */
  id: PropTypes.string,

  /**
   * The id attribute of the radio.
   */
  name: PropTypes.string,

  /**
   * Label of the checkbox.
   */
  label: PropTypes.node,

  /**
   * The value attribute of the radio.
   */
  value: PropTypes.string,

  /**
   * The checked attribute of the radio.
   */
  checked: PropTypes.bool,

  /**
   * State in addition to "checked" and "unchecked".
   * When true, the radio displays a "minus" icon.
   */
  indeterminate: PropTypes.bool,

  /**
   * Function called when state changes.
   */
  onChange: PropTypes.func,

  /**
   * When true, the radio is disabled.
   */
  disabled: PropTypes.bool,

  /**
   * When true, the aria-invalid attribute is true.
   * Used for accessibility.
   */
  isInvalid: PropTypes.bool,

  /**
   * The appearance of the checkbox.
   * The default theme only comes with a default style.
   */
  appearance: PropTypes.string,

  /**
   * Theme provided by ThemeProvider.
   */
  theme: PropTypes.object.isRequired
}));

_defineProperty(Checkbox, "defaultProps", {
  checked: false,
  indeterminate: false,
  onChange: function onChange() {},
  appearance: 'default'
});

export default withTheme(Checkbox);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jaGVja2JveC9zcmMvQ2hlY2tib3guanMiXSwibmFtZXMiOlsiUmVhY3QiLCJQdXJlQ29tcG9uZW50IiwiUHJvcFR5cGVzIiwiQm94Iiwic3BhY2luZyIsInBvc2l0aW9uIiwibGF5b3V0IiwiZGltZW5zaW9ucyIsIlRleHQiLCJ3aXRoVGhlbWUiLCJDaGVja0ljb24iLCJmaWxsIiwicHJvcHMiLCJwcm9wVHlwZXMiLCJzdHJpbmciLCJNaW51c0ljb24iLCJDaGVja2JveCIsImVsIiwiaW5kZXRlcm1pbmF0ZSIsInRoZW1lIiwiaWQiLCJuYW1lIiwibGFiZWwiLCJhcHBlYXJhbmNlIiwiZGlzYWJsZWQiLCJpc0ludmFsaWQiLCJjaGVja2VkIiwib25DaGFuZ2UiLCJ2YWx1ZSIsInRoZW1lZENsYXNzTmFtZSIsImdldENoZWNrYm94Q2xhc3NOYW1lIiwic2V0SW5kZXRlcm1pbmF0ZSIsIm5vZGUiLCJib29sIiwiZnVuYyIsIm9iamVjdCIsImlzUmVxdWlyZWQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBQSxPQUFPQSxLQUFQLElBQWdCQyxhQUFoQixRQUFxQyxPQUFyQztBQUNBLE9BQU9DLFNBQVAsTUFBc0IsWUFBdEI7QUFDQSxPQUFPQyxHQUFQLElBQWNDLE9BQWQsRUFBdUJDLFFBQXZCLEVBQWlDQyxNQUFqQyxFQUF5Q0MsVUFBekMsUUFBMkQsUUFBM0Q7QUFDQSxTQUFTQyxJQUFULFFBQXFCLGtCQUFyQjtBQUNBLFNBQVNDLFNBQVQsUUFBMEIsYUFBMUI7O0FBRUEsSUFBTUMsU0FBUyxHQUFHLFNBQVpBLFNBQVk7QUFBQSx1QkFBR0MsSUFBSDtBQUFBLE1BQUdBLElBQUgsMEJBQVUsY0FBVjtBQUFBLE1BQTZCQyxLQUE3Qjs7QUFBQSxTQUNoQjtBQUFLLElBQUEsS0FBSyxFQUFFLEVBQVo7QUFBZ0IsSUFBQSxNQUFNLEVBQUUsQ0FBeEI7QUFBMkIsSUFBQSxPQUFPLEVBQUM7QUFBbkMsS0FBa0RBLEtBQWxELEdBQ0U7QUFD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QUVwQlIsRUFBQUEsYUFBYSxFQUFFLEtBRks7QUFHcEJTLEVBQUFBLFFBQVEsRUFBRSxvQkFBTSxDQUFFLENBSEU7QUFJcEJKLEVBQUFBLFVBQVUsRUFBRTtBQUpRLEM7O0FBOEV4QixlQUFlZCxTQUFTLENBQUNPLFFBQUQsQ0FBeEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgUHVyZUNvbXBvbmVudCB9IGZyb20gJ3JlYWN0J1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJ1xuaW1wb3J0IEJveCwgeyBzcGFjaW5nLCBwb3NpdGlvbiwgbGF5b3V0LCBkaW1lbnNpb25zIH0gZnJvbSAndWktYm94J1xuaW1wb3J0IHsgVGV4dCB9IGZyb20gJy4uLy4uL3R5cG9ncmFwaHknXG5pbXBvcnQgeyB3aXRoVGhlbWUgfSBmcm9tICcuLi8uLi90aGVtZSdcblxuY29uc3QgQ2hlY2tJY29uID0gKHsgZmlsbCA9ICdjdXJyZW50Q29sb3InLCAuLi5wcm9wcyB9KSA9PiAoXG4gIDxzdmcgd2lkdGg9ezEwfSBoZWlnaHQ9ezd9IHZpZXdCb3g9XCIwIDAgMTAgN1wiIHsuLi5wcm9wc30+XG4gICAgPHBhdGhcbiAgICAgIGZpbGw9e2ZpbGx9XG4gICAgICBmaWxsUnVsZT1cImV2ZW5vZGRcIlxuICAgICAgZD1cIk00IDQuNTg2TDEuNzA3IDIuMjkzQTEgMSAwIDEgMCAuMjkzIDMuNzA3bDMgM2EuOTk3Ljk5NyAwIDAgMCAxLjQxNCAwbDUtNUExIDEgMCAxIDAgOC4yOTMuMjkzTDQgNC41ODZ6XCJcbiAgICAvPlxuICA8L3N2Zz5cbilcblxuQ2hlY2tJY29uLnByb3BUeXBlcyA9IHtcbiAgZmlsbDogUHJvcFR5cGVzLnN0cmluZ1xufVxuXG5jb25zdCBNaW51c0ljb24gPSAoeyBmaWxsID0gJ2N1cnJlbnRDb2xvcicsIC4uLnByb3BzIH0pID0+IChcbiAgPHN2ZyB3aWR0aD17MTZ9IGhlaWdodD17MTZ9IHZpZXdCb3g9XCIwIDAgMTYgMTZcIiB7Li4ucHJvcHN9PlxuICAgIDxwYXRoXG4gICAgICBmaWxsPXtmaWxsfVxuICAgICAgZmlsbFJ1bGU9XCJldmVub2RkXCJcbiAgICAgIGQ9XCJNMTEgN0g1Yy0uNTUgMC0xIC40NS0xIDFzLjQ1IDEgMSAxaDZjLjU1IDAgMS0uNDUgMS0xcy0uNDUtMS0xLTF6XCJcbiAgICAvPlxuICA8L3N2Zz5cbilcblxuTWludXNJY29uLnByb3BUeXBlcyA9IHtcbiAgZmlsbDogUHJvcFR5cGVzLnN0cmluZ1xufVxuXG5jbGFzcyBDaGVja2JveCBleHRlbmRzIFB1cmVDb21wb25lbnQge1xuICBzdGF0aWMgcHJvcFR5cGVzID0ge1xuICAgIC8qKlxuICAgICAqIENvbXBvc2VzIHNvbWUgQm94IEFQSXMuXG4gICAgICovXG4gICAgLi4uc3BhY2luZy5wcm9wVHlwZXMsXG4gICAgLi4ucG9zaXRpb24ucHJvcFR5cGVzLFxuICAgIC4uLmxheW91dC5wcm9wVHlwZXMsXG4gICAgLi4uZGltZW5zaW9ucy5wcm9wVHlwZXMsXG5cbiAgICAvKipcbiAgICAgKiBUaGUgaWQgYXR0cmlidXRlIG9mIHRoZSBjaGVja2JveC5cbiAgICAgKi9cbiAgICBpZDogUHJvcFR5cGVzLnN0cmluZyxcblxuICAgIC8qKlxuICAgICAqIFRoZSBpZCBhdHRyaWJ1dGUgb2YgdGhlIHJhZGlvLlxuICAgICAqL1xuICAgIG5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgICAvKipcbiAgICAgKiBMYWJlbCBvZiB0aGUgY2hlY2tib3guXG4gICAgICovXG4gICAgbGFiZWw6IFByb3BUeXBlcy5ub2RlLFxuXG4gICAgLyoqXG4gICAgICogVGhlIHZhbHVlIGF0dHJpYnV0ZSBvZiB0aGUgcmFkaW8uXG4gICAgICovXG4gICAgdmFsdWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgICAvKipcbiAgICAgKiBUaGUgY2hlY2tlZCBhdHRyaWJ1dGUgb2YgdGhlIHJhZGlvLlxuICAgICAqL1xuICAgIGNoZWNrZWQ6IFByb3BUeXBlcy5ib29sLFxuXG4gICAgLyoqXG4gICAgICogU3RhdGUgaW4gYWRkaXRpb24gdG8gXCJjaGVja2VkXCIgYW5kIFwidW5jaGVja2VkXCIuXG4gICAgICogV2hlbiB0cnVlLCB0aGUgcmFkaW8gZGlzcGxheXMgYSBcIm1pbnVzXCIgaWNvbi5cbiAgICAgKi9cbiAgICBpbmRldGVybWluYXRlOiBQcm9wVHlwZXMuYm9vbCxcblxuICAgIC8qKlxuICAgICAqIEZ1bmN0aW9uIGNhbGxlZCB3aGVuIHN0YXRlIGNoYW5nZXMuXG4gICAgICovXG4gICAgb25DaGFuZ2U6IFByb3BUeXBlcy5mdW5jLFxuXG4gICAgLyoqXG4gICAgICogV2hlbiB0cnVlLCB0aGUgcmFkaW8gaXMgZGlzYWJsZWQuXG4gICAgICovXG4gICAgZGlzYWJsZWQ6IFByb3BUeXBlcy5ib29sLFxuXG4gICAgLyoqXG4gICAgICogV2hlbiB0cnVlLCB0aGUgYXJpYS1pbnZhbGlkIGF0dHJpYnV0ZSBpcyB0cnVlLlxuICAgICAqIFVzZWQgZm9yIGFjY2Vzc2liaWxpdHkuXG4gICAgICovXG4gICAgaXNJbnZhbGlkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAgIC8qKlxuICAgICAqIFRoZSBhcHBlYXJhbmNlIG9mIHRoZSBjaGVja2JveC5cbiAgICAgKiBUaGUgZGVmYXVsdCB0aGVtZSBvbmx5IGNvbWVzIHdpdGggYSBkZWZhdWx0IHN0eWxlLlxuICAgICAqL1xuICAgIGFwcGVhcmFuY2U6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgICAvKipcbiAgICAgKiBUaGVtZSBwcm92aWRlZCBieSBUaGVtZVByb3ZpZGVyLlxuICAgICAqL1xuICAgIHRoZW1lOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWRcbiAgfVxuXG4gIHN0YXRpYyBkZWZhdWx0UHJvcHMgPSB7XG4gICAgY2hlY2tlZDogZmFsc2UsXG4gICAgaW5kZXRlcm1pbmF0ZTogZmFsc2UsXG4gICAgb25DaGFuZ2U6ICgpID0+IHt9LFxuICAgIGFwcGVhcmFuY2U6ICdkZWZhdWx0J1xuICB9XG5cbiAgc2V0SW5kZXRlcm1pbmF0ZSA9IGVsID0+IHtcbiAgICBpZiAoIWVsKSByZXR1cm5cbiAgICBlbC5pbmRldGVybWluYXRlID0gdGhpcy5wcm9wcy5pbmRldGVybWluYXRlXG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgY29uc3Qge1xuICAgICAgdGhlbWUsXG5cbiAgICAgIGlkLFxuICAgICAgbmFtZSxcbiAgICAgIGxhYmVsLFxuICAgICAgYXBwZWFyYW5jZSxcbiAgICAgIGRpc2FibGVkLFxuICAgICAgaXNJbnZhbGlkLFxuICAgICAgY2hlY2tlZCxcbiAgICAgIG9uQ2hhbmdlLFxuICAgICAgdmFsdWUsXG4gICAgICBpbmRldGVybWluYXRlLFxuICAgICAgLi4ucHJvcHNcbiAgICB9ID0gdGhpcy5wcm9wc1xuXG4gICAgY29uc3QgdGhlbWVkQ2xhc3NOYW1lID0gdGhlbWUuZ2V0Q2hlY2tib3hDbGFzc05hbWUoYXBwZWFyYW5jZSlcblxuICAgIHJldHVybiAoXG4gICAgICA8Qm94XG4gICAgICAgIGlzPVwibGFiZWxcIlxuICAgICAgICBjdXJzb3I9e2Rpc2FibGVkID8gJ25vdC1hbGxvd2VkJyA6ICdwb2ludGVyJ31cbiAgICAgICAgcG9zaXRpb249XCJyZWxhdGl2ZVwiXG4gICAgICAgIGRpc3BsYXk9XCJmbGV4XCJcbiAgICAgICAgbWFyZ2luWT17MTZ9XG4gICAgICAgIHsuLi5wcm9wc31cbiAgICAgID5cbiAgICAgICAgPEJveFxuICAgICAgICAgIGNsYXNzTmFtZT17dGhlbWVkQ2xhc3NOYW1lfVxuICAgICAgICAgIGlzPVwiaW5wdXRcIlxuICAgICAgICAgIGlkPXtpZH1cbiAgICAgICAgICB0eXBlPVwiY2hlY2tib3hcIlxuICAgICAgICAgIG5hbWU9e25hbWV9XG4gICAgICAgICAgdmFsdWU9e3ZhbHVlfVxuICAgICAgICAgIGNoZWNrZWQ9e2NoZWNrZWQgfHwgaW5kZXRlcm1pbmF0ZX1cbiAgICAgICAgICBvbkNoYW5nZT17b25DaGFuZ2V9XG4gICAgICAgICAgZGlzYWJsZWQ9e2Rpc2FibGVkfVxuICAgICAgICAgIGFyaWEtaW52YWxpZD17aXNJbnZhbGlkfVxuICAgICAgICAgIGlubmVyUmVmPXt0aGlzLnNldEluZGV0ZXJtaW5hdGV9XG4gICAgICAgIC8+XG4gICAgICAgIDxCb3hcbiAgICAgICAgICBib3hTaXppbmc9XCJib3JkZXItYm94XCJcbiAgICAgICAgICBib3JkZXJSYWRpdXM9ezN9XG4gICAgICAgICAgZGlzcGxheT1cImZsZXhcIlxuICAgICAgICAgIGFsaWduSXRlbXM9XCJjZW50ZXJcIlxuICAgICAgICAgIGp1c3RpZnlDb250ZW50PVwiY2VudGVyXCJcbiAgICAgICAgICB3aWR0aD17MTZ9XG4gICAgICAgICAgaGVpZ2h0PXsxNn1cbiAgICAgICAgPlxuICAgICAgICAgIHtpbmRldGVybWluYXRlID8gPE1pbnVzSWNvbiAvPiA6IDxDaGVja0ljb24gLz59XG4gICAgICAgIDwvQm94PlxuICAgICAgICB7bGFiZWwgJiYgKFxuICAgICAgICAgIDxUZXh0XG4gICAgICAgICAgICBtYXJnaW5MZWZ0PXs4fVxuICAgICAgICAgICAgc2l6ZT17MzAwfVxuICAgICAgICAgICAgY29sb3I9e2Rpc2FibGVkID8gJ211dGVkJyA6ICdkZWZhdWx0J31cbiAgICAgICAgICA+XG4gICAgICAgICAgICB7bGFiZWx9XG4gICAgICAgICAgPC9UZXh0PlxuICAgICAgICApfVxuICAgICAgPC9Cb3g+XG4gICAgKVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IHdpdGhUaGVtZShDaGVja2JveClcbiJdfQ==