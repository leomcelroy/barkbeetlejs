import _extends from "@babel/runtime/helpers/esm/extends";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _assertThisInitialized from "@babel/runtime/helpers/esm/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import React, { PureComponent } from 'react';
import PropTypes from 'prop-types';
import { css } from 'ui-box';
import Transition from 'react-transition-group/Transition';
import { Pane, Card } from '../../layers';
import { Portal } from '../../portal';
import { Paragraph, Heading } from '../../typography';
import { Button, IconButton } from '../../buttons';
var animationEasing = {
  deceleration: "cubic-bezier(0.0, 0.0, 0.2, 1)",
  acceleration: "cubic-bezier(0.4, 0.0, 1, 1)",
  spring: "cubic-bezier(0.175, 0.885, 0.320, 1.175)"
};
var ANIMATION_DURATION = 240;
var openAnimation = css.keyframes('openAnimation', {
  from: {
    transform: 'translateY(100%)'
  },
  to: {
    transform: 'translateY(0)'
  }
});
var closeAnimation = css.keyframes('closeAnimation', {
  from: {
    transform: 'scale(1)',
    opacity: 1
  },
  to: {
    transform: 'scale(0.9)',
    opacity: 0
  }
});
var animationStyles = {
  '&[data-state="entering"], &[data-state="entered"]': {
    animation: "".concat(openAnimation, " ").concat(ANIMATION_DURATION, "ms ").concat(animationEasing.spring, " both")
  },
  '&[data-state="exiting"]': {
    animation: "".concat(closeAnimation, " 120ms ").concat(animationEasing.acceleration, " both")
  }
};

var CornerDialog =
/*#__PURE__*/
function (_PureComponent) {
  _inherits(CornerDialog, _PureComponent);

  function CornerDialog(props) {
    var _this;

    _classCallCheck(this, CornerDialog);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(CornerDialog).call(this, props));

    _defineProperty(_assertThisInitialized(_this), "handleExited", function () {
      _this.setState({
        exiting: false,
        exited: true
      });

      _this.props.onCloseComplete();
    });

    _defineProperty(_assertThisInitialized(_this), "handleCancel", function () {
      _this.props.onCancel(_this.handleClose);
    });

    _defineProperty(_assertThisInitialized(_this), "handleClose", function () {
      _this.setState({
        exiting: true
      });
    });

    _defineProperty(_assertThisInitialized(_this), "handleConfirm", function () {
      _this.props.onConfirm(_this.handleClose);
    });

    _defineProperty(_assertThisInitialized(_this), "renderChildren", function () {
      var children = _this.props.children;

      if (typeof children === 'function') {
        return children({
          close: _this.handleClose
        });
      }

      if (typeof children === 'string') {
        return React.createElement(Paragraph, {
          size: 400,
          color: "muted"
        }, children);
      }

      return children;
    });

    _this.state = {
      exiting: false,
      exited: !props.isShown
    };
    return _this;
  }

  _createClass(CornerDialog, [{
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      if (!prevProps.isShown && this.props.isShown) {
        // eslint-disable-next-line react/no-did-update-set-state
        this.setState({
          exited: false
        });
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props = this.props,
          title = _this$props.title,
          width = _this$props.width,
          intent = _this$props.intent,
          isShown = _this$props.isShown,
          hasFooter = _this$props.hasFooter,
          hasCancel = _this$props.hasCancel,
          hasClose = _this$props.hasClose,
          cancelLabel = _this$props.cancelLabel,
          confirmLabel = _this$props.confirmLabel,
          onOpenComplete = _this$props.onOpenComplete,
          containerProps = _this$props.containerProps;
      var _this$state = this.state,
          exiting = _this$state.exiting,
          exited = _this$state.exited;
      if (exited) return null;
      return React.createElement(Portal, null, React.createElement(Transition, {
        appear: true,
        unmountOnExit: true,
        timeout: ANIMATION_DURATION,
        in: isShown && !exiting,
        onExited: this.handleExited,
        onEntered: onOpenComplete
      }, function (state) {
        return React.createElement(Card, _extends({
          role: "dialog",
          backgroundColor: "white",
          elevation: 4,
          width: width,
          css: animationStyles,
          "data-state": state,
          position: "fixed",
          bottom: 16,
          right: 16,
          padding: 32
        }, containerProps), React.createElement(Pane, {
          display: "flex",
          alignItems: "center",
          marginBottom: 12
        }, React.createElement(Heading, {
          is: "h4",
          size: 600,
          flex: "1"
        }, title), hasClose && React.createElement(IconButton, {
          height: 32,
          icon: "cross",
          appearance: "minimal",
          onClick: _this2.handleClose
        })), React.createElement(Pane, {
          overflowY: "auto",
          "data-state": state
        }, _this2.renderChildren()), hasFooter && React.createElement(Pane, {
          marginTop: 24,
          flexShrink: 0,
          display: "flex",
          flexDirection: "row-reverse"
        }, React.createElement(Button, {
          appearance: "primary",
          intent: intent,
          marginLeft: 8,
          onClick: _this2.handleConfirm
        }, confirmLabel), hasCancel && React.createElement(Button, {
          onClick: _this2.handleCancel
        }, cancelLabel)));
      }));
    }
  }]);

  return CornerDialog;
}(PureComponent);

CornerDialog.displayName = "CornerDialog";

_defineProperty(CornerDialog, "propTypes", {
  /**
   * Children can be a string, node or a function accepting `({ close })`.
   * When passing a string, <Paragraph size={400} color="muted" /> is used to wrap the string.
   */
  children: PropTypes.oneOfType([PropTypes.node, PropTypes.func]).isRequired,

  /**
   * The intent of the CornerDialog. Used for the button.
   */
  intent: PropTypes.oneOf(['none', 'success', 'warning', 'danger']).isRequired,

  /**
   * When true, the dialog is shown.
   */
  isShown: PropTypes.bool,

  /**
   * Title of the Dialog. Titles should use Title Case.
   */
  title: PropTypes.node,

  /**
   * Function that will be called when the exit transition is complete.
   */
  onCloseComplete: PropTypes.func,

  /**
   * Function that will be called when the enter transition is complete.
   */
  onOpenComplete: PropTypes.func,

  /**
   * When true, the footer with the cancel and confirm button is shown.
   */
  hasFooter: PropTypes.bool,

  /**
   * Function that will be called when the confirm button is clicked.
   * This does not close the Dialog. A close function will be passed
   * as a paramater you can use to close the dialog.
   *
   * `onConfirm={(close) => close()}`
   */
  onConfirm: PropTypes.func,

  /**
   * Label of the confirm button.
   */
  confirmLabel: PropTypes.string,

  /**
   * When true, the cancel button is shown.
   */
  hasCancel: PropTypes.bool,

  /**
   * When true, the close button is shown.
   */
  hasClose: PropTypes.bool,

  /**
   * Function that will be called when the cancel button is clicked.
   * This closes the Dialog by default.
   *
   * `onCancel={(close) => close()}`
   */
  onCancel: PropTypes.func,

  /**
   * Label of the cancel button.
   */
  cancelLabel: PropTypes.string,

  /**
   * Width of the Dialog.
   */
  width: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),

  /**
   * Props that are passed to the dialog container.
   */
  containerProps: PropTypes.object
});

_defineProperty(CornerDialog, "defaultProps", {
  width: 392,
  intent: 'none',
  hasFooter: true,
  confirmLabel: 'Learn More',
  hasCancel: true,
  hasClose: true,
  cancelLabel: 'Close',
  onCancel: function onCancel(close) {
    return close();
  },
  onConfirm: function onConfirm(close) {
    return close();
  },
  onCloseComplete: function onCloseComplete() {}
});

export { CornerDialog as default };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb3JuZXItZGlhbG9nL3NyYy9Db3JuZXJEaWFsb2cuanMiXSwibmFtZXMiOlsiUmVhY3QiLCJQdXJlQ29tcG9uZW50IiwiUHJvcFR5cGVzIiwiY3NzIiwiVHJhbnNpdGlvbiIsIlBhbmUiLCJDYXJkIiwiUG9ydGFsIiwiUGFyYWdyYXBoIiwiSGVhZGluZyIsIkJ1dHRvbiIsIkljb25CdXR0b24iLCJhbmltYXRpb25FYXNpbmciLCJkZWNlbGVyYXRpb24iLCJhY2NlbGVyYXRpb24iLCJzcHJpbmciLCJBTklNQVRJT05fRFVSQVRJT04iLCJvcGVuQW5pbWF0aW9uIiwia2V5ZnJhbWVzIiwiZnJvbSIsInRyYW5zZm9ybSIsInRvIiwiY2xvc2VBbmltYXRpb24iLCJvcGFjaXR5IiwiYW5pbWF0aW9uU3R5bGVzIiwiYW5pbWF0aW9uIiwiQ29ybmVyRGlhbG9nIiwicHJvcHMiLCJzZXRTdGF0ZSIsImV4aXRpbmciLCJleGl0ZWQiLCJvbkNsb3NlQ29tcGxldGUiLCJvbkNhbmNlbCIsImhhbmRsZUNsb3NlIiwib25Db25maXJtIiwiY2hpbGRyZW4iLCJjbG9zZSIsInN0YXRlIiwiaXNTaG93biIsInByZXZQcm9wcyIsInRpdGxlIiwid2lkdGgiLCJpbnRlbnQiLCJoYXNGb290ZXIiLCJoYXNDYW5jZWwiLCJoYXNDbG9zZSIsImNhbmNlbExhYmVsIiwiY29uZmlybUxhYmVsIiwib25PcGVuQ29tcGxldGUiLCJjb250YWluZXJQcm9wcyIsImhhbmRsZUV4aXRlZCIsInJlbmRlckNoaWxkcmVuIiwiaGFuZGxlQ29uZmlybSIsImhhbmRsZUNhbmNlbCIsIm9uZU9mVHlwZSIsIm5vZGUiLCJmdW5jIiwiaXNSZXF1aXJlZCIsIm9uZU9mIiwiYm9vbCIsInN0cmluZyIsIm51bWJlciIsIm9iamVjdCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQSxPQUFPQSxLQUFQLElBQWdCQyxhQUFoQixRQUFxQyxPQUFyQztBQUNBLE9BQU9DLFNBQVAsTUFBc0Is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OztBQUdBZCxFQUFBQSxRQUFRLEVBQUUzQyxTQUFTLENBQUN5RCxJQTVESDs7QUE4RGpCOzs7Ozs7QUFNQTNCLEVBQUFBLFFBQVEsRUFBRTlCLFNBQVMsQ0FBQ3NELElBcEVIOztBQXNFakI7OztBQUdBVixFQUFBQSxXQUFXLEVBQUU1QyxTQUFTLENBQUMwRCxNQXpFTjs7QUEyRWpCOzs7QUFHQW5CLEVBQUFBLEtBQUssRUFBRXZDLFNBQVMsQ0FBQ29ELFNBQVYsQ0FBb0IsQ0FBQ3BELFNBQVMsQ0FBQzBELE1BQVgsRUFBbUIxRCxTQUFTLENBQUMyRCxNQUE3QixDQUFwQixDQTlFVTs7QUFnRmpCOzs7QUFHQVosRUFBQUEsY0FBYyxFQUFFL0MsU0FBUyxDQUFDNEQ7QUFuRlQsQzs7Z0JBREFwQyxZLGtCQXVGRztBQUNwQmUsRUFBQUEsS0FBSyxFQUFFLEdBRGE7QUFFcEJDLEVBQUFBLE1BQU0sRUFBRSxNQUZZO0FBR3BCQyxFQUFBQSxTQUFTLEVBQUUsSUFIUztBQUlwQkksRUFBQUEsWUFBWSxFQUFFLFlBSk07QUFLcEJILEVBQUFBLFNBQVMsRUFBRSxJQUxTO0FBTXBCQyxFQUFBQSxRQUFRLEVBQUUsSUFOVTtBQU9wQkMsRUFBQUEsV0FBVyxFQUFFLE9BUE87QUFRcEJkLEVBQUFBLFFBQVEsRUFBRSxrQkFBQUksS0FBSztBQUFBLFdBQUlBLEtBQUssRUFBVDtBQUFBLEdBUks7QUFTcEJGLEVBQUFBLFNBQVMsRUFBRSxtQkFBQUUsS0FBSztBQUFBLFdBQUlBLEtBQUssRUFBVDtBQUFBLEdBVEk7QUFVcEJMLEVBQUFBLGVBQWUsRUFBRSwyQkFBTSxDQUFFO0FBVkwsQzs7U0F2RkhMLFkiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgUHVyZUNvbXBvbmVudCB9IGZyb20gJ3JlYWN0J1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJ1xuaW1wb3J0IHsgY3NzIH0gZnJvbSAndWktYm94J1xuaW1wb3J0IFRyYW5zaXRpb24gZnJvbSAncmVhY3QtdHJhbnNpdGlvbi1ncm91cC9UcmFuc2l0aW9uJ1xuaW1wb3J0IHsgUGFuZSwgQ2FyZCB9IGZyb20gJy4uLy4uL2xheWVycydcbmltcG9ydCB7IFBvcnRhbCB9IGZyb20gJy4uLy4uL3BvcnRhbCdcbmltcG9ydCB7IFBhcmFncmFwaCwgSGVhZGluZyB9IGZyb20gJy4uLy4uL3R5cG9ncmFwaHknXG5pbXBvcnQgeyBCdXR0b24sIEljb25CdXR0b24gfSBmcm9tICcuLi8uLi9idXR0b25zJ1xuXG5jb25zdCBhbmltYXRpb25FYXNpbmcgPSB7XG4gIGRlY2VsZXJhdGlvbjogYGN1YmljLWJlemllcigwLjAsIDAuMCwgMC4yLCAxKWAsXG4gIGFjY2VsZXJhdGlvbjogYGN1YmljLWJlemllcigwLjQsIDAuMCwgMSwgMSlgLFxuICBzcHJpbmc6IGBjdWJpYy1iZXppZXIoMC4xNzUsIDAuODg1LCAwLjMyMCwgMS4xNzUpYFxufVxuXG5jb25zdCBBTklNQVRJT05fRFVSQVRJT04gPSAyNDBcblxuY29uc3Qgb3BlbkFuaW1hdGlvbiA9IGNzcy5rZXlmcmFtZXMoJ29wZW5BbmltYXRpb24nLCB7XG4gIGZyb206IHtcbiAgICB0cmFuc2Zvcm06ICd0cmFuc2xhdGVZKDEwMCUpJ1xuICB9LFxuICB0bzoge1xuICAgIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZVkoMCknXG4gIH1cbn0pXG5cbmNvbnN0IGNsb3NlQW5pbWF0aW9uID0gY3NzLmtleWZyYW1lcygnY2xvc2VBbmltYXRpb24nLCB7XG4gIGZyb206IHtcbiAgICB0cmFuc2Zvcm06ICdzY2FsZSgxKScsXG4gICAgb3BhY2l0eTogMVxuICB9LFxuICB0bzoge1xuICAgIHRyYW5zZm9ybTogJ3NjYWxlKDAuOSknLFxuICAgIG9wYWNpdHk6IDBcbiAgfVxufSlcblxuY29uc3QgYW5pbWF0aW9uU3R5bGVzID0ge1xuICAnJltkYXRhLXN0YXRlPVwiZW50ZXJpbmdcIl0sICZbZGF0YS1zdGF0ZT1cImVudGVyZWRcIl0nOiB7XG4gICAgYW5pbWF0aW9uOiBgJHtvcGVuQW5pbWF0aW9ufSAke0FOSU1BVElPTl9EVVJBVElPTn1tcyAke1xuICAgICAgYW5pbWF0aW9uRWFzaW5nLnNwcmluZ1xuICAgIH0gYm90aGBcbiAgfSxcbiAgJyZbZGF0YS1zdGF0ZT1cImV4aXRpbmdcIl0nOiB7XG4gICAgYW5pbWF0aW9uOiBgJHtjbG9zZUFuaW1hdGlvbn0gMTIwbXMgJHthbmltYXRpb25FYXNpbmcuYWNjZWxlcmF0aW9ufSBib3RoYFxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENvcm5lckRpYWxvZyBleHRlbmRzIFB1cmVDb21wb25lbnQge1xuICBzdGF0aWMgcHJvcFR5cGVzID0ge1xuICAgIC8qKlxuICAgICAqIENoaWxkcmVuIGNhbiBiZSBhIHN0cmluZywgbm9kZSBvciBhIGZ1bmN0aW9uIGFjY2VwdGluZyBgKHsgY2xvc2UgfSlgLlxuICAgICAqIFdoZW4gcGFzc2luZyBhIHN0cmluZywgPFBhcmFncmFwaCBzaXplPXs0MDB9IGNvbG9yPVwibXV0ZWRcIiAvPiBpcyB1c2VkIHRvIHdyYXAgdGhlIHN0cmluZy5cbiAgICAgKi9cbiAgICBjaGlsZHJlbjogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm5vZGUsIFByb3BUeXBlcy5mdW5jXSkuaXNSZXF1aXJlZCxcblxuICAgIC8qKlxuICAgICAqIFRoZSBpbnRlbnQgb2YgdGhlIENvcm5lckRpYWxvZy4gVXNlZCBmb3IgdGhlIGJ1dHRvbi5cbiAgICAgKi9cbiAgICBpbnRlbnQ6IFByb3BUeXBlcy5vbmVPZihbJ25vbmUnLCAnc3VjY2VzcycsICd3YXJuaW5nJywgJ2RhbmdlciddKVxuICAgICAgLmlzUmVxdWlyZWQsXG5cbiAgICAvKipcbiAgICAgKiBXaGVuIHRydWUsIHRoZSBkaWFsb2cgaXMgc2hvd24uXG4gICAgICovXG4gICAgaXNTaG93bjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgICAvKipcbiAgICAgKiBUaXRsZSBvZiB0aGUgRGlhbG9nLiBUaXRsZXMgc2hvdWxkIHVzZSBUaXRsZSBDYXNlLlxuICAgICAqL1xuICAgIHRpdGxlOiBQcm9wVHlwZXMubm9kZSxcblxuICAgIC8qKlxuICAgICAqIEZ1bmN0aW9uIHRoYXQgd2lsbCBiZSBjYWxsZWQgd2hlbiB0aGUgZXhpdCB0cmFuc2l0aW9uIGlzIGNvbXBsZXRlLlxuICAgICAqL1xuICAgIG9uQ2xvc2VDb21wbGV0ZTogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgICAvKipcbiAgICAgKiBGdW5jdGlvbiB0aGF0IHdpbGwgYmUgY2FsbGVkIHdoZW4gdGhlIGVudGVyIHRyYW5zaXRpb24gaXMgY29tcGxldGUuXG4gICAgICovXG4gICAgb25PcGVuQ29tcGxldGU6IFByb3BUeXBlcy5mdW5jLFxuXG4gICAgLyoqXG4gICAgICogV2hlbiB0cnVlLCB0aGUgZm9vdGVyIHdpdGggdGhlIGNhbmNlbCBhbmQgY29uZmlybSBidXR0b24gaXMgc2hvd24uXG4gICAgICovXG4gICAgaGFzRm9vdGVyOiBQcm9wVHlwZXMuYm9vbCxcblxuICAgIC8qKlxuICAgICAqIEZ1bmN0aW9uIHRoYXQgd2lsbCBiZSBjYWxsZWQgd2hlbiB0aGUgY29uZmlybSBidXR0b24gaXMgY2xpY2tlZC5cbiAgICAgKiBUaGlzIGRvZXMgbm90IGNsb3NlIHRoZSBEaWFsb2cuIEEgY2xvc2UgZnVuY3Rpb24gd2lsbCBiZSBwYXNzZWRcbiAgICAgKiBhcyBhIHBhcmFtYXRlciB5b3UgY2FuIHVzZSB0byBjbG9zZSB0aGUgZGlhbG9nLlxuICAgICAqXG4gICAgICogYG9uQ29uZmlybT17KGNsb3NlKSA9PiBjbG9zZSgpfWBcbiAgICAgKi9cbiAgICBvbkNvbmZpcm06IFByb3BUeXBlcy5mdW5jLFxuXG4gICAgLyoqXG4gICAgICogTGFiZWwgb2YgdGhlIGNvbmZpcm0gYnV0dG9uLlxuICAgICAqL1xuICAgIGNvbmZpcm1MYWJlbDogUHJvcFR5cGVzLnN0cmluZyxcblxuICAgIC8qKlxuICAgICAqIFdoZW4gdHJ1ZSwgdGhlIGNhbmNlbCBidXR0b24gaXMgc2hvd24uXG4gICAgICovXG4gICAgaGFzQ2FuY2VsOiBQcm9wVHlwZXMuYm9vbCxcblxuICAgIC8qKlxuICAgICAqIFdoZW4gdHJ1ZSwgdGhlIGNsb3NlIGJ1dHRvbiBpcyBzaG93bi5cbiAgICAgKi9cbiAgICBoYXNDbG9zZTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgICAvKipcbiAgICAgKiBGdW5jdGlvbiB0aGF0IHdpbGwgYmUgY2FsbGVkIHdoZW4gdGhlIGNhbmNlbCBidXR0b24gaXMgY2xpY2tlZC5cbiAgICAgKiBUaGlzIGNsb3NlcyB0aGUgRGlhbG9nIGJ5IGRlZmF1bHQuXG4gICAgICpcbiAgICAgKiBgb25DYW5jZWw9eyhjbG9zZSkgPT4gY2xvc2UoKX1gXG4gICAgICovXG4gICAgb25DYW5jZWw6IFByb3BUeXBlcy5mdW5jLFxuXG4gICAgLyoqXG4gICAgICogTGFiZWwgb2YgdGhlIGNhbmNlbCBidXR0b24uXG4gICAgICovXG4gICAgY2FuY2VsTGFiZWw6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgICAvKipcbiAgICAgKiBXaWR0aCBvZiB0aGUgRGlhbG9nLlxuICAgICAqL1xuICAgIHdpZHRoOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMubnVtYmVyXSksXG5cbiAgICAvKipcbiAgICAgKiBQcm9wcyB0aGF0IGFyZSBwYXNzZWQgdG8gdGhlIGRpYWxvZyBjb250YWluZXIuXG4gICAgICovXG4gICAgY29udGFpbmVyUHJvcHM6IFByb3BUeXBlcy5vYmplY3RcbiAgfVxuXG4gIHN0YXRpYyBkZWZhdWx0UHJvcHMgPSB7XG4gICAgd2lkdGg6IDM5MixcbiAgICBpbnRlbnQ6ICdub25lJyxcbiAgICBoYXNGb290ZXI6IHRydWUsXG4gICAgY29uZmlybUxhYmVsOiAnTGVhcm4gTW9yZScsXG4gICAgaGFzQ2FuY2VsOiB0cnVlLFxuICAgIGhhc0Nsb3NlOiB0cnVlLFxuICAgIGNhbmNlbExhYmVsOiAnQ2xvc2UnLFxuICAgIG9uQ2FuY2VsOiBjbG9zZSA9PiBjbG9zZSgpLFxuICAgIG9uQ29uZmlybTogY2xvc2UgPT4gY2xvc2UoKSxcbiAgICBvbkNsb3NlQ29tcGxldGU6ICgpID0+IHt9XG4gIH1cblxuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKVxuXG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGV4aXRpbmc6IGZhbHNlLFxuICAgICAgZXhpdGVkOiAhcHJvcHMuaXNTaG93blxuICAgIH1cbiAgfVxuXG4gIGNvbXBvbmVudERpZFVwZGF0ZShwcmV2UHJvcHMpIHtcbiAgICBpZiAoIXByZXZQcm9wcy5pc1Nob3duICYmIHRoaXMucHJvcHMuaXNTaG93bikge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0L25vLWRpZC11cGRhdGUtc2V0LXN0YXRlXG4gICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgZXhpdGVkOiBmYWxzZVxuICAgICAgfSlcbiAgICB9XG4gIH1cblxuICBoYW5kbGVFeGl0ZWQgPSAoKSA9PiB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7IGV4aXRpbmc6IGZhbHNlLCBleGl0ZWQ6IHRydWUgfSlcbiAgICB0aGlzLnByb3BzLm9uQ2xvc2VDb21wbGV0ZSgpXG4gIH1cblxuICBoYW5kbGVDYW5jZWwgPSAoKSA9PiB7XG4gICAgdGhpcy5wcm9wcy5vbkNhbmNlbCh0aGlzLmhhbmRsZUNsb3NlKVxuICB9XG5cbiAgaGFuZGxlQ2xvc2UgPSAoKSA9PiB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7IGV4aXRpbmc6IHRydWUgfSlcbiAgfVxuXG4gIGhhbmRsZUNvbmZpcm0gPSAoKSA9PiB7XG4gICAgdGhpcy5wcm9wcy5vbkNvbmZpcm0odGhpcy5oYW5kbGVDbG9zZSlcbiAgfVxuXG4gIHJlbmRlckNoaWxkcmVuID0gKCkgPT4ge1xuICAgIGNvbnN0IHsgY2hpbGRyZW4gfSA9IHRoaXMucHJvcHNcbiAgICBpZiAodHlwZW9mIGNoaWxkcmVuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZXR1cm4gY2hpbGRyZW4oeyBjbG9zZTogdGhpcy5oYW5kbGVDbG9zZSB9KVxuICAgIH1cblxuICAgIGlmICh0eXBlb2YgY2hpbGRyZW4gPT09ICdzdHJpbmcnKSB7XG4gICAgICByZXR1cm4gKFxuICAgICAgICA8UGFyYWdyYXBoIHNpemU9ezQwMH0gY29sb3I9XCJtdXRlZFwiPlxuICAgICAgICAgIHtjaGlsZHJlbn1cbiAgICAgICAgPC9QYXJhZ3JhcGg+XG4gICAgICApXG4gICAgfVxuXG4gICAgcmV0dXJuIGNoaWxkcmVuXG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgY29uc3Qge1xuICAgICAgdGl0bGUsXG4gICAgICB3aWR0aCxcbiAgICAgIGludGVudCxcbiAgICAgIGlzU2hvd24sXG4gICAgICBoYXNGb290ZXIsXG4gICAgICBoYXNDYW5jZWwsXG4gICAgICBoYXNDbG9zZSxcbiAgICAgIGNhbmNlbExhYmVsLFxuICAgICAgY29uZmlybUxhYmVsLFxuICAgICAgb25PcGVuQ29tcGxldGUsXG4gICAgICBjb250YWluZXJQcm9wc1xuICAgIH0gPSB0aGlzLnByb3BzXG5cbiAgICBjb25zdCB7IGV4aXRpbmcsIGV4aXRlZCB9ID0gdGhpcy5zdGF0ZVxuXG4gICAgaWYgKGV4aXRlZCkgcmV0dXJuIG51bGxcblxuICAgIHJldHVybiAoXG4gICAgICA8UG9ydGFsPlxuICAgICAgICA8VHJhbnNpdGlvblxuICAgICAgICAgIGFwcGVhclxuICAgICAgICAgIHVubW91bnRPbkV4aXRcbiAgICAgICAgICB0aW1lb3V0PXtBTklNQVRJT05fRFVSQVRJT059XG4gICAgICAgICAgaW49e2lzU2hvd24gJiYgIWV4aXRpbmd9XG4gICAgICAgICAgb25FeGl0ZWQ9e3RoaXMuaGFuZGxlRXhpdGVkfVxuICAgICAgICAgIG9uRW50ZXJlZD17b25PcGVuQ29tcGxldGV9XG4gICAgICAgID5cbiAgICAgICAgICB7c3RhdGUgPT4gKFxuICAgICAgICAgICAgPENhcmRcbiAgICAgICAgICAgICAgcm9sZT1cImRpYWxvZ1wiXG4gICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcj1cIndoaXRlXCJcbiAgICAgICAgICAgICAgZWxldmF0aW9uPXs0fVxuICAgICAgICAgICAgICB3aWR0aD17d2lkdGh9XG4gICAgICAgICAgICAgIGNzcz17YW5pbWF0aW9uU3R5bGVzfVxuICAgICAgICAgICAgICBkYXRhLXN0YXRlPXtzdGF0ZX1cbiAgICAgICAgICAgICAgcG9zaXRpb249XCJmaXhlZFwiXG4gICAgICAgICAgICAgIGJvdHRvbT17MTZ9XG4gICAgICAgICAgICAgIHJpZ2h0PXsxNn1cbiAgICAgICAgICAgICAgcGFkZGluZz17MzJ9XG4gICAgICAgICAgICAgIHsuLi5jb250YWluZXJQcm9wc31cbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgPFBhbmUgZGlzcGxheT1cImZsZXhcIiBhbGlnbkl0ZW1zPVwiY2VudGVyXCIgbWFyZ2luQm90dG9tPXsxMn0+XG4gICAgICAgICAgICAgICAgPEhlYWRpbmcgaXM9XCJoNFwiIHNpemU9ezYwMH0gZmxleD1cIjFcIj5cbiAgICAgICAgICAgICAgICAgIHt0aXRsZX1cbiAgICAgICAgICAgICAgICA8L0hlYWRpbmc+XG4gICAgICAgICAgICAgICAge2hhc0Nsb3NlICYmIChcbiAgICAgICAgICAgICAgICAgIDxJY29uQnV0dG9uXG4gICAgICAgICAgICAgICAgICAgIGhlaWdodD17MzJ9XG4gICAgICAgICAgICAgICAgICAgIGljb249XCJjcm9zc1wiXG4gICAgICAgICAgICAgICAgICAgIGFwcGVhcmFuY2U9XCJtaW5pbWFsXCJcbiAgICAgICAgICAgICAgICAgICAgb25DbGljaz17dGhpcy5oYW5kbGVDbG9zZX1cbiAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgICAgPC9QYW5lPlxuXG4gICAgICAgICAgICAgIDxQYW5lIG92ZXJmbG93WT1cImF1dG9cIiBkYXRhLXN0YXRlPXtzdGF0ZX0+XG4gICAgICAgICAgICAgICAge3RoaXMucmVuZGVyQ2hpbGRyZW4oKX1cbiAgICAgICAgICAgICAgPC9QYW5lPlxuXG4gICAgICAgICAgICAgIHtoYXNGb290ZXIgJiYgKFxuICAgICAgICAgICAgICAgIDxQYW5lXG4gICAgICAgICAgICAgICAgICBtYXJnaW5Ub3A9ezI0fVxuICAgICAgICAgICAgICAgICAgZmxleFNocmluaz17MH1cbiAgICAgICAgICAgICAgICAgIGRpc3BsYXk9XCJmbGV4XCJcbiAgICAgICAgICAgICAgICAgIGZsZXhEaXJlY3Rpb249XCJyb3ctcmV2ZXJzZVwiXG4gICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgPEJ1dHRvblxuICAgICAgICAgICAgICAgICAgICBhcHBlYXJhbmNlPVwicHJpbWFyeVwiXG4gICAgICAgICAgICAgICAgICAgIGludGVudD17aW50ZW50fVxuICAgICAgICAgICAgICAgICAgICBtYXJnaW5MZWZ0PXs4fVxuICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXt0aGlzLmhhbmRsZUNvbmZpcm19XG4gICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgIHtjb25maXJtTGFiZWx9XG4gICAgICAgICAgICAgICAgICA8L0J1dHRvbj5cbiAgICAgICAgICAgICAgICAgIHtoYXNDYW5jZWwgJiYgKFxuICAgICAgICAgICAgICAgICAgICA8QnV0dG9uIG9uQ2xpY2s9e3RoaXMuaGFuZGxlQ2FuY2VsfT57Y2FuY2VsTGFiZWx9PC9CdXR0b24+XG4gICAgICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgICAgIDwvUGFuZT5cbiAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgIDwvQ2FyZD5cbiAgICAgICAgICApfVxuICAgICAgICA8L1RyYW5zaXRpb24+XG4gICAgICA8L1BvcnRhbD5cbiAgICApXG4gIH1cbn1cbiJdfQ==