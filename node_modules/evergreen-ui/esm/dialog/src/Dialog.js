import _extends from "@babel/runtime/helpers/esm/extends";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _assertThisInitialized from "@babel/runtime/helpers/esm/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import React from 'react';
import PropTypes from 'prop-types';
import { css } from 'ui-box';
import { Pane } from '../../layers';
import { Paragraph, Heading } from '../../typography';
import { Overlay } from '../../overlay';
import { Button, IconButton } from '../../buttons';
import { withTheme } from '../../theme';
var animationEasing = {
  deceleration: "cubic-bezier(0.0, 0.0, 0.2, 1)",
  acceleration: "cubic-bezier(0.4, 0.0, 1, 1)"
};
var ANIMATION_DURATION = 200;
var openAnimation = css.keyframes('openAnimation', {
  from: {
    transform: 'scale(0.8)',
    opacity: 0
  },
  to: {
    transform: 'scale(1)',
    opacity: 1
  }
});
var closeAnimation = css.keyframes('closeAnimation', {
  from: {
    transform: 'scale(1)',
    opacity: 1
  },
  to: {
    transform: 'scale(0.8)',
    opacity: 0
  }
});
var animationStyles = {
  '&[data-state="entering"], &[data-state="entered"]': {
    animation: "".concat(openAnimation, " ").concat(ANIMATION_DURATION, "ms ").concat(animationEasing.deceleration, " both")
  },
  '&[data-state="exiting"]': {
    animation: "".concat(closeAnimation, " ").concat(ANIMATION_DURATION, "ms ").concat(animationEasing.acceleration, " both")
  }
};

var Dialog =
/*#__PURE__*/
function (_React$Component) {
  _inherits(Dialog, _React$Component);

  function Dialog() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, Dialog);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Dialog)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_this), "renderChildren", function (close) {
      var children = _this.props.children;

      if (typeof children === 'function') {
        return children({
          close: close
        });
      }

      if (typeof children === 'string') {
        return React.createElement(Paragraph, null, children);
      }

      return children;
    });

    return _this;
  }

  _createClass(Dialog, [{
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props = this.props,
          title = _this$props.title,
          width = _this$props.width,
          intent = _this$props.intent,
          isShown = _this$props.isShown,
          topOffset = _this$props.topOffset,
          sideOffset = _this$props.sideOffset,
          hasHeader = _this$props.hasHeader,
          hasClose = _this$props.hasClose,
          hasFooter = _this$props.hasFooter,
          hasCancel = _this$props.hasCancel,
          onCloseComplete = _this$props.onCloseComplete,
          onOpenComplete = _this$props.onOpenComplete,
          onCancel = _this$props.onCancel,
          onConfirm = _this$props.onConfirm,
          confirmLabel = _this$props.confirmLabel,
          isConfirmLoading = _this$props.isConfirmLoading,
          isConfirmDisabled = _this$props.isConfirmDisabled,
          cancelLabel = _this$props.cancelLabel,
          shouldCloseOnOverlayClick = _this$props.shouldCloseOnOverlayClick,
          shouldCloseOnEscapePress = _this$props.shouldCloseOnEscapePress,
          containerProps = _this$props.containerProps,
          contentContainerProps = _this$props.contentContainerProps,
          minHeightContent = _this$props.minHeightContent,
          preventBodyScrolling = _this$props.preventBodyScrolling;
      var sideOffsetWithUnit = Number.isInteger(sideOffset) ? "".concat(sideOffset, "px") : sideOffset;
      var maxWidth = "calc(100% - ".concat(sideOffsetWithUnit, " * 2)");
      var topOffsetWithUnit = Number.isInteger(topOffset) ? "".concat(topOffset, "px") : topOffset;
      var maxHeight = "calc(100% - ".concat(topOffsetWithUnit, " * 2)");
      return React.createElement(Overlay, {
        isShown: isShown,
        shouldCloseOnClick: shouldCloseOnOverlayClick,
        shouldCloseOnEscapePress: shouldCloseOnEscapePress,
        onExited: onCloseComplete,
        onEntered: onOpenComplete,
        containerProps: {
          display: 'flex',
          alignItems: 'flex-start',
          justifyContent: 'center'
        },
        preventBodyScrolling: preventBodyScrolling
      }, function (_ref) {
        var state = _ref.state,
            close = _ref.close;
        return React.createElement(Pane, _extends({
          role: "dialog",
          backgroundColor: "white",
          elevation: 4,
          borderRadius: 8,
          width: width,
          maxWidth: maxWidth,
          maxHeight: maxHeight,
          marginX: sideOffsetWithUnit,
          marginY: topOffsetWithUnit,
          display: "flex",
          flexDirection: "column",
          css: animationStyles,
          "data-state": state
        }, containerProps), hasHeader && React.createElement(Pane, {
          padding: 16,
          flexShrink: 0,
          borderBottom: "muted",
          display: "flex",
          alignItems: "center"
        }, React.createElement(Heading, {
          is: "h4",
          size: 600,
          flex: "1"
        }, title), hasClose && React.createElement(IconButton, {
          appearance: "minimal",
          icon: "cross",
          onClick: function onClick() {
            return onCancel(close);
          }
        })), React.createElement(Pane, _extends({
          "data-state": state,
          display: "flex",
          overflow: "auto",
          padding: 16,
          flexDirection: "column",
          minHeight: minHeightContent
        }, contentContainerProps), React.createElement(Pane, null, _this2.renderChildren(close))), hasFooter && React.createElement(Pane, {
          borderTop: "muted",
          clearfix: true
        }, React.createElement(Pane, {
          padding: 16,
          float: "right"
        }, hasCancel && React.createElement(Button, {
          tabIndex: 0,
          onClick: function onClick() {
            return onCancel(close);
          }
        }, cancelLabel), React.createElement(Button, {
          tabIndex: 0,
          marginLeft: 8,
          appearance: "primary",
          isLoading: isConfirmLoading,
          disabled: isConfirmDisabled,
          onClick: function onClick() {
            return onConfirm(close);
          },
          intent: intent
        }, confirmLabel))));
      });
    }
  }]);

  return Dialog;
}(React.Component);

Dialog.displayName = "Dialog";

_defineProperty(Dialog, "propTypes", {
  /**
   * Children can be a string, node or a function accepting `({ close })`.
   * When passing a string, <Paragraph /> is used to wrap the string.
   */
  children: PropTypes.oneOfType([PropTypes.node, PropTypes.func]).isRequired,

  /**
   * The intent of the Dialog. Used for the button.
   */
  intent: PropTypes.oneOf(['none', 'success', 'warning', 'danger']).isRequired,

  /**
   * When true, the dialog is shown.
   */
  isShown: PropTypes.bool,

  /**
   * Title of the Dialog. Titles should use Title Case.
   */
  title: PropTypes.node,

  /**
   * When true, the header with the title and close icon button is shown.
   */
  hasHeader: PropTypes.bool,

  /**
   * When true, the footer with the cancel and confirm button is shown.
   */
  hasFooter: PropTypes.bool,

  /**
   * When true, the cancel button is shown.
   */
  hasCancel: PropTypes.bool,

  /**
   * When true, the close button is shown
   */
  hasClose: PropTypes.bool,

  /**
   * Function that will be called when the exit transition is complete.
   */
  onCloseComplete: PropTypes.func,

  /**
   * Function that will be called when the enter transition is complete.
   */
  onOpenComplete: PropTypes.func,

  /**
   * Function that will be called when the confirm button is clicked.
   * This does not close the Dialog. A close function will be passed
   * as a paramater you can use to close the dialog.
   *
   * `onConfirm={(close) => close()}`
   */
  onConfirm: PropTypes.func,

  /**
   * Label of the confirm button.
   */
  confirmLabel: PropTypes.string,

  /**
   * When true, the confirm button is set to loading.
   */
  isConfirmLoading: PropTypes.bool,

  /**
   * When true, the confirm button is set to disabled.
   */
  isConfirmDisabled: PropTypes.bool,

  /**
   * Function that will be called when the cancel button is clicked.
   * This closes the Dialog by default.
   *
   * `onCancel={(close) => close()}`
   */
  onCancel: PropTypes.func,

  /**
   * Label of the cancel button.
   */
  cancelLabel: PropTypes.string,

  /**
   * Boolean indicating if clicking the overlay should close the overlay.
   */
  shouldCloseOnOverlayClick: PropTypes.bool,

  /**
   * Boolean indicating if pressing the esc key should close the overlay.
   */
  shouldCloseOnEscapePress: PropTypes.bool,

  /**
   * Width of the Dialog.
   */
  width: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),

  /**
   * The space above the dialog.
   * This offset is also used at the bottom when there is not enough vertical
   * space available on screen â€” and the dialog scrolls internally.
   */
  topOffset: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),

  /**
   * The space on the left/right sides of the dialog when there isn't enough
   * horizontal space available on screen.
   */
  sideOffset: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),

  /**
   * The min height of the body content.
   * Makes it less weird when only showing little content.
   */
  minHeightContent: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),

  /**
   * Props that are passed to the dialog container.
   */
  containerProps: PropTypes.object,

  /**
   * Props that are passed to the content container.
   */
  contentContainerProps: PropTypes.object,

  /**
   * Whether or not to prevent scrolling in the outer body
   */
  preventBodyScrolling: PropTypes.bool
});

_defineProperty(Dialog, "defaultProps", {
  isShown: false,
  hasHeader: true,
  hasClose: true,
  hasFooter: true,
  hasCancel: true,
  intent: 'none',
  width: 560,
  topOffset: '12vmin',
  sideOffset: '16px',
  minHeightContent: 80,
  confirmLabel: 'Confirm',
  isConfirmLoading: false,
  isConfirmDisabled: false,
  cancelLabel: 'Cancel',
  shouldCloseOnOverlayClick: true,
  shouldCloseOnEscapePress: true,
  onCancel: function onCancel(close) {
    return close();
  },
  onConfirm: function onConfirm(close) {
    return close();
  },
  preventBodyScrolling: false
});

export default withTheme(Dialog);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9kaWFsb2cvc3JjL0RpYWxvZy5qcyJdLCJuYW1lcyI6WyJSZWFjdCIsIlByb3BUeXBlcyIsImNzcyIsIlBhbmUiLCJQYXJhZ3JhcGgiLCJIZWFkaW5nIiwiT3ZlcmxheSIsIkJ1dHRvbiIsIkljb25CdXR0b24iLCJ3aXRoVGhlbWUiLCJhbmltYXRpb25FYXNpbmciLCJkZWNlbGVyYXRpb24iLCJhY2NlbGVyYXRpb24iLCJBTklNQVRJT05fRFVSQVRJT04iLCJvcGVuQW5pbWF0aW9uIiwia2V5ZnJhbWVzIiwiZnJvbSIsInRyYW5zZm9ybSIsIm9wYWNpdHkiLCJ0byIsImNsb3NlQW5pbWF0aW9uIiwiYW5pbWF0aW9uU3R5bGVzIiwiYW5pbWF0aW9uIiwiRGlhbG9nIiwiY2xvc2UiLCJjaGlsZHJlbiIsInByb3BzIiwidGl0bGUiLCJ3aWR0aCIsImludGVudCIsImlzU2hvd24iLCJ0b3BPZmZzZXQiLCJzaWRlT2Zmc2V0IiwiaGFzSGVhZGVyIiwiaGFzQ2xvc2UiLCJoYXNGb290ZXIiLCJoYXNDYW5jZWwiLCJvbkNsb3NlQ29tcGxldGUiLCJvbk9wZW5Db21wbGV0ZSIsIm9uQ2FuY2VsIiwib25Db25maXJtIiwiY29uZmlybUxhYmVsIiwiaXNDb25maXJtTG9hZGluZyIsImlzQ29uZmlybURpc2FibGVkIiwiY2FuY2VsTGFiZWwiLCJzaG91bGRDbG9zZU9uT3ZlcmxheUNsaWNrIiwic2hvdWxkQ2xvc2VPbkVzY2FwZVByZXNzIiwiY29udGFpbmVyUHJvcHMiLCJjb250ZW50Q29udGFpbmVyUHJvcHMiLCJtaW5IZWlnaHRDb250ZW50IiwicHJldmVudEJvZHlTY3JvbGxpbmciLCJzaWRlT2Zmc2V0V2l0aFVuaXQiLCJOdW1iZXIiLCJpc0ludGVnZXIiLCJtYXhXaWR0aCIsInRvcE9mZnNldFdpdGhVbml0IiwibWF4SGVpZ2h0IiwiZGlzcGxheSIsImFsaWduSXRlbXMiLCJqdXN0aWZ5Q29udGVudCIsInN0YXRlIiwicmVuZGVyQ2hpbGRyZW4iLCJDb21wb25lbnQiLCJvbmVPZlR5cGUiLCJub2RlIiwiZnVuYyIsImlzUmVxdWlyZWQiLCJvbmVPZiIsImJvb2wiLCJzdHJpbmciLCJudW1iZXIiLCJvYmplY3QiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUEsT0FBT0EsS0FBUCxNQUFrQixPQUFsQjtBQUNBLE9BQU9DLFNBQVAsTUFBc0IsWUFBdEI7QUFDQSxTQUFTQyxHQUFULFFBQW9CLFFBQXBCO0FBQ0EsU0FBU0MsSUFBVCxRQUFxQixjQUFyQjtBQUNBLFNBQVNDLFNBQVQsRUFBb0JDLE9BQXBCLFFBQW1DLGtCQUFuQztBQUNBLFNBQVNDLE9BQVQsUUFBd0IsZUFBeEI7QUFDQSxTQUFTQyxNQUFULEVBQWlCQyxVQUFqQixRQUFtQyxlQUFuQztBQUNBLFNBQVNDLFNBQVQsUUFBMEIsYUFBMUI7QUFFQSxJQUFNQyxlQUFlLEdBQUc7QUFDdEJDLEVBQUFBLFlBQVksa0NBRFU7QUFFdEJDLEVBQUFBLFlBQVk7QUFGVSxDQUF4QjtBQUtBLElBQU1DLGtCQUFrQixHQUFHLEdBQTNCO0FBRUEsSUFBTUMsYUFBYSxHQUFHWixHQUFHLENBQUNhLFNBQUosQ0FBYyxlQUFkLEVBQStCO0FBQ25EQyxFQUFBQSxJQUFJLEVBQUU7QUFDSkMsSUFBQUEsU0FBUyxFQUFFLFlBRFA7QUFFSkMsSUFBQUEsT0FBTyxFQUFFO0FBRkwsR0FENkM7QUFLbkRDLEVBQUFBLEVBQUUsRUFBRTtBQUNGRixJQUFBQSxTQUFTLEVBQUUsVUFEVDtBQUVGQyxJQUFBQSxPQUFPLEVBQUU7QUFGUDtBQUwrQyxDQUEvQixDQUF0QjtBQVdBLElBQU1FLGNBQWMsR0FBR2xCLEdBQUcsQ0FBQ2EsU0FBSixDQUFjLGdCQUFkLEVBQWdDO0FBQ3JEQyxFQUFBQSxJQUFJLEVBQUU7QUFDSkMsSUFBQUEsU0FBUyxFQUFFLFVBRFA7QUFFSkMsSUFBQUEsT0FBTyxFQUFFO0FBRkwsR0FEK0M7QUFLckRDLEVBQUFBLEVBQUUsRUFBRTtBQUNGRixJQUFBQSxTQUFTLEVBQUUsWUFEVDtBQUVGQyxJ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QSxTQUFTLEVBQUUsSUFKUztBQUtwQkMsRUFBQUEsU0FBUyxFQUFFLElBTFM7QUFNcEJQLEVBQUFBLE1BQU0sRUFBRSxNQU5ZO0FBT3BCRCxFQUFBQSxLQUFLLEVBQUUsR0FQYTtBQVFwQkcsRUFBQUEsU0FBUyxFQUFFLFFBUlM7QUFTcEJDLEVBQUFBLFVBQVUsRUFBRSxNQVRRO0FBVXBCaUIsRUFBQUEsZ0JBQWdCLEVBQUUsRUFWRTtBQVdwQlIsRUFBQUEsWUFBWSxFQUFFLFNBWE07QUFZcEJDLEVBQUFBLGdCQUFnQixFQUFFLEtBWkU7QUFhcEJDLEVBQUFBLGlCQUFpQixFQUFFLEtBYkM7QUFjcEJDLEVBQUFBLFdBQVcsRUFBRSxRQWRPO0FBZXBCQyxFQUFBQSx5QkFBeUIsRUFBRSxJQWZQO0FBZ0JwQkMsRUFBQUEsd0JBQXdCLEVBQUUsSUFoQk47QUFpQnBCUCxFQUFBQSxRQUFRLEVBQUUsa0JBQUFmLEtBQUs7QUFBQSxXQUFJQSxLQUFLLEVBQVQ7QUFBQSxHQWpCSztBQWtCcEJnQixFQUFBQSxTQUFTLEVBQUUsbUJBQUFoQixLQUFLO0FBQUEsV0FBSUEsS0FBSyxFQUFUO0FBQUEsR0FsQkk7QUFtQnBCMEIsRUFBQUEsb0JBQW9CLEVBQUU7QUFuQkYsQzs7QUF5S3hCLGVBQWV6QyxTQUFTLENBQUNjLE1BQUQsQ0FBeEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnXG5pbXBvcnQgeyBjc3MgfSBmcm9tICd1aS1ib3gnXG5pbXBvcnQgeyBQYW5lIH0gZnJvbSAnLi4vLi4vbGF5ZXJzJ1xuaW1wb3J0IHsgUGFyYWdyYXBoLCBIZWFkaW5nIH0gZnJvbSAnLi4vLi4vdHlwb2dyYXBoeSdcbmltcG9ydCB7IE92ZXJsYXkgfSBmcm9tICcuLi8uLi9vdmVybGF5J1xuaW1wb3J0IHsgQnV0dG9uLCBJY29uQnV0dG9uIH0gZnJvbSAnLi4vLi4vYnV0dG9ucydcbmltcG9ydCB7IHdpdGhUaGVtZSB9IGZyb20gJy4uLy4uL3RoZW1lJ1xuXG5jb25zdCBhbmltYXRpb25FYXNpbmcgPSB7XG4gIGRlY2VsZXJhdGlvbjogYGN1YmljLWJlemllcigwLjAsIDAuMCwgMC4yLCAxKWAsXG4gIGFjY2VsZXJhdGlvbjogYGN1YmljLWJlemllcigwLjQsIDAuMCwgMSwgMSlgXG59XG5cbmNvbnN0IEFOSU1BVElPTl9EVVJBVElPTiA9IDIwMFxuXG5jb25zdCBvcGVuQW5pbWF0aW9uID0gY3NzLmtleWZyYW1lcygnb3BlbkFuaW1hdGlvbicsIHtcbiAgZnJvbToge1xuICAgIHRyYW5zZm9ybTogJ3NjYWxlKDAuOCknLFxuICAgIG9wYWNpdHk6IDBcbiAgfSxcbiAgdG86IHtcbiAgICB0cmFuc2Zvcm06ICdzY2FsZSgxKScsXG4gICAgb3BhY2l0eTogMVxuICB9XG59KVxuXG5jb25zdCBjbG9zZUFuaW1hdGlvbiA9IGNzcy5rZXlmcmFtZXMoJ2Nsb3NlQW5pbWF0aW9uJywge1xuICBmcm9tOiB7XG4gICAgdHJhbnNmb3JtOiAnc2NhbGUoMSknLFxuICAgIG9wYWNpdHk6IDFcbiAgfSxcbiAgdG86IHtcbiAgICB0cmFuc2Zvcm06ICdzY2FsZSgwLjgpJyxcbiAgICBvcGFjaXR5OiAwXG4gIH1cbn0pXG5cbmNvbnN0IGFuaW1hdGlvblN0eWxlcyA9IHtcbiAgJyZbZGF0YS1zdGF0ZT1cImVudGVyaW5nXCJdLCAmW2RhdGEtc3RhdGU9XCJlbnRlcmVkXCJdJzoge1xuICAgIGFuaW1hdGlvbjogYCR7b3BlbkFuaW1hdGlvbn0gJHtBTklNQVRJT05fRFVSQVRJT059bXMgJHtcbiAgICAgIGFuaW1hdGlvbkVhc2luZy5kZWNlbGVyYXRpb25cbiAgICB9IGJvdGhgXG4gIH0sXG4gICcmW2RhdGEtc3RhdGU9XCJleGl0aW5nXCJdJzoge1xuICAgIGFuaW1hdGlvbjogYCR7Y2xvc2VBbmltYXRpb259ICR7QU5JTUFUSU9OX0RVUkFUSU9OfW1zICR7XG4gICAgICBhbmltYXRpb25FYXNpbmcuYWNjZWxlcmF0aW9uXG4gICAgfSBib3RoYFxuICB9XG59XG5cbmNsYXNzIERpYWxvZyBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIHN0YXRpYyBwcm9wVHlwZXMgPSB7XG4gICAgLyoqXG4gICAgICogQ2hpbGRyZW4gY2FuIGJlIGEgc3RyaW5nLCBub2RlIG9yIGEgZnVuY3Rpb24gYWNjZXB0aW5nIGAoeyBjbG9zZSB9KWAuXG4gICAgICogV2hlbiBwYXNzaW5nIGEgc3RyaW5nLCA8UGFyYWdyYXBoIC8+IGlzIHVzZWQgdG8gd3JhcCB0aGUgc3RyaW5nLlxuICAgICAqL1xuICAgIGNoaWxkcmVuOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMubm9kZSwgUHJvcFR5cGVzLmZ1bmNdKS5pc1JlcXVpcmVkLFxuXG4gICAgLyoqXG4gICAgICogVGhlIGludGVudCBvZiB0aGUgRGlhbG9nLiBVc2VkIGZvciB0aGUgYnV0dG9uLlxuICAgICAqL1xuICAgIGludGVudDogUHJvcFR5cGVzLm9uZU9mKFsnbm9uZScsICdzdWNjZXNzJywgJ3dhcm5pbmcnLCAnZGFuZ2VyJ10pXG4gICAgICAuaXNSZXF1aXJlZCxcblxuICAgIC8qKlxuICAgICAqIFdoZW4gdHJ1ZSwgdGhlIGRpYWxvZyBpcyBzaG93bi5cbiAgICAgKi9cbiAgICBpc1Nob3duOiBQcm9wVHlwZXMuYm9vbCxcblxuICAgIC8qKlxuICAgICAqIFRpdGxlIG9mIHRoZSBEaWFsb2cuIFRpdGxlcyBzaG91bGQgdXNlIFRpdGxlIENhc2UuXG4gICAgICovXG4gICAgdGl0bGU6IFByb3BUeXBlcy5ub2RlLFxuXG4gICAgLyoqXG4gICAgICogV2hlbiB0cnVlLCB0aGUgaGVhZGVyIHdpdGggdGhlIHRpdGxlIGFuZCBjbG9zZSBpY29uIGJ1dHRvbiBpcyBzaG93bi5cbiAgICAgKi9cbiAgICBoYXNIZWFkZXI6IFByb3BUeXBlcy5ib29sLFxuXG4gICAgLyoqXG4gICAgICogV2hlbiB0cnVlLCB0aGUgZm9vdGVyIHdpdGggdGhlIGNhbmNlbCBhbmQgY29uZmlybSBidXR0b24gaXMgc2hvd24uXG4gICAgICovXG4gICAgaGFzRm9vdGVyOiBQcm9wVHlwZXMuYm9vbCxcblxuICAgIC8qKlxuICAgICAqIFdoZW4gdHJ1ZSwgdGhlIGNhbmNlbCBidXR0b24gaXMgc2hvd24uXG4gICAgICovXG4gICAgaGFzQ2FuY2VsOiBQcm9wVHlwZXMuYm9vbCxcblxuICAgIC8qKlxuICAgICAqIFdoZW4gdHJ1ZSwgdGhlIGNsb3NlIGJ1dHRvbiBpcyBzaG93blxuICAgICAqL1xuICAgIGhhc0Nsb3NlOiBQcm9wVHlwZXMuYm9vbCxcblxuICAgIC8qKlxuICAgICAqIEZ1bmN0aW9uIHRoYXQgd2lsbCBiZSBjYWxsZWQgd2hlbiB0aGUgZXhpdCB0cmFuc2l0aW9uIGlzIGNvbXBsZXRlLlxuICAgICAqL1xuICAgIG9uQ2xvc2VDb21wbGV0ZTogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgICAvKipcbiAgICAgKiBGdW5jdGlvbiB0aGF0IHdpbGwgYmUgY2FsbGVkIHdoZW4gdGhlIGVudGVyIHRyYW5zaXRpb24gaXMgY29tcGxldGUuXG4gICAgICovXG4gICAgb25PcGVuQ29tcGxldGU6IFByb3BUeXBlcy5mdW5jLFxuXG4gICAgLyoqXG4gICAgICogRnVuY3Rpb24gdGhhdCB3aWxsIGJlIGNhbGxlZCB3aGVuIHRoZSBjb25maXJtIGJ1dHRvbiBpcyBjbGlja2VkLlxuICAgICAqIFRoaXMgZG9lcyBub3QgY2xvc2UgdGhlIERpYWxvZy4gQSBjbG9zZSBmdW5jdGlvbiB3aWxsIGJlIHBhc3NlZFxuICAgICAqIGFzIGEgcGFyYW1hdGVyIHlvdSBjYW4gdXNlIHRvIGNsb3NlIHRoZSBkaWFsb2cuXG4gICAgICpcbiAgICAgKiBgb25Db25maXJtPXsoY2xvc2UpID0+IGNsb3NlKCl9YFxuICAgICAqL1xuICAgIG9uQ29uZmlybTogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgICAvKipcbiAgICAgKiBMYWJlbCBvZiB0aGUgY29uZmlybSBidXR0b24uXG4gICAgICovXG4gICAgY29uZmlybUxhYmVsOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gICAgLyoqXG4gICAgICogV2hlbiB0cnVlLCB0aGUgY29uZmlybSBidXR0b24gaXMgc2V0IHRvIGxvYWRpbmcuXG4gICAgICovXG4gICAgaXNDb25maXJtTG9hZGluZzogUHJvcFR5cGVzLmJvb2wsXG5cbiAgICAvKipcbiAgICAgKiBXaGVuIHRydWUsIHRoZSBjb25maXJtIGJ1dHRvbiBpcyBzZXQgdG8gZGlzYWJsZWQuXG4gICAgICovXG4gICAgaXNDb25maXJtRGlzYWJsZWQ6IFByb3BUeXBlcy5ib29sLFxuXG4gICAgLyoqXG4gICAgICogRnVuY3Rpb24gdGhhdCB3aWxsIGJlIGNhbGxlZCB3aGVuIHRoZSBjYW5jZWwgYnV0dG9uIGlzIGNsaWNrZWQuXG4gICAgICogVGhpcyBjbG9zZXMgdGhlIERpYWxvZyBieSBkZWZhdWx0LlxuICAgICAqXG4gICAgICogYG9uQ2FuY2VsPXsoY2xvc2UpID0+IGNsb3NlKCl9YFxuICAgICAqL1xuICAgIG9uQ2FuY2VsOiBQcm9wVHlwZXMuZnVuYyxcblxuICAgIC8qKlxuICAgICAqIExhYmVsIG9mIHRoZSBjYW5jZWwgYnV0dG9uLlxuICAgICAqL1xuICAgIGNhbmNlbExhYmVsOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gICAgLyoqXG4gICAgICogQm9vbGVhbiBpbmRpY2F0aW5nIGlmIGNsaWNraW5nIHRoZSBvdmVybGF5IHNob3VsZCBjbG9zZSB0aGUgb3ZlcmxheS5cbiAgICAgKi9cbiAgICBzaG91bGRDbG9zZU9uT3ZlcmxheUNsaWNrOiBQcm9wVHlwZXMuYm9vbCxcblxuICAgIC8qKlxuICAgICAqIEJvb2xlYW4gaW5kaWNhdGluZyBpZiBwcmVzc2luZyB0aGUgZXNjIGtleSBzaG91bGQgY2xvc2UgdGhlIG92ZXJsYXkuXG4gICAgICovXG4gICAgc2hvdWxkQ2xvc2VPbkVzY2FwZVByZXNzOiBQcm9wVHlwZXMuYm9vbCxcblxuICAgIC8qKlxuICAgICAqIFdpZHRoIG9mIHRoZSBEaWFsb2cuXG4gICAgICovXG4gICAgd2lkdGg6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5udW1iZXJdKSxcblxuICAgIC8qKlxuICAgICAqIFRoZSBzcGFjZSBhYm92ZSB0aGUgZGlhbG9nLlxuICAgICAqIFRoaXMgb2Zmc2V0IGlzIGFsc28gdXNlZCBhdCB0aGUgYm90dG9tIHdoZW4gdGhlcmUgaXMgbm90IGVub3VnaCB2ZXJ0aWNhbFxuICAgICAqIHNwYWNlIGF2YWlsYWJsZSBvbiBzY3JlZW4g4oCUIGFuZCB0aGUgZGlhbG9nIHNjcm9sbHMgaW50ZXJuYWxseS5cbiAgICAgKi9cbiAgICB0b3BPZmZzZXQ6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5udW1iZXJdKSxcblxuICAgIC8qKlxuICAgICAqIFRoZSBzcGFjZSBvbiB0aGUgbGVmdC9yaWdodCBzaWRlcyBvZiB0aGUgZGlhbG9nIHdoZW4gdGhlcmUgaXNuJ3QgZW5vdWdoXG4gICAgICogaG9yaXpvbnRhbCBzcGFjZSBhdmFpbGFibGUgb24gc2NyZWVuLlxuICAgICAqL1xuICAgIHNpZGVPZmZzZXQ6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5udW1iZXJdKSxcblxuICAgIC8qKlxuICAgICAqIFRoZSBtaW4gaGVpZ2h0IG9mIHRoZSBib2R5IGNvbnRlbnQuXG4gICAgICogTWFrZXMgaXQgbGVzcyB3ZWlyZCB3aGVuIG9ubHkgc2hvd2luZyBsaXR0bGUgY29udGVudC5cbiAgICAgKi9cbiAgICBtaW5IZWlnaHRDb250ZW50OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMubnVtYmVyXSksXG5cbiAgICAvKipcbiAgICAgKiBQcm9wcyB0aGF0IGFyZSBwYXNzZWQgdG8gdGhlIGRpYWxvZyBjb250YWluZXIuXG4gICAgICovXG4gICAgY29udGFpbmVyUHJvcHM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgICAvKipcbiAgICAgKiBQcm9wcyB0aGF0IGFyZSBwYXNzZWQgdG8gdGhlIGNvbnRlbnQgY29udGFpbmVyLlxuICAgICAqL1xuICAgIGNvbnRlbnRDb250YWluZXJQcm9wczogUHJvcFR5cGVzLm9iamVjdCxcblxuICAgIC8qKlxuICAgICAqIFdoZXRoZXIgb3Igbm90IHRvIHByZXZlbnQgc2Nyb2xsaW5nIGluIHRoZSBvdXRlciBib2R5XG4gICAgICovXG4gICAgcHJldmVudEJvZHlTY3JvbGxpbmc6IFByb3BUeXBlcy5ib29sXG4gIH1cblxuICBzdGF0aWMgZGVmYXVsdFByb3BzID0ge1xuICAgIGlzU2hvd246IGZhbHNlLFxuICAgIGhhc0hlYWRlcjogdHJ1ZSxcbiAgICBoYXNDbG9zZTogdHJ1ZSxcbiAgICBoYXNGb290ZXI6IHRydWUsXG4gICAgaGFzQ2FuY2VsOiB0cnVlLFxuICAgIGludGVudDogJ25vbmUnLFxuICAgIHdpZHRoOiA1NjAsXG4gICAgdG9wT2Zmc2V0OiAnMTJ2bWluJyxcbiAgICBzaWRlT2Zmc2V0OiAnMTZweCcsXG4gICAgbWluSGVpZ2h0Q29udGVudDogODAsXG4gICAgY29uZmlybUxhYmVsOiAnQ29uZmlybScsXG4gICAgaXNDb25maXJtTG9hZGluZzogZmFsc2UsXG4gICAgaXNDb25maXJtRGlzYWJsZWQ6IGZhbHNlLFxuICAgIGNhbmNlbExhYmVsOiAnQ2FuY2VsJyxcbiAgICBzaG91bGRDbG9zZU9uT3ZlcmxheUNsaWNrOiB0cnVlLFxuICAgIHNob3VsZENsb3NlT25Fc2NhcGVQcmVzczogdHJ1ZSxcbiAgICBvbkNhbmNlbDogY2xvc2UgPT4gY2xvc2UoKSxcbiAgICBvbkNvbmZpcm06IGNsb3NlID0+IGNsb3NlKCksXG4gICAgcHJldmVudEJvZHlTY3JvbGxpbmc6IGZhbHNlXG4gIH1cblxuICByZW5kZXJDaGlsZHJlbiA9IGNsb3NlID0+IHtcbiAgICBjb25zdCB7IGNoaWxkcmVuIH0gPSB0aGlzLnByb3BzXG5cbiAgICBpZiAodHlwZW9mIGNoaWxkcmVuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZXR1cm4gY2hpbGRyZW4oeyBjbG9zZSB9KVxuICAgIH1cblxuICAgIGlmICh0eXBlb2YgY2hpbGRyZW4gPT09ICdzdHJpbmcnKSB7XG4gICAgICByZXR1cm4gPFBhcmFncmFwaD57Y2hpbGRyZW59PC9QYXJhZ3JhcGg+XG4gICAgfVxuXG4gICAgcmV0dXJuIGNoaWxkcmVuXG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgY29uc3Qge1xuICAgICAgdGl0bGUsXG4gICAgICB3aWR0aCxcbiAgICAgIGludGVudCxcbiAgICAgIGlzU2hvd24sXG4gICAgICB0b3BPZmZzZXQsXG4gICAgICBzaWRlT2Zmc2V0LFxuICAgICAgaGFzSGVhZGVyLFxuICAgICAgaGFzQ2xvc2UsXG4gICAgICBoYXNGb290ZXIsXG4gICAgICBoYXNDYW5jZWwsXG4gICAgICBvbkNsb3NlQ29tcGxldGUsXG4gICAgICBvbk9wZW5Db21wbGV0ZSxcbiAgICAgIG9uQ2FuY2VsLFxuICAgICAgb25Db25maXJtLFxuICAgICAgY29uZmlybUxhYmVsLFxuICAgICAgaXNDb25maXJtTG9hZGluZyxcbiAgICAgIGlzQ29uZmlybURpc2FibGVkLFxuICAgICAgY2FuY2VsTGFiZWwsXG4gICAgICBzaG91bGRDbG9zZU9uT3ZlcmxheUNsaWNrLFxuICAgICAgc2hvdWxkQ2xvc2VPbkVzY2FwZVByZXNzLFxuICAgICAgY29udGFpbmVyUHJvcHMsXG4gICAgICBjb250ZW50Q29udGFpbmVyUHJvcHMsXG4gICAgICBtaW5IZWlnaHRDb250ZW50LFxuICAgICAgcHJldmVudEJvZHlTY3JvbGxpbmdcbiAgICB9ID0gdGhpcy5wcm9wc1xuXG4gICAgY29uc3Qgc2lkZU9mZnNldFdpdGhVbml0ID0gTnVtYmVyLmlzSW50ZWdlcihzaWRlT2Zmc2V0KVxuICAgICAgPyBgJHtzaWRlT2Zmc2V0fXB4YFxuICAgICAgOiBzaWRlT2Zmc2V0XG4gICAgY29uc3QgbWF4V2lkdGggPSBgY2FsYygxMDAlIC0gJHtzaWRlT2Zmc2V0V2l0aFVuaXR9ICogMilgXG5cbiAgICBjb25zdCB0b3BPZmZzZXRXaXRoVW5pdCA9IE51bWJlci5pc0ludGVnZXIodG9wT2Zmc2V0KVxuICAgICAgPyBgJHt0b3BPZmZzZXR9cHhgXG4gICAgICA6IHRvcE9mZnNldFxuICAgIGNvbnN0IG1heEhlaWdodCA9IGBjYWxjKDEwMCUgLSAke3RvcE9mZnNldFdpdGhVbml0fSAqIDIpYFxuXG4gICAgcmV0dXJuIChcbiAgICAgIDxPdmVybGF5XG4gICAgICAgIGlzU2hvd249e2lzU2hvd259XG4gICAgICAgIHNob3VsZENsb3NlT25DbGljaz17c2hvdWxkQ2xvc2VPbk92ZXJsYXlDbGlja31cbiAgICAgICAgc2hvdWxkQ2xvc2VPbkVzY2FwZVByZXNzPXtzaG91bGRDbG9zZU9uRXNjYXBlUHJlc3N9XG4gICAgICAgIG9uRXhpdGVkPXtvbkNsb3NlQ29tcGxldGV9XG4gICAgICAgIG9uRW50ZXJlZD17b25PcGVuQ29tcGxldGV9XG4gICAgICAgIGNvbnRhaW5lclByb3BzPXt7XG4gICAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgICAgIGFsaWduSXRlbXM6ICdmbGV4LXN0YXJ0JyxcbiAgICAgICAgICBqdXN0aWZ5Q29udGVudDogJ2NlbnRlcidcbiAgICAgICAgfX1cbiAgICAgICAgcHJldmVudEJvZHlTY3JvbGxpbmc9e3ByZXZlbnRCb2R5U2Nyb2xsaW5nfVxuICAgICAgPlxuICAgICAgICB7KHsgc3RhdGUsIGNsb3NlIH0pID0+IChcbiAgICAgICAgICA8UGFuZVxuICAgICAgICAgICAgcm9sZT1cImRpYWxvZ1wiXG4gICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I9XCJ3aGl0ZVwiXG4gICAgICAgICAgICBlbGV2YXRpb249ezR9XG4gICAgICAgICAgICBib3JkZXJSYWRpdXM9ezh9XG4gICAgICAgICAgICB3aWR0aD17d2lkdGh9XG4gICAgICAgICAgICBtYXhXaWR0aD17bWF4V2lkdGh9XG4gICAgICAgICAgICBtYXhIZWlnaHQ9e21heEhlaWdodH1cbiAgICAgICAgICAgIG1hcmdpblg9e3NpZGVPZmZzZXRXaXRoVW5pdH1cbiAgICAgICAgICAgIG1hcmdpblk9e3RvcE9mZnNldFdpdGhVbml0fVxuICAgICAgICAgICAgZGlzcGxheT1cImZsZXhcIlxuICAgICAgICAgICAgZmxleERpcmVjdGlvbj1cImNvbHVtblwiXG4gICAgICAgICAgICBjc3M9e2FuaW1hdGlvblN0eWxlc31cbiAgICAgICAgICAgIGRhdGEtc3RhdGU9e3N0YXRlfVxuICAgICAgICAgICAgey4uLmNvbnRhaW5lclByb3BzfVxuICAgICAgICAgID5cbiAgICAgICAgICAgIHtoYXNIZWFkZXIgJiYgKFxuICAgICAgICAgICAgICA8UGFuZVxuICAgICAgICAgICAgICAgIHBhZGRpbmc9ezE2fVxuICAgICAgICAgICAgICAgIGZsZXhTaHJpbms9ezB9XG4gICAgICAgICAgICAgICAgYm9yZGVyQm90dG9tPVwibXV0ZWRcIlxuICAgICAgICAgICAgICAgIGRpc3BsYXk9XCJmbGV4XCJcbiAgICAgICAgICAgICAgICBhbGlnbkl0ZW1zPVwiY2VudGVyXCJcbiAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIDxIZWFkaW5nIGlzPVwiaDRcIiBzaXplPXs2MDB9IGZsZXg9XCIxXCI+XG4gICAgICAgICAgICAgICAgICB7dGl0bGV9XG4gICAgICAgICAgICAgICAgPC9IZWFkaW5nPlxuICAgICAgICAgICAgICAgIHtoYXNDbG9zZSAmJiAoXG4gICAgICAgICAgICAgICAgICA8SWNvbkJ1dHRvblxuICAgICAgICAgICAgICAgICAgICBhcHBlYXJhbmNlPVwibWluaW1hbFwiXG4gICAgICAgICAgICAgICAgICAgIGljb249XCJjcm9zc1wiXG4gICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IG9uQ2FuY2VsKGNsb3NlKX1cbiAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgICAgPC9QYW5lPlxuICAgICAgICAgICAgKX1cblxuICAgICAgICAgICAgPFBhbmVcbiAgICAgICAgICAgICAgZGF0YS1zdGF0ZT17c3RhdGV9XG4gICAgICAgICAgICAgIGRpc3BsYXk9XCJmbGV4XCJcbiAgICAgICAgICAgICAgb3ZlcmZsb3c9XCJhdXRvXCJcbiAgICAgICAgICAgICAgcGFkZGluZz17MTZ9XG4gICAgICAgICAgICAgIGZsZXhEaXJlY3Rpb249XCJjb2x1bW5cIlxuICAgICAgICAgICAgICBtaW5IZWlnaHQ9e21pbkhlaWdodENvbnRlbnR9XG4gICAgICAgICAgICAgIHsuLi5jb250ZW50Q29udGFpbmVyUHJvcHN9XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIDxQYW5lPnt0aGlzLnJlbmRlckNoaWxkcmVuKGNsb3NlKX08L1BhbmU+XG4gICAgICAgICAgICA8L1BhbmU+XG5cbiAgICAgICAgICAgIHtoYXNGb290ZXIgJiYgKFxuICAgICAgICAgICAgICA8UGFuZSBib3JkZXJUb3A9XCJtdXRlZFwiIGNsZWFyZml4PlxuICAgICAgICAgICAgICAgIDxQYW5lIHBhZGRpbmc9ezE2fSBmbG9hdD1cInJpZ2h0XCI+XG4gICAgICAgICAgICAgICAgICB7LyogQ2FuY2VsIHNob3VsZCBiZSBmaXJzdCB0byBtYWtlIHN1cmUgZm9jdXMgZ2V0cyBvbiBpdCBmaXJzdC4gKi99XG4gICAgICAgICAgICAgICAgICB7aGFzQ2FuY2VsICYmIChcbiAgICAgICAgICAgICAgICAgICAgPEJ1dHRvbiB0YWJJbmRleD17MH0gb25DbGljaz17KCkgPT4gb25DYW5jZWwoY2xvc2UpfT5cbiAgICAgICAgICAgICAgICAgICAgICB7Y2FuY2VsTGFiZWx9XG4gICAgICAgICAgICAgICAgICAgIDwvQnV0dG9uPlxuICAgICAgICAgICAgICAgICAgKX1cblxuICAgICAgICAgICAgICAgICAgPEJ1dHRvblxuICAgICAgICAgICAgICAgICAgICB0YWJJbmRleD17MH1cbiAgICAgICAgICAgICAgICAgICAgbWFyZ2luTGVmdD17OH1cbiAgICAgICAgICAgICAgICAgICAgYXBwZWFyYW5jZT1cInByaW1hcnlcIlxuICAgICAgICAgICAgICAgICAgICBpc0xvYWRpbmc9e2lzQ29uZmlybUxvYWRpbmd9XG4gICAgICAgICAgICAgICAgICAgIGRpc2FibGVkPXtpc0NvbmZpcm1EaXNhYmxlZH1cbiAgICAgICAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4gb25Db25maXJtKGNsb3NlKX1cbiAgICAgICAgICAgICAgICAgICAgaW50ZW50PXtpbnRlbnR9XG4gICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgIHtjb25maXJtTGFiZWx9XG4gICAgICAgICAgICAgICAgICA8L0J1dHRvbj5cbiAgICAgICAgICAgICAgICA8L1BhbmU+XG4gICAgICAgICAgICAgIDwvUGFuZT5cbiAgICAgICAgICAgICl9XG4gICAgICAgICAgPC9QYW5lPlxuICAgICAgICApfVxuICAgICAgPC9PdmVybGF5PlxuICAgIClcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCB3aXRoVGhlbWUoRGlhbG9nKVxuIl19