import _objectSpread from "@babel/runtime/helpers/esm/objectSpread";
import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import React, { PureComponent } from 'react';
import PropTypes from 'prop-types';
import Box, { css } from 'ui-box';
import { withTheme } from '../../theme';
var loadingKeyframes = css.keyframes('loading', {
  '0%': {
    transform: 'rotate(0)'
  },
  '100%': {
    transform: 'rotate(360deg)'
  }
});
var loadingCircleKeyframes = css.keyframes('loading-circle', {
  '0%': {
    strokeDashoffset: 600
  },
  '100%': {
    strokeDashoffset: 0
  }
});
var outer = {
  animation: "".concat(loadingKeyframes, " 2s linear infinite")
};

var inner = function inner(color) {
  return {
    strokeDashoffset: 600,
    strokeDasharray: 300,
    strokeWidth: 12,
    strokeMiterlimit: 10,
    strokeLinecap: 'round',
    animation: "".concat(loadingCircleKeyframes, " 1.6s cubic-bezier(0.4, 0.15, 0.6, 0.85) infinite"),
    stroke: color,
    fill: 'transparent'
  };
};

var Spinner =
/*#__PURE__*/
function (_PureComponent) {
  _inherits(Spinner, _PureComponent);

  function Spinner(_ref) {
    var _this;

    var delay = _ref.delay;

    _classCallCheck(this, Spinner);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Spinner).call(this));
    _this.state = {
      isVisible: delay === 0
    };
    return _this;
  }

  _createClass(Spinner, [{
    key: "render",
    value: function render() {
      if (!this.state.isVisible) {
        return null;
      }

      var _this$props = this.props,
          theme = _this$props.theme,
          size = _this$props.size,
          props = _objectWithoutProperties(_this$props, ["theme", "size"]);

      return React.createElement(Box, _extends({
        width: size,
        height: size,
        lineHeight: 0
      }, props), React.createElement(Box, {
        is: "svg",
        css: outer,
        x: "0px",
        y: "0px",
        viewBox: "0 0 150 150"
      }, React.createElement(Box, {
        is: "circle",
        css: inner(theme.spinnerColor),
        cx: "75",
        cy: "75",
        r: "60"
      })));
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this2 = this;

      var delay = this.props.delay;

      if (delay > 0) {
        this.delayTimer = setTimeout(function () {
          _this2.setState({
            isVisible: true
          });
        }, delay);
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      clearTimeout(this.delayTimer);
    }
  }]);

  return Spinner;
}(PureComponent);

Spinner.displayName = "Spinner";

_defineProperty(Spinner, "propTypes", _objectSpread({}, Box.propTypes, {
  /**
   * Delay after which spinner should be visible.
   */
  delay: PropTypes.number,

  /**
   * The size of the spinner.
   */
  size: PropTypes.number.isRequired,

  /**
   * Theme provided by ThemeProvider.
   */
  theme: PropTypes.object.isRequired
}));

_defineProperty(Spinner, "defaultProps", {
  size: 40,
  delay: 0
});

export default withTheme(Spinner);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zcGlubmVyL3NyYy9TcGlubmVyLmpzIl0sIm5hbWVzIjpbIlJlYWN0IiwiUHVyZUNvbXBvbmVudCIsIlByb3BUeXBlcyIsIkJveCIsImNzcyIsIndpdGhUaGVtZSIsImxvYWRpbmdLZXlmcmFtZXMiLCJrZXlmcmFtZXMiLCJ0cmFuc2Zvcm0iLCJsb2FkaW5nQ2lyY2xlS2V5ZnJhbWVzIiwic3Ryb2tlRGFzaG9mZnNldCIsIm91dGVyIiwiYW5pbWF0aW9uIiwiaW5uZXIiLCJjb2xvciIsInN0cm9rZURhc2hhcnJheSIsInN0cm9rZVdpZHRoIiwic3Ryb2tlTWl0ZXJsaW1pdCIsInN0cm9rZUxpbmVjYXAiLCJzdHJva2UiLCJmaWxsIiwiU3Bpbm5lciIsImRlbGF5Iiwic3RhdGUiLCJpc1Zpc2libGUiLCJwcm9wcyIsInRoZW1lIiwic2l6ZSIsInNwaW5uZXJDb2xvciIsImRlbGF5VGltZXIiLCJzZXRUaW1lb3V0Iiwic2V0U3RhdGUiLCJjbGVhclRpbWVvdXQiLCJwcm9wVHlwZXMiLCJudW1iZXIiLCJpc1JlcXVpcmVkIiwib2JqZWN0Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQSxPQUFPQSxLQUFQLElBQWdCQyxhQUFoQixRQUFxQyxPQUFyQztBQUNBLE9BQU9DLFNBQVAsTUFBc0IsWUFBdEI7QUFDQSxPQUFPQyxHQUFQLElBQWNDLEdBQWQsUUFBeUIsUUFBekI7QUFDQSxTQUFTQyxTQUFULFFBQTBCLGFBQTFCO0FBRUEsSUFBTUMsZ0JBQWdCLEdBQUdGLEdBQUcsQ0FBQ0csU0FBSixDQUFjLFNBQWQsRUFBeUI7QUFDaEQsUUFBTTtBQUNKQyxJQUFBQSxTQUFTLEVBQUU7QUFEUCxHQUQwQztBQUloRCxVQUFRO0FBQ05BLElBQUFBLFNBQVMsRUFBRTtBQURMO0FBSndDLENBQXpCLENBQXpCO0FBU0EsSUFBTUMsc0JBQXNCLEdBQUdMLEdBQUcsQ0FBQ0csU0FBSixDQUFjLGdCQUFkLEVBQWdDO0FBQzdELFFBQU07QUFDSkcsSUFB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O0FBRmEsQzs7QUFtRHhCLGVBQWVqQixTQUFTLENBQUNnQixPQUFELENBQXhCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IFB1cmVDb21wb25lbnQgfSBmcm9tICdyZWFjdCdcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcydcbmltcG9ydCBCb3gsIHsgY3NzIH0gZnJvbSAndWktYm94J1xuaW1wb3J0IHsgd2l0aFRoZW1lIH0gZnJvbSAnLi4vLi4vdGhlbWUnXG5cbmNvbnN0IGxvYWRpbmdLZXlmcmFtZXMgPSBjc3Mua2V5ZnJhbWVzKCdsb2FkaW5nJywge1xuICAnMCUnOiB7XG4gICAgdHJhbnNmb3JtOiAncm90YXRlKDApJ1xuICB9LFxuICAnMTAwJSc6IHtcbiAgICB0cmFuc2Zvcm06ICdyb3RhdGUoMzYwZGVnKSdcbiAgfVxufSlcblxuY29uc3QgbG9hZGluZ0NpcmNsZUtleWZyYW1lcyA9IGNzcy5rZXlmcmFtZXMoJ2xvYWRpbmctY2lyY2xlJywge1xuICAnMCUnOiB7XG4gICAgc3Ryb2tlRGFzaG9mZnNldDogNjAwXG4gIH0sXG4gICcxMDAlJzoge1xuICAgIHN0cm9rZURhc2hvZmZzZXQ6IDBcbiAgfVxufSlcblxuY29uc3Qgb3V0ZXIgPSB7XG4gIGFuaW1hdGlvbjogYCR7bG9hZGluZ0tleWZyYW1lc30gMnMgbGluZWFyIGluZmluaXRlYFxufVxuXG5jb25zdCBpbm5lciA9IGNvbG9yID0+ICh7XG4gIHN0cm9rZURhc2hvZmZzZXQ6IDYwMCxcbiAgc3Ryb2tlRGFzaGFycmF5OiAzMDAsXG4gIHN0cm9rZVdpZHRoOiAxMixcbiAgc3Ryb2tlTWl0ZXJsaW1pdDogMTAsXG4gIHN0cm9rZUxpbmVjYXA6ICdyb3VuZCcsXG4gIGFuaW1hdGlvbjogYCR7bG9hZGluZ0NpcmNsZUtleWZyYW1lc30gMS42cyBjdWJpYy1iZXppZXIoMC40LCAwLjE1LCAwLjYsIDAuODUpIGluZmluaXRlYCxcbiAgc3Ryb2tlOiBjb2xvcixcbiAgZmlsbDogJ3RyYW5zcGFyZW50J1xufSlcblxuY2xhc3MgU3Bpbm5lciBleHRlbmRzIFB1cmVDb21wb25lbnQge1xuICBzdGF0aWMgcHJvcFR5cGVzID0ge1xuICAgIC8qKlxuICAgICAqIENvbXBvc2VzIHRoZSBCb3ggY29tcG9uZW50IGFzIHRoZSBiYXNlLlxuICAgICAqL1xuICAgIC4uLkJveC5wcm9wVHlwZXMsXG5cbiAgICAvKipcbiAgICAgKiBEZWxheSBhZnRlciB3aGljaCBzcGlubmVyIHNob3VsZCBiZSB2aXNpYmxlLlxuICAgICAqL1xuICAgIGRlbGF5OiBQcm9wVHlwZXMubnVtYmVyLFxuXG4gICAgLyoqXG4gICAgICogVGhlIHNpemUgb2YgdGhlIHNwaW5uZXIuXG4gICAgICovXG4gICAgc2l6ZTogUHJvcFR5cGVzLm51bWJlci5pc1JlcXVpcmVkLFxuXG4gICAgLyoqXG4gICAgICogVGhlbWUgcHJvdmlkZWQgYnkgVGhlbWVQcm92aWRlci5cbiAgICAgKi9cbiAgICB0aGVtZTogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkXG4gIH1cblxuICBzdGF0aWMgZGVmYXVsdFByb3BzID0ge1xuICAgIHNpemU6IDQwLFxuICAgIGRlbGF5OiAwXG4gIH1cblxuICBjb25zdHJ1Y3Rvcih7IGRlbGF5IH0pIHtcbiAgICBzdXBlcigpXG5cbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgaXNWaXNpYmxlOiBkZWxheSA9PT0gMFxuICAgIH1cbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBpZiAoIXRoaXMuc3RhdGUuaXNWaXNpYmxlKSB7XG4gICAgICByZXR1cm4gbnVsbFxuICAgIH1cblxuICAgIGNvbnN0IHsgdGhlbWUsIHNpemUsIC4uLnByb3BzIH0gPSB0aGlzLnByb3BzXG4gICAgcmV0dXJuIChcbiAgICAgIDxCb3ggd2lkdGg9e3NpemV9IGhlaWdodD17c2l6ZX0gbGluZUhlaWdodD17MH0gey4uLnByb3BzfT5cbiAgICAgICAgPEJveCBpcz1cInN2Z1wiIGNzcz17b3V0ZXJ9IHg9XCIwcHhcIiB5PVwiMHB4XCIgdmlld0JveD1cIjAgMCAxNTAgMTUwXCI+XG4gICAgICAgICAgPEJveFxuICAgICAgICAgICAgaXM9XCJjaXJjbGVcIlxuICAgICAgICAgICAgY3NzPXtpbm5lcih0aGVtZS5zcGlubmVyQ29sb3IpfVxuICAgICAgICAgICAgY3g9XCI3NVwiXG4gICAgICAgICAgICBjeT1cIjc1XCJcbiAgICAgICAgICAgIHI9XCI2MFwiXG4gICAgICAgICAgLz5cbiAgICAgICAgPC9Cb3g+XG4gICAgICA8L0JveD5cbiAgICApXG4gIH1cblxuICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICBjb25zdCB7IGRlbGF5IH0gPSB0aGlzLnByb3BzXG5cbiAgICBpZiAoZGVsYXkgPiAwKSB7XG4gICAgICB0aGlzLmRlbGF5VGltZXIgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgaXNWaXNpYmxlOiB0cnVlXG4gICAgICAgIH0pXG4gICAgICB9LCBkZWxheSlcbiAgICB9XG4gIH1cblxuICBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICBjbGVhclRpbWVvdXQodGhpcy5kZWxheVRpbWVyKVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IHdpdGhUaGVtZShTcGlubmVyKVxuIl19