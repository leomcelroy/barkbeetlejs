import _objectSpread from "@babel/runtime/helpers/esm/objectSpread";
import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _assertThisInitialized from "@babel/runtime/helpers/esm/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import React, { PureComponent } from 'react';
import PropTypes from 'prop-types';
import { Pane } from '../../layers';
import ScrollbarSize from './ScrollbarSize';

var TableHead =
/*#__PURE__*/
function (_PureComponent) {
  _inherits(TableHead, _PureComponent);

  function TableHead() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, TableHead);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(TableHead)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_this), "state", {
      scrollbarWidth: 0
    });

    _defineProperty(_assertThisInitialized(_this), "handleScrollbarSize", function (width) {
      _this.setState({
        scrollbarWidth: width
      });
    });

    return _this;
  }

  _createClass(TableHead, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          children = _this$props.children,
          height = _this$props.height,
          accountForScrollbar = _this$props.accountForScrollbar,
          props = _objectWithoutProperties(_this$props, ["children", "height", "accountForScrollbar"]);

      var scrollbarWidth = this.state.scrollbarWidth;
      return React.createElement(Pane, _extends({
        display: "flex",
        flexShrink: 0,
        paddingRight: scrollbarWidth,
        borderBottom: "default",
        background: "tint2",
        height: height
      }, props), children, ' ', accountForScrollbar && React.createElement(ScrollbarSize, {
        handleScrollbarSize: this.handleScrollbarSize
      }));
    }
  }]);

  return TableHead;
}(PureComponent);

TableHead.displayName = "TableHead";

_defineProperty(TableHead, "propTypes", _objectSpread({}, Pane.propTypes, {
  /**
   * The height of the table head.
   */
  height: PropTypes.number.isRequired,

  /**
   * This should always be true if you are using TableHead together with a TableBody.
   * Because TableBody has `overflowY: scroll` by default.
   */
  accountForScrollbar: PropTypes.bool
}));

_defineProperty(TableHead, "defaultProps", {
  height: 32,
  accountForScrollbar: true
});

export { TableHead as default };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy90YWJsZS9zcmMvVGFibGVIZWFkLmpzIl0sIm5hbWVzIjpbIlJlYWN0IiwiUHVyZUNvbXBvbmVudCIsIlByb3BUeXBlcyIsIlBhbmUiLCJTY3JvbGxiYXJTaXplIiwiVGFibGVIZWFkIiwic2Nyb2xsYmFyV2lkdGgiLCJ3aWR0aCIsInNldFN0YXRlIiwicHJvcHMiLCJjaGlsZHJlbiIsImhlaWdodCIsImFjY291bnRGb3JTY3JvbGxiYXIiLCJzdGF0ZSIsImhhbmRsZVNjcm9sbGJhclNpemUiLCJwcm9wVHlwZXMiLCJudW1iZXIiLCJpc1JlcXVpcmVkIiwiYm9vbCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBLE9BQU9BLEtBQVAsSUFBZ0JDLGFBQWhCLFFBQXFDLE9BQXJDO0FBQ0EsT0FBT0MsU0FBUCxNQUFzQixZQUF0QjtBQUNBLFNBQVNDLElBQVQsUUFBcUIsY0FBckI7QUFDQSxPQUFPQyxhQUFQLE1BQTBCLGlCQUExQjs7SUFFcUJDLFM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs0REFtQlg7QUFDTkMsTUFBQUEsY0FBYyxFQUFFO0FBRFYsSzs7MEVBU2MsVUFBQUMsS0FBSyxFQUFJO0FBQzdCLFlBQUtDLFFBQUwsQ0FBYztBQUNaRixRQUFBQSxjQUFjLEVBQUVDO0FBREosT0FBZDtBQUdELEs7Ozs7Ozs7NkJBRVE7QUFBQSx3QkFDcUQsS0FBS0UsS0FEMUQ7QUFBQSxVQUNDQyxRQURELGVBQ0NBLFFBREQ7QUFBQSxVQUNXQyxNQURYLGVBQ1dBLE1BRFg7QUFBQSxVQUNtQkMsbUJBRG5CLGVBQ21CQSxtQkFEbkI7QUFBQSxVQUMyQ0gsS0FEM0M7O0FBQUEsVUFFQ0gsY0FGRCxHQUVvQixLQUFLTyxLQUZ6QixDQUVDUCxjQUZEO0FBSVAsYUFDRSxvQkFBQyxJQUFEO0FBQ0UsUUFBQSxPQUFPLEVBQUMsTUFEVjtBQUVFLFFBQUEsVUFBVSxFQUFFLENBRmQ7QUFHRSxRQUFBLFlBQVksRUFBRUEsY0FIaEI7QUFJRSxRQUFBLFlBQVksRUFBQyxTQUpmO0FBS0UsUUFBQSxVQUFVLEVBQUMsT0FMYjtBQU1FLFFBQUEsTUFBTSxFQUFFSztBQU5WLFNBT01GLEtBUE4sR0FTR0MsUUFUSCxFQVNhLEdBVGIsRUFVR0UsbUJBQW1CLElBQ2xCLG9CQUFDLGFBQUQ7QUFBZSxRQUFBLG1CQUFtQixFQUFFLEtBQUtFO0FBQXpDLFFBWEosQ0FERjtBQWdCRDs7OztFQXREb0NiLGE7O0FBQWxCSSxTOztnQkFBQUEsUyxpQ0FLZEYsSUFBSSxDQUFDWSxTO0FBRVI7OztBQUdBSixFQUFBQSxNQUFNLEVBQUVULFNBQVMsQ0FBQ2MsTUFBVixDQUFpQkMsVTs7QUFFekI7Ozs7QUFJQUwsRUFBQUEsbUJBQW1CLEVBQUVWLFNBQVMsQ0FBQ2dCOzs7Z0JBaEJkYixTLGtCQXVCRztBQUNwQk0sRUFBQUEsTUFBTSxFQUFFLEVBRFk7QUFFcEJDLEVBQUFBLG1CQUFtQixFQUFFO0FBRkQsQzs7U0F2QkhQLFMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgUHVyZUNvbXBvbmVudCB9IGZyb20gJ3JlYWN0J1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJ1xuaW1wb3J0IHsgUGFuZSB9IGZyb20gJy4uLy4uL2xheWVycydcbmltcG9ydCBTY3JvbGxiYXJTaXplIGZyb20gJy4vU2Nyb2xsYmFyU2l6ZSdcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVGFibGVIZWFkIGV4dGVuZHMgUHVyZUNvbXBvbmVudCB7XG4gIHN0YXRpYyBwcm9wVHlwZXMgPSB7XG4gICAgLyoqXG4gICAgICogQ29tcG9zZXMgdGhlIFBhbmUgY29tcG9uZW50IGFzIHRoZSBiYXNlLlxuICAgICAqL1xuICAgIC4uLlBhbmUucHJvcFR5cGVzLFxuXG4gICAgLyoqXG4gICAgICogVGhlIGhlaWdodCBvZiB0aGUgdGFibGUgaGVhZC5cbiAgICAgKi9cbiAgICBoZWlnaHQ6IFByb3BUeXBlcy5udW1iZXIuaXNSZXF1aXJlZCxcblxuICAgIC8qKlxuICAgICAqIFRoaXMgc2hvdWxkIGFsd2F5cyBiZSB0cnVlIGlmIHlvdSBhcmUgdXNpbmcgVGFibGVIZWFkIHRvZ2V0aGVyIHdpdGggYSBUYWJsZUJvZHkuXG4gICAgICogQmVjYXVzZSBUYWJsZUJvZHkgaGFzIGBvdmVyZmxvd1k6IHNjcm9sbGAgYnkgZGVmYXVsdC5cbiAgICAgKi9cbiAgICBhY2NvdW50Rm9yU2Nyb2xsYmFyOiBQcm9wVHlwZXMuYm9vbFxuICB9XG5cbiAgc3RhdGUgPSB7XG4gICAgc2Nyb2xsYmFyV2lkdGg6IDBcbiAgfVxuXG4gIHN0YXRpYyBkZWZhdWx0UHJvcHMgPSB7XG4gICAgaGVpZ2h0OiAzMixcbiAgICBhY2NvdW50Rm9yU2Nyb2xsYmFyOiB0cnVlXG4gIH1cblxuICBoYW5kbGVTY3JvbGxiYXJTaXplID0gd2lkdGggPT4ge1xuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgc2Nyb2xsYmFyV2lkdGg6IHdpZHRoXG4gICAgfSlcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7IGNoaWxkcmVuLCBoZWlnaHQsIGFjY291bnRGb3JTY3JvbGxiYXIsIC4uLnByb3BzIH0gPSB0aGlzLnByb3BzXG4gICAgY29uc3QgeyBzY3JvbGxiYXJXaWR0aCB9ID0gdGhpcy5zdGF0ZVxuXG4gICAgcmV0dXJuIChcbiAgICAgIDxQYW5lXG4gICAgICAgIGRpc3BsYXk9XCJmbGV4XCJcbiAgICAgICAgZmxleFNocmluaz17MH1cbiAgICAgICAgcGFkZGluZ1JpZ2h0PXtzY3JvbGxiYXJXaWR0aH1cbiAgICAgICAgYm9yZGVyQm90dG9tPVwiZGVmYXVsdFwiXG4gICAgICAgIGJhY2tncm91bmQ9XCJ0aW50MlwiXG4gICAgICAgIGhlaWdodD17aGVpZ2h0fVxuICAgICAgICB7Li4ucHJvcHN9XG4gICAgICA+XG4gICAgICAgIHtjaGlsZHJlbn17JyAnfVxuICAgICAgICB7YWNjb3VudEZvclNjcm9sbGJhciAmJiAoXG4gICAgICAgICAgPFNjcm9sbGJhclNpemUgaGFuZGxlU2Nyb2xsYmFyU2l6ZT17dGhpcy5oYW5kbGVTY3JvbGxiYXJTaXplfSAvPlxuICAgICAgICApfVxuICAgICAgPC9QYW5lPlxuICAgIClcbiAgfVxufVxuIl19