import _objectSpread from "@babel/runtime/helpers/esm/objectSpread";
import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import React, { PureComponent } from 'react';
import PropTypes from 'prop-types';
import cx from 'classnames';
import { Text } from '../../typography';
import { withTheme } from '../../theme';

var Textarea =
/*#__PURE__*/
function (_PureComponent) {
  _inherits(Textarea, _PureComponent);

  function Textarea() {
    _classCallCheck(this, Textarea);

    return _possibleConstructorReturn(this, _getPrototypeOf(Textarea).apply(this, arguments));
  }

  _createClass(Textarea, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          theme = _this$props.theme,
          className = _this$props.className,
          css = _this$props.css,
          width = _this$props.width,
          height = _this$props.height,
          disabled = _this$props.disabled,
          required = _this$props.required,
          isInvalid = _this$props.isInvalid,
          appearance = _this$props.appearance,
          placeholder = _this$props.placeholder,
          spellCheck = _this$props.spellCheck,
          grammarly = _this$props.grammarly,
          props = _objectWithoutProperties(_this$props, ["theme", "className", "css", "width", "height", "disabled", "required", "isInvalid", "appearance", "placeholder", "spellCheck", "grammarly"]);

      var themedClassName = theme.getTextareaClassName(appearance);
      return React.createElement(Text, _extends({
        is: "textarea",
        className: cx(themedClassName, className),
        size: 400,
        width: width,
        height: height,
        required: required,
        disabled: disabled,
        placeholder: placeholder,
        paddingLeft: Math.round(height / 3.2),
        paddingRight: Math.round(height / 3.2),
        borderRadius: 3,
        spellCheck: spellCheck,
        "aria-invalid": isInvalid,
        "data-gramm_editor": grammarly
      }, disabled ? {
        color: 'muted'
      } : {}, {
        css: css
      }, Textarea.styles, props));
    }
  }]);

  return Textarea;
}(PureComponent);

Textarea.displayName = "Textarea";

_defineProperty(Textarea, "propTypes", _objectSpread({}, Text.propTypes, {
  /**
   * Makes the textarea element required.
   */
  required: PropTypes.bool,

  /**
   * Makes the textarea element disabled.
   */
  disabled: PropTypes.bool,

  /**
   * Sets visual styling of _only_ the text area to be "invalid". 
   * Note that this does not effect any `validationMessage`.
   */
  isInvalid: PropTypes.bool,

  /**
   * Use the native spell check functionality of the browser.
   */
  spellCheck: PropTypes.bool,

  /**
   * Allow the Grammarly browser extension to attach to the backing textarea.
   */
  grammarly: PropTypes.bool,

  /**
   * The placeholder text when there is no value present.
   */
  placeholder: PropTypes.string,

  /**
   * The appearance of the TextInput.
   */
  appearance: PropTypes.string,

  /**
   * The width of the TextInput.
   */
  width: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),

  /**
   * Theme provided by ThemeProvider.
   */
  theme: PropTypes.object.isRequired,

  /**
   * Class name passed to the button.
   * Only use if you know what you are doing.
   */
  className: PropTypes.string
}));

_defineProperty(Textarea, "defaultProps", {
  appearance: 'default',
  width: '100%',
  disabled: false,
  isInvalid: false,
  spellCheck: true,
  grammarly: false
});

_defineProperty(Textarea, "styles", {
  minHeight: 80,
  paddingX: 10,
  paddingY: 8
});

export default withTheme(Textarea);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy90ZXh0YXJlYS9zcmMvVGV4dGFyZWEuanMiXSwibmFtZXMiOlsiUmVhY3QiLCJQdXJlQ29tcG9uZW50IiwiUHJvcFR5cGVzIiwiY3giLCJUZXh0Iiwid2l0aFRoZW1lIiwiVGV4dGFyZWEiLCJwcm9wcyIsInRoZW1lIiwiY2xhc3NOYW1lIiwiY3NzIiwid2lkdGgiLCJoZWlnaHQiLCJkaXNhYmxlZCIsInJlcXVpcmVkIiwiaXNJbnZhbGlkIiwiYXBwZWFyYW5jZSIsInBsYWNlaG9sZGVyIiwic3BlbGxDaGVjayIsImdyYW1tYXJseSIsInRoZW1lZENsYXNzTmFtZSIsImdldFRleHRhcmVhQ2xhc3NOYW1lIiwiTWF0aCIsInJvdW5kIiwiY29sb3IiLCJzdHlsZXMiLCJwcm9wVHlwZXMiLCJib29sIiwic3RyaW5nIiwib25lT2ZUeXBlIiwibnVtYmVyIiwib2JqZWN0IiwiaXNSZXF1aXJlZCIsIm1pbkhlaWdodCIsInBhZGRpbmdYIiwicGFkZGluZ1kiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBLE9BQU9BLEtBQVAsSUFBZ0JDLGFBQWhCLFFBQXFDLE9BQXJDO0FBQ0EsT0FBT0MsU0FBUCxNQUFzQixZQUF0QjtBQUNBLE9BQU9DLEVBQVAsTUFBZSxZQUFmO0FBQ0EsU0FBU0MsSUFBVCxRQUFxQixrQkFBckI7QUFDQSxTQUFTQyxTQUFULFFBQTBCLGFBQTFCOztJQUVNQyxROzs7Ozs7Ozs7Ozs7OzZCQTJFSztBQUFBLHdCQWdCSCxLQUFLQyxLQWhCRjtBQUFBLFVBRUxDLEtBRkssZUFFTEEsS0FGSztBQUFBLFVBR0xDLFNBSEssZUFHTEEsU0FISztBQUFBLFVBS0xDLEdBTEssZUFLTEEsR0FMSztBQUFBLFVBTUxDLEtBTkssZUFNTEEsS0FOSztBQUFBLFVBT0xDLE1BUEssZUFPTEEsTUFQSztBQUFBLFVBUUxDLFFBUkssZUFRTEEsUUFSSztBQUFBLFVBU0xDLFFBVEssZUFTTEEsUUFUSztBQUFBLFVBVUxDLFNBVkssZUFVTEEsU0FWSztBQUFBLFVBV0xDLFVBWEssZUFXTEEsVUFYSztBQUFBLFVBWUxDLFdBWkssZUFZTEEsV0FaSztBQUFBLFVBYUxDLFVBYkssZUFhTEEsVUFiSztBQUFBLFVBY0xDLFNBZEssZUFjTEEsU0FkSztBQUFBLFVBZUZaLEtBZkU7O0FBaUJQLFVBQU1hLGVBQWUsR0FBR1osS0FBSyxDQUFDYSxvQkFBTixDQUEyQkwsVUFBM0IsQ0FBeEI7QUFFQSxhQUNFLG9CQUFDLElBQUQ7QUFDRSxRQUFBLEVBQUUsRUFBQyxVQURMO0FBRUUsUUFBQSxTQUFTLEVBQUViLEVBQUUsQ0FBQ2lCLGVBQUQsRUFBa0JYLFNBQWxCLENBRmY7QUFHRSxRQUFBLElBQUksRUFBRSxHQUhSO0FBSUUsUUFBQSxLQUFLLEVBQUVFLEtBSlQ7QUFLRSxRQUFBLE1BQU0sRUFBRUMsTUFMVjtBQU1FLFFBQUEsUUFBUSxFQUFFRSxRQU5aO0FBT0UsUUFBQSxRQUFRLEVBQUVELFFBUFo7QUFRRSxRQUFBLFdBQVcsRUFBRUksV0FSZjtBQVNFLFFBQUEsV0FBVyxFQUFFSyxJQUFJLENBQUNDLEtBQUwsQ0FBV1gsTUFBTSxHQUFHLEdBQXBCLENBVGY7QUFVRSxRQUFBLFlBQVksRUFBRVUsSUFBSSxDQUFDQyxLQUFMLENBQVdYLE1BQU0sR0FBRyxHQUFwQixDQVZoQjtBQVdFLFFBQUEsWUFBWSxFQUFFLENBWGhCO0FBWUUsUUFBQSxVQUFVLEVBQUVNLFVBWmQ7QUFhRSx3QkFBY0gsU0FiaEI7QUFjRSw2QkFBbUJJO0FBZHJCLFNBZU9OLFFBQVEsR0FBRztBQUFFVyxRQUFBQSxLQUFLLEVBQUU7QUFBVCxPQUFILEdBQXdCLEVBZnZDO0FBZ0JFLFFBQUEsR0FBRyxFQUFFZDtBQWhCUCxTQWlCTUosUUFBUSxDQUFDbUIsTUFqQmYsRUFrQk1sQixLQWxCTixFQURGO0FBc0JEOzs7O0VBcEhvQk4sYTs7QUFBakJLLFE7O2dCQUFBQSxRLGlDQUtDRixJQUFJLENBQUNzQixTO0FBRVI7OztBQUdBWixFQUFBQSxRQUFRLEVBQUVaLFNBQVMsQ0FBQ3lCLEk7O0FBRXBCOzs7QUFHQWQsRUFBQUEsUUFBUSxFQUFFWCxTQUFTLENBQUN5QixJOztBQUVwQjs7OztBQUlBWixFQUFBQSxTQUFTLEVBQUViLFNBQVMsQ0FBQ3lCLEk7O0FBRXJCOzs7QUFHQVQsRUFBQUEsVUFBVSxFQUFFaEIsU0FBUyxDQUFDeUIsSTs7QUFFdEI7OztBQUdBUixFQUFBQSxTQUFTLEVBQUVqQixTQUFTLENBQUN5QixJOztBQUVyQjs7O0FBR0FWLEVBQUFBLFdBQVcsRUFBRWYsU0FBUyxDQUFDMEIsTTs7QUFFdkI7OztBQUdBWixFQUFBQSxVQUFVLEVBQUVkLFNBQVMsQ0FBQzBCLE07O0FBRXRCOzs7QUFHQWpCLEVBQUFBLEtBQUssRUFBRVQsU0FBUyxDQUFDMkIsU0FBVixDQUFvQixDQUFDM0IsU0FBUyxDQUFDMEIsTUFBWCxFQUFtQjFCLFNBQVMsQ0FBQzRCLE1BQTdCLENBQXBCLEM7O0FBRVA7OztBQUdBdEIsRUFBQUEsS0FBSyxFQUFFTixTQUFTLENBQUM2QixNQUFWLENBQWlCQyxVOztBQUV4Qjs7OztBQUlBdkIsRUFBQUEsU0FBUyxFQUFFUCxTQUFTLENBQUMwQjs7O2dCQXpEbkJ0QixRLGtCQTREa0I7QUFDcEJVLEVBQUFBLFVBQVUsRUFBRSxTQURRO0FBRXBCTCxFQUFBQSxLQUFLLEVBQUUsTUFGYTtBQUdwQkUsRUFBQUEsUUFBUSxFQUFFLEtBSFU7QUFJcEJFLEVBQUFBLFNBQVMsRUFBRSxLQUpTO0FBS3BCRyxFQUFBQSxVQUFVLEVBQUUsSUFMUTtBQU1wQkMsRUFBQUEsU0FBUyxFQUFFO0FBTlMsQzs7Z0JBNURsQmIsUSxZQXFFWTtBQUNkMkIsRUFBQUEsU0FBUyxFQUFFLEVBREc7QUFFZEMsRUFBQUEsUUFBUSxFQUFFLEVBRkk7QUFHZEMsRUFBQUEsUUFBUSxFQUFFO0FBSEksQzs7QUFrRGxCLGVBQWU5QixTQUFTLENBQUNDLFFBQUQsQ0FBeEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgUHVyZUNvbXBvbmVudCB9IGZyb20gJ3JlYWN0J1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJ1xuaW1wb3J0IGN4IGZyb20gJ2NsYXNzbmFtZXMnXG5pbXBvcnQgeyBUZXh0IH0gZnJvbSAnLi4vLi4vdHlwb2dyYXBoeSdcbmltcG9ydCB7IHdpdGhUaGVtZSB9IGZyb20gJy4uLy4uL3RoZW1lJ1xuXG5jbGFzcyBUZXh0YXJlYSBleHRlbmRzIFB1cmVDb21wb25lbnQge1xuICBzdGF0aWMgcHJvcFR5cGVzID0ge1xuICAgIC8qKlxuICAgICAqIENvbXBvc2VzIHRoZSBUZXh0IGNvbXBvbmVudCBhcyB0aGUgYmFzZS5cbiAgICAgKi9cbiAgICAuLi5UZXh0LnByb3BUeXBlcyxcblxuICAgIC8qKlxuICAgICAqIE1ha2VzIHRoZSB0ZXh0YXJlYSBlbGVtZW50IHJlcXVpcmVkLlxuICAgICAqL1xuICAgIHJlcXVpcmVkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAgIC8qKlxuICAgICAqIE1ha2VzIHRoZSB0ZXh0YXJlYSBlbGVtZW50IGRpc2FibGVkLlxuICAgICAqL1xuICAgIGRpc2FibGVkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAgIC8qKlxuICAgICAqIFNldHMgdmlzdWFsIHN0eWxpbmcgb2YgX29ubHlfIHRoZSB0ZXh0IGFyZWEgdG8gYmUgXCJpbnZhbGlkXCIuIFxuICAgICAqIE5vdGUgdGhhdCB0aGlzIGRvZXMgbm90IGVmZmVjdCBhbnkgYHZhbGlkYXRpb25NZXNzYWdlYC5cbiAgICAgKi9cbiAgICBpc0ludmFsaWQ6IFByb3BUeXBlcy5ib29sLFxuXG4gICAgLyoqXG4gICAgICogVXNlIHRoZSBuYXRpdmUgc3BlbGwgY2hlY2sgZnVuY3Rpb25hbGl0eSBvZiB0aGUgYnJvd3Nlci5cbiAgICAgKi9cbiAgICBzcGVsbENoZWNrOiBQcm9wVHlwZXMuYm9vbCxcblxuICAgIC8qKlxuICAgICAqIEFsbG93IHRoZSBHcmFtbWFybHkgYnJvd3NlciBleHRlbnNpb24gdG8gYXR0YWNoIHRvIHRoZSBiYWNraW5nIHRleHRhcmVhLlxuICAgICAqL1xuICAgIGdyYW1tYXJseTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgICAvKipcbiAgICAgKiBUaGUgcGxhY2Vob2xkZXIgdGV4dCB3aGVuIHRoZXJlIGlzIG5vIHZhbHVlIHByZXNlbnQuXG4gICAgICovXG4gICAgcGxhY2Vob2xkZXI6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgICAvKipcbiAgICAgKiBUaGUgYXBwZWFyYW5jZSBvZiB0aGUgVGV4dElucHV0LlxuICAgICAqL1xuICAgIGFwcGVhcmFuY2U6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgICAvKipcbiAgICAgKiBUaGUgd2lkdGggb2YgdGhlIFRleHRJbnB1dC5cbiAgICAgKi9cbiAgICB3aWR0aDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLm51bWJlcl0pLFxuXG4gICAgLyoqXG4gICAgICogVGhlbWUgcHJvdmlkZWQgYnkgVGhlbWVQcm92aWRlci5cbiAgICAgKi9cbiAgICB0aGVtZTogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuXG4gICAgLyoqXG4gICAgICogQ2xhc3MgbmFtZSBwYXNzZWQgdG8gdGhlIGJ1dHRvbi5cbiAgICAgKiBPbmx5IHVzZSBpZiB5b3Uga25vdyB3aGF0IHlvdSBhcmUgZG9pbmcuXG4gICAgICovXG4gICAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nXG4gIH1cblxuICBzdGF0aWMgZGVmYXVsdFByb3BzID0ge1xuICAgIGFwcGVhcmFuY2U6ICdkZWZhdWx0JyxcbiAgICB3aWR0aDogJzEwMCUnLFxuICAgIGRpc2FibGVkOiBmYWxzZSxcbiAgICBpc0ludmFsaWQ6IGZhbHNlLFxuICAgIHNwZWxsQ2hlY2s6IHRydWUsXG4gICAgZ3JhbW1hcmx5OiBmYWxzZVxuICB9XG5cbiAgc3RhdGljIHN0eWxlcyA9IHtcbiAgICBtaW5IZWlnaHQ6IDgwLFxuICAgIHBhZGRpbmdYOiAxMCxcbiAgICBwYWRkaW5nWTogOFxuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHtcbiAgICAgIHRoZW1lLFxuICAgICAgY2xhc3NOYW1lLFxuXG4gICAgICBjc3MsXG4gICAgICB3aWR0aCxcbiAgICAgIGhlaWdodCxcbiAgICAgIGRpc2FibGVkLFxuICAgICAgcmVxdWlyZWQsXG4gICAgICBpc0ludmFsaWQsXG4gICAgICBhcHBlYXJhbmNlLFxuICAgICAgcGxhY2Vob2xkZXIsXG4gICAgICBzcGVsbENoZWNrLFxuICAgICAgZ3JhbW1hcmx5LFxuICAgICAgLi4ucHJvcHNcbiAgICB9ID0gdGhpcy5wcm9wc1xuICAgIGNvbnN0IHRoZW1lZENsYXNzTmFtZSA9IHRoZW1lLmdldFRleHRhcmVhQ2xhc3NOYW1lKGFwcGVhcmFuY2UpXG5cbiAgICByZXR1cm4gKFxuICAgICAgPFRleHRcbiAgICAgICAgaXM9XCJ0ZXh0YXJlYVwiXG4gICAgICAgIGNsYXNzTmFtZT17Y3godGhlbWVkQ2xhc3NOYW1lLCBjbGFzc05hbWUpfVxuICAgICAgICBzaXplPXs0MDB9XG4gICAgICAgIHdpZHRoPXt3aWR0aH1cbiAgICAgICAgaGVpZ2h0PXtoZWlnaHR9XG4gICAgICAgIHJlcXVpcmVkPXtyZXF1aXJlZH1cbiAgICAgICAgZGlzYWJsZWQ9e2Rpc2FibGVkfVxuICAgICAgICBwbGFjZWhvbGRlcj17cGxhY2Vob2xkZXJ9XG4gICAgICAgIHBhZGRpbmdMZWZ0PXtNYXRoLnJvdW5kKGhlaWdodCAvIDMuMil9XG4gICAgICAgIHBhZGRpbmdSaWdodD17TWF0aC5yb3VuZChoZWlnaHQgLyAzLjIpfVxuICAgICAgICBib3JkZXJSYWRpdXM9ezN9XG4gICAgICAgIHNwZWxsQ2hlY2s9e3NwZWxsQ2hlY2t9XG4gICAgICAgIGFyaWEtaW52YWxpZD17aXNJbnZhbGlkfVxuICAgICAgICBkYXRhLWdyYW1tX2VkaXRvcj17Z3JhbW1hcmx5fVxuICAgICAgICB7Li4uKGRpc2FibGVkID8geyBjb2xvcjogJ211dGVkJyB9IDoge30pfVxuICAgICAgICBjc3M9e2Nzc31cbiAgICAgICAgey4uLlRleHRhcmVhLnN0eWxlc31cbiAgICAgICAgey4uLnByb3BzfVxuICAgICAgLz5cbiAgICApXG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgd2l0aFRoZW1lKFRleHRhcmVhKVxuIl19