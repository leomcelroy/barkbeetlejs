import tinycolor from 'tinycolor2';
import { Themer } from '../../../../themer';
import memoizeClassName from '../utils/memoizeClassName';
import scales from '../foundational-styles/scales';
import palette from '../foundational-styles/palette';
var Appearances = {};
Appearances.default = Themer.createRowAppearance({
  base: {},
  hover: {
    backgroundColor: scales.neutral.N1A
  },
  focus: {
    backgroundColor: scales.blue.B1A
  },
  active: {
    backgroundColor: scales.blue.B2A
  },
  current: {}
});
Appearances.danger = Themer.createRowAppearance({
  base: {
    backgroundColor: palette.red.lightest
  },
  hover: {
    backgroundColor: tinycolor(palette.red.lightest).darken(1).toString()
  },
  focus: {
    backgroundColor: tinycolor(palette.red.lightest).darken(1.5).toString()
  },
  active: {
    backgroundColor: tinycolor(palette.red.lightest).darken(2.2).toString()
  },
  current: {}
});
Appearances.warning = Themer.createRowAppearance({
  base: {
    backgroundColor: palette.orange.lightest
  },
  hover: {
    backgroundColor: tinycolor(palette.orange.lightest).darken(1).toString()
  },
  focus: {
    backgroundColor: tinycolor(palette.orange.lightest).darken(1.5).toString()
  },
  active: {
    backgroundColor: tinycolor(palette.orange.lightest).darken(2.5).toString()
  },
  current: {}
});
Appearances.success = Themer.createRowAppearance({
  base: {
    backgroundColor: palette.green.lightest
  },
  hover: {
    backgroundColor: tinycolor(palette.green.lightest).darken(1).toString()
  },
  focus: {
    backgroundColor: tinycolor(palette.green.lightest).darken(2).toString()
  },
  active: {
    backgroundColor: tinycolor(palette.green.lightest).darken(3).toString()
  },
  current: {}
});
/**
 * Get the appearance of a `Row`.
 * @param {string} appearance â€” only one default appearance.
 * @param {string} intent - none, info, success, warning, danger.
 * @return {string} the appearance object.
 */

var getRowAppearance = function getRowAppearance(appearance, intent) {
  switch (intent) {
    case 'danger':
      return Appearances.danger;

    case 'warning':
      return Appearances.warning;

    case 'success':
      return Appearances.success;

    case 'none':
    default:
      return Appearances.default;
  }
};
/**
 * Get the className of a `Row`.
 * @param {string} appearance
 * @return {string} the appearance class name.
 */


export default memoizeClassName(getRowAppearance);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy90aGVtZS9zcmMvZGVmYXVsdC10aGVtZS9jb21wb25lbnQtc3BlY2lmaWMvZ2V0Um93Q2xhc3NOYW1lLmpzIl0sIm5hbWVzIjpbInRpbnljb2xvciIsIlRoZW1lciIsIm1lbW9pemVDbGFzc05hbWUiLCJzY2FsZXMiLCJwYWxldHRlIiwiQXBwZWFyYW5jZXMiLCJkZWZhdWx0IiwiY3JlYXRlUm93QXBwZWFyYW5jZSIsImJhc2UiLCJob3ZlciIsImJhY2tncm91bmRDb2xvciIsIm5ldXRyYWwiLCJOMUEiLCJmb2N1cyIsImJsdWUiLCJCMUEiLCJhY3RpdmUiLCJCMkEiLCJjdXJyZW50IiwiZGFuZ2VyIiwicmVkIiwibGlnaHRlc3QiLCJkYXJrZW4iLCJ0b1N0cmluZyIsIndhcm5pbmciLCJvcmFuZ2UiLCJzdWNjZXNzIiwiZ3JlZW4iLCJnZXRSb3dBcHBlYXJhbmNlIiwiYXBwZWFyYW5jZSIsImludGVudCJdLCJtYXBwaW5ncyI6IkFBQUEsT0FBT0EsU0FBUCxNQUFzQixZQUF0QjtBQUNBLFNBQVNDLE1BQVQsUUFBdUIsb0JBQXZCO0FBQ0EsT0FBT0MsZ0JBQVAsTUFBNkIsMkJBQTdCO0FBQ0EsT0FBT0MsTUFBUCxNQUFtQiwrQkFBbkI7QUFDQSxPQUFPQyxPQUFQLE1BQW9CLGdDQUFwQjtBQUVBLElBQU1DLFdBQVcsR0FBRyxFQUFwQjtBQUVBQSxXQUFXLENBQUNDLE9BQVosR0FBc0JMLE1BQU0sQ0FBQ00sbUJBQVAsQ0FBMkI7QUFDL0NDLEVBQUFBLElBQUksRUFBRSxFQUR5QztBQUcvQ0MsRUFBQUEsS0FBSyxFQUFFO0FBQ0xDLElBQUFBLGVBQWUsRUFBRVAsTUFBTSxDQUFDUSxPQUFQLENBQWVDO0FBRDNCLEdBSHdDO0FBTy9DQyxFQUFBQSxLQUFLLEVBQUU7QUFDTEgsSUFBQUEsZUFBZSxFQUFFUCxNQUFNLENBQUNXLElBQVAsQ0FBWUM7QUFEeEIsR0FQd0M7QUFXL0NDLEVBQUFBLE1BQU0sRUFBRTtBQUNOTixJQUFB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LE9BQU8sRUFBRTtBQXZCc0MsQ0FBM0IsQ0FBdEI7QUEwQkE7Ozs7Ozs7QUFNQSxJQUFNVSxnQkFBZ0IsR0FBRyxTQUFuQkEsZ0JBQW1CLENBQUNDLFVBQUQsRUFBYUMsTUFBYixFQUF3QjtBQUMvQyxVQUFRQSxNQUFSO0FBQ0UsU0FBSyxRQUFMO0FBQ0UsYUFBT3pCLFdBQVcsQ0FBQ2MsTUFBbkI7O0FBQ0YsU0FBSyxTQUFMO0FBQ0UsYUFBT2QsV0FBVyxDQUFDbUIsT0FBbkI7O0FBQ0YsU0FBSyxTQUFMO0FBQ0UsYUFBT25CLFdBQVcsQ0FBQ3FCLE9BQW5COztBQUNGLFNBQUssTUFBTDtBQUNBO0FBQ0UsYUFBT3JCLFdBQVcsQ0FBQ0MsT0FBbkI7QUFUSjtBQVdELENBWkQ7QUFjQTs7Ozs7OztBQUtBLGVBQWVKLGdCQUFnQixDQUFDMEIsZ0JBQUQsQ0FBL0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdGlueWNvbG9yIGZyb20gJ3Rpbnljb2xvcjInXG5pbXBvcnQgeyBUaGVtZXIgfSBmcm9tICcuLi8uLi8uLi8uLi90aGVtZXInXG5pbXBvcnQgbWVtb2l6ZUNsYXNzTmFtZSBmcm9tICcuLi91dGlscy9tZW1vaXplQ2xhc3NOYW1lJ1xuaW1wb3J0IHNjYWxlcyBmcm9tICcuLi9mb3VuZGF0aW9uYWwtc3R5bGVzL3NjYWxlcydcbmltcG9ydCBwYWxldHRlIGZyb20gJy4uL2ZvdW5kYXRpb25hbC1zdHlsZXMvcGFsZXR0ZSdcblxuY29uc3QgQXBwZWFyYW5jZXMgPSB7fVxuXG5BcHBlYXJhbmNlcy5kZWZhdWx0ID0gVGhlbWVyLmNyZWF0ZVJvd0FwcGVhcmFuY2Uoe1xuICBiYXNlOiB7fSxcblxuICBob3Zlcjoge1xuICAgIGJhY2tncm91bmRDb2xvcjogc2NhbGVzLm5ldXRyYWwuTjFBXG4gIH0sXG5cbiAgZm9jdXM6IHtcbiAgICBiYWNrZ3JvdW5kQ29sb3I6IHNjYWxlcy5ibHVlLkIxQVxuICB9LFxuXG4gIGFjdGl2ZToge1xuICAgIGJhY2tncm91bmRDb2xvcjogc2NhbGVzLmJsdWUuQjJBXG4gIH0sXG5cbiAgY3VycmVudDoge31cbn0pXG5cbkFwcGVhcmFuY2VzLmRhbmdlciA9IFRoZW1lci5jcmVhdGVSb3dBcHBlYXJhbmNlKHtcbiAgYmFzZToge1xuICAgIGJhY2tncm91bmRDb2xvcjogcGFsZXR0ZS5yZWQubGlnaHRlc3RcbiAgfSxcblxuICBob3Zlcjoge1xuICAgIGJhY2tncm91bmRDb2xvcjogdGlueWNvbG9yKHBhbGV0dGUucmVkLmxpZ2h0ZXN0KVxuICAgICAgLmRhcmtlbigxKVxuICAgICAgLnRvU3RyaW5nKClcbiAgfSxcblxuICBmb2N1czoge1xuICAgIGJhY2tncm91bmRDb2xvcjogdGlueWNvbG9yKHBhbGV0dGUucmVkLmxpZ2h0ZXN0KVxuICAgICAgLmRhcmtlbigxLjUpXG4gICAgICAudG9TdHJpbmcoKVxuICB9LFxuXG4gIGFjdGl2ZToge1xuICAgIGJhY2tncm91bmRDb2xvcjogdGlueWNvbG9yKHBhbGV0dGUucmVkLmxpZ2h0ZXN0KVxuICAgICAgLmRhcmtlbigyLjIpXG4gICAgICAudG9TdHJpbmcoKVxuICB9LFxuXG4gIGN1cnJlbnQ6IHt9XG59KVxuXG5BcHBlYXJhbmNlcy53YXJuaW5nID0gVGhlbWVyLmNyZWF0ZVJvd0FwcGVhcmFuY2Uoe1xuICBiYXNlOiB7XG4gICAgYmFja2dyb3VuZENvbG9yOiBwYWxldHRlLm9yYW5nZS5saWdodGVzdFxuICB9LFxuXG4gIGhvdmVyOiB7XG4gICAgYmFja2dyb3VuZENvbG9yOiB0aW55Y29sb3IocGFsZXR0ZS5vcmFuZ2UubGlnaHRlc3QpXG4gICAgICAuZGFya2VuKDEpXG4gICAgICAudG9TdHJpbmcoKVxuICB9LFxuXG4gIGZvY3VzOiB7XG4gICAgYmFja2dyb3VuZENvbG9yOiB0aW55Y29sb3IocGFsZXR0ZS5vcmFuZ2UubGlnaHRlc3QpXG4gICAgICAuZGFya2VuKDEuNSlcbiAgICAgIC50b1N0cmluZygpXG4gIH0sXG5cbiAgYWN0aXZlOiB7XG4gICAgYmFja2dyb3VuZENvbG9yOiB0aW55Y29sb3IocGFsZXR0ZS5vcmFuZ2UubGlnaHRlc3QpXG4gICAgICAuZGFya2VuKDIuNSlcbiAgICAgIC50b1N0cmluZygpXG4gIH0sXG5cbiAgY3VycmVudDoge31cbn0pXG5cbkFwcGVhcmFuY2VzLnN1Y2Nlc3MgPSBUaGVtZXIuY3JlYXRlUm93QXBwZWFyYW5jZSh7XG4gIGJhc2U6IHtcbiAgICBiYWNrZ3JvdW5kQ29sb3I6IHBhbGV0dGUuZ3JlZW4ubGlnaHRlc3RcbiAgfSxcblxuICBob3Zlcjoge1xuICAgIGJhY2tncm91bmRDb2xvcjogdGlueWNvbG9yKHBhbGV0dGUuZ3JlZW4ubGlnaHRlc3QpXG4gICAgICAuZGFya2VuKDEpXG4gICAgICAudG9TdHJpbmcoKVxuICB9LFxuXG4gIGZvY3VzOiB7XG4gICAgYmFja2dyb3VuZENvbG9yOiB0aW55Y29sb3IocGFsZXR0ZS5ncmVlbi5saWdodGVzdClcbiAgICAgIC5kYXJrZW4oMilcbiAgICAgIC50b1N0cmluZygpXG4gIH0sXG5cbiAgYWN0aXZlOiB7XG4gICAgYmFja2dyb3VuZENvbG9yOiB0aW55Y29sb3IocGFsZXR0ZS5ncmVlbi5saWdodGVzdClcbiAgICAgIC5kYXJrZW4oMylcbiAgICAgIC50b1N0cmluZygpXG4gIH0sXG5cbiAgY3VycmVudDoge31cbn0pXG5cbi8qKlxuICogR2V0IHRoZSBhcHBlYXJhbmNlIG9mIGEgYFJvd2AuXG4gKiBAcGFyYW0ge3N0cmluZ30gYXBwZWFyYW5jZSDigJQgb25seSBvbmUgZGVmYXVsdCBhcHBlYXJhbmNlLlxuICogQHBhcmFtIHtzdHJpbmd9IGludGVudCAtIG5vbmUsIGluZm8sIHN1Y2Nlc3MsIHdhcm5pbmcsIGRhbmdlci5cbiAqIEByZXR1cm4ge3N0cmluZ30gdGhlIGFwcGVhcmFuY2Ugb2JqZWN0LlxuICovXG5jb25zdCBnZXRSb3dBcHBlYXJhbmNlID0gKGFwcGVhcmFuY2UsIGludGVudCkgPT4ge1xuICBzd2l0Y2ggKGludGVudCkge1xuICAgIGNhc2UgJ2Rhbmdlcic6XG4gICAgICByZXR1cm4gQXBwZWFyYW5jZXMuZGFuZ2VyXG4gICAgY2FzZSAnd2FybmluZyc6XG4gICAgICByZXR1cm4gQXBwZWFyYW5jZXMud2FybmluZ1xuICAgIGNhc2UgJ3N1Y2Nlc3MnOlxuICAgICAgcmV0dXJuIEFwcGVhcmFuY2VzLnN1Y2Nlc3NcbiAgICBjYXNlICdub25lJzpcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIEFwcGVhcmFuY2VzLmRlZmF1bHRcbiAgfVxufVxuXG4vKipcbiAqIEdldCB0aGUgY2xhc3NOYW1lIG9mIGEgYFJvd2AuXG4gKiBAcGFyYW0ge3N0cmluZ30gYXBwZWFyYW5jZVxuICogQHJldHVybiB7c3RyaW5nfSB0aGUgYXBwZWFyYW5jZSBjbGFzcyBuYW1lLlxuICovXG5leHBvcnQgZGVmYXVsdCBtZW1vaXplQ2xhc3NOYW1lKGdldFJvd0FwcGVhcmFuY2UpXG4iXX0=