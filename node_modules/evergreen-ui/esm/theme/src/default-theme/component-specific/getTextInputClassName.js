import { Themer } from '../../../../themer';
import memoizeClassName from '../utils/memoizeClassName';
import scales from '../foundational-styles/scales';
import palette from '../foundational-styles/palette';
var InputAppearances = {};
InputAppearances.default = Themer.createInputAppearance({
  base: {
    backgroundColor: 'white',
    boxShadow: "inset 0 0 0 1px ".concat(scales.neutral.N5A, ", inset 0 1px 2px ").concat(scales.neutral.N4A)
  },
  invalid: {
    boxShadow: "inset 0 0 0 1px ".concat(palette.red.base, ", inset 0 1px 2px ").concat(scales.neutral.N4A)
  },
  placeholder: {
    color: scales.neutral.N6A
  },
  focus: {
    outline: 'none',
    boxShadow: "inset 0 0 2px ".concat(scales.neutral.N4A, ", inset 0 0 0 1px ").concat(scales.blue.B7, ", 0 0 0 3px ").concat(scales.blue.B4A)
  },
  disabled: {
    boxShadow: "inset 0 0 0 1px ".concat(scales.neutral.N4A),
    backgroundColor: scales.neutral.N2
  }
});
InputAppearances.neutral = Themer.createInputAppearance({
  base: {
    backgroundColor: scales.neutral.N2A
  },
  invalid: {
    boxShadow: "inset 0 0 0 1px ".concat(palette.red.base)
  },
  placeholder: {
    color: scales.neutral.N6A
  },
  focus: {
    outline: 'none',
    backgroundColor: 'white',
    boxShadow: "0 0 0 2px ".concat(scales.blue.B6A)
  },
  disabled: {
    boxShadow: "inset 0 0 0 1px ".concat(scales.neutral.N4A),
    backgroundColor: scales.neutral.N2
  }
});
InputAppearances.none = Themer.createInputAppearance({
  base: {
    backgroundColor: 'white'
  },
  invalid: {},
  placeholder: {
    color: scales.neutral.N6A
  },
  focus: {
    outline: 'none'
  },
  disabled: {
    backgroundColor: scales.neutral.N2
  }
});
/**
 * Get the appearance of a `TextInput`.
 * @param {string} appearance - the appearance name
 * @return {Object} the appearance object.
 */

var getTextInputAppearance = function getTextInputAppearance(appearance) {
  switch (appearance) {
    case 'neutral':
      return InputAppearances.neutral;

    case 'none':
      return InputAppearances.none;

    default:
      return InputAppearances.default;
  }
};
/**
 * Get the className of a `TextInput`.
 * @param {string} appearance - the appearance name
 * @return {string} the appearance class name.
 */


export default memoizeClassName(getTextInputAppearance);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy90aGVtZS9zcmMvZGVmYXVsdC10aGVtZS9jb21wb25lbnQtc3BlY2lmaWMvZ2V0VGV4dElucHV0Q2xhc3NOYW1lLmpzIl0sIm5hbWVzIjpbIlRoZW1lciIsIm1lbW9pemVDbGFzc05hbWUiLCJzY2FsZXMiLCJwYWxldHRlIiwiSW5wdXRBcHBlYXJhbmNlcyIsImRlZmF1bHQiLCJjcmVhdGVJbnB1dEFwcGVhcmFuY2UiLCJiYXNlIiwiYmFja2dyb3VuZENvbG9yIiwiYm94U2hhZG93IiwibmV1dHJhbCIsIk41QSIsIk40QSIsImludmFsaWQiLCJyZWQiLCJwbGFjZWhvbGRlciIsImNvbG9yIiwiTjZBIiwiZm9jdXMiLCJvdXRsaW5lIiwiYmx1ZSIsIkI3IiwiQjRBIiwiZGlzYWJsZWQiLCJOMiIsIk4yQSIsIkI2QSIsIm5vbmUiLCJnZXRUZXh0SW5wdXRBcHBlYXJhbmNlIiwiYXBwZWFyYW5jZSJdLCJtYXBwaW5ncyI6IkFBQUEsU0FBU0EsTUFBVCxRQUF1QixvQkFBdkI7QUFDQSxPQUFPQyxnQkFBUCxNQUE2QiwyQkFBN0I7QUFDQSxPQUFPQyxNQUFQLE1BQW1CLCtCQUFuQjtBQUNBLE9BQU9DLE9BQVAsTUFBb0IsZ0NBQXBCO0FBRUEsSUFBTUMsZ0JBQWdCLEdBQUcsRUFBekI7QUFFQUEsZ0JBQWdCLENBQUNDLE9BQWpCLEdBQTJCTCxNQUFNLENBQUNNLHFCQUFQLENBQTZCO0FBQ3REQyxFQUFBQSxJQUFJLEVBQUU7QUFDSkMsSUFBQUEsZUFBZSxFQUFFLE9BRGI7QUFFSkMsSUFBQUEsU0FBUyw0QkFBcUJQLE1BQU0sQ0FBQ1EsT0FBUCxDQUFlQyxHQUFwQywrQkFDUFQsTUFBTSxDQUFDUSxPQUFQLENBQWVFLEdBRFI7QUFGTCxHQURnRDtBQU90REMsRUFBQUEsT0FBTyxFQUFFO0FBQ1BKLElBQUFBLFNBQVMsNEJBQXFCTixPQUFPLENBQUNXLEdBQVIsQ0FBWVAsSUFBakMsK0JBQ1BMLE1BQU0sQ0FBQ1EsT0FBUCxDQUFlRSxHQURSO0FBREYsR0FQNkM7QUFZdERHLEVBQUFBLFdBQVcsRUFBRTtBQUNYQyxJQUFBQSxLQUFLLEVBQUVkLE1BQU0sQ0FBQ1EsT0FBUCxDQUFlTztBQURYLEdBWnlDO0FBZXREQyxFQUFBQSxLQUFLLEVBQUU7QUFDTEMsSUFBQUEsT0FBTyxFQUFFLE1BREo7QUFFTFYsSUFBQUEsU0FBUywwQkFBbUJQLE1BQU0sQ0FBQ1EsT0FBUCxDQUFlRSxHQUFsQywrQkFDUFYsTUFBTSxDQUFDa0IsSUFBUCxDQUFZQyxFQURMLHlCQUVNbkIsTUFBTSxDQUFDa0IsSUFBUCxDQUFZRSxHQUZsQjtBQUZKLEdBZitDO0FBcUJ0REMsRUFBQUEsUUFBUSxFQUFFO0FBQ1JkLElBQUFBLFNBQVMsNEJBQXFCUCxNQUFNLENBQUNRLE9BQVAsQ0FBZUUsR0FBcEMsQ0FERDtBQUVSSixJQUFBQSxlQUFlLEVBQUVOLE1BQU0sQ0FBQ1EsT0FBUCxDQUFlYztBQUZ4QjtBQXJCNEMsQ0FBN0IsQ0FBM0I7QUEyQkFwQixnQkFBZ0IsQ0FBQ00sT0FBakIsR0FBMkJWLE1BQU0sQ0FBQ00scUJBQVAsQ0FBNkI7QUFDdERDLEVBQUFBLElBQUksRUFBRTtBQUNKQyxJQUFBQSxlQUFlLEVBQUVOLE1BQU0sQ0FBQ1EsT0FBUCxDQUFlZTtBQUQ1QixHQURnRDtBQUl0RFosRUFBQUEsT0FBTyxFQUFFO0FBQ1BKLElBQUFBLFNBQVMsNEJBQXFCTixPQUFPLENBQUNXLEdBQVIsQ0FBWVAsSUFBakM7QUFERixHQUo2QztBQU90RFEsRUFBQUEsV0FBVyxFQUFFO0FBQ1hDLElBQUFBLEtBQUssRUFBRWQsTUFBTSxDQUFDUSxPQUFQLENBQWVPO0FBRFgsR0FQeUM7QUFVdERDLEVBQUFBLEtBQUssRUFBRTtBQUNMQyxJQUFBQSxPQUFPLEVBQUUsTUFESjtBQUVMWCxJQUFBQSxlQUFlLEVBQUUsT0FGWjtBQUdMQyxJQUFBQSxTQUFTLHNCQUFlUCxNQUFNLENBQUNrQixJQUFQLENBQVlNLEdBQTNCO0FBSEosR0FWK0M7QUFldERILEVBQUFBLFFBQVEsRUFBRTtBQUNSZCxJQUFBQSxTQUFTLDRCQUFxQlAsTUFBTSxDQUFDUSxPQUFQLENBQWVFLEdBQXBDLENBREQ7QUFFUkosSUFBQUEsZUFBZSxFQUFFTixNQUFNLENBQUNRLE9BQVAsQ0FBZWM7QUFGeEI7QUFmNEMsQ0FBN0IsQ0FBM0I7QUFxQkFwQixnQkFBZ0IsQ0FBQ3VCLElBQWpCLEdBQXdCM0IsTUFBTSxDQUFDTSxxQkFBUCxDQUE2QjtBQUNuREMsRUFBQUEsSUFBSSxFQUFFO0FBQ0pDLElBQUFBLGVBQWUsRUFBRTtBQURiLEdBRDZDO0FBSW5ESyxFQUFBQSxPQUFPLEVBQUUsRUFKMEM7QUFLbkRFLEVBQUFBLFdBQVcsRUFBRTtBQUNYQyxJQUFBQSxLQUFLLEVBQUVkLE1BQU0sQ0FBQ1EsT0FBUCxDQUFlTztBQURYLEdBTHNDO0FBUW5EQyxFQUFBQSxLQUFLLEVBQUU7QUFDTEMsSUFBQUEsT0FBTyxFQUFFO0FBREosR0FSNEM7QUFXbkRJLEVBQUFBLFFBQVEsRUFBRTtBQUNSZixJQUFBQSxlQUFlLEVBQUVOLE1BQU0sQ0FBQ1EsT0FBUCxDQUFlYztBQUR4QjtBQVh5QyxDQUE3QixDQUF4QjtBQWdCQTs7Ozs7O0FBS0EsSUFBTUksc0JBQXNCLEdBQUcsU0FBekJBLHNCQUF5QixDQUFBQyxVQUFVLEVBQUk7QUFDM0MsVUFBUUEsVUFBUjtBQUNFLFNBQUssU0FBTDtBQUNFLGFBQU96QixnQkFBZ0IsQ0FBQ00sT0FBeEI7O0FBQ0YsU0FBSyxNQUFMO0FBQ0UsYUFBT04sZ0JBQWdCLENBQUN1QixJQUF4Qjs7QUFDRjtBQUNFLGFBQU92QixnQkFBZ0IsQ0FBQ0MsT0FBeEI7QUFOSjtBQVFELENBVEQ7QUFXQTs7Ozs7OztBQUtBLGVBQWVKLGdCQUFnQixDQUFDMkIsc0JBQUQsQ0FBL0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBUaGVtZXIgfSBmcm9tICcuLi8uLi8uLi8uLi90aGVtZXInXG5pbXBvcnQgbWVtb2l6ZUNsYXNzTmFtZSBmcm9tICcuLi91dGlscy9tZW1vaXplQ2xhc3NOYW1lJ1xuaW1wb3J0IHNjYWxlcyBmcm9tICcuLi9mb3VuZGF0aW9uYWwtc3R5bGVzL3NjYWxlcydcbmltcG9ydCBwYWxldHRlIGZyb20gJy4uL2ZvdW5kYXRpb25hbC1zdHlsZXMvcGFsZXR0ZSdcblxuY29uc3QgSW5wdXRBcHBlYXJhbmNlcyA9IHt9XG5cbklucHV0QXBwZWFyYW5jZXMuZGVmYXVsdCA9IFRoZW1lci5jcmVhdGVJbnB1dEFwcGVhcmFuY2Uoe1xuICBiYXNlOiB7XG4gICAgYmFja2dyb3VuZENvbG9yOiAnd2hpdGUnLFxuICAgIGJveFNoYWRvdzogYGluc2V0IDAgMCAwIDFweCAke3NjYWxlcy5uZXV0cmFsLk41QX0sIGluc2V0IDAgMXB4IDJweCAke1xuICAgICAgc2NhbGVzLm5ldXRyYWwuTjRBXG4gICAgfWBcbiAgfSxcbiAgaW52YWxpZDoge1xuICAgIGJveFNoYWRvdzogYGluc2V0IDAgMCAwIDFweCAke3BhbGV0dGUucmVkLmJhc2V9LCBpbnNldCAwIDFweCAycHggJHtcbiAgICAgIHNjYWxlcy5uZXV0cmFsLk40QVxuICAgIH1gXG4gIH0sXG4gIHBsYWNlaG9sZGVyOiB7XG4gICAgY29sb3I6IHNjYWxlcy5uZXV0cmFsLk42QVxuICB9LFxuICBmb2N1czoge1xuICAgIG91dGxpbmU6ICdub25lJyxcbiAgICBib3hTaGFkb3c6IGBpbnNldCAwIDAgMnB4ICR7c2NhbGVzLm5ldXRyYWwuTjRBfSwgaW5zZXQgMCAwIDAgMXB4ICR7XG4gICAgICBzY2FsZXMuYmx1ZS5CN1xuICAgIH0sIDAgMCAwIDNweCAke3NjYWxlcy5ibHVlLkI0QX1gXG4gIH0sXG4gIGRpc2FibGVkOiB7XG4gICAgYm94U2hhZG93OiBgaW5zZXQgMCAwIDAgMXB4ICR7c2NhbGVzLm5ldXRyYWwuTjRBfWAsXG4gICAgYmFja2dyb3VuZENvbG9yOiBzY2FsZXMubmV1dHJhbC5OMlxuICB9XG59KVxuXG5JbnB1dEFwcGVhcmFuY2VzLm5ldXRyYWwgPSBUaGVtZXIuY3JlYXRlSW5wdXRBcHBlYXJhbmNlKHtcbiAgYmFzZToge1xuICAgIGJhY2tncm91bmRDb2xvcjogc2NhbGVzLm5ldXRyYWwuTjJBXG4gIH0sXG4gIGludmFsaWQ6IHtcbiAgICBib3hTaGFkb3c6IGBpbnNldCAwIDAgMCAxcHggJHtwYWxldHRlLnJlZC5iYXNlfWBcbiAgfSxcbiAgcGxhY2Vob2xkZXI6IHtcbiAgICBjb2xvcjogc2NhbGVzLm5ldXRyYWwuTjZBXG4gIH0sXG4gIGZvY3VzOiB7XG4gICAgb3V0bGluZTogJ25vbmUnLFxuICAgIGJhY2tncm91bmRDb2xvcjogJ3doaXRlJyxcbiAgICBib3hTaGFkb3c6IGAwIDAgMCAycHggJHtzY2FsZXMuYmx1ZS5CNkF9YFxuICB9LFxuICBkaXNhYmxlZDoge1xuICAgIGJveFNoYWRvdzogYGluc2V0IDAgMCAwIDFweCAke3NjYWxlcy5uZXV0cmFsLk40QX1gLFxuICAgIGJhY2tncm91bmRDb2xvcjogc2NhbGVzLm5ldXRyYWwuTjJcbiAgfVxufSlcblxuSW5wdXRBcHBlYXJhbmNlcy5ub25lID0gVGhlbWVyLmNyZWF0ZUlucHV0QXBwZWFyYW5jZSh7XG4gIGJhc2U6IHtcbiAgICBiYWNrZ3JvdW5kQ29sb3I6ICd3aGl0ZSdcbiAgfSxcbiAgaW52YWxpZDoge30sXG4gIHBsYWNlaG9sZGVyOiB7XG4gICAgY29sb3I6IHNjYWxlcy5uZXV0cmFsLk42QVxuICB9LFxuICBmb2N1czoge1xuICAgIG91dGxpbmU6ICdub25lJ1xuICB9LFxuICBkaXNhYmxlZDoge1xuICAgIGJhY2tncm91bmRDb2xvcjogc2NhbGVzLm5ldXRyYWwuTjJcbiAgfVxufSlcblxuLyoqXG4gKiBHZXQgdGhlIGFwcGVhcmFuY2Ugb2YgYSBgVGV4dElucHV0YC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBhcHBlYXJhbmNlIC0gdGhlIGFwcGVhcmFuY2UgbmFtZVxuICogQHJldHVybiB7T2JqZWN0fSB0aGUgYXBwZWFyYW5jZSBvYmplY3QuXG4gKi9cbmNvbnN0IGdldFRleHRJbnB1dEFwcGVhcmFuY2UgPSBhcHBlYXJhbmNlID0+IHtcbiAgc3dpdGNoIChhcHBlYXJhbmNlKSB7XG4gICAgY2FzZSAnbmV1dHJhbCc6XG4gICAgICByZXR1cm4gSW5wdXRBcHBlYXJhbmNlcy5uZXV0cmFsXG4gICAgY2FzZSAnbm9uZSc6XG4gICAgICByZXR1cm4gSW5wdXRBcHBlYXJhbmNlcy5ub25lXG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBJbnB1dEFwcGVhcmFuY2VzLmRlZmF1bHRcbiAgfVxufVxuXG4vKipcbiAqIEdldCB0aGUgY2xhc3NOYW1lIG9mIGEgYFRleHRJbnB1dGAuXG4gKiBAcGFyYW0ge3N0cmluZ30gYXBwZWFyYW5jZSAtIHRoZSBhcHBlYXJhbmNlIG5hbWVcbiAqIEByZXR1cm4ge3N0cmluZ30gdGhlIGFwcGVhcmFuY2UgY2xhc3MgbmFtZS5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgbWVtb2l6ZUNsYXNzTmFtZShnZXRUZXh0SW5wdXRBcHBlYXJhbmNlKVxuIl19