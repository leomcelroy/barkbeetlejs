import tinycolor from 'tinycolor2';
import { Intent } from '../../../constants';
import colors from './foundational-styles/colors';
/**
 * @param {String} top - color.
 * @param {String} bottom - color.
 * @return {String} CSS background propery.
 */

var linearGradient = function linearGradient(top, bottom) {
  return "linear-gradient(to bottom, ".concat(top, ", ").concat(bottom, ")");
};
/**
 * @param {Intent} intent
 * @return {String} color
 */


var getTextColorForIntent = function getTextColorForIntent(intent, defaultColor) {
  switch (intent) {
    case Intent.SUCCESS:
      return colors.text.success;

    case Intent.DANGER:
      return colors.text.danger;

    case Intent.WARNING:
      return colors.text.warning;

    default:
      return defaultColor || colors.text.default;
  }
};
/**
 * @param {String} startColor
 * @param {String} endColor
 * @param {Number} intensityMultiplier - Some colors need more darkening.
 */


var getLinearGradientWithStates = function getLinearGradientWithStates(startColor, endColor) {
  var intensityMultiplier = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
  return {
    base: linearGradient(startColor, endColor),
    hover: linearGradient(tinycolor(startColor).darken(5 * intensityMultiplier).toString(), tinycolor(endColor).darken(5 * intensityMultiplier).toString()),
    active: linearGradient(tinycolor(endColor).darken(5 * intensityMultiplier).toString(), tinycolor(endColor).darken(5 * intensityMultiplier).toString())
  };
};
/**
 * Gradients in the default theme have a intentional hue shift.
 * @param {Intent} intent - intent of the gradient.
 * @return {Object} { base, hover, active }
 */


var getPrimaryButtonStylesForIntent = function getPrimaryButtonStylesForIntent(intent) {
  switch (intent) {
    case Intent.SUCCESS:
      {
        var startColor = '#23C277';
        var endColor = '#399D6C';
        return {
          linearGradient: getLinearGradientWithStates(startColor, endColor),
          focusColor: tinycolor(startColor).setAlpha(0.4).toString()
        };
      }

    case Intent.WARNING:
      {
        var _startColor = '#EE9913';
        var _endColor = '#D9822B';
        return {
          linearGradient: getLinearGradientWithStates(_startColor, _endColor),
          focusColor: tinycolor(_startColor).setAlpha(0.4).toString()
        };
      }

    case Intent.DANGER:
      {
        var _startColor2 = '#EC4C47';
        var _endColor2 = '#D64540';
        return {
          linearGradient: getLinearGradientWithStates(_startColor2, _endColor2),
          focusColor: tinycolor(_startColor2).setAlpha(0.4).toString()
        };
      }

    default:
      {
        var _startColor3 = '#0788DE';
        var _endColor3 = '#116AB8';
        return {
          linearGradient: getLinearGradientWithStates(_startColor3, _endColor3),
          focusColor: tinycolor(_startColor3).setAlpha(0.4).toString()
        };
      }
  }
};

export { linearGradient, getTextColorForIntent, getLinearGradientWithStates, getPrimaryButtonStylesForIntent };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy90aGVtZS9zcmMvZGVmYXVsdC10aGVtZS9oZWxwZXJzLmpzIl0sIm5hbWVzIjpbInRpbnljb2xvciIsIkludGVudCIsImNvbG9ycyIsImxpbmVhckdyYWRpZW50IiwidG9wIiwiYm90dG9tIiwiZ2V0VGV4dENvbG9yRm9ySW50ZW50IiwiaW50ZW50IiwiZGVmYXVsdENvbG9yIiwiU1VDQ0VTUyIsInRleHQiLCJzdWNjZXNzIiwiREFOR0VSIiwiZGFuZ2VyIiwiV0FSTklORyIsIndhcm5pbmciLCJkZWZhdWx0IiwiZ2V0TGluZWFyR3JhZGllbnRXaXRoU3RhdGVzIiwic3RhcnRDb2xvciIsImVuZENvbG9yIiwiaW50ZW5zaXR5TXVsdGlwbGllciIsImJhc2UiLCJob3ZlciIsImRhcmtlbiIsInRvU3RyaW5nIiwiYWN0aXZlIiwiZ2V0UHJpbWFyeUJ1dHRvblN0eWxlc0ZvckludGVudCIsImZvY3VzQ29sb3IiLCJzZXRBbHBoYSJdLCJtYXBwaW5ncyI6IkFBQUEsT0FBT0EsU0FBUCxNQUFzQixZQUF0QjtBQUNBLFNBQVNDLE1BQVQsUUFBdUIsb0JBQXZCO0FBQ0EsT0FBT0MsTUFBUCxNQUFtQiw4QkFBbkI7QUFFQTs7Ozs7O0FBS0EsSUFBTUMsY0FBYyxHQUFHLFNBQWpCQSxjQUFpQixDQUFDQyxHQUFELEVBQU1DLE1BQU4sRUFBaUI7QUFDdEMsOENBQXFDRCxHQUFyQyxlQUE2Q0MsTUFBN0M7QUFDRCxDQUZEO0FBSUE7Ozs7OztBQUlBLElBQU1DLHFCQUFxQixHQUFHLFNBQXhCQSxxQkFBd0IsQ0FBQ0MsTUFBRCxFQUFTQyxZQUFULEVBQTBCO0FBQ3RELFVBQVFELE1BQVI7QUFDRSxTQUFLTixNQUFNLENBQUNRLE9BQVo7QUFDRSxhQUFPUCxNQUFNLENBQUNRLElBQVAsQ0FBWUMsT0FBbkI7O0FBQ0YsU0FBS1YsTUFBTSxDQUFDVyxNQUFaO0FBQ0UsYUFBT1YsTUFBTSxDQUFDUSxJQUFQLENBQVlHLE1BQW5COztBQUNGLFNBQUta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LEVBR0VXLDJCQUhGLEVBSUVTLCtCQUpGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHRpbnljb2xvciBmcm9tICd0aW55Y29sb3IyJ1xuaW1wb3J0IHsgSW50ZW50IH0gZnJvbSAnLi4vLi4vLi4vY29uc3RhbnRzJ1xuaW1wb3J0IGNvbG9ycyBmcm9tICcuL2ZvdW5kYXRpb25hbC1zdHlsZXMvY29sb3JzJ1xuXG4vKipcbiAqIEBwYXJhbSB7U3RyaW5nfSB0b3AgLSBjb2xvci5cbiAqIEBwYXJhbSB7U3RyaW5nfSBib3R0b20gLSBjb2xvci5cbiAqIEByZXR1cm4ge1N0cmluZ30gQ1NTIGJhY2tncm91bmQgcHJvcGVyeS5cbiAqL1xuY29uc3QgbGluZWFyR3JhZGllbnQgPSAodG9wLCBib3R0b20pID0+IHtcbiAgcmV0dXJuIGBsaW5lYXItZ3JhZGllbnQodG8gYm90dG9tLCAke3RvcH0sICR7Ym90dG9tfSlgXG59XG5cbi8qKlxuICogQHBhcmFtIHtJbnRlbnR9IGludGVudFxuICogQHJldHVybiB7U3RyaW5nfSBjb2xvclxuICovXG5jb25zdCBnZXRUZXh0Q29sb3JGb3JJbnRlbnQgPSAoaW50ZW50LCBkZWZhdWx0Q29sb3IpID0+IHtcbiAgc3dpdGNoIChpbnRlbnQpIHtcbiAgICBjYXNlIEludGVudC5TVUNDRVNTOlxuICAgICAgcmV0dXJuIGNvbG9ycy50ZXh0LnN1Y2Nlc3NcbiAgICBjYXNlIEludGVudC5EQU5HRVI6XG4gICAgICByZXR1cm4gY29sb3JzLnRleHQuZGFuZ2VyXG4gICAgY2FzZSBJbnRlbnQuV0FSTklORzpcbiAgICAgIHJldHVybiBjb2xvcnMudGV4dC53YXJuaW5nXG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBkZWZhdWx0Q29sb3IgfHwgY29sb3JzLnRleHQuZGVmYXVsdFxuICB9XG59XG5cbi8qKlxuICogQHBhcmFtIHtTdHJpbmd9IHN0YXJ0Q29sb3JcbiAqIEBwYXJhbSB7U3RyaW5nfSBlbmRDb2xvclxuICogQHBhcmFtIHtOdW1iZXJ9IGludGVuc2l0eU11bHRpcGxpZXIgLSBTb21lIGNvbG9ycyBuZWVkIG1vcmUgZGFya2VuaW5nLlxuICovXG5jb25zdCBnZXRMaW5lYXJHcmFkaWVudFdpdGhTdGF0ZXMgPSAoXG4gIHN0YXJ0Q29sb3IsXG4gIGVuZENvbG9yLFxuICBpbnRlbnNpdHlNdWx0aXBsaWVyID0gMVxuKSA9PiB7XG4gIHJldHVybiB7XG4gICAgYmFzZTogbGluZWFyR3JhZGllbnQoc3RhcnRDb2xvciwgZW5kQ29sb3IpLFxuICAgIGhvdmVyOiBsaW5lYXJHcmFkaWVudChcbiAgICAgIHRpbnljb2xvcihzdGFydENvbG9yKVxuICAgICAgICAuZGFya2VuKDUgKiBpbnRlbnNpdHlNdWx0aXBsaWVyKVxuICAgICAgICAudG9TdHJpbmcoKSxcbiAgICAgIHRpbnljb2xvcihlbmRDb2xvcilcbiAgICAgICAgLmRhcmtlbig1ICogaW50ZW5zaXR5TXVsdGlwbGllcilcbiAgICAgICAgLnRvU3RyaW5nKClcbiAgICApLFxuICAgIGFjdGl2ZTogbGluZWFyR3JhZGllbnQoXG4gICAgICB0aW55Y29sb3IoZW5kQ29sb3IpXG4gICAgICAgIC5kYXJrZW4oNSAqIGludGVuc2l0eU11bHRpcGxpZXIpXG4gICAgICAgIC50b1N0cmluZygpLFxuICAgICAgdGlueWNvbG9yKGVuZENvbG9yKVxuICAgICAgICAuZGFya2VuKDUgKiBpbnRlbnNpdHlNdWx0aXBsaWVyKVxuICAgICAgICAudG9TdHJpbmcoKVxuICAgIClcbiAgfVxufVxuXG4vKipcbiAqIEdyYWRpZW50cyBpbiB0aGUgZGVmYXVsdCB0aGVtZSBoYXZlIGEgaW50ZW50aW9uYWwgaHVlIHNoaWZ0LlxuICogQHBhcmFtIHtJbnRlbnR9IGludGVudCAtIGludGVudCBvZiB0aGUgZ3JhZGllbnQuXG4gKiBAcmV0dXJuIHtPYmplY3R9IHsgYmFzZSwgaG92ZXIsIGFjdGl2ZSB9XG4gKi9cbmNvbnN0IGdldFByaW1hcnlCdXR0b25TdHlsZXNGb3JJbnRlbnQgPSBpbnRlbnQgPT4ge1xuICBzd2l0Y2ggKGludGVudCkge1xuICAgIGNhc2UgSW50ZW50LlNVQ0NFU1M6IHtcbiAgICAgIGNvbnN0IHN0YXJ0Q29sb3IgPSAnIzIzQzI3NydcbiAgICAgIGNvbnN0IGVuZENvbG9yID0gJyMzOTlENkMnXG4gICAgICByZXR1cm4ge1xuICAgICAgICBsaW5lYXJHcmFkaWVudDogZ2V0TGluZWFyR3JhZGllbnRXaXRoU3RhdGVzKHN0YXJ0Q29sb3IsIGVuZENvbG9yKSxcbiAgICAgICAgZm9jdXNDb2xvcjogdGlueWNvbG9yKHN0YXJ0Q29sb3IpXG4gICAgICAgICAgLnNldEFscGhhKDAuNClcbiAgICAgICAgICAudG9TdHJpbmcoKVxuICAgICAgfVxuICAgIH1cblxuICAgIGNhc2UgSW50ZW50LldBUk5JTkc6IHtcbiAgICAgIGNvbnN0IHN0YXJ0Q29sb3IgPSAnI0VFOTkxMydcbiAgICAgIGNvbnN0IGVuZENvbG9yID0gJyNEOTgyMkInXG4gICAgICByZXR1cm4ge1xuICAgICAgICBsaW5lYXJHcmFkaWVudDogZ2V0TGluZWFyR3JhZGllbnRXaXRoU3RhdGVzKHN0YXJ0Q29sb3IsIGVuZENvbG9yKSxcbiAgICAgICAgZm9jdXNDb2xvcjogdGlueWNvbG9yKHN0YXJ0Q29sb3IpXG4gICAgICAgICAgLnNldEFscGhhKDAuNClcbiAgICAgICAgICAudG9TdHJpbmcoKVxuICAgICAgfVxuICAgIH1cblxuICAgIGNhc2UgSW50ZW50LkRBTkdFUjoge1xuICAgICAgY29uc3Qgc3RhcnRDb2xvciA9ICcjRUM0QzQ3J1xuICAgICAgY29uc3QgZW5kQ29sb3IgPSAnI0Q2NDU0MCdcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGxpbmVhckdyYWRpZW50OiBnZXRMaW5lYXJHcmFkaWVudFdpdGhTdGF0ZXMoc3RhcnRDb2xvciwgZW5kQ29sb3IpLFxuICAgICAgICBmb2N1c0NvbG9yOiB0aW55Y29sb3Ioc3RhcnRDb2xvcilcbiAgICAgICAgICAuc2V0QWxwaGEoMC40KVxuICAgICAgICAgIC50b1N0cmluZygpXG4gICAgICB9XG4gICAgfVxuXG4gICAgZGVmYXVsdDoge1xuICAgICAgY29uc3Qgc3RhcnRDb2xvciA9ICcjMDc4OERFJ1xuICAgICAgY29uc3QgZW5kQ29sb3IgPSAnIzExNkFCOCdcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGxpbmVhckdyYWRpZW50OiBnZXRMaW5lYXJHcmFkaWVudFdpdGhTdGF0ZXMoc3RhcnRDb2xvciwgZW5kQ29sb3IpLFxuICAgICAgICBmb2N1c0NvbG9yOiB0aW55Y29sb3Ioc3RhcnRDb2xvcilcbiAgICAgICAgICAuc2V0QWxwaGEoMC40KVxuICAgICAgICAgIC50b1N0cmluZygpXG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCB7XG4gIGxpbmVhckdyYWRpZW50LFxuICBnZXRUZXh0Q29sb3JGb3JJbnRlbnQsXG4gIGdldExpbmVhckdyYWRpZW50V2l0aFN0YXRlcyxcbiAgZ2V0UHJpbWFyeUJ1dHRvblN0eWxlc0ZvckludGVudFxufVxuIl19