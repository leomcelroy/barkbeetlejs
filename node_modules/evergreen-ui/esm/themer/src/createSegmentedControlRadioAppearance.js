import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _objectSpread from "@babel/runtime/helpers/esm/objectSpread";
import { StackingOrder } from '../../constants';
import createAppearance from './createAppearance';
import missingStateWarning from './missingStateWarning';
var baseStyle = {
  WebkitFontSmoothing: 'antialiased',
  boxSizing: 'border-box',
  textDecoration: 'none',
  transition: 'box-shadow 80ms ease-in-out',
  WebkitAppearance: 'none',
  border: 'none',
  outline: 'none',
  cursor: 'pointer'
};
var disabledState = '[disabled="true"], [data-disabled="true"]';
var hoverState = '&:not([disabled="true"]):not([data-disabled="true"]):hover';
var activeState = '&:not([disabled="true"]):not([data-disabled="true"]):active, &:not([disabled="true"]):not([data-disabled="true"])[data-popover-opened="true"], &:not([disabled="true"]):not([data-disabled="true"])[data-active="true"]';
var focusState = '& input:focus + label';
/**
 * @param {object} items - object with a set of states.
 * @return {object} the final appearance.
 */

var createSegmentedControlRadioAppearance = function createSegmentedControlRadioAppearance() {
  var _objectSpread2;

  var items = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  missingStateWarning({
    items: items,
    props: ['base', 'hover', 'disabled', 'active', 'focus'],
    cb: function cb(prop) {
      console.error("Themer.createSegmentedControlRadioAppearance() is missing a ".concat(prop, " item"), items);
    }
  });
  return _objectSpread({}, baseStyle, createAppearance(items.base), (_objectSpread2 = {}, _defineProperty(_objectSpread2, disabledState, _objectSpread({
    cursor: 'not-allowed'
  }, createAppearance(items.disabled))), _defineProperty(_objectSpread2, hoverState, createAppearance(items.hover)), _defineProperty(_objectSpread2, focusState, _objectSpread({
    zIndex: StackingOrder.FOCUSED
  }, createAppearance(items.focus))), _defineProperty(_objectSpread2, activeState, createAppearance(items.active)), _defineProperty(_objectSpread2, '&[data-active="true"]', {
    cursor: 'default'
  }), _objectSpread2));
};

export default createSegmentedControlRadioAppearance;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy90aGVtZXIvc3JjL2NyZWF0ZVNlZ21lbnRlZENvbnRyb2xSYWRpb0FwcGVhcmFuY2UuanMiXSwibmFtZXMiOlsiU3RhY2tpbmdPcmRlciIsImNyZWF0ZUFwcGVhcmFuY2UiLCJtaXNzaW5nU3RhdGVXYXJuaW5nIiwiYmFzZVN0eWxlIiwiV2Via2l0Rm9udFNtb290aGluZyIsImJveFNpemluZyIsInRleHREZWNvcmF0aW9uIiwidHJhbnNpdGlvbiIsIldlYmtpdEFwcGVhcmFuY2UiLCJib3JkZXIiLCJvdXRsaW5lIiwiY3Vyc29yIiwiZGlzYWJsZWRTdGF0ZSIsImhvdmVyU3RhdGUiLCJhY3RpdmVTdGF0ZSIsImZvY3VzU3RhdGUiLCJjcmVhdGVTZWdtZW50ZWRDb250cm9sUmFkaW9BcHBlYXJhbmNlIiwiaXRlbXMiLCJwcm9wcyIsImNiIiwicHJvcCIsImNvbnNvbGUiLCJlcnJvciIsImJhc2UiLCJkaXNhYmxlZCIsImhvdmVyIiwiekluZGV4IiwiRk9DVVNFRCIsImZvY3VzIiwiYWN0aXZlIl0sIm1hcHBpbmdzIjoiOztBQUFBLFNBQVNBLGFBQVQsUUFBOEIsaUJBQTlCO0FBQ0EsT0FBT0MsZ0JBQVAsTUFBNkIsb0JBQTdCO0FBQ0EsT0FBT0MsbUJBQVAsTUFBZ0MsdUJBQWhDO0FBRUEsSUFBTUMsU0FBUyxHQUFHO0FBQ2hCQyxFQUFBQSxtQkFBbUIsRUFBRSxhQURMO0FBRWhCQyxFQUFBQSxTQUFTLEVBQUUsWUFGSztBQUdoQkMsRUFBQUEsY0FBYyxFQUFFLE1BSEE7QUFJaEJDLEVBQUFBLFVBQVUsRUFBRSw2QkFKSTtBQUtoQkMsRUFBQUEsZ0JBQWdCLEVBQUUsTUFMRjtBQU1oQkMsRUFBQUEsTUFBTSxFQUFFLE1BTlE7QUFPaEJDLEVBQUFBLE9BQU8sRUFBRSxNQVBPO0FBUWhCQyxFQUFBQSxNQUFNLEVBQUU7QUFSUSxDQUFsQjtBQVdBLElBQU1DLGFBQWEsR0FBRywyQ0FBdEI7QUFDQSxJQUFNQyxVQUFVLEdBQUcsNERBQW5CO0FBQ0EsSUFBTUMsV0FBVyxHQUNmLHlOQURGO0FBRUEsSUFBTUMsVUFBVSxHQUFHLHVCQUFuQjtBQUVBOzs7OztBQUlBLElBQU1DLHFDQUFxQyxHQUFHLFNBQXhDQSxxQ0FBd0MsR0FBZ0I7QUFBQTs7QUFBQSxNQUFmQyxLQUFlLHVFQUFQLEVBQU87QUFDNURmLEVBQUFBLG1CQUFtQixDQUFDO0FBQ2xCZSxJQUFBQSxLQUFLLEVBQUxBLEtBRGtCO0FBRWxCQyxJQUFBQSxLQUFLLEVBQUUsQ0FBQyxNQUFELEVBQVMsT0FBVCxFQUFrQixVQUFsQixFQUE4QixRQUE5QixFQUF3QyxPQUF4QyxDQUZXO0FBR2xCQyxJQUFBQSxFQUFFLEVBQUUsWUFBQUMsSUFBSSxFQUFJO0FBQ1ZDLE1BQUFBLE9BQU8sQ0FBQ0MsS0FBUix1RUFDaUVGLElBRGpFLFlBRUVILEtBRkY7QUFJRDtBQVJpQixHQUFELENBQW5CO0FBV0EsMkJBQ0tkLFNBREwsRUFFS0YsZ0JBQWdCLENBQUNnQixLQUFLLENBQUNNLElBQVAsQ0FGckIsd0RBR0dYLGFBSEg7QUFJSUQsSUFBQUEsTUFBTSxFQUFFO0FBSlosS0FLT1YsZ0JBQWdCLENBQUNnQixLQUFLLENBQUNPLFFBQVAsQ0FMdkIsb0NBT0dYLFVBUEgsRUFPZ0JaLGdCQUFnQixDQUFDZ0IsS0FBSyxDQUFDUSxLQUFQLENBUGhDLG1DQVFHVixVQVJIO0FBU0lXLElBQUFBLE1BQU0sRUFBRTFCLGFBQWEsQ0FBQzJCO0FBVDFCLEtBVU8xQixnQkFBZ0IsQ0FBQ2dCLEtBQUssQ0FBQ1csS0FBUCxDQVZ2QixvQ0FZR2QsV0FaSCxFQVlpQmIsZ0JBQWdCLENBQUNnQixLQUFLLENBQUNZLE1BQVAsQ0FaakMsbUNBYUUsdUJBYkYsRUFhMkI7QUFDdkJsQixJQUFBQSxNQUFNLEVBQUU7QUFEZSxHQWIzQjtBQWlCRCxDQTdCRDs7QUErQkEsZUFBZUsscUNBQWYiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTdGFja2luZ09yZGVyIH0gZnJvbSAnLi4vLi4vY29uc3RhbnRzJ1xuaW1wb3J0IGNyZWF0ZUFwcGVhcmFuY2UgZnJvbSAnLi9jcmVhdGVBcHBlYXJhbmNlJ1xuaW1wb3J0IG1pc3NpbmdTdGF0ZVdhcm5pbmcgZnJvbSAnLi9taXNzaW5nU3RhdGVXYXJuaW5nJ1xuXG5jb25zdCBiYXNlU3R5bGUgPSB7XG4gIFdlYmtpdEZvbnRTbW9vdGhpbmc6ICdhbnRpYWxpYXNlZCcsXG4gIGJveFNpemluZzogJ2JvcmRlci1ib3gnLFxuICB0ZXh0RGVjb3JhdGlvbjogJ25vbmUnLFxuICB0cmFuc2l0aW9uOiAnYm94LXNoYWRvdyA4MG1zIGVhc2UtaW4tb3V0JyxcbiAgV2Via2l0QXBwZWFyYW5jZTogJ25vbmUnLFxuICBib3JkZXI6ICdub25lJyxcbiAgb3V0bGluZTogJ25vbmUnLFxuICBjdXJzb3I6ICdwb2ludGVyJ1xufVxuXG5jb25zdCBkaXNhYmxlZFN0YXRlID0gJ1tkaXNhYmxlZD1cInRydWVcIl0sIFtkYXRhLWRpc2FibGVkPVwidHJ1ZVwiXSdcbmNvbnN0IGhvdmVyU3RhdGUgPSAnJjpub3QoW2Rpc2FibGVkPVwidHJ1ZVwiXSk6bm90KFtkYXRhLWRpc2FibGVkPVwidHJ1ZVwiXSk6aG92ZXInXG5jb25zdCBhY3RpdmVTdGF0ZSA9XG4gICcmOm5vdChbZGlzYWJsZWQ9XCJ0cnVlXCJdKTpub3QoW2RhdGEtZGlzYWJsZWQ9XCJ0cnVlXCJdKTphY3RpdmUsICY6bm90KFtkaXNhYmxlZD1cInRydWVcIl0pOm5vdChbZGF0YS1kaXNhYmxlZD1cInRydWVcIl0pW2RhdGEtcG9wb3Zlci1vcGVuZWQ9XCJ0cnVlXCJdLCAmOm5vdChbZGlzYWJsZWQ9XCJ0cnVlXCJdKTpub3QoW2RhdGEtZGlzYWJsZWQ9XCJ0cnVlXCJdKVtkYXRhLWFjdGl2ZT1cInRydWVcIl0nXG5jb25zdCBmb2N1c1N0YXRlID0gJyYgaW5wdXQ6Zm9jdXMgKyBsYWJlbCdcblxuLyoqXG4gKiBAcGFyYW0ge29iamVjdH0gaXRlbXMgLSBvYmplY3Qgd2l0aCBhIHNldCBvZiBzdGF0ZXMuXG4gKiBAcmV0dXJuIHtvYmplY3R9IHRoZSBmaW5hbCBhcHBlYXJhbmNlLlxuICovXG5jb25zdCBjcmVhdGVTZWdtZW50ZWRDb250cm9sUmFkaW9BcHBlYXJhbmNlID0gKGl0ZW1zID0ge30pID0+IHtcbiAgbWlzc2luZ1N0YXRlV2FybmluZyh7XG4gICAgaXRlbXMsXG4gICAgcHJvcHM6IFsnYmFzZScsICdob3ZlcicsICdkaXNhYmxlZCcsICdhY3RpdmUnLCAnZm9jdXMnXSxcbiAgICBjYjogcHJvcCA9PiB7XG4gICAgICBjb25zb2xlLmVycm9yKFxuICAgICAgICBgVGhlbWVyLmNyZWF0ZVNlZ21lbnRlZENvbnRyb2xSYWRpb0FwcGVhcmFuY2UoKSBpcyBtaXNzaW5nIGEgJHtwcm9wfSBpdGVtYCxcbiAgICAgICAgaXRlbXNcbiAgICAgIClcbiAgICB9XG4gIH0pXG5cbiAgcmV0dXJuIHtcbiAgICAuLi5iYXNlU3R5bGUsXG4gICAgLi4uY3JlYXRlQXBwZWFyYW5jZShpdGVtcy5iYXNlKSxcbiAgICBbZGlzYWJsZWRTdGF0ZV06IHtcbiAgICAgIGN1cnNvcjogJ25vdC1hbGxvd2VkJyxcbiAgICAgIC4uLmNyZWF0ZUFwcGVhcmFuY2UoaXRlbXMuZGlzYWJsZWQpXG4gICAgfSxcbiAgICBbaG92ZXJTdGF0ZV06IGNyZWF0ZUFwcGVhcmFuY2UoaXRlbXMuaG92ZXIpLFxuICAgIFtmb2N1c1N0YXRlXToge1xuICAgICAgekluZGV4OiBTdGFja2luZ09yZGVyLkZPQ1VTRUQsXG4gICAgICAuLi5jcmVhdGVBcHBlYXJhbmNlKGl0ZW1zLmZvY3VzKVxuICAgIH0sXG4gICAgW2FjdGl2ZVN0YXRlXTogY3JlYXRlQXBwZWFyYW5jZShpdGVtcy5hY3RpdmUpLFxuICAgICcmW2RhdGEtYWN0aXZlPVwidHJ1ZVwiXSc6IHtcbiAgICAgIGN1cnNvcjogJ2RlZmF1bHQnXG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZVNlZ21lbnRlZENvbnRyb2xSYWRpb0FwcGVhcmFuY2VcbiJdfQ==