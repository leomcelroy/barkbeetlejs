import _objectSpread from "@babel/runtime/helpers/esm/objectSpread";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import React from 'react';
import ReactDOM from 'react-dom';
import ToastManager from './ToastManager';
var isBrowser = typeof window !== 'undefined' && typeof window.document !== 'undefined';
/**
 * The Toaster manages the interactionsb between
 * the ToasterManger and the toast API.
 */

var Toaster = function Toaster() {
  var _this = this;

  _classCallCheck(this, Toaster);

  _defineProperty(this, "_bindNotify", function (handler) {
    _this.notifyHandler = handler;
  });

  _defineProperty(this, "_bindGetToasts", function (handler) {
    _this.getToastsHandler = handler;
  });

  _defineProperty(this, "_bindCloseAll", function (handler) {
    _this.closeAllHandler = handler;
  });

  _defineProperty(this, "getToasts", function () {
    return _this.getToastsHandler();
  });

  _defineProperty(this, "closeAll", function () {
    return _this.closeAllHandler();
  });

  _defineProperty(this, "notify", function (title) {
    var settings = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    return _this.notifyHandler(title, _objectSpread({}, settings, {
      intent: 'none'
    }));
  });

  _defineProperty(this, "success", function (title) {
    var settings = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    return _this.notifyHandler(title, _objectSpread({}, settings, {
      intent: 'success'
    }));
  });

  _defineProperty(this, "warning", function (title) {
    var settings = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    return _this.notifyHandler(title, _objectSpread({}, settings, {
      intent: 'warning'
    }));
  });

  _defineProperty(this, "danger", function (title) {
    var settings = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    return _this.notifyHandler(title, _objectSpread({}, settings, {
      intent: 'danger'
    }));
  });

  if (!isBrowser) return;
  var container = document.createElement('div');
  container.setAttribute('data-evergreen-toaster-container', '');
  document.body.append(container);
  ReactDOM.render(React.createElement(ToastManager, {
    bindNotify: this._bindNotify,
    bindGetToasts: this._bindGetToasts,
    bindCloseAll: this._bindCloseAll
  }), container);
};

export { Toaster as default };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy90b2FzdGVyL3NyYy9Ub2FzdGVyLmpzIl0sIm5hbWVzIjpbIlJlYWN0IiwiUmVhY3RET00iLCJUb2FzdE1hbmFnZXIiLCJpc0Jyb3dzZXIiLCJ3aW5kb3ciLCJkb2N1bWVudCIsIlRvYXN0ZXIiLCJoYW5kbGVyIiwibm90aWZ5SGFuZGxlciIsImdldFRvYXN0c0hhbmRsZXIiLCJjbG9zZUFsbEhhbmRsZXIiLCJ0aXRsZSIsInNldHRpbmdzIiwiaW50ZW50IiwiY29udGFpbmVyIiwiY3JlYXRlRWxlbWVudCIsInNldEF0dHJpYnV0ZSIsImJvZHkiLCJhcHBlbmQiLCJyZW5kZXIiLCJfYmluZE5vdGlmeSIsIl9iaW5kR2V0VG9hc3RzIiwiX2JpbmRDbG9zZUFsbCJdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsT0FBT0EsS0FBUCxNQUFrQixPQUFsQjtBQUNBLE9BQU9DLFFBQVAsTUFBcUIsV0FBckI7QUFDQSxPQUFPQyxZQUFQLE1BQXlCLGdCQUF6QjtBQUVBLElBQU1DLFNBQVMsR0FDYixPQUFPQyxNQUFQLEtBQWtCLFdBQWxCLElBQWlDLE9BQU9BLE1BQU0sQ0FBQ0MsUUFBZCxLQUEyQixXQUQ5RDtBQUdBOzs7OztJQUlxQkMsTyxHQUNuQixtQkFBYztBQUFBOztBQUFBOztBQUFBLHVDQWlCQSxVQUFBQyxPQUFPLEVBQUk7QUFDdkIsSUFBQSxLQUFJLENBQUNDLGFBQUwsR0FBcUJELE9BQXJCO0FBQ0QsR0FuQmE7O0FBQUEsMENBcUJHLFVBQUFBLE9BQU8sRUFBSTtBQUMxQixJQUFBLEtBQUksQ0FBQ0UsZ0JBQUwsR0FBd0JGLE9BQXhCO0FBQ0QsR0F2QmE7O0FBQUEseUNBeUJFLFVBQUFBLE9BQU8sRUFBSTtBQUN6QixJQUFBLEtBQUksQ0FBQ0csZUFBTCxHQUF1QkgsT0FBdkI7QUFDRCxHQTNCYTs7QUFBQSxxQ0E2QkYsWUFBTTtBQUNoQixXQUFPLEtBQUksQ0FBQ0UsZ0JBQUwsRUFBUDtBQUNELEdBL0JhOztBQUFBLG9DQWlDSCxZQUFNO0FBQ2YsV0FBTyxLQUFJLENBQUNDLGVBQUwsRUFBUDtBQUNELEdBbkNhOztBQUFBLGtDQXFDTCxVQUFDQyxLQUFELEVBQTBCO0FBQUEsUUFBbEJDLFFBQWtCLHVFQUFQLEVBQU87QUFDakMsV0FBTyxLQUFJLENBQUNKLGFBQUwsQ0FBbUJHLEtBQW5CLG9CQUErQkMsUUFBL0I7QUFBeUNDLE1BQUFBLE1BQU0sRUFBRTtBQUFqRCxPQUFQO0FBQ0QsR0F2Q2E7O0FBQUEsbUNBeUNKLFVBQUNGLEtBQUQsRUFBMEI7QUFBQSxRQUFsQkMsUUFBa0IsdUVBQVAsRUFBTztBQUNsQyxXQUFPLEtBQUksQ0FBQ0osYUFBTCxDQUFtQkcsS0FBbkIsb0JBQStCQyxRQUEvQjtBQUF5Q0MsTUFBQUEsTUFBTSxFQUFFO0FBQWpELE9BQVA7QUFDRCxHQTNDYTs7QUFBQSxtQ0E2Q0osVUFBQ0YsS0FBRCxFQUEwQjtBQUFBLFFBQWxCQyxRQUFrQix1RUFBUCxFQUFPO0FBQ2xDLFdBQU8sS0FBSSxDQUFDSixhQUFMLENBQW1CRyxLQUFuQixvQkFBK0JDLFFBQS9CO0FBQXlDQyxNQUFBQSxNQUFNLEVBQUU7QUFBakQsT0FBUDtBQUNELEdBL0NhOztBQUFBLGtDQWlETCxVQUFDRixLQUFELEVBQTBCO0FBQUEsUUFBbEJDLFFBQWtCLHVFQUFQLEVBQU87QUFDakMsV0FBTyxLQUFJLENBQUNKLGFBQUwsQ0FBbUJHLEtBQW5CLG9CQUErQkMsUUFBL0I7QUFBeUNDLE1BQUFBLE1BQU0sRUFBRTtBQUFqRCxPQUFQO0FBQ0QsR0FuRGE7O0FBQ1osTUFBSSxDQUFDVixTQUFMLEVBQWdCO0FBRWhCLE1BQU1XLFNBQVMsR0FBR1QsUUFBUSxDQUFDVSxhQUFULENBQXVCLEtBQXZCLENBQWxCO0FBQ0FELEVBQUFBLFNBQVMsQ0FBQ0UsWUFBVixDQUF1QixrQ0FBdkIsRUFBMkQsRUFBM0Q7QUFDQVgsRUFBQUEsUUFBUSxDQUFDWSxJQUFULENBQWNDLE1BQWQsQ0FBcUJKLFNBQXJCO0FBRUFiLEVBQUFBLFFBQVEsQ0FBQ2tCLE1BQVQsQ0FDRSxvQkFBQyxZQUFEO0FBQ0UsSUFBQSxVQUFVLEVBQUUsS0FBS0MsV0FEbkI7QUFFRSxJQUFBLGFBQWEsRUFBRSxLQUFLQyxjQUZ0QjtBQUdFLElBQUEsWUFBWSxFQUFFLEtBQUtDO0FBSHJCLElBREYsRUFNRVIsU0FORjtBQVFELEM7O1NBaEJrQlIsTyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcbmltcG9ydCBSZWFjdERPTSBmcm9tICdyZWFjdC1kb20nXG5pbXBvcnQgVG9hc3RNYW5hZ2VyIGZyb20gJy4vVG9hc3RNYW5hZ2VyJ1xuXG5jb25zdCBpc0Jyb3dzZXIgPVxuICB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2Ygd2luZG93LmRvY3VtZW50ICE9PSAndW5kZWZpbmVkJ1xuXG4vKipcbiAqIFRoZSBUb2FzdGVyIG1hbmFnZXMgdGhlIGludGVyYWN0aW9uc2IgYmV0d2VlblxuICogdGhlIFRvYXN0ZXJNYW5nZXIgYW5kIHRoZSB0b2FzdCBBUEkuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFRvYXN0ZXIge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBpZiAoIWlzQnJvd3NlcikgcmV0dXJuXG5cbiAgICBjb25zdCBjb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKVxuICAgIGNvbnRhaW5lci5zZXRBdHRyaWJ1dGUoJ2RhdGEtZXZlcmdyZWVuLXRvYXN0ZXItY29udGFpbmVyJywgJycpXG4gICAgZG9jdW1lbnQuYm9keS5hcHBlbmQoY29udGFpbmVyKVxuXG4gICAgUmVhY3RET00ucmVuZGVyKFxuICAgICAgPFRvYXN0TWFuYWdlclxuICAgICAgICBiaW5kTm90aWZ5PXt0aGlzLl9iaW5kTm90aWZ5fVxuICAgICAgICBiaW5kR2V0VG9hc3RzPXt0aGlzLl9iaW5kR2V0VG9hc3RzfVxuICAgICAgICBiaW5kQ2xvc2VBbGw9e3RoaXMuX2JpbmRDbG9zZUFsbH1cbiAgICAgIC8+LFxuICAgICAgY29udGFpbmVyXG4gICAgKVxuICB9XG5cbiAgX2JpbmROb3RpZnkgPSBoYW5kbGVyID0+IHtcbiAgICB0aGlzLm5vdGlmeUhhbmRsZXIgPSBoYW5kbGVyXG4gIH1cblxuICBfYmluZEdldFRvYXN0cyA9IGhhbmRsZXIgPT4ge1xuICAgIHRoaXMuZ2V0VG9hc3RzSGFuZGxlciA9IGhhbmRsZXJcbiAgfVxuXG4gIF9iaW5kQ2xvc2VBbGwgPSBoYW5kbGVyID0+IHtcbiAgICB0aGlzLmNsb3NlQWxsSGFuZGxlciA9IGhhbmRsZXJcbiAgfVxuXG4gIGdldFRvYXN0cyA9ICgpID0+IHtcbiAgICByZXR1cm4gdGhpcy5nZXRUb2FzdHNIYW5kbGVyKClcbiAgfVxuXG4gIGNsb3NlQWxsID0gKCkgPT4ge1xuICAgIHJldHVybiB0aGlzLmNsb3NlQWxsSGFuZGxlcigpXG4gIH1cblxuICBub3RpZnkgPSAodGl0bGUsIHNldHRpbmdzID0ge30pID0+IHtcbiAgICByZXR1cm4gdGhpcy5ub3RpZnlIYW5kbGVyKHRpdGxlLCB7IC4uLnNldHRpbmdzLCBpbnRlbnQ6ICdub25lJyB9KVxuICB9XG5cbiAgc3VjY2VzcyA9ICh0aXRsZSwgc2V0dGluZ3MgPSB7fSkgPT4ge1xuICAgIHJldHVybiB0aGlzLm5vdGlmeUhhbmRsZXIodGl0bGUsIHsgLi4uc2V0dGluZ3MsIGludGVudDogJ3N1Y2Nlc3MnIH0pXG4gIH1cblxuICB3YXJuaW5nID0gKHRpdGxlLCBzZXR0aW5ncyA9IHt9KSA9PiB7XG4gICAgcmV0dXJuIHRoaXMubm90aWZ5SGFuZGxlcih0aXRsZSwgeyAuLi5zZXR0aW5ncywgaW50ZW50OiAnd2FybmluZycgfSlcbiAgfVxuXG4gIGRhbmdlciA9ICh0aXRsZSwgc2V0dGluZ3MgPSB7fSkgPT4ge1xuICAgIHJldHVybiB0aGlzLm5vdGlmeUhhbmRsZXIodGl0bGUsIHsgLi4uc2V0dGluZ3MsIGludGVudDogJ2RhbmdlcicgfSlcbiAgfVxufVxuIl19