'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

exports.default = enhanceProps;

var _enhancers = require('./enhancers');

var _expandAliases = require('./expand-aliases');

var _expandAliases2 = _interopRequireDefault(_expandAliases);

var _styles = require('./styles');

var styles = _interopRequireWildcard(_styles);

var _cache = require('./cache');

var cache = _interopRequireWildcard(_cache);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Converts the CSS props to class names and inserts the styles.
 */
function enhanceProps(rawProps) {
  var propsMap = (0, _expandAliases2.default)(rawProps);
  var enhancedProps = {};
  var className = rawProps.className || '';

  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = propsMap[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var _ref = _step.value;

      var _ref2 = _slicedToArray(_ref, 2);

      var propName = _ref2[0];
      var propValue = _ref2[1];

      var cachedClassName = cache.get(propName, propValue);
      if (cachedClassName) {
        className = className + ' ' + cachedClassName;
        continue;
      }

      var enhancer = _enhancers.propEnhancers[propName];
      // Skip false boolean enhancers. e.g: `clearfix={false}`
      // Also allows omitting props via overriding with `null` (i.e: neutralising props)
      if (enhancer && (propValue === null || propValue === undefined || propValue === false)) {
        continue;
      } else if (!enhancer) {
        // Pass through native props. e.g: disabled, value, type
        enhancedProps[propName] = propValue;
        continue;
      }

      var newCss = enhancer(propValue);
      // Allow enhancers to return null for invalid values
      if (newCss) {
        styles.add(newCss.styles);
        cache.set(propName, propValue, newCss.className);
        className = className + ' ' + newCss.className;
      }
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  className = className.trim();

  return [className, enhancedProps];
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9lbmhhbmNlLXByb3BzLmpzIl0sIm5hbWVzIjpbImVuaGFuY2VQcm9wcyIsInN0eWxlcyIsImNhY2hlIiwicmF3UHJvcHMiLCJwcm9wc01hcCIsImVuaGFuY2VkUHJvcHMiLCJjbGFzc05hbWUiLCJwcm9wTmFtZSIsInByb3BWYWx1ZSIsImNhY2hlZENsYXNzTmFtZSIsImdldCIsImVuaGFuY2VyIiwicHJvcEVuaGFuY2VycyIsInVuZGVmaW5lZCIsIm5ld0NzcyIsImFkZCIsInNldCIsInRyaW0iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O2tCQVF3QkEsWTs7QUFSeEI7O0FBQ0E7Ozs7QUFDQTs7SUFBWUMsTTs7QUFDWjs7SUFBWUMsSzs7Ozs7O0FBRVo7OztBQUdlLFNBQVNGLFlBQVQsQ0FBc0JHLFFBQXRCLEVBQWdDO0FBQzdDLE1BQU1DLFdBQVcsNkJBQWNELFFBQWQsQ0FBakI7QUFDQSxNQUFNRSxnQkFBZ0IsRUFBdEI7QUFDQSxNQUFJQyxZQUFZSCxTQUFTRyxTQUFULElBQXNCLEVBQXRDOztBQUg2QztBQUFBO0FBQUE7O0FBQUE7QUFLN0MseUJBQW9DRixRQUFwQyw4SEFBOEM7QUFBQTs7QUFBQTs7QUFBQSxVQUFsQ0csUUFBa0M7QUFBQSxVQUF4QkMsU0FBd0I7O0FBQzVDLFVBQU1DLGtCQUFrQlAsTUFBTVEsR0FBTixDQUFVSCxRQUFWLEVBQW9CQyxTQUFwQixDQUF4QjtBQUNBLFVBQUlDLGVBQUosRUFBcUI7QUFDbkJILG9CQUFlQSxTQUFmLFNBQTRCRyxlQUE1QjtBQUNBO0FBQ0Q7O0FBRUQsVUFBTUUsV0FBV0MseUJBQWNMLFFBQWQsQ0FBakI7QUFDQTtBQUNBO0FBQ0EsVUFDRUksYUFDQ0gsY0FBYyxJQUFkLElBQXNCQSxjQUFjSyxTQUFwQyxJQUFpREwsY0FBYyxLQURoRSxDQURGLEVBR0U7QUFDQTtBQUNELE9BTEQsTUFLTyxJQUFJLENBQUNHLFFBQUwsRUFBZTtBQUNwQjtBQUNBTixzQkFBY0UsUUFBZCxJQUEwQkMsU0FBMUI7QUFDQTtBQUNEOztBQUVELFVBQU1NLFNBQVNILFNBQVNILFNBQVQsQ0FBZjtBQUNBO0FBQ0EsVUFBSU0sTUFBSixFQUFZO0FBQ1ZiLGVBQU9jLEdBQVAsQ0FBV0QsT0FBT2IsTUFBbEI7QUFDQUMsY0FBTWMsR0FBTixDQUFVVCxRQUFWLEVBQW9CQyxTQUFwQixFQUErQk0sT0FBT1IsU0FBdEM7QUFDQUEsb0JBQWVBLFNBQWYsU0FBNEJRLE9BQU9SLFNBQW5DO0FBQ0Q7QUFDRjtBQWpDNEM7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFtQzdDQSxjQUFZQSxVQUFVVyxJQUFWLEVBQVo7O0FBRUEsU0FBTyxDQUFDWCxTQUFELEVBQVlELGFBQVosQ0FBUDtBQUNEIiwiZmlsZSI6ImVuaGFuY2UtcHJvcHMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge3Byb3BFbmhhbmNlcnN9IGZyb20gJy4vZW5oYW5jZXJzJ1xuaW1wb3J0IGV4cGFuZEFsaWFzZXMgZnJvbSAnLi9leHBhbmQtYWxpYXNlcydcbmltcG9ydCAqIGFzIHN0eWxlcyBmcm9tICcuL3N0eWxlcydcbmltcG9ydCAqIGFzIGNhY2hlIGZyb20gJy4vY2FjaGUnXG5cbi8qKlxuICogQ29udmVydHMgdGhlIENTUyBwcm9wcyB0byBjbGFzcyBuYW1lcyBhbmQgaW5zZXJ0cyB0aGUgc3R5bGVzLlxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBlbmhhbmNlUHJvcHMocmF3UHJvcHMpIHtcbiAgY29uc3QgcHJvcHNNYXAgPSBleHBhbmRBbGlhc2VzKHJhd1Byb3BzKVxuICBjb25zdCBlbmhhbmNlZFByb3BzID0ge31cbiAgbGV0IGNsYXNzTmFtZSA9IHJhd1Byb3BzLmNsYXNzTmFtZSB8fCAnJ1xuXG4gIGZvciAoY29uc3QgW3Byb3BOYW1lLCBwcm9wVmFsdWVdIG9mIHByb3BzTWFwKSB7XG4gICAgY29uc3QgY2FjaGVkQ2xhc3NOYW1lID0gY2FjaGUuZ2V0KHByb3BOYW1lLCBwcm9wVmFsdWUpXG4gICAgaWYgKGNhY2hlZENsYXNzTmFtZSkge1xuICAgICAgY2xhc3NOYW1lID0gYCR7Y2xhc3NOYW1lfSAke2NhY2hlZENsYXNzTmFtZX1gXG4gICAgICBjb250aW51ZVxuICAgIH1cblxuICAgIGNvbnN0IGVuaGFuY2VyID0gcHJvcEVuaGFuY2Vyc1twcm9wTmFtZV1cbiAgICAvLyBTa2lwIGZhbHNlIGJvb2xlYW4gZW5oYW5jZXJzLiBlLmc6IGBjbGVhcmZpeD17ZmFsc2V9YFxuICAgIC8vIEFsc28gYWxsb3dzIG9taXR0aW5nIHByb3BzIHZpYSBvdmVycmlkaW5nIHdpdGggYG51bGxgIChpLmU6IG5ldXRyYWxpc2luZyBwcm9wcylcbiAgICBpZiAoXG4gICAgICBlbmhhbmNlciAmJlxuICAgICAgKHByb3BWYWx1ZSA9PT0gbnVsbCB8fCBwcm9wVmFsdWUgPT09IHVuZGVmaW5lZCB8fCBwcm9wVmFsdWUgPT09IGZhbHNlKVxuICAgICkge1xuICAgICAgY29udGludWVcbiAgICB9IGVsc2UgaWYgKCFlbmhhbmNlcikge1xuICAgICAgLy8gUGFzcyB0aHJvdWdoIG5hdGl2ZSBwcm9wcy4gZS5nOiBkaXNhYmxlZCwgdmFsdWUsIHR5cGVcbiAgICAgIGVuaGFuY2VkUHJvcHNbcHJvcE5hbWVdID0gcHJvcFZhbHVlXG4gICAgICBjb250aW51ZVxuICAgIH1cblxuICAgIGNvbnN0IG5ld0NzcyA9IGVuaGFuY2VyKHByb3BWYWx1ZSlcbiAgICAvLyBBbGxvdyBlbmhhbmNlcnMgdG8gcmV0dXJuIG51bGwgZm9yIGludmFsaWQgdmFsdWVzXG4gICAgaWYgKG5ld0Nzcykge1xuICAgICAgc3R5bGVzLmFkZChuZXdDc3Muc3R5bGVzKVxuICAgICAgY2FjaGUuc2V0KHByb3BOYW1lLCBwcm9wVmFsdWUsIG5ld0Nzcy5jbGFzc05hbWUpXG4gICAgICBjbGFzc05hbWUgPSBgJHtjbGFzc05hbWV9ICR7bmV3Q3NzLmNsYXNzTmFtZX1gXG4gICAgfVxuICB9XG5cbiAgY2xhc3NOYW1lID0gY2xhc3NOYW1lLnRyaW0oKVxuXG4gIHJldHVybiBbY2xhc3NOYW1lLCBlbmhhbmNlZFByb3BzXVxufVxuIl19