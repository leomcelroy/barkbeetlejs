'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.propEnhancers = exports.propValidators = exports.propAliases = exports.propTypes = undefined;

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _getCss = require('../get-css');

var _getCss2 = _interopRequireDefault(_getCss);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var propTypes = exports.propTypes = {
  alignContent: _propTypes2.default.string,
  alignItems: _propTypes2.default.string,
  alignSelf: _propTypes2.default.string,
  flex: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),
  flexBasis: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),
  flexDirection: _propTypes2.default.string,
  flexFlow: _propTypes2.default.string,
  flexGrow: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),
  flexShrink: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),
  flexWrap: _propTypes2.default.string,
  justifyContent: _propTypes2.default.string,
  justifyItems: _propTypes2.default.string,
  justifySelf: _propTypes2.default.string,
  order: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),
  placeContent: _propTypes2.default.string,
  placeItems: _propTypes2.default.string,
  placeSelf: _propTypes2.default.string
};

var propAliases = exports.propAliases = {};

var propValidators = exports.propValidators = {};

var _flex = {
  className: 'flx',
  cssName: 'flex',
  jsName: 'flex',
  isPrefixed: true,
  defaultUnit: ''
};
var _alignItems = {
  className: 'algn-itms',
  cssName: 'align-items',
  jsName: 'alignItems',
  isPrefixed: true
};
var _alignSelf = {
  className: 'algn-slf',
  cssName: 'align-self',
  jsName: 'alignSelf',
  isPrefixed: true
};
var _alignContent = {
  className: 'algn-cnt',
  cssName: 'align-content',
  jsName: 'alignContent',
  isPrefixed: true
};
var _justifyContent = {
  className: 'just-cnt',
  cssName: 'justify-content',
  jsName: 'justifyContent',
  isPrefixed: true
};
var _justifyItems = {
  className: 'just-items',
  cssName: 'justify-items',
  jsName: 'justifyItems',
  isPrefixed: true
};
var _justifySelf = {
  className: 'just-self',
  cssName: 'justify-self',
  jsName: 'justifySelf',
  isPrefixed: true
};
var _flexDirection = {
  className: 'flx-drct',
  cssName: 'flex-direction',
  jsName: 'flexDirection',
  isPrefixed: true,
  safeValue: true
};
var _flexWrap = {
  className: 'flx-wrap',
  cssName: 'flex-wrap',
  jsName: 'flexWrap',
  isPrefixed: true,
  safeValue: true
};
var _flexGrow = {
  className: 'flx-grow',
  cssName: 'flex-grow',
  jsName: 'flexGrow',
  isPrefixed: true,
  defaultUnit: ''
};
var _flexShrink = {
  className: 'flx-srnk',
  cssName: 'flex-shrink',
  jsName: 'flexShrink',
  isPrefixed: true,
  defaultUnit: ''
};
var _flexBasis = {
  className: 'flx-basis',
  cssName: 'flex-basis',
  jsName: 'flexBasis',
  isPrefixed: true
};
var _order = {
  className: 'order',
  cssName: 'order',
  jsName: 'order',
  isPrefixed: true,
  defaultUnit: '',
  safeValue: true
};
var _flexFlow = {
  className: 'flx-flow',
  cssName: 'flex-flow',
  jsName: 'flexFlow',
  isPrefixed: true,
  defaultUnit: ''
};
var _placeContent = {
  className: 'plc-cnt',
  cssName: 'place-content',
  jsName: 'placeContent'
};
var _placeItems = {
  className: 'plc-items',
  cssName: 'place-items',
  jsName: 'placeItems'
};
var _placeSelf = {
  className: 'plc-self',
  cssName: 'place-self',
  jsName: 'placeSelf'
};

var propEnhancers = exports.propEnhancers = {
  alignContent: function alignContent(value) {
    return (0, _getCss2.default)(_alignContent, value);
  },
  alignItems: function alignItems(value) {
    return (0, _getCss2.default)(_alignItems, value);
  },
  alignSelf: function alignSelf(value) {
    return (0, _getCss2.default)(_alignSelf, value);
  },
  flex: function flex(value) {
    return (0, _getCss2.default)(_flex, value);
  },
  flexBasis: function flexBasis(value) {
    return (0, _getCss2.default)(_flexBasis, value);
  },
  flexDirection: function flexDirection(value) {
    return (0, _getCss2.default)(_flexDirection, value);
  },
  flexFlow: function flexFlow(value) {
    return (0, _getCss2.default)(_flexFlow, value);
  },
  flexGrow: function flexGrow(value) {
    return (0, _getCss2.default)(_flexGrow, value);
  },
  flexShrink: function flexShrink(value) {
    return (0, _getCss2.default)(_flexShrink, value);
  },
  flexWrap: function flexWrap(value) {
    return (0, _getCss2.default)(_flexWrap, value);
  },
  justifyContent: function justifyContent(value) {
    return (0, _getCss2.default)(_justifyContent, value);
  },
  justifyItems: function justifyItems(value) {
    return (0, _getCss2.default)(_justifyItems, value);
  },
  justifySelf: function justifySelf(value) {
    return (0, _getCss2.default)(_justifySelf, value);
  },
  order: function order(value) {
    return (0, _getCss2.default)(_order, value);
  },
  placeContent: function placeContent(value) {
    return (0, _getCss2.default)(_placeContent, value);
  },
  placeItems: function placeItems(value) {
    return (0, _getCss2.default)(_placeItems, value);
  },
  placeSelf: function placeSelf(value) {
    return (0, _getCss2.default)(_placeSelf, value);
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,