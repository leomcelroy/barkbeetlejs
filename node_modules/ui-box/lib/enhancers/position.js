'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.propEnhancers = exports.propValidators = exports.propAliases = exports.propTypes = undefined;

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _getCss = require('../get-css');

var _getCss2 = _interopRequireDefault(_getCss);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var propTypes = exports.propTypes = {
  bottom: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),
  left: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),
  position: _propTypes2.default.string,
  right: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),
  top: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number])
};

var propAliases = exports.propAliases = {};

var propValidators = exports.propValidators = {};

var _position = {
  className: 'pst',
  cssName: 'position',
  jsName: 'position',
  safeValue: true,
  isPrefixed: true
};
var _top = {
  className: 'top',
  cssName: 'top',
  jsName: 'top'
};
var _right = {
  className: 'rgt',
  cssName: 'right',
  jsName: 'right'
};
var _bottom = {
  className: 'btm',
  cssName: 'bottom',
  jsName: 'bottom'
};
var _left = {
  className: 'lft',
  cssName: 'left',
  jsName: 'left'
};

var propEnhancers = exports.propEnhancers = {
  bottom: function bottom(value) {
    return (0, _getCss2.default)(_bottom, value);
  },
  left: function left(value) {
    return (0, _getCss2.default)(_left, value);
  },
  position: function position(value) {
    return (0, _getCss2.default)(_position, value);
  },
  right: function right(value) {
    return (0, _getCss2.default)(_right, value);
  },
  top: function top(value) {
    return (0, _getCss2.default)(_top, value);
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9lbmhhbmNlcnMvcG9zaXRpb24uanMiXSwibmFtZXMiOlsicHJvcFR5cGVzIiwiYm90dG9tIiwiUHJvcFR5cGVzIiwib25lT2ZUeXBlIiwic3RyaW5nIiwibnVtYmVyIiwibGVmdCIsInBvc2l0aW9uIiwicmlnaHQiLCJ0b3AiLCJwcm9wQWxpYXNlcyIsInByb3BWYWxpZGF0b3JzIiwiY2xhc3NOYW1lIiwiY3NzTmFtZSIsImpzTmFtZSIsInNhZmVWYWx1ZSIsImlzUHJlZml4ZWQiLCJwcm9wRW5oYW5jZXJzIiwidmFsdWUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7OztBQUNBOzs7Ozs7QUFFTyxJQUFNQSxnQ0FBWTtBQUN2QkMsVUFBUUMsb0JBQVVDLFNBQVYsQ0FBb0IsQ0FBQ0Qsb0JBQVVFLE1BQVgsRUFBbUJGLG9CQUFVRyxNQUE3QixDQUFwQixDQURlO0FBRXZCQyxRQUFNSixvQkFBVUMsU0FBVixDQUFvQixDQUFDRCxvQkFBVUUsTUFBWCxFQUFtQkYsb0JBQVVHLE1BQTdCLENBQXBCLENBRmlCO0FBR3ZCRSxZQUFVTCxvQkFBVUUsTUFIRztBQUl2QkksU0FBT04sb0JBQVVDLFNBQVYsQ0FBb0IsQ0FBQ0Qsb0JBQVVFLE1BQVgsRUFBbUJGLG9CQUFVRyxNQUE3QixDQUFwQixDQUpnQjtBQUt2QkksT0FBS1Asb0JBQVVDLFNBQVYsQ0FBb0IsQ0FBQ0Qsb0JBQVVFLE1BQVgsRUFBbUJGLG9CQUFVRyxNQUE3QixDQUFwQjtBQUxrQixDQUFsQjs7QUFRQSxJQUFNSyxvQ0FBYyxFQUFwQjs7QUFFQSxJQUFNQywwQ0FBaUIsRUFBdkI7O0FBRVAsSUFBTUosWUFBVztBQUNmSyxhQUFXLEtBREk7QUFFZkMsV0FBUyxVQUZNO0FBR2ZDLFVBQVEsVUFITztBQUlmQyxhQUFXLElBSkk7QUFLZkMsY0FBWTtBQUxHLENBQWpCO0FBT0EsSUFBTVAsT0FBTTtBQUNWRyxhQUFXLEtBREQ7QUFFVkMsV0FBUyxLQUZDO0FBR1ZDLFVBQVE7QUFIRSxDQUFaO0FBS0EsSUFBTU4sU0FBUTtBQUNaSSxhQUFXLEtBREM7QUFFWkMsV0FBUyxPQUZHO0FBR1pDLFVBQVE7QUFISSxDQUFkO0FBS0EsSUFBTWIsVUFBUztBQUNiVyxhQUFXLEtBREU7QUFFYkMsV0FBUyxRQUZJO0FBR2JDLFVBQVE7QUFISyxDQUFmO0FBS0EsSUFBTVIsUUFBTztBQUNYTSxhQUFXLEtBREE7QUFFWEMsV0FBUyxNQUZFO0FBR1hDLFVBQVE7QUFIRyxDQUFiOztBQU1PLElBQU1HLHdDQUFnQjtBQUMzQmhCLFVBQVE7QUFBQSxXQUFTLHNCQUFPQSxPQUFQLEVBQWVpQixLQUFmLENBQVQ7QUFBQSxHQURtQjtBQUUzQlosUUFBTTtBQUFBLFdBQVMsc0JBQU9BLEtBQVAsRUFBYVksS0FBYixDQUFUO0FBQUEsR0FGcUI7QUFHM0JYLFlBQVU7QUFBQSxXQUFTLHNCQUFPQSxTQUFQLEVBQWlCVyxLQUFqQixDQUFUO0FBQUEsR0FIaUI7QUFJM0JWLFNBQU87QUFBQSxXQUFTLHNCQUFPQSxNQUFQLEVBQWNVLEtBQWQsQ0FBVDtBQUFBLEdBSm9CO0FBSzNCVCxPQUFLO0FBQUEsV0FBUyxzQkFBT0EsSUFBUCxFQUFZUyxLQUFaLENBQVQ7QUFBQTtBQUxzQixDQUF0QiIsImZpbGUiOiJwb3NpdGlvbi5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcydcbmltcG9ydCBnZXRDc3MgZnJvbSAnLi4vZ2V0LWNzcydcblxuZXhwb3J0IGNvbnN0IHByb3BUeXBlcyA9IHtcbiAgYm90dG9tOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMubnVtYmVyXSksXG4gIGxlZnQ6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5udW1iZXJdKSxcbiAgcG9zaXRpb246IFByb3BUeXBlcy5zdHJpbmcsXG4gIHJpZ2h0OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMubnVtYmVyXSksXG4gIHRvcDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLm51bWJlcl0pXG59XG5cbmV4cG9ydCBjb25zdCBwcm9wQWxpYXNlcyA9IHt9XG5cbmV4cG9ydCBjb25zdCBwcm9wVmFsaWRhdG9ycyA9IHt9XG5cbmNvbnN0IHBvc2l0aW9uID0ge1xuICBjbGFzc05hbWU6ICdwc3QnLFxuICBjc3NOYW1lOiAncG9zaXRpb24nLFxuICBqc05hbWU6ICdwb3NpdGlvbicsXG4gIHNhZmVWYWx1ZTogdHJ1ZSxcbiAgaXNQcmVmaXhlZDogdHJ1ZVxufVxuY29uc3QgdG9wID0ge1xuICBjbGFzc05hbWU6ICd0b3AnLFxuICBjc3NOYW1lOiAndG9wJyxcbiAganNOYW1lOiAndG9wJ1xufVxuY29uc3QgcmlnaHQgPSB7XG4gIGNsYXNzTmFtZTogJ3JndCcsXG4gIGNzc05hbWU6ICdyaWdodCcsXG4gIGpzTmFtZTogJ3JpZ2h0J1xufVxuY29uc3QgYm90dG9tID0ge1xuICBjbGFzc05hbWU6ICdidG0nLFxuICBjc3NOYW1lOiAnYm90dG9tJyxcbiAganNOYW1lOiAnYm90dG9tJ1xufVxuY29uc3QgbGVmdCA9IHtcbiAgY2xhc3NOYW1lOiAnbGZ0JyxcbiAgY3NzTmFtZTogJ2xlZnQnLFxuICBqc05hbWU6ICdsZWZ0J1xufVxuXG5leHBvcnQgY29uc3QgcHJvcEVuaGFuY2VycyA9IHtcbiAgYm90dG9tOiB2YWx1ZSA9PiBnZXRDc3MoYm90dG9tLCB2YWx1ZSksXG4gIGxlZnQ6IHZhbHVlID0+IGdldENzcyhsZWZ0LCB2YWx1ZSksXG4gIHBvc2l0aW9uOiB2YWx1ZSA9PiBnZXRDc3MocG9zaXRpb24sIHZhbHVlKSxcbiAgcmlnaHQ6IHZhbHVlID0+IGdldENzcyhyaWdodCwgdmFsdWUpLFxuICB0b3A6IHZhbHVlID0+IGdldENzcyh0b3AsIHZhbHVlKVxufVxuIl19