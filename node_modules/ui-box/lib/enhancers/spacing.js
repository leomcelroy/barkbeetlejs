'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.propEnhancers = exports.propValidators = exports.propAliases = exports.propTypes = undefined;

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _getCss = require('../get-css');

var _getCss2 = _interopRequireDefault(_getCss);

var _regex = require('../utils/regex');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var propTypes = exports.propTypes = {
  margin: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),
  marginBottom: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),
  marginLeft: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),
  marginRight: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),
  marginTop: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),
  marginX: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),
  marginY: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),
  padding: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),
  paddingBottom: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),
  paddingLeft: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),
  paddingRight: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),
  paddingTop: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),
  paddingX: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),
  paddingY: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number])
};

var propAliases = exports.propAliases = {
  margin: ['marginBottom', 'marginLeft', 'marginRight', 'marginTop'],
  marginX: ['marginLeft', 'marginRight'],
  marginY: ['marginBottom', 'marginTop'],
  padding: ['paddingBottom', 'paddingLeft', 'paddingRight', 'paddingTop'],
  paddingX: ['paddingLeft', 'paddingRight'],
  paddingY: ['paddingBottom', 'paddingTop']
};

var propValidators = exports.propValidators = {};

if (process.env.NODE_ENV !== 'production') {
  propValidators.margin = function (value) {
    if (_regex.spacesOutsideParentheses.test(value)) {
      return 'multiple values (\u201C' + value + '\u201D) aren\u055At supported with \u201Cmargin\u201D. Use \u201CmarginX\u201D, \u201CmarginY\u201D \u201CmarginBottom\u201D, \u201CmarginLeft\u201D, \u201CmarginRight\u201D and \u201CmarginTop\u201D instead.';
    }
  };
  propValidators.marginX = function (value) {
    if (_regex.spacesOutsideParentheses.test(value)) {
      return 'multiple values (\u201C' + value + '\u201D) aren\u055At supported with \u201CmarginX\u201D. Use \u201CmarginLeft\u201D and \u201CmarginRight\u201D instead.';
    }
  };
  propValidators.marginY = function (value) {
    if (_regex.spacesOutsideParentheses.test(value)) {
      return 'multiple values (\u201C' + value + '\u201D) aren\u055At supported with \u201CmarginY\u201D. Use \u201CmarginBottom\u201D and \u201CmarginTop\u201D instead.';
    }
  };
  propValidators.padding = function (value) {
    if (_regex.spacesOutsideParentheses.test(value)) {
      return 'multiple values (\u201C' + value + '\u201D) aren\u055At supported with \u201Cpadding\u201D. Use \u201CpaddingX\u201D, \u201CpaddingY\u201D \u201CpaddingBottom\u201D, \u201CpaddingLeft\u201D, \u201CpaddingRight\u201D and \u201CpaddingTop\u201D instead.';
    }
  };
  propValidators.paddingX = function (value) {
    if (_regex.spacesOutsideParentheses.test(value)) {
      return 'multiple values (\u201C' + value + '\u201D) aren\u055At supported with \u201CpaddingX\u201D. Use \u201CpaddingLeft\u201D and \u201CpaddingRight\u201D instead.';
    }
  };
  propValidators.paddingY = function (value) {
    if (_regex.spacesOutsideParentheses.test(value)) {
      return 'multiple values (\u201C' + value + '\u201D) aren\u055At supported with \u201CpaddingY\u201D. Use \u201CpaddingBottom\u201D and \u201CpaddingTop\u201D instead.';
    }
  };
}

var _marginTop = {
  className: 'mt',
  cssName: 'margin-top',
  jsName: 'marginTop'
};
var _marginRight = {
  className: 'mr',
  cssName: 'margin-right',
  jsName: 'marginRight'
};
var _marginBottom = {
  className: 'mb',
  cssName: 'margin-bottom',
  jsName: 'marginBottom'
};
var _marginLeft = {
  className: 'ml',
  cssName: 'margin-left',
  jsName: 'marginLeft'
};
var _paddingTop = {
  className: 'pt',
  cssName: 'padding-top',
  jsName: 'paddingTop'
};
var _paddingRight = {
  className: 'pr',
  cssName: 'padding-right',
  jsName: 'paddingRight'
};
var _paddingBottom = {
  className: 'pb',
  cssName: 'padding-bottom',
  jsName: 'paddingBottom'
};
var _paddingLeft = {
  className: 'pl',
  cssName: 'padding-left',
  jsName: 'paddingLeft'
};

var propEnhancers = exports.propEnhancers = {
  marginBottom: function marginBottom(value) {
    return (0, _getCss2.default)(_marginBottom, value);
  },
  marginLeft: function marginLeft(value) {
    return (0, _getCss2.default)(_marginLeft, value);
  },
  marginRight: function marginRight(value) {
    return (0, _getCss2.default)(_marginRight, value);
  },
  marginTop: function marginTop(value) {
    return (0, _getCss2.default)(_marginTop, value);
  },
  paddingBottom: function paddingBottom(value) {
    return (0, _getCss2.default)(_paddingBottom, value);
  },
  paddingLeft: function paddingLeft(value) {
    return (0, _getCss2.default)(_paddingLeft, value);
  },
  paddingRight: function paddingRight(value) {
    return (0, _getCss2.default)(_paddingRight, value);
  },
  paddingTop: function paddingTop(value) {
    return (0, _getCss2.default)(_paddingTop, value);
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9lbmhhbmNlcnMvc3BhY2luZy5qcyJdLCJuYW1lcyI6WyJwcm9wVHlwZXMiLCJtYXJnaW4iLCJQcm9wVHlwZXMiLCJvbmVPZlR5cGUiLCJzdHJpbmciLCJudW1iZXIiLCJtYXJnaW5Cb3R0b20iLCJtYXJnaW5MZWZ0IiwibWFyZ2luUmlnaHQiLCJtYXJnaW5Ub3AiLCJtYXJnaW5YIiwibWFyZ2luWSIsInBhZGRpbmciLCJwYWRkaW5nQm90dG9tIiwicGFkZGluZ0xlZnQiLCJwYWRkaW5nUmlnaHQiLCJwYWRkaW5nVG9wIiwicGFkZGluZ1giLCJwYWRkaW5nWSIsInByb3BBbGlhc2VzIiwicHJvcFZhbGlkYXRvcnMiLCJwcm9jZXNzIiwiZW52IiwiTk9ERV9FTlYiLCJzcGFjZXNPdXRzaWRlUGFyZW50aGVzZXMiLCJ0ZXN0IiwidmFsdWUiLCJjbGFzc05hbWUiLCJjc3NOYW1lIiwianNOYW1lIiwicHJvcEVuaGFuY2VycyJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUVPLElBQU1BLGdDQUFZO0FBQ3ZCQyxVQUFRQyxvQkFBVUMsU0FBVixDQUFvQixDQUFDRCxvQkFBVUUsTUFBWCxFQUFtQkYsb0JBQVVHLE1BQTdCLENBQXBCLENBRGU7QUFFdkJDLGdCQUFjSixvQkFBVUMsU0FBVixDQUFvQixDQUFDRCxvQkFBVUUsTUFBWCxFQUFtQkYsb0JBQVVHLE1BQTdCLENBQXBCLENBRlM7QUFHdkJFLGNBQVlMLG9CQUFVQyxTQUFWLENBQW9CLENBQUNELG9CQUFVRSxNQUFYLEVBQW1CRixvQkFBVUcsTUFBN0IsQ0FBcEIsQ0FIVztBQUl2QkcsZUFBYU4sb0JBQVVDLFNBQVYsQ0FBb0IsQ0FBQ0Qsb0JBQVVFLE1BQVgsRUFBbUJGLG9CQUFVRyxNQUE3QixDQUFwQixDQUpVO0FBS3ZCSSxhQUFXUCxvQkFBVUMsU0FBVixDQUFvQixDQUFDRCxvQkFBVUUsTUFBWCxFQUFtQkYsb0JBQVVHLE1BQTdCLENBQXBCLENB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aUJBQWU7QUFBQSxXQUFTLHNCQUFPQSxjQUFQLEVBQXNCYSxLQUF0QixDQUFUO0FBQUEsR0FMWTtBQU0zQlosZUFBYTtBQUFBLFdBQVMsc0JBQU9BLFlBQVAsRUFBb0JZLEtBQXBCLENBQVQ7QUFBQSxHQU5jO0FBTzNCWCxnQkFBYztBQUFBLFdBQVMsc0JBQU9BLGFBQVAsRUFBcUJXLEtBQXJCLENBQVQ7QUFBQSxHQVBhO0FBUTNCVixjQUFZO0FBQUEsV0FBUyxzQkFBT0EsV0FBUCxFQUFtQlUsS0FBbkIsQ0FBVDtBQUFBO0FBUmUsQ0FBdEIiLCJmaWxlIjoic3BhY2luZy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcydcbmltcG9ydCBnZXRDc3MgZnJvbSAnLi4vZ2V0LWNzcydcbmltcG9ydCB7c3BhY2VzT3V0c2lkZVBhcmVudGhlc2VzfSBmcm9tICcuLi91dGlscy9yZWdleCdcblxuZXhwb3J0IGNvbnN0IHByb3BUeXBlcyA9IHtcbiAgbWFyZ2luOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMubnVtYmVyXSksXG4gIG1hcmdpbkJvdHRvbTogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLm51bWJlcl0pLFxuICBtYXJnaW5MZWZ0OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMubnVtYmVyXSksXG4gIG1hcmdpblJpZ2h0OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMubnVtYmVyXSksXG4gIG1hcmdpblRvcDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLm51bWJlcl0pLFxuICBtYXJnaW5YOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMubnVtYmVyXSksXG4gIG1hcmdpblk6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5udW1iZXJdKSxcbiAgcGFkZGluZzogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLm51bWJlcl0pLFxuICBwYWRkaW5nQm90dG9tOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMubnVtYmVyXSksXG4gIHBhZGRpbmdMZWZ0OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMubnVtYmVyXSksXG4gIHBhZGRpbmdSaWdodDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLm51bWJlcl0pLFxuICBwYWRkaW5nVG9wOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMubnVtYmVyXSksXG4gIHBhZGRpbmdYOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMubnVtYmVyXSksXG4gIHBhZGRpbmdZOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMubnVtYmVyXSlcbn1cblxuZXhwb3J0IGNvbnN0IHByb3BBbGlhc2VzID0ge1xuICBtYXJnaW46IFsnbWFyZ2luQm90dG9tJywgJ21hcmdpbkxlZnQnLCAnbWFyZ2luUmlnaHQnLCAnbWFyZ2luVG9wJ10sXG4gIG1hcmdpblg6IFsnbWFyZ2luTGVmdCcsICdtYXJnaW5SaWdodCddLFxuICBtYXJnaW5ZOiBbJ21hcmdpbkJvdHRvbScsICdtYXJnaW5Ub3AnXSxcbiAgcGFkZGluZzogWydwYWRkaW5nQm90dG9tJywgJ3BhZGRpbmdMZWZ0JywgJ3BhZGRpbmdSaWdodCcsICdwYWRkaW5nVG9wJ10sXG4gIHBhZGRpbmdYOiBbJ3BhZGRpbmdMZWZ0JywgJ3BhZGRpbmdSaWdodCddLFxuICBwYWRkaW5nWTogWydwYWRkaW5nQm90dG9tJywgJ3BhZGRpbmdUb3AnXVxufVxuXG5leHBvcnQgY29uc3QgcHJvcFZhbGlkYXRvcnMgPSB7fVxuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBwcm9wVmFsaWRhdG9ycy5tYXJnaW4gPSB2YWx1ZSA9PiB7XG4gICAgaWYgKHNwYWNlc091dHNpZGVQYXJlbnRoZXNlcy50ZXN0KHZhbHVlKSkge1xuICAgICAgcmV0dXJuIGBtdWx0aXBsZSB2YWx1ZXMgKOKAnCR7dmFsdWV94oCdKSBhcmVu1Zp0IHN1cHBvcnRlZCB3aXRoIOKAnG1hcmdpbuKAnS4gVXNlIOKAnG1hcmdpbljigJ0sIOKAnG1hcmdpblnigJ0g4oCcbWFyZ2luQm90dG9t4oCdLCDigJxtYXJnaW5MZWZ04oCdLCDigJxtYXJnaW5SaWdodOKAnSBhbmQg4oCcbWFyZ2luVG9w4oCdIGluc3RlYWQuYFxuICAgIH1cbiAgfVxuICBwcm9wVmFsaWRhdG9ycy5tYXJnaW5YID0gdmFsdWUgPT4ge1xuICAgIGlmIChzcGFjZXNPdXRzaWRlUGFyZW50aGVzZXMudGVzdCh2YWx1ZSkpIHtcbiAgICAgIHJldHVybiBgbXVsdGlwbGUgdmFsdWVzICjigJwke3ZhbHVlfeKAnSkgYXJlbtWadCBzdXBwb3J0ZWQgd2l0aCDigJxtYXJnaW5Y4oCdLiBVc2Ug4oCcbWFyZ2luTGVmdOKAnSBhbmQg4oCcbWFyZ2luUmlnaHTigJ0gaW5zdGVhZC5gXG4gICAgfVxuICB9XG4gIHByb3BWYWxpZGF0b3JzLm1hcmdpblkgPSB2YWx1ZSA9PiB7XG4gICAgaWYgKHNwYWNlc091dHNpZGVQYXJlbnRoZXNlcy50ZXN0KHZhbHVlKSkge1xuICAgICAgcmV0dXJuIGBtdWx0aXBsZSB2YWx1ZXMgKOKAnCR7dmFsdWV94oCdKSBhcmVu1Zp0IHN1cHBvcnRlZCB3aXRoIOKAnG1hcmdpblnigJ0uIFVzZSDigJxtYXJnaW5Cb3R0b23igJ0gYW5kIOKAnG1hcmdpblRvcOKAnSBpbnN0ZWFkLmBcbiAgICB9XG4gIH1cbiAgcHJvcFZhbGlkYXRvcnMucGFkZGluZyA9IHZhbHVlID0+IHtcbiAgICBpZiAoc3BhY2VzT3V0c2lkZVBhcmVudGhlc2VzLnRlc3QodmFsdWUpKSB7XG4gICAgICByZXR1cm4gYG11bHRpcGxlIHZhbHVlcyAo4oCcJHt2YWx1ZX3igJ0pIGFyZW7VmnQgc3VwcG9ydGVkIHdpdGgg4oCccGFkZGluZ+KAnS4gVXNlIOKAnHBhZGRpbmdY4oCdLCDigJxwYWRkaW5nWeKAnSDigJxwYWRkaW5nQm90dG9t4oCdLCDigJxwYWRkaW5nTGVmdOKAnSwg4oCccGFkZGluZ1JpZ2h04oCdIGFuZCDigJxwYWRkaW5nVG9w4oCdIGluc3RlYWQuYFxuICAgIH1cbiAgfVxuICBwcm9wVmFsaWRhdG9ycy5wYWRkaW5nWCA9IHZhbHVlID0+IHtcbiAgICBpZiAoc3BhY2VzT3V0c2lkZVBhcmVudGhlc2VzLnRlc3QodmFsdWUpKSB7XG4gICAgICByZXR1cm4gYG11bHRpcGxlIHZhbHVlcyAo4oCcJHt2YWx1ZX3igJ0pIGFyZW7VmnQgc3VwcG9ydGVkIHdpdGgg4oCccGFkZGluZ1jigJ0uIFVzZSDigJxwYWRkaW5nTGVmdOKAnSBhbmQg4oCccGFkZGluZ1JpZ2h04oCdIGluc3RlYWQuYFxuICAgIH1cbiAgfVxuICBwcm9wVmFsaWRhdG9ycy5wYWRkaW5nWSA9IHZhbHVlID0+IHtcbiAgICBpZiAoc3BhY2VzT3V0c2lkZVBhcmVudGhlc2VzLnRlc3QodmFsdWUpKSB7XG4gICAgICByZXR1cm4gYG11bHRpcGxlIHZhbHVlcyAo4oCcJHt2YWx1ZX3igJ0pIGFyZW7VmnQgc3VwcG9ydGVkIHdpdGgg4oCccGFkZGluZ1nigJ0uIFVzZSDigJxwYWRkaW5nQm90dG9t4oCdIGFuZCDigJxwYWRkaW5nVG9w4oCdIGluc3RlYWQuYFxuICAgIH1cbiAgfVxufVxuXG5jb25zdCBtYXJnaW5Ub3AgPSB7XG4gIGNsYXNzTmFtZTogJ210JyxcbiAgY3NzTmFtZTogJ21hcmdpbi10b3AnLFxuICBqc05hbWU6ICdtYXJnaW5Ub3AnXG59XG5jb25zdCBtYXJnaW5SaWdodCA9IHtcbiAgY2xhc3NOYW1lOiAnbXInLFxuICBjc3NOYW1lOiAnbWFyZ2luLXJpZ2h0JyxcbiAganNOYW1lOiAnbWFyZ2luUmlnaHQnXG59XG5jb25zdCBtYXJnaW5Cb3R0b20gPSB7XG4gIGNsYXNzTmFtZTogJ21iJyxcbiAgY3NzTmFtZTogJ21hcmdpbi1ib3R0b20nLFxuICBqc05hbWU6ICdtYXJnaW5Cb3R0b20nXG59XG5jb25zdCBtYXJnaW5MZWZ0ID0ge1xuICBjbGFzc05hbWU6ICdtbCcsXG4gIGNzc05hbWU6ICdtYXJnaW4tbGVmdCcsXG4gIGpzTmFtZTogJ21hcmdpbkxlZnQnXG59XG5jb25zdCBwYWRkaW5nVG9wID0ge1xuICBjbGFzc05hbWU6ICdwdCcsXG4gIGNzc05hbWU6ICdwYWRkaW5nLXRvcCcsXG4gIGpzTmFtZTogJ3BhZGRpbmdUb3AnXG59XG5jb25zdCBwYWRkaW5nUmlnaHQgPSB7XG4gIGNsYXNzTmFtZTogJ3ByJyxcbiAgY3NzTmFtZTogJ3BhZGRpbmctcmlnaHQnLFxuICBqc05hbWU6ICdwYWRkaW5nUmlnaHQnXG59XG5jb25zdCBwYWRkaW5nQm90dG9tID0ge1xuICBjbGFzc05hbWU6ICdwYicsXG4gIGNzc05hbWU6ICdwYWRkaW5nLWJvdHRvbScsXG4gIGpzTmFtZTogJ3BhZGRpbmdCb3R0b20nXG59XG5jb25zdCBwYWRkaW5nTGVmdCA9IHtcbiAgY2xhc3NOYW1lOiAncGwnLFxuICBjc3NOYW1lOiAncGFkZGluZy1sZWZ0JyxcbiAganNOYW1lOiAncGFkZGluZ0xlZnQnXG59XG5cbmV4cG9ydCBjb25zdCBwcm9wRW5oYW5jZXJzID0ge1xuICBtYXJnaW5Cb3R0b206IHZhbHVlID0+IGdldENzcyhtYXJnaW5Cb3R0b20sIHZhbHVlKSxcbiAgbWFyZ2luTGVmdDogdmFsdWUgPT4gZ2V0Q3NzKG1hcmdpbkxlZnQsIHZhbHVlKSxcbiAgbWFyZ2luUmlnaHQ6IHZhbHVlID0+IGdldENzcyhtYXJnaW5SaWdodCwgdmFsdWUpLFxuICBtYXJnaW5Ub3A6IHZhbHVlID0+IGdldENzcyhtYXJnaW5Ub3AsIHZhbHVlKSxcbiAgcGFkZGluZ0JvdHRvbTogdmFsdWUgPT4gZ2V0Q3NzKHBhZGRpbmdCb3R0b20sIHZhbHVlKSxcbiAgcGFkZGluZ0xlZnQ6IHZhbHVlID0+IGdldENzcyhwYWRkaW5nTGVmdCwgdmFsdWUpLFxuICBwYWRkaW5nUmlnaHQ6IHZhbHVlID0+IGdldENzcyhwYWRkaW5nUmlnaHQsIHZhbHVlKSxcbiAgcGFkZGluZ1RvcDogdmFsdWUgPT4gZ2V0Q3NzKHBhZGRpbmdUb3AsIHZhbHVlKVxufVxuIl19