'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

exports.default = getCss;

var _prefixer = require('./prefixer');

var _prefixer2 = _interopRequireDefault(_prefixer);

var _valueToString = require('./value-to-string');

var _valueToString2 = _interopRequireDefault(_valueToString);

var _getClassName = require('./get-class-name');

var _getClassName2 = _interopRequireDefault(_getClassName);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Generates the class name and styles.
 */
function getCss(propertyInfo, value) {
  var rules = void 0;

  // Protect against unexpected values
  var valueType = typeof value === 'undefined' ? 'undefined' : _typeof(value);
  if (valueType !== 'string' && valueType !== 'number') {
    if (process.env.NODE_ENV !== 'production') {
      var name = propertyInfo.jsName;
      var encodedValue = JSON.stringify(value);
      console.error('\uD83D\uDCE6 ui-box: property \u201C' + name + '\u201D was passed invalid value \u201C' + encodedValue + '\u201D. Only numbers and strings are supported.');
    }
    return null;
  }

  var valueString = (0, _valueToString2.default)(value, propertyInfo.defaultUnit);

  var className = (0, _getClassName2.default)(propertyInfo, valueString);

  // Avoid running the prefixer when possible because it's slow
  if (propertyInfo.isPrefixed) {
    rules = (0, _prefixer2.default)(propertyInfo.jsName, valueString);
  } else {
    rules = [{ property: propertyInfo.cssName, value: valueString }];
  }

  var styles = void 0;
  if (process.env.NODE_ENV === 'production') {
    var rulesString = rules.map(function (rule) {
      return rule.property + ':' + rule.value;
    }).join(';');
    styles = '.' + className + '{' + rulesString + '}';
  } else {
    var _rulesString = rules.map(function (rule) {
      return '  ' + rule.property + ': ' + rule.value + ';';
    }).join('\n');
    styles = '\n.' + className + ' {\n' + _rulesString + '\n}';
  }

  return { className: className, styles: styles };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9nZXQtY3NzLmpzIl0sIm5hbWVzIjpbImdldENzcyIsInByb3BlcnR5SW5mbyIsInZhbHVlIiwicnVsZXMiLCJ2YWx1ZVR5cGUiLCJwcm9jZXNzIiwiZW52IiwiTk9ERV9FTlYiLCJuYW1lIiwianNOYW1lIiwiZW5jb2RlZFZhbHVlIiwiSlNPTiIsInN0cmluZ2lmeSIsImNvbnNvbGUiLCJlcnJvciIsInZhbHVlU3RyaW5nIiwiZGVmYXVsdFVuaXQiLCJjbGFzc05hbWUiLCJpc1ByZWZpeGVkIiwicHJvcGVydHkiLCJjc3NOYW1lIiwic3R5bGVzIiwicnVsZXNTdHJpbmciLCJtYXAiLCJydWxlIiwiam9pbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7a0JBT3dCQSxNOztBQVB4Qjs7OztBQUNBOzs7O0FBQ0E7Ozs7OztBQUVBOzs7QUFHZSxTQUFTQSxNQUFULENBQWdCQyxZQUFoQixFQUE4QkMsS0FBOUIsRUFBcUM7QUFDbEQsTUFBSUMsY0FBSjs7QUFFQTtBQUNBLE1BQU1DLG1CQUFtQkYsS0FBbkIseUNBQW1CQSxLQUFuQixDQUFOO0FBQ0EsTUFBSUUsY0FBYyxRQUFkLElBQTBCQSxjQUFjLFFBQTVDLEVBQXNEO0FBQ3BELFFBQUlDLFFBQVFDLEdBQVIsQ0FBWUMsUUFBWixLQUF5QixZQUE3QixFQUEyQztBQUN6QyxVQUFNQyxPQUFPUCxhQUFhUSxNQUExQjtBQUNBLFVBQU1DLGVBQWVDLEtBQUtDLFNBQUwsQ0FBZVYsS0FBZixDQUFyQjtBQUNBVyxjQUFRQyxLQUFSLDBDQUMwQk4sSUFEMUIsOENBQzZERSxZQUQ3RDtBQUdEO0FBQ0QsV0FBTyxJQUFQO0FBQ0Q7O0FBRUQsTUFBTUssY0FBYyw2QkFBY2IsS0FBZCxFQUFxQkQsYUFBYWUsV0FBbEMsQ0FBcEI7O0FBRUEsTUFBTUMsWUFBWSw0QkFBYWhCLFlBQWIsRUFBMkJjLFdBQTNCLENBQWxCOztBQUVBO0FBQ0EsTUFBSWQsYUFBYWlCLFVBQWpCLEVBQTZCO0FBQzNCZixZQUFRLHdCQUFTRixhQUFhUSxNQUF0QixFQUE4Qk0sV0FBOUIsQ0FBUjtBQUNELEdBRkQsTUFFTztBQUNMWixZQUFRLENBQUMsRUFBQ2dCLFVBQVVsQixhQUFhbUIsT0FBeEIsRUFBaUNsQixPQUFPYSxXQUF4QyxFQUFELENBQVI7QUFDRDs7QUFFRCxNQUFJTSxlQUFKO0FBQ0EsTUFBSWhCLFFBQVFDLEdBQVIsQ0FBWUMsUUFBWixLQUF5QixZQUE3QixFQUEyQztBQUN6QyxRQUFNZSxjQUFjbkIsTUFDakJvQixHQURpQixDQUNiO0FBQUEsYUFBV0MsS0FBS0wsUUFBaEIsU0FBNEJLLEtBQUt0QixLQUFqQztBQUFBLEtBRGEsRUFFakJ1QixJQUZpQixDQUVaLEdBRlksQ0FBcEI7QUFHQUosbUJBQWFKLFNBQWIsU0FBMEJLLFdBQTFCO0FBQ0QsR0FMRCxNQUtPO0FBQ0wsUUFBTUEsZUFBY25CLE1BQ2pCb0IsR0FEaUIsQ0FDYjtBQUFBLG9CQUFhQyxLQUFLTCxRQUFsQixVQUErQkssS0FBS3RCLEtBQXBDO0FBQUEsS0FEYSxFQUVqQnVCLElBRmlCLENBRVosSUFGWSxDQUFwQjtBQUdBSixxQkFDREosU0FEQyxZQUVGSyxZQUZFO0FBSUQ7O0FBRUQsU0FBTyxFQUFDTCxvQkFBRCxFQUFZSSxjQUFaLEVBQVA7QUFDRCIsImZpbGUiOiJnZXQtY3NzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHByZWZpeGVyIGZyb20gJy4vcHJlZml4ZXInXG5pbXBvcnQgdmFsdWVUb1N0cmluZyBmcm9tICcuL3ZhbHVlLXRvLXN0cmluZydcbmltcG9ydCBnZXRDbGFzc05hbWUgZnJvbSAnLi9nZXQtY2xhc3MtbmFtZSdcblxuLyoqXG4gKiBHZW5lcmF0ZXMgdGhlIGNsYXNzIG5hbWUgYW5kIHN0eWxlcy5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0Q3NzKHByb3BlcnR5SW5mbywgdmFsdWUpIHtcbiAgbGV0IHJ1bGVzXG5cbiAgLy8gUHJvdGVjdCBhZ2FpbnN0IHVuZXhwZWN0ZWQgdmFsdWVzXG4gIGNvbnN0IHZhbHVlVHlwZSA9IHR5cGVvZiB2YWx1ZVxuICBpZiAodmFsdWVUeXBlICE9PSAnc3RyaW5nJyAmJiB2YWx1ZVR5cGUgIT09ICdudW1iZXInKSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGNvbnN0IG5hbWUgPSBwcm9wZXJ0eUluZm8uanNOYW1lXG4gICAgICBjb25zdCBlbmNvZGVkVmFsdWUgPSBKU09OLnN0cmluZ2lmeSh2YWx1ZSlcbiAgICAgIGNvbnNvbGUuZXJyb3IoXG4gICAgICAgIGDwn5OmIHVpLWJveDogcHJvcGVydHkg4oCcJHtuYW1lfeKAnSB3YXMgcGFzc2VkIGludmFsaWQgdmFsdWUg4oCcJHtlbmNvZGVkVmFsdWV94oCdLiBPbmx5IG51bWJlcnMgYW5kIHN0cmluZ3MgYXJlIHN1cHBvcnRlZC5gXG4gICAgICApXG4gICAgfVxuICAgIHJldHVybiBudWxsXG4gIH1cblxuICBjb25zdCB2YWx1ZVN0cmluZyA9IHZhbHVlVG9TdHJpbmcodmFsdWUsIHByb3BlcnR5SW5mby5kZWZhdWx0VW5pdClcblxuICBjb25zdCBjbGFzc05hbWUgPSBnZXRDbGFzc05hbWUocHJvcGVydHlJbmZvLCB2YWx1ZVN0cmluZylcblxuICAvLyBBdm9pZCBydW5uaW5nIHRoZSBwcmVmaXhlciB3aGVuIHBvc3NpYmxlIGJlY2F1c2UgaXQncyBzbG93XG4gIGlmIChwcm9wZXJ0eUluZm8uaXNQcmVmaXhlZCkge1xuICAgIHJ1bGVzID0gcHJlZml4ZXIocHJvcGVydHlJbmZvLmpzTmFtZSwgdmFsdWVTdHJpbmcpXG4gIH0gZWxzZSB7XG4gICAgcnVsZXMgPSBbe3Byb3BlcnR5OiBwcm9wZXJ0eUluZm8uY3NzTmFtZSwgdmFsdWU6IHZhbHVlU3RyaW5nfV1cbiAgfVxuXG4gIGxldCBzdHlsZXNcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgICBjb25zdCBydWxlc1N0cmluZyA9IHJ1bGVzXG4gICAgICAubWFwKHJ1bGUgPT4gYCR7cnVsZS5wcm9wZXJ0eX06JHtydWxlLnZhbHVlfWApXG4gICAgICAuam9pbignOycpXG4gICAgc3R5bGVzID0gYC4ke2NsYXNzTmFtZX17JHtydWxlc1N0cmluZ319YFxuICB9IGVsc2Uge1xuICAgIGNvbnN0IHJ1bGVzU3RyaW5nID0gcnVsZXNcbiAgICAgIC5tYXAocnVsZSA9PiBgICAke3J1bGUucHJvcGVydHl9OiAke3J1bGUudmFsdWV9O2ApXG4gICAgICAuam9pbignXFxuJylcbiAgICBzdHlsZXMgPSBgXG4uJHtjbGFzc05hbWV9IHtcbiR7cnVsZXNTdHJpbmd9XG59YFxuICB9XG5cbiAgcmV0dXJuIHtjbGFzc05hbWUsIHN0eWxlc31cbn1cbiJdfQ==