'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = prefixer;

var _static = require('inline-style-prefixer/static');

var _static2 = _interopRequireDefault(_static);

var _decamelize = require('./utils/decamelize');

var _decamelize2 = _interopRequireDefault(_decamelize);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var prefixRegex = /^(Webkit|ms|Moz|O)/;

/**
 * Adds vendor prefixes to properties and values.
 */
function prefixer(property, value) {
  var rules = (0, _static2.default)(_defineProperty({}, property, value));
  var rulesArray = [];
  var propertyNames = Object.keys(rules);

  // Convert rules object to an array
  for (var i = 0; i < propertyNames.length; i++) {
    var propertyName = propertyNames[i];
    // Add a dash in front of the prefixes
    var prefixedProp = propertyName.match(prefixRegex) ? '-' + propertyName : propertyName;
    var prop = (0, _decamelize2.default)(prefixedProp);
    var values = rules[propertyName];

    // Handle prefixed values
    if (Array.isArray(values)) {
      for (var _i = 0; _i < values.length; _i++) {
        rulesArray.push({ property: prop, value: values[_i] });
      }
    } else {
      rulesArray.push({ property: prop, value: values });
    }
  }

  return rulesArray;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9wcmVmaXhlci5qcyJdLCJuYW1lcyI6WyJwcmVmaXhlciIsInByZWZpeFJlZ2V4IiwicHJvcGVydHkiLCJ2YWx1ZSIsInJ1bGVzIiwicnVsZXNBcnJheSIsInByb3BlcnR5TmFtZXMiLCJPYmplY3QiLCJrZXlzIiwiaSIsImxlbmd0aCIsInByb3BlcnR5TmFtZSIsInByZWZpeGVkUHJvcCIsIm1hdGNoIiwicHJvcCIsInZhbHVlcyIsIkFycmF5IiwiaXNBcnJheSIsInB1c2giXSwibWFwcGluZ3MiOiI7Ozs7O2tCQVF3QkEsUTs7QUFSeEI7Ozs7QUFDQTs7Ozs7Ozs7QUFFQSxJQUFNQyxjQUFjLG9CQUFwQjs7QUFFQTs7O0FBR2UsU0FBU0QsUUFBVCxDQUFrQkUsUUFBbEIsRUFBNEJDLEtBQTVCLEVBQW1DO0FBQ2hELE1BQU1DLFFBQVEsMENBQVlGLFFBQVosRUFBdUJDLEtBQXZCLEVBQWQ7QUFDQSxNQUFNRSxhQUFhLEVBQW5CO0FBQ0EsTUFBTUMsZ0JBQWdCQyxPQUFPQyxJQUFQLENBQVlKLEtBQVosQ0FBdEI7O0FBRUE7QUFDQSxPQUFLLElBQUlLLElBQUksQ0FBYixFQUFnQkEsSUFBSUgsY0FBY0ksTUFBbEMsRUFBMENELEdBQTFDLEVBQStDO0FBQzdDLFFBQU1FLGVBQWVMLGNBQWNHLENBQWQsQ0FBckI7QUFDQTtBQUNBLFFBQU1HLGVBQWVELGFBQWFFLEtBQWIsQ0FBbUJaLFdBQW5CLFVBQ2JVLFlBRGEsR0FFakJBLFlBRko7QUFHQSxRQUFNRyxPQUFPLDBCQUFXRixZQUFYLENBQWI7QUFDQSxRQUFNRyxTQUFTWCxNQUFNTyxZQUFOLENBQWY7O0FBRUE7QUFDQSxRQUFJSyxNQUFNQyxPQUFOLENBQWNGLE1BQWQsQ0FBSixFQUEyQjtBQUN6QixXQUFLLElBQUlOLEtBQUksQ0FBYixFQUFnQkEsS0FBSU0sT0FBT0wsTUFBM0IsRUFBbUNELElBQW5DLEVBQXdDO0FBQ3RDSixtQkFBV2EsSUFBWCxDQUFnQixFQUFDaEIsVUFBVVksSUFBWCxFQUFpQlgsT0FBT1ksT0FBT04sRUFBUCxDQUF4QixFQUFoQjtBQUNEO0FBQ0YsS0FKRCxNQUlPO0FBQ0xKLGlCQUFXYSxJQUFYLENBQWdCLEVBQUNoQixVQUFVWSxJQUFYLEVBQWlCWCxPQUFPWSxNQUF4QixFQUFoQjtBQUNEO0FBQ0Y7O0FBRUQsU0FBT1YsVUFBUDtBQUNEIiwiZmlsZSI6InByZWZpeGVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHByZWZpeEFsbCBmcm9tICdpbmxpbmUtc3R5bGUtcHJlZml4ZXIvc3RhdGljJ1xuaW1wb3J0IGRlY2FtZWxpemUgZnJvbSAnLi91dGlscy9kZWNhbWVsaXplJ1xuXG5jb25zdCBwcmVmaXhSZWdleCA9IC9eKFdlYmtpdHxtc3xNb3p8TykvXG5cbi8qKlxuICogQWRkcyB2ZW5kb3IgcHJlZml4ZXMgdG8gcHJvcGVydGllcyBhbmQgdmFsdWVzLlxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBwcmVmaXhlcihwcm9wZXJ0eSwgdmFsdWUpIHtcbiAgY29uc3QgcnVsZXMgPSBwcmVmaXhBbGwoe1twcm9wZXJ0eV06IHZhbHVlfSlcbiAgY29uc3QgcnVsZXNBcnJheSA9IFtdXG4gIGNvbnN0IHByb3BlcnR5TmFtZXMgPSBPYmplY3Qua2V5cyhydWxlcylcblxuICAvLyBDb252ZXJ0IHJ1bGVzIG9iamVjdCB0byBhbiBhcnJheVxuICBmb3IgKGxldCBpID0gMDsgaSA8IHByb3BlcnR5TmFtZXMubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBwcm9wZXJ0eU5hbWUgPSBwcm9wZXJ0eU5hbWVzW2ldXG4gICAgLy8gQWRkIGEgZGFzaCBpbiBmcm9udCBvZiB0aGUgcHJlZml4ZXNcbiAgICBjb25zdCBwcmVmaXhlZFByb3AgPSBwcm9wZXJ0eU5hbWUubWF0Y2gocHJlZml4UmVnZXgpXG4gICAgICA/IGAtJHtwcm9wZXJ0eU5hbWV9YFxuICAgICAgOiBwcm9wZXJ0eU5hbWVcbiAgICBjb25zdCBwcm9wID0gZGVjYW1lbGl6ZShwcmVmaXhlZFByb3ApXG4gICAgY29uc3QgdmFsdWVzID0gcnVsZXNbcHJvcGVydHlOYW1lXVxuXG4gICAgLy8gSGFuZGxlIHByZWZpeGVkIHZhbHVlc1xuICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlcykpIHtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdmFsdWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHJ1bGVzQXJyYXkucHVzaCh7cHJvcGVydHk6IHByb3AsIHZhbHVlOiB2YWx1ZXNbaV19KVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBydWxlc0FycmF5LnB1c2goe3Byb3BlcnR5OiBwcm9wLCB2YWx1ZTogdmFsdWVzfSlcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcnVsZXNBcnJheVxufVxuIl19